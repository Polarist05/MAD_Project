
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5c0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002930  0800c7c0  0800c7c0  0001c7c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0f0  0800f0f0  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0f0  0800f0f0  0001f0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0f8  0800f0f8  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0f8  0800f0f8  0001f0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0fc  0800f0fc  0001f0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800f100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024e8  20000244  0800f344  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000272c  0800f344  0002272c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020272  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b7f3  00000000  00000000  000202b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004260  00000000  00000000  0003baa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  0003fd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c1d6  00000000  00000000  00041330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e302  00000000  00000000  0006d506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106c17  00000000  00000000  0008b808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001132  00000000  00000000  0019241f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b04  00000000  00000000  00193554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0019a058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000244 	.word	0x20000244
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c7a8 	.word	0x0800c7a8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000248 	.word	0x20000248
 800023c:	0800c7a8 	.word	0x0800c7a8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000600:	4a36      	ldr	r2, [pc, #216]	; (80006dc <MX_ADC1_Init+0xf0>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000604:	4b34      	ldr	r3, [pc, #208]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000606:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <MX_ADC1_Init+0xec>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000612:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000614:	2201      	movs	r2, #1
 8000616:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000618:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <MX_ADC1_Init+0xec>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <MX_ADC1_Init+0xec>)
 800062e:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <MX_ADC1_Init+0xf4>)
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <MX_ADC1_Init+0xec>)
 800063a:	2204      	movs	r2, #4
 800063c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000640:	2201      	movs	r2, #1
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000646:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064c:	4822      	ldr	r0, [pc, #136]	; (80006d8 <MX_ADC1_Init+0xec>)
 800064e:	f005 f987 	bl	8005960 <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000658:	f003 ff16 	bl	8004488 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800065c:	2303      	movs	r3, #3
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	481a      	ldr	r0, [pc, #104]	; (80006d8 <MX_ADC1_Init+0xec>)
 800066e:	f005 fac9 	bl	8005c04 <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000678:	f003 ff06 	bl	8004488 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800067c:	230a      	movs	r3, #10
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000680:	2302      	movs	r3, #2
 8000682:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	4813      	ldr	r0, [pc, #76]	; (80006d8 <MX_ADC1_Init+0xec>)
 800068a:	f005 fabb 	bl	8005c04 <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000694:	f003 fef8 	bl	8004488 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000698:	2309      	movs	r3, #9
 800069a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800069c:	2303      	movs	r3, #3
 800069e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <MX_ADC1_Init+0xec>)
 80006a6:	f005 faad 	bl	8005c04 <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006b0:	f003 feea 	bl	8004488 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006b4:	230c      	movs	r3, #12
 80006b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_ADC1_Init+0xec>)
 80006c2:	f005 fa9f 	bl	8005c04 <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80006cc:	f003 fedc 	bl	8004488 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000260 	.word	0x20000260
 80006dc:	40012000 	.word	0x40012000
 80006e0:	0f000001 	.word	0x0f000001

080006e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a49      	ldr	r2, [pc, #292]	; (8000828 <HAL_ADC_MspInit+0x144>)
 8000702:	4293      	cmp	r3, r2
 8000704:	f040 808c 	bne.w	8000820 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000708:	4b48      	ldr	r3, [pc, #288]	; (800082c <HAL_ADC_MspInit+0x148>)
 800070a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070c:	4a47      	ldr	r2, [pc, #284]	; (800082c <HAL_ADC_MspInit+0x148>)
 800070e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000712:	6453      	str	r3, [r2, #68]	; 0x44
 8000714:	4b45      	ldr	r3, [pc, #276]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000720:	4b42      	ldr	r3, [pc, #264]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000724:	4a41      	ldr	r2, [pc, #260]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	6313      	str	r3, [r2, #48]	; 0x30
 800072c:	4b3f      	ldr	r3, [pc, #252]	; (800082c <HAL_ADC_MspInit+0x148>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000730:	f003 0304 	and.w	r3, r3, #4
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b3c      	ldr	r3, [pc, #240]	; (800082c <HAL_ADC_MspInit+0x148>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	4a3b      	ldr	r2, [pc, #236]	; (800082c <HAL_ADC_MspInit+0x148>)
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	6313      	str	r3, [r2, #48]	; 0x30
 8000744:	4b39      	ldr	r3, [pc, #228]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000750:	4b36      	ldr	r3, [pc, #216]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	4a35      	ldr	r2, [pc, #212]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000756:	f043 0302 	orr.w	r3, r3, #2
 800075a:	6313      	str	r3, [r2, #48]	; 0x30
 800075c:	4b33      	ldr	r3, [pc, #204]	; (800082c <HAL_ADC_MspInit+0x148>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	f003 0302 	and.w	r3, r3, #2
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000768:	2305      	movs	r3, #5
 800076a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076c:	2303      	movs	r3, #3
 800076e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	482d      	ldr	r0, [pc, #180]	; (8000830 <HAL_ADC_MspInit+0x14c>)
 800077c:	f006 f99e 	bl	8006abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000780:	2308      	movs	r3, #8
 8000782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000784:	2303      	movs	r3, #3
 8000786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	4619      	mov	r1, r3
 8000792:	4828      	ldr	r0, [pc, #160]	; (8000834 <HAL_ADC_MspInit+0x150>)
 8000794:	f006 f992 	bl	8006abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000798:	2302      	movs	r3, #2
 800079a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800079c:	2303      	movs	r3, #3
 800079e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4823      	ldr	r0, [pc, #140]	; (8000838 <HAL_ADC_MspInit+0x154>)
 80007ac:	f006 f986 	bl	8006abc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007b2:	4a23      	ldr	r2, [pc, #140]	; (8000840 <HAL_ADC_MspInit+0x15c>)
 80007b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007f4:	2203      	movs	r2, #3
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_ADC_MspInit+0x158>)
 8000800:	2200      	movs	r2, #0
 8000802:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <HAL_ADC_MspInit+0x158>)
 8000806:	f005 fde1 	bl	80063cc <HAL_DMA_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8000810:	f003 fe3a 	bl	8004488 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a09      	ldr	r2, [pc, #36]	; (800083c <HAL_ADC_MspInit+0x158>)
 8000818:	639a      	str	r2, [r3, #56]	; 0x38
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_ADC_MspInit+0x158>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000820:	bf00      	nop
 8000822:	3730      	adds	r7, #48	; 0x30
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40012000 	.word	0x40012000
 800082c:	40023800 	.word	0x40023800
 8000830:	40020800 	.word	0x40020800
 8000834:	40020000 	.word	0x40020000
 8000838:	40020400 	.word	0x40020400
 800083c:	200002a8 	.word	0x200002a8
 8000840:	40026410 	.word	0x40026410

08000844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_DMA_Init+0x38>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a0b      	ldr	r2, [pc, #44]	; (800087c <MX_DMA_Init+0x38>)
 8000850:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_DMA_Init+0x38>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	2038      	movs	r0, #56	; 0x38
 8000868:	f005 fd79 	bl	800635e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800086c:	2038      	movs	r0, #56	; 0x38
 800086e:	f005 fd92 	bl	8006396 <HAL_NVIC_EnableIRQ>

}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <Vector2_init>:
printVector(Vector2 v){
	char str[40];
	sprintf(str,"vector x: %d y: %d\n",v.x,v.y);
	printOut(str);
}
Vector2 Vector2_init(int x,int y){
 8000880:	b480      	push	{r7}
 8000882:	b087      	sub	sp, #28
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
	Vector2 v = {x,y};
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	617b      	str	r3, [r7, #20]
	return v;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	461a      	mov	r2, r3
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008a0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80008a4:	68f8      	ldr	r0, [r7, #12]
 80008a6:	371c      	adds	r7, #28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <Add>:
Vector2 Add(Vector2 v1,Vector2 v2){
 80008b0:	b082      	sub	sp, #8
 80008b2:	b480      	push	{r7}
 80008b4:	b085      	sub	sp, #20
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	1d38      	adds	r0, r7, #4
 80008bc:	e880 0006 	stmia.w	r0, {r1, r2}
 80008c0:	61fb      	str	r3, [r7, #28]
	v1.x+=v2.x;
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	4413      	add	r3, r2
 80008c8:	607b      	str	r3, [r7, #4]
	v1.y+=v2.y;
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	6a3b      	ldr	r3, [r7, #32]
 80008ce:	4413      	add	r3, r2
 80008d0:	60bb      	str	r3, [r7, #8]
	return v1;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	461a      	mov	r2, r3
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008dc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	b002      	add	sp, #8
 80008ec:	4770      	bx	lr

080008ee <Sub>:
Vector2 Sub(Vector2 v1,Vector2 v2){
 80008ee:	b082      	sub	sp, #8
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	1d38      	adds	r0, r7, #4
 80008fa:	e880 0006 	stmia.w	r0, {r1, r2}
 80008fe:	61fb      	str	r3, [r7, #28]
	v1.x-=v2.x;
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	607b      	str	r3, [r7, #4]
	v1.y-=v2.y;
 8000908:	68ba      	ldr	r2, [r7, #8]
 800090a:	6a3b      	ldr	r3, [r7, #32]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	60bb      	str	r3, [r7, #8]
	return v1;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	461a      	mov	r2, r3
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	e893 0003 	ldmia.w	r3, {r0, r1}
 800091a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800091e:	68f8      	ldr	r0, [r7, #12]
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	b002      	add	sp, #8
 800092a:	4770      	bx	lr

0800092c <Multiply_vector>:
Vector2 Multiply_int(Vector2 v1,int m){
	v1.x*=m;
	v1.y*=m;
	return v1;
}
Vector2 Multiply_vector(Vector2 v1,Vector2 v2){
 800092c:	b082      	sub	sp, #8
 800092e:	b480      	push	{r7}
 8000930:	b085      	sub	sp, #20
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	1d38      	adds	r0, r7, #4
 8000938:	e880 0006 	stmia.w	r0, {r1, r2}
 800093c:	61fb      	str	r3, [r7, #28]
	v1.x*=v2.x;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	69fa      	ldr	r2, [r7, #28]
 8000942:	fb02 f303 	mul.w	r3, r2, r3
 8000946:	607b      	str	r3, [r7, #4]
	v1.y*=v2.y;
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	6a3a      	ldr	r2, [r7, #32]
 800094c:	fb02 f303 	mul.w	r3, r2, r3
 8000950:	60bb      	str	r3, [r7, #8]
	return v1;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	461a      	mov	r2, r3
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	e893 0003 	ldmia.w	r3, {r0, r1}
 800095c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	b002      	add	sp, #8
 800096c:	4770      	bx	lr

0800096e <Divide_int>:
Vector2 Divide_int(Vector2 v1,int d){
 800096e:	b480      	push	{r7}
 8000970:	b085      	sub	sp, #20
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	1d38      	adds	r0, r7, #4
 8000978:	e880 0006 	stmia.w	r0, {r1, r2}
 800097c:	603b      	str	r3, [r7, #0]
	v1.x/=d;
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	fb92 f3f3 	sdiv	r3, r2, r3
 8000986:	607b      	str	r3, [r7, #4]
	v1.y/=d;
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000990:	60bb      	str	r3, [r7, #8]
	return v1;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	461a      	mov	r2, r3
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	e893 0003 	ldmia.w	r3, {r0, r1}
 800099c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <Divide_vector>:
Vector2 Divide_vector(Vector2 v1,Vector2 v2){
 80009ac:	b082      	sub	sp, #8
 80009ae:	b480      	push	{r7}
 80009b0:	b085      	sub	sp, #20
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	60f8      	str	r0, [r7, #12]
 80009b6:	1d38      	adds	r0, r7, #4
 80009b8:	e880 0006 	stmia.w	r0, {r1, r2}
 80009bc:	61fb      	str	r3, [r7, #28]
	v1.x/=v2.x;
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80009c6:	607b      	str	r3, [r7, #4]
	v1.y/=v2.y;
 80009c8:	68ba      	ldr	r2, [r7, #8]
 80009ca:	6a3b      	ldr	r3, [r7, #32]
 80009cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80009d0:	60bb      	str	r3, [r7, #8]
	return v1;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	461a      	mov	r2, r3
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009dc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	b002      	add	sp, #8
 80009ec:	4770      	bx	lr

080009ee <Equal>:
bool Equal(Vector2 v1,Vector2 v2){
 80009ee:	b490      	push	{r4, r7}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	f107 0408 	add.w	r4, r7, #8
 80009f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80009fc:	4639      	mov	r1, r7
 80009fe:	e881 000c 	stmia.w	r1, {r2, r3}
	return (v1.x == v2.x)&&(v1.y==v2.y);
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d105      	bne.n	8000a16 <Equal+0x28>
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d101      	bne.n	8000a16 <Equal+0x28>
 8000a12:	2301      	movs	r3, #1
 8000a14:	e000      	b.n	8000a18 <Equal+0x2a>
 8000a16:	2300      	movs	r3, #0
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	b2db      	uxtb	r3, r3
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc90      	pop	{r4, r7}
 8000a26:	4770      	bx	lr

08000a28 <getOffsetOrigin>:
Vector2 getOffsetOrigin(){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	6078      	str	r0, [r7, #4]
	return Sub(offset,Divide_int(cellSize,2)) ;
 8000a30:	f107 0008 	add.w	r0, r7, #8
 8000a34:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <getOffsetOrigin+0x30>)
 8000a36:	2302      	movs	r3, #2
 8000a38:	ca06      	ldmia	r2, {r1, r2}
 8000a3a:	f7ff ff98 	bl	800096e <Divide_int>
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <getOffsetOrigin+0x34>)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	ca06      	ldmia	r2, {r1, r2}
 8000a4a:	f7ff ff50 	bl	80008ee <Sub>
}
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000010 	.word	0x20000010
 8000a5c:	20000000 	.word	0x20000000

08000a60 <toIndex>:
Vector2 toIndex(Vector2 position){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af02      	add	r7, sp, #8
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	e883 0006 	stmia.w	r3, {r1, r2}
	return Divide_vector(Sub(position,getOffsetOrigin()),cellSize);
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ffd8 	bl	8000a28 <getOffsetOrigin>
 8000a78:	f107 0018 	add.w	r0, r7, #24
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	1d3a      	adds	r2, r7, #4
 8000a84:	ca06      	ldmia	r2, {r1, r2}
 8000a86:	f7ff ff32 	bl	80008ee <Sub>
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <toIndex+0x48>)
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	9200      	str	r2, [sp, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f107 0218 	add.w	r2, r7, #24
 8000a98:	ca06      	ldmia	r2, {r1, r2}
 8000a9a:	f7ff ff87 	bl	80009ac <Divide_vector>
}
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	3720      	adds	r7, #32
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000010 	.word	0x20000010

08000aac <toPosition>:
Vector2 toPosition(Vector2 index){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af02      	add	r7, sp, #8
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	e883 0006 	stmia.w	r3, {r1, r2}
	return Add(offset,Multiply_vector(cellSize,index));
 8000aba:	f107 0010 	add.w	r0, r7, #16
 8000abe:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <toPosition+0x38>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	ca06      	ldmia	r2, {r1, r2}
 8000ac8:	f7ff ff30 	bl	800092c <Multiply_vector>
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <toPosition+0x3c>)
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	ca06      	ldmia	r2, {r1, r2}
 8000ad8:	f7ff feea 	bl	80008b0 <Add>
}
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000010 	.word	0x20000010
 8000ae8:	20000000 	.word	0x20000000

08000aec <Transform_init>:
//Vector End

//Transform Start
Transform Transform_init(Vector2 position,Vector2 size,PivotType type){
 8000aec:	b082      	sub	sp, #8
 8000aee:	b4b0      	push	{r4, r5, r7}
 8000af0:	b08b      	sub	sp, #44	; 0x2c
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	1d38      	adds	r0, r7, #4
 8000af8:	e880 0006 	stmia.w	r0, {r1, r2}
 8000afc:	63fb      	str	r3, [r7, #60]	; 0x3c
	Transform trans;
	trans.position = position;
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	1d3a      	adds	r2, r7, #4
 8000b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b08:	e883 0003 	stmia.w	r3, {r0, r1}
	trans.size = size;
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b18:	e883 0003 	stmia.w	r3, {r0, r1}
	trans.pivot = type;
 8000b1c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000b20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	return trans;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	461d      	mov	r5, r3
 8000b28:	f107 0414 	add.w	r4, r7, #20
 8000b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b30:	6823      	ldr	r3, [r4, #0]
 8000b32:	602b      	str	r3, [r5, #0]
}
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	372c      	adds	r7, #44	; 0x2c
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bcb0      	pop	{r4, r5, r7}
 8000b3c:	b002      	add	sp, #8
 8000b3e:	4770      	bx	lr

08000b40 <getLeft>:
int getLeft(Transform* trans){
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	switch(trans->pivot%3){
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	7c1a      	ldrb	r2, [r3, #16]
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <getLeft+0x64>)
 8000b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b52:	0859      	lsrs	r1, r3, #1
 8000b54:	460b      	mov	r3, r1
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	440b      	add	r3, r1
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d014      	beq.n	8000b8c <getLeft+0x4c>
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	dc18      	bgt.n	8000b98 <getLeft+0x58>
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <getLeft+0x30>
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d003      	beq.n	8000b76 <getLeft+0x36>
 8000b6e:	e013      	b.n	8000b98 <getLeft+0x58>
	case 0 :
		return trans->position.x;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	e010      	b.n	8000b98 <getLeft+0x58>
		break;
	case 1 :
		return trans->position.x - trans->size.x/2;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	da00      	bge.n	8000b84 <getLeft+0x44>
 8000b82:	3301      	adds	r3, #1
 8000b84:	105b      	asrs	r3, r3, #1
 8000b86:	425b      	negs	r3, r3
 8000b88:	4413      	add	r3, r2
 8000b8a:	e005      	b.n	8000b98 <getLeft+0x58>
		break;
	case 2 :
		return trans->position.x - trans->size.x;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	e7ff      	b.n	8000b98 <getLeft+0x58>
		break;
	}
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	aaaaaaab 	.word	0xaaaaaaab

08000ba8 <getRight>:
int getRight(Transform* trans){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	return getLeft(trans)+trans->size.x;
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ffc5 	bl	8000b40 <getLeft>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	4413      	add	r3, r2
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <getTop>:
int getTop(Transform* trans){
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	switch(trans->pivot/3){
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7c1b      	ldrb	r3, [r3, #16]
 8000bd4:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <getTop+0x5c>)
 8000bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bda:	085b      	lsrs	r3, r3, #1
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d014      	beq.n	8000c0c <getTop+0x44>
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	dc18      	bgt.n	8000c18 <getTop+0x50>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <getTop+0x28>
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d003      	beq.n	8000bf6 <getTop+0x2e>
 8000bee:	e013      	b.n	8000c18 <getTop+0x50>
		case 0 :
			return trans->position.y;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	e010      	b.n	8000c18 <getTop+0x50>
			break;
		case 1 :
			return trans->position.y - trans->size.y/2;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	da00      	bge.n	8000c04 <getTop+0x3c>
 8000c02:	3301      	adds	r3, #1
 8000c04:	105b      	asrs	r3, r3, #1
 8000c06:	425b      	negs	r3, r3
 8000c08:	4413      	add	r3, r2
 8000c0a:	e005      	b.n	8000c18 <getTop+0x50>
			break;
		case 2 :
			return trans->position.y - trans->size.y;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	e7ff      	b.n	8000c18 <getTop+0x50>
			break;
		}
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	aaaaaaab 	.word	0xaaaaaaab

08000c28 <getBottom>:
int getBottom(Transform* trans){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	return getTop(trans)+trans->size.y;
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ffc9 	bl	8000bc8 <getTop>
 8000c36:	4602      	mov	r2, r0
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	4413      	add	r3, r2
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <getTransformOrigin>:
Vector2 getTransformOrigin(Transform* transform){
 8000c46:	b590      	push	{r4, r7, lr}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
	return Vector2_init(getLeft(transform),getTop(transform));
 8000c50:	6838      	ldr	r0, [r7, #0]
 8000c52:	f7ff ff75 	bl	8000b40 <getLeft>
 8000c56:	4604      	mov	r4, r0
 8000c58:	6838      	ldr	r0, [r7, #0]
 8000c5a:	f7ff ffb5 	bl	8000bc8 <getTop>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4621      	mov	r1, r4
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fe0b 	bl	8000880 <Vector2_init>
}
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd90      	pop	{r4, r7, pc}

08000c72 <Draw>:

void Draw(Transform* trans,uint16_t color){
 8000c72:	b590      	push	{r4, r7, lr}
 8000c74:	b089      	sub	sp, #36	; 0x24
 8000c76:	af02      	add	r7, sp, #8
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	807b      	strh	r3, [r7, #2]
	Vector2 origin = getTransformOrigin(trans);
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ffde 	bl	8000c46 <getTransformOrigin>
	Vector2 endPos = Add(origin,trans->size) ;
 8000c8a:	f107 0008 	add.w	r0, r7, #8
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68da      	ldr	r2, [r3, #12]
 8000c92:	9200      	str	r2, [sp, #0]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	f107 0210 	add.w	r2, r7, #16
 8000c9a:	ca06      	ldmia	r2, {r1, r2}
 8000c9c:	f7ff fe08 	bl	80008b0 <Add>
	ILI9341_Draw_Filled_Rectangle_Coord(origin.x,origin.y,endPos.x,endPos.y,color);
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	b298      	uxth	r0, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	b299      	uxth	r1, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	b29c      	uxth	r4, r3
 8000cb0:	887b      	ldrh	r3, [r7, #2]
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	4623      	mov	r3, r4
 8000cb6:	f004 f890 	bl	8004dda <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8000cba:	bf00      	nop
 8000cbc:	371c      	adds	r7, #28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd90      	pop	{r4, r7, pc}
	...

08000cc4 <DrawImage>:
void DrawImage(Transform* transform,uint8_t* arr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8000cca:	af02      	add	r7, sp, #8
 8000ccc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000cd0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000cd4:	6018      	str	r0, [r3, #0]
 8000cd6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000cda:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000cde:	6019      	str	r1, [r3, #0]
    Vector2 origin = getTransformOrigin(transform);
 8000ce0:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8000ce4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000ce8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000cec:	6819      	ldr	r1, [r3, #0]
 8000cee:	4610      	mov	r0, r2
 8000cf0:	f7ff ffa9 	bl	8000c46 <getTransformOrigin>
    Vector2 endPoint = Add(origin,transform->size);
 8000cf4:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 8000cf8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000cfc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	9200      	str	r2, [sp, #0]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8000d0c:	ca06      	ldmia	r2, {r1, r2}
 8000d0e:	f7ff fdcf 	bl	80008b0 <Add>

    ILI9341_Set_Address(origin.x, origin.y, endPoint.x-1, endPoint.y-1);
 8000d12:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000d16:	b298      	uxth	r0, r3
 8000d18:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000d1c:	b299      	uxth	r1, r3
 8000d1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	3b01      	subs	r3, #1
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	f004 f9e1 	bl	80050f8 <ILI9341_Set_Address>

    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3c:	4834      	ldr	r0, [pc, #208]	; (8000e10 <DrawImage+0x14c>)
 8000d3e:	f006 f869 	bl	8006e14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d48:	4831      	ldr	r0, [pc, #196]	; (8000e10 <DrawImage+0x14c>)
 8000d4a:	f006 f863 	bl	8006e14 <HAL_GPIO_WritePin>

    unsigned char Temp_small_buffer[BURST_MAX_SIZE];
    uint32_t counter = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    for (uint32_t i = 0; i < transform->size.x * transform->size.y * 2 / BURST_MAX_SIZE; i++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000d5a:	e035      	b.n	8000dc8 <DrawImage+0x104>
    {
        for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000d62:	e019      	b.n	8000d98 <DrawImage+0xd4>
        {
            Temp_small_buffer[k] = arr[counter + k];
 8000d64:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000d68:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d6c:	4413      	add	r3, r2
 8000d6e:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000d72:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8000d76:	6812      	ldr	r2, [r2, #0]
 8000d78:	4413      	add	r3, r2
 8000d7a:	7819      	ldrb	r1, [r3, #0]
 8000d7c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000d80:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8000d84:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d88:	4413      	add	r3, r2
 8000d8a:	460a      	mov	r2, r1
 8000d8c:	701a      	strb	r2, [r3, #0]
        for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8000d8e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d92:	3301      	adds	r3, #1
 8000d94:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000d98:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000da0:	d3e0      	bcc.n	8000d64 <DrawImage+0xa0>
        }
        HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8000da2:	f107 0108 	add.w	r1, r7, #8
 8000da6:	230a      	movs	r3, #10
 8000da8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000dac:	4819      	ldr	r0, [pc, #100]	; (8000e14 <DrawImage+0x150>)
 8000dae:	f007 fa94 	bl	80082da <HAL_SPI_Transmit>
        counter += BURST_MAX_SIZE;
 8000db2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000db6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000dba:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    for (uint32_t i = 0; i < transform->size.x * transform->size.y * 2 / BURST_MAX_SIZE; i++)
 8000dbe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000dc8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000dcc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000dd8:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8000ddc:	6812      	ldr	r2, [r2, #0]
 8000dde:	68d2      	ldr	r2, [r2, #12]
 8000de0:	fb02 f303 	mul.w	r3, r2, r3
 8000de4:	4a0c      	ldr	r2, [pc, #48]	; (8000e18 <DrawImage+0x154>)
 8000de6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dea:	1112      	asrs	r2, r2, #4
 8000dec:	17db      	asrs	r3, r3, #31
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	461a      	mov	r2, r3
 8000df2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d3b0      	bcc.n	8000d5c <DrawImage+0x98>
    }
    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <DrawImage+0x14c>)
 8000e02:	f006 f807 	bl	8006e14 <HAL_GPIO_WritePin>
}
 8000e06:	bf00      	nop
 8000e08:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40020800 	.word	0x40020800
 8000e14:	20002454 	.word	0x20002454
 8000e18:	10624dd3 	.word	0x10624dd3

08000e1c <isCollision>:
bool isCollision(Transform *trans1,Transform *trans2,Vector2 *vectorOutput){
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b095      	sub	sp, #84	; 0x54
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6178      	str	r0, [r7, #20]
 8000e24:	6139      	str	r1, [r7, #16]
 8000e26:	60fa      	str	r2, [r7, #12]
	if(trans1==NULL||trans2==NULL)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <isCollision+0x18>
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d101      	bne.n	8000e38 <isCollision+0x1c>
		return false;
 8000e34:	2300      	movs	r3, #0
 8000e36:	e0b6      	b.n	8000fa6 <isCollision+0x18a>
	int r1 = getRight(trans1),r2=getRight(trans2),l1=getLeft(trans1),l2=getLeft(trans2);
 8000e38:	6978      	ldr	r0, [r7, #20]
 8000e3a:	f7ff feb5 	bl	8000ba8 <getRight>
 8000e3e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8000e40:	6938      	ldr	r0, [r7, #16]
 8000e42:	f7ff feb1 	bl	8000ba8 <getRight>
 8000e46:	64b8      	str	r0, [r7, #72]	; 0x48
 8000e48:	6978      	ldr	r0, [r7, #20]
 8000e4a:	f7ff fe79 	bl	8000b40 <getLeft>
 8000e4e:	6478      	str	r0, [r7, #68]	; 0x44
 8000e50:	6938      	ldr	r0, [r7, #16]
 8000e52:	f7ff fe75 	bl	8000b40 <getLeft>
 8000e56:	6438      	str	r0, [r7, #64]	; 0x40
	int t1 = getTop(trans1),t2=getTop(trans2),b1=getBottom(trans1),b2=getBottom(trans2);
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	f7ff feb5 	bl	8000bc8 <getTop>
 8000e5e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000e60:	6938      	ldr	r0, [r7, #16]
 8000e62:	f7ff feb1 	bl	8000bc8 <getTop>
 8000e66:	63b8      	str	r0, [r7, #56]	; 0x38
 8000e68:	6978      	ldr	r0, [r7, #20]
 8000e6a:	f7ff fedd 	bl	8000c28 <getBottom>
 8000e6e:	6378      	str	r0, [r7, #52]	; 0x34
 8000e70:	6938      	ldr	r0, [r7, #16]
 8000e72:	f7ff fed9 	bl	8000c28 <getBottom>
 8000e76:	6338      	str	r0, [r7, #48]	; 0x30
	Vector2 v = {0,0};
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
	if((inBetween(l2+1,r1,r2)||inBetween(l2,l1,r2-1)||inBetween(l1,l2,r1-1))&&
 8000e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e82:	3301      	adds	r3, #1
 8000e84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e86:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 fece 	bl	8004c2a <inBetween>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d113      	bne.n	8000ebc <isCollision+0xa0>
 8000e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e96:	3b01      	subs	r3, #1
 8000e98:	461a      	mov	r2, r3
 8000e9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000e9c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000e9e:	f003 fec4 	bl	8004c2a <inBetween>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d109      	bne.n	8000ebc <isCollision+0xa0>
 8000ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	461a      	mov	r2, r3
 8000eae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000eb0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000eb2:	f003 feba 	bl	8004c2a <inBetween>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d073      	beq.n	8000fa4 <isCollision+0x188>
			(inBetween(t2+1,b1,b2)||inBetween(t2,t1,b2-1)||inBetween(t1,t2,b1-1))){
 8000ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ec2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 feb0 	bl	8004c2a <inBetween>
 8000eca:	4603      	mov	r3, r0
	if((inBetween(l2+1,r1,r2)||inBetween(l2,l1,r2-1)||inBetween(l1,l2,r1-1))&&
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d113      	bne.n	8000ef8 <isCollision+0xdc>
			(inBetween(t2+1,b1,b2)||inBetween(t2,t1,b2-1)||inBetween(t1,t2,b1-1))){
 8000ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000ed8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000eda:	f003 fea6 	bl	8004c2a <inBetween>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d109      	bne.n	8000ef8 <isCollision+0xdc>
 8000ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	461a      	mov	r2, r3
 8000eea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000eec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000eee:	f003 fe9c 	bl	8004c2a <inBetween>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d055      	beq.n	8000fa4 <isCollision+0x188>
		int dst1=l2-r1,dst2=r2-l1;
 8000ef8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
		int dstX = abs(dst1)<abs(dst2)?dst1:dst2;
 8000f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f0e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bfb8      	it	lt
 8000f18:	425b      	neglt	r3, r3
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	da01      	bge.n	8000f22 <isCollision+0x106>
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	e000      	b.n	8000f24 <isCollision+0x108>
 8000f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
		dst1=t2-b1,dst2=b2-t1;
 8000f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
		int dstY = abs(dst1)<abs(dst2)?dst1:dst2;
 8000f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f38:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f3c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bfb8      	it	lt
 8000f46:	425b      	neglt	r3, r3
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	da01      	bge.n	8000f50 <isCollision+0x134>
 8000f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4e:	e000      	b.n	8000f52 <isCollision+0x136>
 8000f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f52:	623b      	str	r3, [r7, #32]
		*vectorOutput = abs(dstX)<abs(dstY)?Vector2_init(dstX,0) :Vector2_init(0,dstY);
 8000f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f56:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f5a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	bfb8      	it	lt
 8000f64:	425b      	neglt	r3, r3
 8000f66:	429a      	cmp	r2, r3
 8000f68:	da0d      	bge.n	8000f86 <isCollision+0x16a>
 8000f6a:	68fc      	ldr	r4, [r7, #12]
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fc84 	bl	8000880 <Vector2_init>
 8000f78:	4622      	mov	r2, r4
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f80:	e882 0003 	stmia.w	r2, {r0, r1}
 8000f84:	e00c      	b.n	8000fa0 <isCollision+0x184>
 8000f86:	68fc      	ldr	r4, [r7, #12]
 8000f88:	463b      	mov	r3, r7
 8000f8a:	6a3a      	ldr	r2, [r7, #32]
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fc76 	bl	8000880 <Vector2_init>
 8000f94:	4622      	mov	r2, r4
 8000f96:	463b      	mov	r3, r7
 8000f98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f9c:	e882 0003 	stmia.w	r2, {r0, r1}
		return true;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <isCollision+0x18a>
	}
	return false;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3754      	adds	r7, #84	; 0x54
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd90      	pop	{r4, r7, pc}
	...

08000fb0 <Move>:
void Move(Player* player,Vector2 moveDst){
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b0b3      	sub	sp, #204	; 0xcc
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	6178      	str	r0, [r7, #20]
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	e883 0006 	stmia.w	r3, {r1, r2}
	Vector2 dst;
	player->transform.position = Add(player->transform.position,moveDst);
 8000fc0:	697c      	ldr	r4, [r7, #20]
 8000fc2:	4638      	mov	r0, r7
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	ca06      	ldmia	r2, {r1, r2}
 8000fce:	f7ff fc6f 	bl	80008b0 <Add>
 8000fd2:	4622      	mov	r2, r4
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fda:	e882 0003 	stmia.w	r2, {r0, r1}
	Vector2 index = getPlayerIndex(player);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	6979      	ldr	r1, [r7, #20]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 ff8f 	bl	8001f08 <getPlayerIndex>
	if(index.x>0)
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	dd18      	ble.n	8001022 <Move+0x72>
		CheckPlayerCollisionAt(player,Add(index,Vector2_init(-1,0)));
 8000ff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fc40 	bl	8000880 <Vector2_init>
 8001000:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100a:	f107 021c 	add.w	r2, r7, #28
 800100e:	ca06      	ldmia	r2, {r1, r2}
 8001010:	f7ff fc4e 	bl	80008b0 <Add>
 8001014:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001018:	e893 0006 	ldmia.w	r3, {r1, r2}
 800101c:	6978      	ldr	r0, [r7, #20]
 800101e:	f000 f9cd 	bl	80013bc <CheckPlayerCollisionAt>
	if(index.y>0)
 8001022:	6a3b      	ldr	r3, [r7, #32]
 8001024:	2b00      	cmp	r3, #0
 8001026:	dd18      	ble.n	800105a <Move+0xaa>
		CheckPlayerCollisionAt(player,Add(index,Vector2_init(0,-1)));
 8001028:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800102c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fc24 	bl	8000880 <Vector2_init>
 8001038:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800103c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001042:	f107 021c 	add.w	r2, r7, #28
 8001046:	ca06      	ldmia	r2, {r1, r2}
 8001048:	f7ff fc32 	bl	80008b0 <Add>
 800104c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001050:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001054:	6978      	ldr	r0, [r7, #20]
 8001056:	f000 f9b1 	bl	80013bc <CheckPlayerCollisionAt>
	if(index.x<MAP_WIDTH-1)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	2b0b      	cmp	r3, #11
 800105e:	dc17      	bgt.n	8001090 <Move+0xe0>
			CheckPlayerCollisionAt(player,Add(index,Vector2_init(1,0)));
 8001060:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001064:	2200      	movs	r2, #0
 8001066:	2101      	movs	r1, #1
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fc09 	bl	8000880 <Vector2_init>
 800106e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001078:	f107 021c 	add.w	r2, r7, #28
 800107c:	ca06      	ldmia	r2, {r1, r2}
 800107e:	f7ff fc17 	bl	80008b0 <Add>
 8001082:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001086:	e893 0006 	ldmia.w	r3, {r1, r2}
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f000 f996 	bl	80013bc <CheckPlayerCollisionAt>
	if(index.y<MAP_HEIGHT-1)
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	2b0b      	cmp	r3, #11
 8001094:	dc17      	bgt.n	80010c6 <Move+0x116>
		CheckPlayerCollisionAt(player,Add(index,Vector2_init(0,1)));
 8001096:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800109a:	2201      	movs	r2, #1
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fbee 	bl	8000880 <Vector2_init>
 80010a4:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80010a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ae:	f107 021c 	add.w	r2, r7, #28
 80010b2:	ca06      	ldmia	r2, {r1, r2}
 80010b4:	f7ff fbfc 	bl	80008b0 <Add>
 80010b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010bc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80010c0:	6978      	ldr	r0, [r7, #20]
 80010c2:	f000 f97b 	bl	80013bc <CheckPlayerCollisionAt>
	if(index.x>0){
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	dd39      	ble.n	8001140 <Move+0x190>
		if(index.y>0){
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	dd19      	ble.n	8001106 <Move+0x156>
			CheckPlayerCollisionAt(player,Add(index,Vector2_init(-1,-1)));
 80010d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fbce 	bl	8000880 <Vector2_init>
 80010e4:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80010e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010ee:	f107 021c 	add.w	r2, r7, #28
 80010f2:	ca06      	ldmia	r2, {r1, r2}
 80010f4:	f7ff fbdc 	bl	80008b0 <Add>
 80010f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010fc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001100:	6978      	ldr	r0, [r7, #20]
 8001102:	f000 f95b 	bl	80013bc <CheckPlayerCollisionAt>
		}
		if(index.y<MAP_HEIGHT-1){
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	2b0b      	cmp	r3, #11
 800110a:	dc19      	bgt.n	8001140 <Move+0x190>
			CheckPlayerCollisionAt(player,Add(index,Vector2_init(-1,1)));
 800110c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001110:	2201      	movs	r2, #1
 8001112:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fbb2 	bl	8000880 <Vector2_init>
 800111c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001120:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001128:	f107 021c 	add.w	r2, r7, #28
 800112c:	ca06      	ldmia	r2, {r1, r2}
 800112e:	f7ff fbbf 	bl	80008b0 <Add>
 8001132:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001136:	e893 0006 	ldmia.w	r3, {r1, r2}
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f000 f93e 	bl	80013bc <CheckPlayerCollisionAt>
		}
	}
	if(index.x<MAP_WIDTH-1){
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b0b      	cmp	r3, #11
 8001144:	dc3a      	bgt.n	80011bc <Move+0x20c>
		if(index.y>0){
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	2b00      	cmp	r3, #0
 800114a:	dd1a      	ble.n	8001182 <Move+0x1d2>
			CheckPlayerCollisionAt(player,Add(index,Vector2_init(1,-1)));
 800114c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001154:	2101      	movs	r1, #1
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fb92 	bl	8000880 <Vector2_init>
 800115c:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8001160:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800116a:	f107 021c 	add.w	r2, r7, #28
 800116e:	ca06      	ldmia	r2, {r1, r2}
 8001170:	f7ff fb9e 	bl	80008b0 <Add>
 8001174:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001178:	e893 0006 	ldmia.w	r3, {r1, r2}
 800117c:	6978      	ldr	r0, [r7, #20]
 800117e:	f000 f91d 	bl	80013bc <CheckPlayerCollisionAt>
		}
		if(index.y<MAP_HEIGHT-1){
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	2b0b      	cmp	r3, #11
 8001186:	dc19      	bgt.n	80011bc <Move+0x20c>
			CheckPlayerCollisionAt(player,Add(index,Vector2_init(1,1)));
 8001188:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800118c:	2201      	movs	r2, #1
 800118e:	2101      	movs	r1, #1
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fb75 	bl	8000880 <Vector2_init>
 8001196:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800119a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011a4:	f107 021c 	add.w	r2, r7, #28
 80011a8:	ca06      	ldmia	r2, {r1, r2}
 80011aa:	f7ff fb81 	bl	80008b0 <Add>
 80011ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011b2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f000 f900 	bl	80013bc <CheckPlayerCollisionAt>
		}
	}
	for(int i=0;i<4;i++){
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80011c2:	e024      	b.n	800120e <Move+0x25e>
		if(isCollision(&player->transform,&walls[i],&dst)){
 80011c4:	6978      	ldr	r0, [r7, #20]
 80011c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4a76      	ldr	r2, [pc, #472]	; (80013ac <Move+0x3fc>)
 80011d4:	4413      	add	r3, r2
 80011d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fe1e 	bl	8000e1c <isCollision>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00e      	beq.n	8001204 <Move+0x254>
			player->transform.position = Add(player->transform.position,dst);
 80011e6:	697c      	ldr	r4, [r7, #20]
 80011e8:	4638      	mov	r0, r7
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	ca06      	ldmia	r2, {r1, r2}
 80011f4:	f7ff fb5c 	bl	80008b0 <Add>
 80011f8:	4622      	mov	r2, r4
 80011fa:	463b      	mov	r3, r7
 80011fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001200:	e882 0003 	stmia.w	r2, {r0, r1}
	for(int i=0;i<4;i++){
 8001204:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001208:	3301      	adds	r3, #1
 800120a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800120e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001212:	2b03      	cmp	r3, #3
 8001214:	ddd6      	ble.n	80011c4 <Move+0x214>
		}
	}
	for(int i=0;i<playerCount;i++){
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800121c:	e03a      	b.n	8001294 <Move+0x2e4>
		if(player!=&players[i]&&isCollision(&player->transform,&getCell(getPlayerIndex(&players[i]))->floor,&dst)){
 800121e:	4b64      	ldr	r3, [pc, #400]	; (80013b0 <Move+0x400>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001226:	019b      	lsls	r3, r3, #6
 8001228:	4413      	add	r3, r2
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	429a      	cmp	r2, r3
 800122e:	d02c      	beq.n	800128a <Move+0x2da>
 8001230:	697c      	ldr	r4, [r7, #20]
 8001232:	4b5f      	ldr	r3, [pc, #380]	; (80013b0 <Move+0x400>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800123a:	019b      	lsls	r3, r3, #6
 800123c:	441a      	add	r2, r3
 800123e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fe5f 	bl	8001f08 <getPlayerIndex>
 800124a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800124e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001252:	f000 fd1f 	bl	8001c94 <getCell>
 8001256:	4603      	mov	r3, r0
 8001258:	4619      	mov	r1, r3
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	461a      	mov	r2, r3
 8001260:	4620      	mov	r0, r4
 8001262:	f7ff fddb 	bl	8000e1c <isCollision>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00e      	beq.n	800128a <Move+0x2da>
			player->transform.position = Add(player->transform.position,dst);
 800126c:	697c      	ldr	r4, [r7, #20]
 800126e:	4638      	mov	r0, r7
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	ca06      	ldmia	r2, {r1, r2}
 800127a:	f7ff fb19 	bl	80008b0 <Add>
 800127e:	4622      	mov	r2, r4
 8001280:	463b      	mov	r3, r7
 8001282:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001286:	e882 0003 	stmia.w	r2, {r0, r1}
	for(int i=0;i<playerCount;i++){
 800128a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800128e:	3301      	adds	r3, #1
 8001290:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001294:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <Move+0x404>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800129c:	429a      	cmp	r2, r3
 800129e:	dbbe      	blt.n	800121e <Move+0x26e>
		}
	}
	ObjectType type = getCell(index)->objType;
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012a8:	f000 fcf4 	bl	8001c94 <getCell>
 80012ac:	4603      	mov	r3, r0
 80012ae:	7e1b      	ldrb	r3, [r3, #24]
 80012b0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	switch(type){
 80012b4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80012b8:	3b04      	subs	r3, #4
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d86e      	bhi.n	800139c <Move+0x3ec>
 80012be:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <Move+0x314>)
 80012c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c4:	08001361 	.word	0x08001361
 80012c8:	080012d9 	.word	0x080012d9
 80012cc:	080012fb 	.word	0x080012fb
 80012d0:	0800131d 	.word	0x0800131d
 80012d4:	0800133f 	.word	0x0800133f
		case SpeedItem :
			if(player->speed<5)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	dc04      	bgt.n	80012ea <Move+0x33a>
				player->speed++;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	619a      	str	r2, [r3, #24]
			clearObject(index,false);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012f4:	f000 fbe6 	bl	8001ac4 <clearObject>
			break;
 80012f8:	e053      	b.n	80013a2 <Move+0x3f2>
		case BombAmountItem:
			if(player->maxBombCount<5)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	2b04      	cmp	r3, #4
 8001300:	dc04      	bgt.n	800130c <Move+0x35c>
				player->maxBombCount++;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	61da      	str	r2, [r3, #28]
			clearObject(index,false);
 800130c:	2200      	movs	r2, #0
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001316:	f000 fbd5 	bl	8001ac4 <clearObject>
			break;
 800131a:	e042      	b.n	80013a2 <Move+0x3f2>
		case BombRangeItem:
			if(player->bombRange<5)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	2b04      	cmp	r3, #4
 8001322:	dc04      	bgt.n	800132e <Move+0x37e>
				player->bombRange++;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	621a      	str	r2, [r3, #32]
			clearObject(index,false);
 800132e:	2200      	movs	r2, #0
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001338:	f000 fbc4 	bl	8001ac4 <clearObject>
			break;
 800133c:	e031      	b.n	80013a2 <Move+0x3f2>
		case HealthItem:
			if(player->health<5)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	2b04      	cmp	r3, #4
 8001344:	dc04      	bgt.n	8001350 <Move+0x3a0>
				player->health++;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	615a      	str	r2, [r3, #20]
			clearObject(index,false);
 8001350:	2200      	movs	r2, #0
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	e893 0003 	ldmia.w	r3, {r0, r1}
 800135a:	f000 fbb3 	bl	8001ac4 <clearObject>
			break;
 800135e:	e020      	b.n	80013a2 <Move+0x3f2>
		case DetonateEffectObject:
			if(!player->immortalFlag){
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001366:	f083 0301 	eor.w	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d017      	beq.n	80013a0 <Move+0x3f0>
				player->health--;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	1e5a      	subs	r2, r3, #1
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	615a      	str	r2, [r3, #20]
				player->immortalFlag = true;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				player->initialImmortalTime = TimeTotal;
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <Move+0x408>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	62da      	str	r2, [r3, #44]	; 0x2c
				if(player->health<=0)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	2b00      	cmp	r3, #0
 8001390:	dc06      	bgt.n	80013a0 <Move+0x3f0>
					player->deadFlag = true;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
			break;
 800139a:	e001      	b.n	80013a0 <Move+0x3f0>
		default:break;
 800139c:	bf00      	nop
 800139e:	e000      	b.n	80013a2 <Move+0x3f2>
			break;
 80013a0:	bf00      	nop
	}

}
 80013a2:	bf00      	nop
 80013a4:	37c4      	adds	r7, #196	; 0xc4
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd90      	pop	{r4, r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000018 	.word	0x20000018
 80013b0:	20002414 	.word	0x20002414
 80013b4:	20000068 	.word	0x20000068
 80013b8:	20002410 	.word	0x20002410

080013bc <CheckPlayerCollisionAt>:
bool CheckPlayerCollisionAt(Player* player,Vector2 index){
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b08b      	sub	sp, #44	; 0x2c
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	6178      	str	r0, [r7, #20]
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	e883 0006 	stmia.w	r3, {r1, r2}
	Vector2 dst;
	if((
		getCell(index)->objType == BombObject||
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013d4:	f000 fc5e 	bl	8001c94 <getCell>
 80013d8:	4603      	mov	r3, r0
 80013da:	7e1b      	ldrb	r3, [r3, #24]
	if((
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d013      	beq.n	8001408 <CheckPlayerCollisionAt+0x4c>
		getCell(index)->objType == BreakableWall||
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013e8:	f000 fc54 	bl	8001c94 <getCell>
 80013ec:	4603      	mov	r3, r0
 80013ee:	7e1b      	ldrb	r3, [r3, #24]
		getCell(index)->objType == BombObject||
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d009      	beq.n	8001408 <CheckPlayerCollisionAt+0x4c>
		getCell(index)->objType == UnbreakableWall)&&
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013fc:	f000 fc4a 	bl	8001c94 <getCell>
 8001400:	4603      	mov	r3, r0
 8001402:	7e1b      	ldrb	r3, [r3, #24]
		getCell(index)->objType == BreakableWall||
 8001404:	2b01      	cmp	r3, #1
 8001406:	d11f      	bne.n	8001448 <CheckPlayerCollisionAt+0x8c>
		isCollision(&player->transform,getCell(index),&dst)
 8001408:	697c      	ldr	r4, [r7, #20]
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001412:	f000 fc3f 	bl	8001c94 <getCell>
 8001416:	4601      	mov	r1, r0
 8001418:	f107 0318 	add.w	r3, r7, #24
 800141c:	461a      	mov	r2, r3
 800141e:	4620      	mov	r0, r4
 8001420:	f7ff fcfc 	bl	8000e1c <isCollision>
 8001424:	4603      	mov	r3, r0
		getCell(index)->objType == UnbreakableWall)&&
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00e      	beq.n	8001448 <CheckPlayerCollisionAt+0x8c>
	){
		player->transform.position = Add(player->transform.position,dst);
 800142a:	697c      	ldr	r4, [r7, #20]
 800142c:	4638      	mov	r0, r7
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	ca06      	ldmia	r2, {r1, r2}
 8001438:	f7ff fa3a 	bl	80008b0 <Add>
 800143c:	4622      	mov	r2, r4
 800143e:	463b      	mov	r3, r7
 8001440:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001444:	e882 0003 	stmia.w	r2, {r0, r1}
	}
}
 8001448:	bf00      	nop
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd90      	pop	{r4, r7, pc}
	...

08001454 <drawPlayers>:
void drawPlayers(Player* players,int count){
 8001454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001458:	b097      	sub	sp, #92	; 0x5c
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	466b      	mov	r3, sp
 8001462:	461e      	mov	r6, r3
	Vector2 playerIndexs[count];
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	1e4b      	subs	r3, r1, #1
 8001468:	647b      	str	r3, [r7, #68]	; 0x44
 800146a:	460a      	mov	r2, r1
 800146c:	2300      	movs	r3, #0
 800146e:	4690      	mov	r8, r2
 8001470:	4699      	mov	r9, r3
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800147e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001482:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001486:	460a      	mov	r2, r1
 8001488:	2300      	movs	r3, #0
 800148a:	4614      	mov	r4, r2
 800148c:	461d      	mov	r5, r3
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	01ab      	lsls	r3, r5, #6
 8001498:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800149c:	01a2      	lsls	r2, r4, #6
 800149e:	460b      	mov	r3, r1
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	3307      	adds	r3, #7
 80014a4:	08db      	lsrs	r3, r3, #3
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	ebad 0d03 	sub.w	sp, sp, r3
 80014ac:	466b      	mov	r3, sp
 80014ae:	3303      	adds	r3, #3
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	643b      	str	r3, [r7, #64]	; 0x40
	for(int i=0;i<count;i++){
 80014b6:	2300      	movs	r3, #0
 80014b8:	657b      	str	r3, [r7, #84]	; 0x54
 80014ba:	e014      	b.n	80014e6 <drawPlayers+0x92>
		playerIndexs[i]=getPlayerIndex(&players[i]);
 80014bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014be:	019b      	lsls	r3, r3, #6
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	441a      	add	r2, r3
 80014c4:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80014c6:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 80014c8:	463b      	mov	r3, r7
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fd1b 	bl	8001f08 <getPlayerIndex>
 80014d2:	00eb      	lsls	r3, r5, #3
 80014d4:	4423      	add	r3, r4
 80014d6:	463a      	mov	r2, r7
 80014d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014dc:	e883 0003 	stmia.w	r3, {r0, r1}
	for(int i=0;i<count;i++){
 80014e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014e2:	3301      	adds	r3, #1
 80014e4:	657b      	str	r3, [r7, #84]	; 0x54
 80014e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	dbe6      	blt.n	80014bc <drawPlayers+0x68>
	}
	for(int i=0;i<count;i++){
 80014ee:	2300      	movs	r3, #0
 80014f0:	653b      	str	r3, [r7, #80]	; 0x50
 80014f2:	e0c3      	b.n	800167c <drawPlayers+0x228>
		Player* player = &players[i];
 80014f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014f6:	019b      	lsls	r3, r3, #6
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(!player->deadFlag){
 80014fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001500:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001504:	f083 0301 	eor.w	r3, r3, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 80b3 	beq.w	8001676 <drawPlayers+0x222>
			int delta = (TimeTotal-player->initialImmortalTime)%BLINK_PERIOD;
 8001510:	4b60      	ldr	r3, [pc, #384]	; (8001694 <drawPlayers+0x240>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	4a5f      	ldr	r2, [pc, #380]	; (8001698 <drawPlayers+0x244>)
 800151c:	fb82 1203 	smull	r1, r2, r2, r3
 8001520:	1211      	asrs	r1, r2, #8
 8001522:	17da      	asrs	r2, r3, #31
 8001524:	1a8a      	subs	r2, r1, r2
 8001526:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800152a:	fb01 f202 	mul.w	r2, r1, r2
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	63bb      	str	r3, [r7, #56]	; 0x38
			Vector2 playerIndex = playerIndexs[i];
 8001532:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001536:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	440b      	add	r3, r1
 800153e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001542:	e882 0003 	stmia.w	r2, {r0, r1}
			Vector2 minIndex = Vector2_init(playerIndex.x>0?playerIndex.x-1:0,playerIndex.y>0?playerIndex.y-1:playerIndex.y);
 8001546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001548:	2b01      	cmp	r3, #1
 800154a:	bfb8      	it	lt
 800154c:	2301      	movlt	r3, #1
 800154e:	1e59      	subs	r1, r3, #1
 8001550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001552:	2b00      	cmp	r3, #0
 8001554:	dd02      	ble.n	800155c <drawPlayers+0x108>
 8001556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001558:	3b01      	subs	r3, #1
 800155a:	e000      	b.n	800155e <drawPlayers+0x10a>
 800155c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001562:	461a      	mov	r2, r3
 8001564:	f7ff f98c 	bl	8000880 <Vector2_init>
			Vector2 maxIndex = Vector2_init(playerIndex.x<MAP_WIDTH-1?playerIndex.x+1:playerIndex.x,playerIndex.y<MAP_HEIGHT-1?playerIndex.y+1:playerIndex.y);
 8001568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156a:	2b0b      	cmp	r3, #11
 800156c:	dc02      	bgt.n	8001574 <drawPlayers+0x120>
 800156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001570:	3301      	adds	r3, #1
 8001572:	e000      	b.n	8001576 <drawPlayers+0x122>
 8001574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001578:	2a0b      	cmp	r2, #11
 800157a:	dc02      	bgt.n	8001582 <drawPlayers+0x12e>
 800157c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800157e:	3201      	adds	r2, #1
 8001580:	e000      	b.n	8001584 <drawPlayers+0x130>
 8001582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001584:	f107 001c 	add.w	r0, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff f979 	bl	8000880 <Vector2_init>
				for(Vector2 index = minIndex;index.y<=maxIndex.y;index.y++,index.x=minIndex.x){
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001596:	e892 0003 	ldmia.w	r2, {r0, r1}
 800159a:	e883 0003 	stmia.w	r3, {r0, r1}
 800159e:	e035      	b.n	800160c <drawPlayers+0x1b8>
					for(;index.x<=maxIndex.x;index.x++){
						bool flag = false;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for(int j=0;j<count;j++){
 80015a6:	2300      	movs	r3, #0
 80015a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80015aa:	e012      	b.n	80015d2 <drawPlayers+0x17e>
							if(Equal(playerIndexs[j],index)){
 80015ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80015ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	cb0c      	ldmia	r3, {r2, r3}
 80015b6:	00c9      	lsls	r1, r1, #3
 80015b8:	4401      	add	r1, r0
 80015ba:	c903      	ldmia	r1, {r0, r1}
 80015bc:	f7ff fa17 	bl	80009ee <Equal>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <drawPlayers+0x178>
								flag =true;
 80015c6:	2301      	movs	r3, #1
 80015c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for(int j=0;j<count;j++){
 80015cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ce:	3301      	adds	r3, #1
 80015d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80015d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbe8      	blt.n	80015ac <drawPlayers+0x158>
							}
						}
					if(!flag){
 80015da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015de:	f083 0301 	eor.w	r3, r3, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <drawPlayers+0x1a0>
						drawCell(index);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015f0:	f000 f854 	bl	800169c <drawCell>
					for(;index.x<=maxIndex.x;index.x++){
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3301      	adds	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	429a      	cmp	r2, r3
 8001600:	ddce      	ble.n	80015a0 <drawPlayers+0x14c>
				for(Vector2 index = minIndex;index.y<=maxIndex.y;index.y++,index.x=minIndex.x){
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	3301      	adds	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	429a      	cmp	r2, r3
 8001612:	ddf2      	ble.n	80015fa <drawPlayers+0x1a6>
					}

				}
			}
			if(!player->immortalFlag||delta>BLINK_PERIOD/2){
 8001614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800161a:	f083 0301 	eor.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d103      	bne.n	800162c <drawPlayers+0x1d8>
 8001624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001626:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800162a:	dd1c      	ble.n	8001666 <drawPlayers+0x212>

				MapCell* cell= getCell(playerIndexs[i]);
 800162c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800162e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4413      	add	r3, r2
 8001634:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001638:	f000 fb2c 	bl	8001c94 <getCell>
 800163c:	6378      	str	r0, [r7, #52]	; 0x34
				if(cell->objType == BombObject)
 800163e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001640:	7e1b      	ldrb	r3, [r3, #24]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d107      	bne.n	8001656 <drawPlayers+0x202>
					DrawImage(&cell->floor,player->imgPtr2);
 8001646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800164a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164c:	4619      	mov	r1, r3
 800164e:	4610      	mov	r0, r2
 8001650:	f7ff fb38 	bl	8000cc4 <DrawImage>
			if(!player->immortalFlag||delta>BLINK_PERIOD/2){
 8001654:	e00f      	b.n	8001676 <drawPlayers+0x222>
				else
					DrawImage(&cell->floor,player->imgPtr1);
 8001656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800165a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165c:	4619      	mov	r1, r3
 800165e:	4610      	mov	r0, r2
 8001660:	f7ff fb30 	bl	8000cc4 <DrawImage>
			if(!player->immortalFlag||delta>BLINK_PERIOD/2){
 8001664:	e007      	b.n	8001676 <drawPlayers+0x222>
			}
			else{
				drawCell(playerIndexs[i]);
 8001666:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	4413      	add	r3, r2
 800166e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001672:	f000 f813 	bl	800169c <drawCell>
	for(int i=0;i<count;i++){
 8001676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001678:	3301      	adds	r3, #1
 800167a:	653b      	str	r3, [r7, #80]	; 0x50
 800167c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	429a      	cmp	r2, r3
 8001682:	f6ff af37 	blt.w	80014f4 <drawPlayers+0xa0>
 8001686:	46b5      	mov	sp, r6
			}
		}
	}
	/**/
}
 8001688:	bf00      	nop
 800168a:	375c      	adds	r7, #92	; 0x5c
 800168c:	46bd      	mov	sp, r7
 800168e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001692:	bf00      	nop
 8001694:	20002410 	.word	0x20002410
 8001698:	5d9f7391 	.word	0x5d9f7391

0800169c <drawCell>:
//Transform End

//Map Cell Start
void drawCell(Vector2 index){
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	463b      	mov	r3, r7
 80016a4:	e883 0003 	stmia.w	r3, {r0, r1}
	MapCell* cell = getCell(index);
 80016a8:	463b      	mov	r3, r7
 80016aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016ae:	f000 faf1 	bl	8001c94 <getCell>
 80016b2:	60f8      	str	r0, [r7, #12]
	switch(cell->objType){
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	7e1b      	ldrb	r3, [r3, #24]
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d854      	bhi.n	8001766 <drawCell+0xca>
 80016bc:	a201      	add	r2, pc, #4	; (adr r2, 80016c4 <drawCell+0x28>)
 80016be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c2:	bf00      	nop
 80016c4:	080016e9 	.word	0x080016e9
 80016c8:	08001713 	.word	0x08001713
 80016cc:	08001721 	.word	0x08001721
 80016d0:	080016f5 	.word	0x080016f5
 80016d4:	08001703 	.word	0x08001703
 80016d8:	08001759 	.word	0x08001759
 80016dc:	0800173d 	.word	0x0800173d
 80016e0:	0800174b 	.word	0x0800174b
 80016e4:	0800172f 	.word	0x0800172f
		case None:
			DrawImage(&cell->floor,&grassImage);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4921      	ldr	r1, [pc, #132]	; (8001770 <drawCell+0xd4>)
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fae9 	bl	8000cc4 <DrawImage>
			break;
 80016f2:	e038      	b.n	8001766 <drawCell+0xca>
		case BombObject:
			DrawImage(cell->objTrans,&bombImage);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	491e      	ldr	r1, [pc, #120]	; (8001774 <drawCell+0xd8>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fae2 	bl	8000cc4 <DrawImage>
			break;
 8001700:	e031      	b.n	8001766 <drawCell+0xca>
		case DetonateEffectObject:
			Draw(cell->objTrans,ORANGE);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f64f 5120 	movw	r1, #64800	; 0xfd20
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fab1 	bl	8000c72 <Draw>
			break;
 8001710:	e029      	b.n	8001766 <drawCell+0xca>
		case UnbreakableWall:
			DrawImage(cell->objTrans,&wallImage1);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	4918      	ldr	r1, [pc, #96]	; (8001778 <drawCell+0xdc>)
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fad3 	bl	8000cc4 <DrawImage>
			break;
 800171e:	e022      	b.n	8001766 <drawCell+0xca>
		case BreakableWall:
			DrawImage(cell->objTrans,&wallImage2);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	4915      	ldr	r1, [pc, #84]	; (800177c <drawCell+0xe0>)
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff facc 	bl	8000cc4 <DrawImage>
			break;
 800172c:	e01b      	b.n	8001766 <drawCell+0xca>
		case HealthItem:
			DrawImage(cell->objTrans,&heartImage);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	4913      	ldr	r1, [pc, #76]	; (8001780 <drawCell+0xe4>)
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fac5 	bl	8000cc4 <DrawImage>
			break;
 800173a:	e014      	b.n	8001766 <drawCell+0xca>
		case BombAmountItem:
			DrawImage(cell->objTrans,&addBombImage);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	4910      	ldr	r1, [pc, #64]	; (8001784 <drawCell+0xe8>)
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fabe 	bl	8000cc4 <DrawImage>
			break;
 8001748:	e00d      	b.n	8001766 <drawCell+0xca>
		case BombRangeItem:
			DrawImage(cell->objTrans,&potionImage);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	490e      	ldr	r1, [pc, #56]	; (8001788 <drawCell+0xec>)
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fab7 	bl	8000cc4 <DrawImage>
			break;
 8001756:	e006      	b.n	8001766 <drawCell+0xca>
		case SpeedItem:
			DrawImage(cell->objTrans,&bootImage);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	490b      	ldr	r1, [pc, #44]	; (800178c <drawCell+0xf0>)
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fab0 	bl	8000cc4 <DrawImage>
			break;
 8001764:	bf00      	nop
	}
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	0800dac4 	.word	0x0800dac4
 8001774:	0800dcc4 	.word	0x0800dcc4
 8001778:	0800e4c4 	.word	0x0800e4c4
 800177c:	0800e6c4 	.word	0x0800e6c4
 8001780:	0800e0c4 	.word	0x0800e0c4
 8001784:	0800e8c4 	.word	0x0800e8c4
 8001788:	0800e2c4 	.word	0x0800e2c4
 800178c:	0800dec4 	.word	0x0800dec4

08001790 <setMap>:
void setMap(){
 8001790:	b580      	push	{r7, lr}
 8001792:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8001796:	af00      	add	r7, sp, #0
	int template[MAP_HEIGHT][MAP_WIDTH] ={
 8001798:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800179c:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80017a0:	4a35      	ldr	r2, [pc, #212]	; (8001878 <setMap+0xe8>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	4611      	mov	r1, r2
 80017a6:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 80017aa:	461a      	mov	r2, r3
 80017ac:	f009 f856 	bl	800a85c <memcpy>
			{2,1,0,1,0,1,0,1,0,1,0,1,2},
			{2,2,2,2,2,2,2,2,2,2,2,2,2},
			{0,1,0,1,0,1,0,1,0,1,0,1,0},
			{0,0,2,2,2,2,2,2,2,2,2,0,0},
	};
	for(int i = 0;i<mapSize.y;i++){
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 80017b6:	e052      	b.n	800185e <setMap+0xce>
		for(int j=0;j<mapSize.x;j++){
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 80017be:	e043      	b.n	8001848 <setMap+0xb8>
			Vector2 index = Vector2_init(j,i);
 80017c0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80017c4:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80017c8:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 80017cc:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff f855 	bl	8000880 <Vector2_init>
			if(template[i][j]){
 80017d6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80017da:	f5a3 712b 	sub.w	r1, r3, #684	; 0x2ac
 80017de:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 80017f0:	4413      	add	r3, r2
 80017f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d019      	beq.n	800182e <setMap+0x9e>
				setObject(index,(ObjectType)template[i][j],NULL);
 80017fa:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80017fe:	f5a3 712b 	sub.w	r1, r3, #684	; 0x2ac
 8001802:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8001814:	4413      	add	r3, r2
 8001816:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001820:	f5a3 712d 	sub.w	r1, r3, #692	; 0x2b4
 8001824:	2300      	movs	r3, #0
 8001826:	c903      	ldmia	r1, {r0, r1}
 8001828:	f000 f82a 	bl	8001880 <setObject>
 800182c:	e007      	b.n	800183e <setMap+0xae>
			}
			else{
				drawCell(index);
 800182e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001832:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001836:	e893 0003 	ldmia.w	r3, {r0, r1}
 800183a:	f7ff ff2f 	bl	800169c <drawCell>
		for(int j=0;j<mapSize.x;j++){
 800183e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001842:	3301      	adds	r3, #1
 8001844:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <setMap+0xec>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8001850:	429a      	cmp	r2, r3
 8001852:	dbb5      	blt.n	80017c0 <setMap+0x30>
	for(int i = 0;i<mapSize.y;i++){
 8001854:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8001858:	3301      	adds	r3, #1
 800185a:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <setMap+0xec>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8001866:	429a      	cmp	r2, r3
 8001868:	dba6      	blt.n	80017b8 <setMap+0x28>
			}
		}
	}
}
 800186a:	bf00      	nop
 800186c:	bf00      	nop
 800186e:	f507 772e 	add.w	r7, r7, #696	; 0x2b8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	0800c7d4 	.word	0x0800c7d4
 800187c:	20000008 	.word	0x20000008

08001880 <setObject>:
void setObject(Vector2 index,ObjectType type,Player* player){
 8001880:	b5b0      	push	{r4, r5, r7, lr}
 8001882:	b09a      	sub	sp, #104	; 0x68
 8001884:	af02      	add	r7, sp, #8
 8001886:	f107 0420 	add.w	r4, r7, #32
 800188a:	e884 0003 	stmia.w	r4, {r0, r1}
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	4613      	mov	r3, r2
 8001892:	77fb      	strb	r3, [r7, #31]
	clearObject(index,false);
 8001894:	2200      	movs	r2, #0
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800189e:	f000 f911 	bl	8001ac4 <clearObject>
	MapCell *cell =&map[index.y][index.x];
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	6a39      	ldr	r1, [r7, #32]
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	015b      	lsls	r3, r3, #5
 80018b4:	4a7e      	ldr	r2, [pc, #504]	; (8001ab0 <setObject+0x230>)
 80018b6:	4413      	add	r3, r2
 80018b8:	65fb      	str	r3, [r7, #92]	; 0x5c
	switch(type){
 80018ba:	7ffb      	ldrb	r3, [r7, #31]
 80018bc:	2b08      	cmp	r3, #8
 80018be:	f200 80ea 	bhi.w	8001a96 <setObject+0x216>
 80018c2:	a201      	add	r2, pc, #4	; (adr r2, 80018c8 <setObject+0x48>)
 80018c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c8:	08001a97 	.word	0x08001a97
 80018cc:	08001a07 	.word	0x08001a07
 80018d0:	08001a07 	.word	0x08001a07
 80018d4:	080018ed 	.word	0x080018ed
 80018d8:	08001983 	.word	0x08001983
 80018dc:	08001a4f 	.word	0x08001a4f
 80018e0:	08001a4f 	.word	0x08001a4f
 80018e4:	08001a4f 	.word	0x08001a4f
 80018e8:	08001a4f 	.word	0x08001a4f
		case None: break;
		case BombObject:
			player->currentUseBomb++;
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
			Bomb* bomb = malloc(sizeof(Bomb));
 80018f6:	2014      	movs	r0, #20
 80018f8:	f008 fbe0 	bl	800a0bc <malloc>
 80018fc:	4603      	mov	r3, r0
 80018fe:	653b      	str	r3, [r7, #80]	; 0x50
			bomb->index = index;
 8001900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001902:	461a      	mov	r2, r3
 8001904:	f107 0320 	add.w	r3, r7, #32
 8001908:	e893 0003 	ldmia.w	r3, {r0, r1}
 800190c:	e882 0003 	stmia.w	r2, {r0, r1}
			bomb->range = player->bombRange;
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	6a1a      	ldr	r2, [r3, #32]
 8001914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001916:	60da      	str	r2, [r3, #12]
			bomb->detonateTime = TimeTotal+BOMB_DELAY;
 8001918:	4b66      	ldr	r3, [pc, #408]	; (8001ab4 <setObject+0x234>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f603 32b8 	addw	r2, r3, #3000	; 0xbb8
 8001920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001922:	609a      	str	r2, [r3, #8]
			bomb->player = player;
 8001924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	611a      	str	r2, [r3, #16]
			QueueElement* element1 = enqueue(&bombs,(void*)bomb);
 800192a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800192c:	4862      	ldr	r0, [pc, #392]	; (8001ab8 <setObject+0x238>)
 800192e:	f003 f9e6 	bl	8004cfe <enqueue>
 8001932:	64f8      	str	r0, [r7, #76]	; 0x4c
			cell->objPtr = (void*)element1;
 8001934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001936:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001938:	61da      	str	r2, [r3, #28]
			cell->objTrans = malloc(sizeof(Transform));
 800193a:	2014      	movs	r0, #20
 800193c:	f008 fbbe 	bl	800a0bc <malloc>
 8001940:	4603      	mov	r3, r0
 8001942:	461a      	mov	r2, r3
 8001944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001946:	615a      	str	r2, [r3, #20]
			*cell->objTrans = Transform_init(toPosition(index),cellSize,MiddleCenter);
 8001948:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800194c:	f107 0320 	add.w	r3, r7, #32
 8001950:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001954:	f7ff f8aa 	bl	8000aac <toPosition>
 8001958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800195a:	695c      	ldr	r4, [r3, #20]
 800195c:	4638      	mov	r0, r7
 800195e:	4b57      	ldr	r3, [pc, #348]	; (8001abc <setObject+0x23c>)
 8001960:	2204      	movs	r2, #4
 8001962:	9201      	str	r2, [sp, #4]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	9200      	str	r2, [sp, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800196e:	ca06      	ldmia	r2, {r1, r2}
 8001970:	f7ff f8bc 	bl	8000aec <Transform_init>
 8001974:	4625      	mov	r5, r4
 8001976:	463c      	mov	r4, r7
 8001978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800197c:	6823      	ldr	r3, [r4, #0]
 800197e:	602b      	str	r3, [r5, #0]
			break;
 8001980:	e089      	b.n	8001a96 <setObject+0x216>
		case DetonateEffectObject:
			DetonateEffect* detonateEffect = malloc(sizeof(DetonateEffect));
 8001982:	2010      	movs	r0, #16
 8001984:	f008 fb9a 	bl	800a0bc <malloc>
 8001988:	4603      	mov	r3, r0
 800198a:	65bb      	str	r3, [r7, #88]	; 0x58
			detonateEffect->index = index;
 800198c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800198e:	461a      	mov	r2, r3
 8001990:	f107 0320 	add.w	r3, r7, #32
 8001994:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001998:	e882 0003 	stmia.w	r2, {r0, r1}
			detonateEffect->deconstructTime = TimeTotal+DETONATE_DURATION;
 800199c:	4b45      	ldr	r3, [pc, #276]	; (8001ab4 <setObject+0x234>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80019a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019a6:	609a      	str	r2, [r3, #8]
			detonateEffect->drop = cell->objType;
 80019a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019aa:	7e1a      	ldrb	r2, [r3, #24]
 80019ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019ae:	731a      	strb	r2, [r3, #12]
			QueueElement* element2 = enqueue(&detonateEffects,(void*)detonateEffect);
 80019b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80019b2:	4843      	ldr	r0, [pc, #268]	; (8001ac0 <setObject+0x240>)
 80019b4:	f003 f9a3 	bl	8004cfe <enqueue>
 80019b8:	6578      	str	r0, [r7, #84]	; 0x54
			cell->objPtr = (void*)element2;
 80019ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019be:	61da      	str	r2, [r3, #28]
			cell->objTrans = malloc(sizeof(Transform));
 80019c0:	2014      	movs	r0, #20
 80019c2:	f008 fb7b 	bl	800a0bc <malloc>
 80019c6:	4603      	mov	r3, r0
 80019c8:	461a      	mov	r2, r3
 80019ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019cc:	615a      	str	r2, [r3, #20]
			*cell->objTrans = Transform_init(toPosition(index),cellSize,MiddleCenter);
 80019ce:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80019d2:	f107 0320 	add.w	r3, r7, #32
 80019d6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80019da:	f7ff f867 	bl	8000aac <toPosition>
 80019de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019e0:	695c      	ldr	r4, [r3, #20]
 80019e2:	4638      	mov	r0, r7
 80019e4:	4b35      	ldr	r3, [pc, #212]	; (8001abc <setObject+0x23c>)
 80019e6:	2204      	movs	r2, #4
 80019e8:	9201      	str	r2, [sp, #4]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	9200      	str	r2, [sp, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80019f4:	ca06      	ldmia	r2, {r1, r2}
 80019f6:	f7ff f879 	bl	8000aec <Transform_init>
 80019fa:	4625      	mov	r5, r4
 80019fc:	463c      	mov	r4, r7
 80019fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a02:	6823      	ldr	r3, [r4, #0]
 8001a04:	602b      	str	r3, [r5, #0]
		case UnbreakableWall:
		case BreakableWall :
			cell->objTrans = malloc(sizeof(Transform));
 8001a06:	2014      	movs	r0, #20
 8001a08:	f008 fb58 	bl	800a0bc <malloc>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a12:	615a      	str	r2, [r3, #20]
			*cell->objTrans = Transform_init(toPosition(index),cellSize,MiddleCenter);
 8001a14:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001a18:	f107 0320 	add.w	r3, r7, #32
 8001a1c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001a20:	f7ff f844 	bl	8000aac <toPosition>
 8001a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a26:	695c      	ldr	r4, [r3, #20]
 8001a28:	4638      	mov	r0, r7
 8001a2a:	4b24      	ldr	r3, [pc, #144]	; (8001abc <setObject+0x23c>)
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	9201      	str	r2, [sp, #4]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	9200      	str	r2, [sp, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a3a:	ca06      	ldmia	r2, {r1, r2}
 8001a3c:	f7ff f856 	bl	8000aec <Transform_init>
 8001a40:	4625      	mov	r5, r4
 8001a42:	463c      	mov	r4, r7
 8001a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	602b      	str	r3, [r5, #0]
			break;
 8001a4c:	e023      	b.n	8001a96 <setObject+0x216>
		case SpeedItem:
		case BombAmountItem:
		case BombRangeItem:
		case HealthItem :
			cell->objTrans = malloc(sizeof(Transform));
 8001a4e:	2014      	movs	r0, #20
 8001a50:	f008 fb34 	bl	800a0bc <malloc>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a5a:	615a      	str	r2, [r3, #20]
			*cell->objTrans = Transform_init(toPosition(index),cellSize,MiddleCenter);
 8001a5c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001a60:	f107 0320 	add.w	r3, r7, #32
 8001a64:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001a68:	f7ff f820 	bl	8000aac <toPosition>
 8001a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a6e:	695c      	ldr	r4, [r3, #20]
 8001a70:	4638      	mov	r0, r7
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <setObject+0x23c>)
 8001a74:	2204      	movs	r2, #4
 8001a76:	9201      	str	r2, [sp, #4]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	9200      	str	r2, [sp, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001a82:	ca06      	ldmia	r2, {r1, r2}
 8001a84:	f7ff f832 	bl	8000aec <Transform_init>
 8001a88:	4625      	mov	r5, r4
 8001a8a:	463c      	mov	r4, r7
 8001a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	602b      	str	r3, [r5, #0]
			break;
 8001a94:	bf00      	nop
	}
	cell->objType = type;
 8001a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a98:	7ffa      	ldrb	r2, [r7, #31]
 8001a9a:	761a      	strb	r2, [r3, #24]
	drawCell(index);
 8001a9c:	f107 0320 	add.w	r3, r7, #32
 8001aa0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001aa4:	f7ff fdfa 	bl	800169c <drawCell>
}
 8001aa8:	bf00      	nop
 8001aaa:	3760      	adds	r7, #96	; 0x60
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab0:	20000ef0 	.word	0x20000ef0
 8001ab4:	20002410 	.word	0x20002410
 8001ab8:	2000241c 	.word	0x2000241c
 8001abc:	20000010 	.word	0x20000010
 8001ac0:	20002428 	.word	0x20002428

08001ac4 <clearObject>:
void clearObject(Vector2 index,bool redrawFlag){
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b090      	sub	sp, #64	; 0x40
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	e883 0003 	stmia.w	r3, {r0, r1}
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	71fb      	strb	r3, [r7, #7]
	MapCell *cell =&map[index.y][index.x];
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	015b      	lsls	r3, r3, #5
 8001ae8:	4a4d      	ldr	r2, [pc, #308]	; (8001c20 <clearObject+0x15c>)
 8001aea:	4413      	add	r3, r2
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
	if(cell->objType != None){
 8001aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af0:	7e1b      	ldrb	r3, [r3, #24]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 808f 	beq.w	8001c16 <clearObject+0x152>
		Transform* objTrans = cell->objTrans;
 8001af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	633b      	str	r3, [r7, #48]	; 0x30
		void* objPtr = cell->objPtr;
 8001afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
		ObjectType objType = cell->objType;
 8001b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b06:	7e1b      	ldrb	r3, [r3, #24]
 8001b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		cell->objTrans = NULL;
 8001b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
		cell->objPtr = NULL;
 8001b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
		cell->objType = None;
 8001b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	761a      	strb	r2, [r3, #24]
		switch(objType){
 8001b1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d012      	beq.n	8001b4c <clearObject+0x88>
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	dc5f      	bgt.n	8001bea <clearObject+0x126>
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d020      	beq.n	8001b70 <clearObject+0xac>
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d15b      	bne.n	8001bea <clearObject+0x126>
			case BombObject:
				QueueElement* element=(QueueElement*)objPtr;
 8001b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
				((Bomb*)element->value)->player->currentUseBomb--;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b3e:	3a01      	subs	r2, #1
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24
				DeleteQueueElement(&bombs,element);
 8001b42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b44:	4837      	ldr	r0, [pc, #220]	; (8001c24 <clearObject+0x160>)
 8001b46:	f003 f8a1 	bl	8004c8c <DeleteQueueElement>
				break;
 8001b4a:	e058      	b.n	8001bfe <clearObject+0x13a>
			case DetonateEffectObject:
				ObjectType drop = ((DetonateEffect*)((QueueElement*)objPtr)->value)->drop;
 8001b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	7b1b      	ldrb	r3, [r3, #12]
 8001b52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				DeleteQueueElement(&detonateEffects,(QueueElement*)objPtr);
 8001b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b58:	4833      	ldr	r0, [pc, #204]	; (8001c28 <clearObject+0x164>)
 8001b5a:	f003 f897 	bl	8004c8c <DeleteQueueElement>
				setObject(index,drop,NULL);
 8001b5e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001b62:	2300      	movs	r3, #0
 8001b64:	f107 0108 	add.w	r1, r7, #8
 8001b68:	c903      	ldmia	r1, {r0, r1}
 8001b6a:	f7ff fe89 	bl	8001880 <setObject>
				break;
 8001b6e:	e046      	b.n	8001bfe <clearObject+0x13a>
			case BreakableWall:
				int random = (int)rand()%100;
 8001b70:	f008 fd3e 	bl	800a5f0 <rand>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4a2d      	ldr	r2, [pc, #180]	; (8001c2c <clearObject+0x168>)
 8001b78:	fb82 1203 	smull	r1, r2, r2, r3
 8001b7c:	1151      	asrs	r1, r2, #5
 8001b7e:	17da      	asrs	r2, r3, #31
 8001b80:	1a8a      	subs	r2, r1, r2
 8001b82:	2164      	movs	r1, #100	; 0x64
 8001b84:	fb01 f202 	mul.w	r2, r1, r2
 8001b88:	1a9b      	subs	r3, r3, r2
 8001b8a:	623b      	str	r3, [r7, #32]
				if(random<=ITEM_DROP_CHANCE){
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	2b3c      	cmp	r3, #60	; 0x3c
 8001b90:	dc32      	bgt.n	8001bf8 <clearObject+0x134>
					int dropItemCount = 4;
 8001b92:	2304      	movs	r3, #4
 8001b94:	61fb      	str	r3, [r7, #28]
					int range=ITEM_DROP_CHANCE/dropItemCount, mxRange=range;
 8001b96:	223c      	movs	r2, #60	; 0x3c
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b9e:	61bb      	str	r3, [r7, #24]
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
					ObjectType itemDropTypes[]={
 8001ba4:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <clearObject+0x16c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	617b      	str	r3, [r7, #20]
							SpeedItem,
							BombAmountItem,
							BombRangeItem,
							HealthItem,
					};
					for(int i=0;i<dropItemCount;i++,mxRange+=range){
 8001baa:	2300      	movs	r3, #0
 8001bac:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bae:	e017      	b.n	8001be0 <clearObject+0x11c>
						if(random<=mxRange){
 8001bb0:	6a3a      	ldr	r2, [r7, #32]
 8001bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	dc0c      	bgt.n	8001bd2 <clearObject+0x10e>
							setObject(index,itemDropTypes[i],NULL);
 8001bb8:	f107 0214 	add.w	r2, r7, #20
 8001bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f107 0108 	add.w	r1, r7, #8
 8001bc8:	c903      	ldmia	r1, {r0, r1}
 8001bca:	f7ff fe59 	bl	8001880 <setObject>
							break;
 8001bce:	bf00      	nop
						}
					}
				}
				break;
 8001bd0:	e012      	b.n	8001bf8 <clearObject+0x134>
					for(int i=0;i<dropItemCount;i++,mxRange+=range){
 8001bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	4413      	add	r3, r2
 8001bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dbe3      	blt.n	8001bb0 <clearObject+0xec>
				break;
 8001be8:	e006      	b.n	8001bf8 <clearObject+0x134>
			default:
				if(objPtr != NULL)
 8001bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <clearObject+0x138>
					free(objPtr);
 8001bf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bf2:	f008 fa6b 	bl	800a0cc <free>
				break;
 8001bf6:	e001      	b.n	8001bfc <clearObject+0x138>
				break;
 8001bf8:	bf00      	nop
 8001bfa:	e000      	b.n	8001bfe <clearObject+0x13a>
				break;
 8001bfc:	bf00      	nop
		}
		free(objTrans);
 8001bfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c00:	f008 fa64 	bl	800a0cc <free>

		if(redrawFlag)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <clearObject+0x152>
			drawCell(index);
 8001c0a:	f107 0308 	add.w	r3, r7, #8
 8001c0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c12:	f7ff fd43 	bl	800169c <drawCell>
	}
}
 8001c16:	bf00      	nop
 8001c18:	3740      	adds	r7, #64	; 0x40
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000ef0 	.word	0x20000ef0
 8001c24:	2000241c 	.word	0x2000241c
 8001c28:	20002428 	.word	0x20002428
 8001c2c:	51eb851f 	.word	0x51eb851f
 8001c30:	0800ca78 	.word	0x0800ca78

08001c34 <placeBomb>:
placeBomb(Player* player){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	if(player!= NULL && getCell(getPlayerIndex(player))->objType != BombObject&&player->currentUseBomb<player->maxBombCount){
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d022      	beq.n	8001c88 <placeBomb+0x54>
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 f95d 	bl	8001f08 <getPlayerIndex>
 8001c4e:	f107 0308 	add.w	r3, r7, #8
 8001c52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c56:	f000 f81d 	bl	8001c94 <getCell>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	7e1b      	ldrb	r3, [r3, #24]
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d012      	beq.n	8001c88 <placeBomb+0x54>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	da0c      	bge.n	8001c88 <placeBomb+0x54>
		setObject(getPlayerIndex(player),BombObject,player);
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 f947 	bl	8001f08 <getPlayerIndex>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	f107 0110 	add.w	r1, r7, #16
 8001c82:	c903      	ldmia	r1, {r0, r1}
 8001c84:	f7ff fdfc 	bl	8001880 <setObject>
	}
}
 8001c88:	bf00      	nop
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <getCell>:
MapCell* getCell(Vector2 index){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	e883 0003 	stmia.w	r3, {r0, r1}
	if(inBetween(0,index.x,mapSize.x-1)&&inBetween(0,index.y,mapSize.y-1)){
 8001ca0:	6839      	ldr	r1, [r7, #0]
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <getCell+0x5c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2000      	movs	r0, #0
 8001cac:	f002 ffbd 	bl	8004c2a <inBetween>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d016      	beq.n	8001ce4 <getCell+0x50>
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <getCell+0x5c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f002 ffb2 	bl	8004c2a <inBetween>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00b      	beq.n	8001ce4 <getCell+0x50>
		return &map[index.y][index.x];
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6839      	ldr	r1, [r7, #0]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	015b      	lsls	r3, r3, #5
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <getCell+0x60>)
 8001ce0:	4413      	add	r3, r2
 8001ce2:	e000      	b.n	8001ce6 <getCell+0x52>
	}
	else{
		return NULL;
 8001ce4:	2300      	movs	r3, #0
	}
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000008 	.word	0x20000008
 8001cf4:	20000ef0 	.word	0x20000ef0

08001cf8 <detonate>:
detonate(Bomb* bomb){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b090      	sub	sp, #64	; 0x40
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	60f8      	str	r0, [r7, #12]
	if(bomb == NULL)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 80a9 	beq.w	8001e5a <detonate+0x162>
		return;
	int range = bomb->range;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
	Vector2 startIndex = bomb->index;
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	f107 0320 	add.w	r3, r7, #32
 8001d14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d18:	e883 0003 	stmia.w	r3, {r0, r1}
	Vector2 index = startIndex;
 8001d1c:	f107 0318 	add.w	r3, r7, #24
 8001d20:	f107 0220 	add.w	r2, r7, #32
 8001d24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d28:	e883 0003 	stmia.w	r3, {r0, r1}
	setObject(startIndex,DetonateEffectObject,NULL);
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2204      	movs	r2, #4
 8001d30:	f107 0120 	add.w	r1, r7, #32
 8001d34:	c903      	ldmia	r1, {r0, r1}
 8001d36:	f7ff fda3 	bl	8001880 <setObject>
	for(int i=0;i<4;i++){
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d3e:	e087      	b.n	8001e50 <detonate+0x158>
		index = startIndex;
 8001d40:	f107 0318 	add.w	r3, r7, #24
 8001d44:	f107 0220 	add.w	r2, r7, #32
 8001d48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d4c:	e883 0003 	stmia.w	r3, {r0, r1}
		Vector2 increment = Vector2_init(i&0b10?(i&0b1?1:-1):0,i&0b10?0:(i&0b1?1:-1));
 8001d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d009      	beq.n	8001d6e <detonate+0x76>
 8001d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <detonate+0x70>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e003      	b.n	8001d70 <detonate+0x78>
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d6c:	e000      	b.n	8001d70 <detonate+0x78>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d72:	f002 0202 	and.w	r2, r2, #2
 8001d76:	2a00      	cmp	r2, #0
 8001d78:	d109      	bne.n	8001d8e <detonate+0x96>
 8001d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d7c:	f002 0201 	and.w	r2, r2, #1
 8001d80:	2a00      	cmp	r2, #0
 8001d82:	d001      	beq.n	8001d88 <detonate+0x90>
 8001d84:	2201      	movs	r2, #1
 8001d86:	e003      	b.n	8001d90 <detonate+0x98>
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d8c:	e000      	b.n	8001d90 <detonate+0x98>
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f107 0010 	add.w	r0, r7, #16
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7fe fd73 	bl	8000880 <Vector2_init>
		index = Add(index,increment);
 8001d9a:	f107 0018 	add.w	r0, r7, #24
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	f107 0218 	add.w	r2, r7, #24
 8001da8:	ca06      	ldmia	r2, {r1, r2}
 8001daa:	f7fe fd81 	bl	80008b0 <Add>
		MapCell* cell = getCell(index);
 8001dae:	f107 0318 	add.w	r3, r7, #24
 8001db2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001db6:	f7ff ff6d 	bl	8001c94 <getCell>
 8001dba:	6338      	str	r0, [r7, #48]	; 0x30
		for(int j=0;j<range&&cell!=NULL;j++,index=Add(index,increment),cell = getCell(index)){
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc0:	e03c      	b.n	8001e3c <detonate+0x144>
			switch(cell->objType){
 8001dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc4:	7e1b      	ldrb	r3, [r3, #24]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d00f      	beq.n	8001dea <detonate+0xf2>
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	dc14      	bgt.n	8001df8 <detonate+0x100>
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d008      	beq.n	8001de4 <detonate+0xec>
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d110      	bne.n	8001df8 <detonate+0x100>
				case BreakableWall:
					setObject(index ,DetonateEffectObject,NULL);
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	2204      	movs	r2, #4
 8001dda:	f107 0118 	add.w	r1, r7, #24
 8001dde:	c903      	ldmia	r1, {r0, r1}
 8001de0:	f7ff fd4e 	bl	8001880 <setObject>
				case UnbreakableWall:
					j=range;
 8001de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
					break;
 8001de8:	e00e      	b.n	8001e08 <detonate+0x110>
				case BombObject:
					detonate((Bomb*)((QueueElement*)cell->objPtr)->value);
 8001dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff81 	bl	8001cf8 <detonate>
					break;
 8001df6:	e007      	b.n	8001e08 <detonate+0x110>
				default:
					setObject(index ,DetonateEffectObject,NULL);
 8001df8:	2300      	movs	r3, #0
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	f107 0118 	add.w	r1, r7, #24
 8001e00:	c903      	ldmia	r1, {r0, r1}
 8001e02:	f7ff fd3d 	bl	8001880 <setObject>
					break;
 8001e06:	bf00      	nop
		for(int j=0;j<range&&cell!=NULL;j++,index=Add(index,increment),cell = getCell(index)){
 8001e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e0e:	4638      	mov	r0, r7
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	f107 0218 	add.w	r2, r7, #24
 8001e1a:	ca06      	ldmia	r2, {r1, r2}
 8001e1c:	f7fe fd48 	bl	80008b0 <Add>
 8001e20:	f107 0318 	add.w	r3, r7, #24
 8001e24:	463a      	mov	r2, r7
 8001e26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e2e:	f107 0318 	add.w	r3, r7, #24
 8001e32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e36:	f7ff ff2d 	bl	8001c94 <getCell>
 8001e3a:	6338      	str	r0, [r7, #48]	; 0x30
 8001e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e40:	429a      	cmp	r2, r3
 8001e42:	da02      	bge.n	8001e4a <detonate+0x152>
 8001e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1bb      	bne.n	8001dc2 <detonate+0xca>
	for(int i=0;i<4;i++){
 8001e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	f77f af74 	ble.w	8001d40 <detonate+0x48>
 8001e58:	e000      	b.n	8001e5c <detonate+0x164>
		return;
 8001e5a:	bf00      	nop
			}
		}
	}
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3738      	adds	r7, #56	; 0x38
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <Player_init>:
//Map Cell End

//Player Start
Player Player_init(Vector2 index,char* imgPtr1,char* imgPtr2,bool botFlag){
 8001e64:	b5b0      	push	{r4, r5, r7, lr}
 8001e66:	b0a0      	sub	sp, #128	; 0x80
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	6278      	str	r0, [r7, #36]	; 0x24
 8001e6c:	f107 001c 	add.w	r0, r7, #28
 8001e70:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e74:	61bb      	str	r3, [r7, #24]

	Player player;
	player.transform = Transform_init(toPosition(index),Vector2_init(PLAYER_WIDTH,PLAYER_HEIGHT) ,MiddleCenter);
 8001e76:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001e82:	f7fe fe13 	bl	8000aac <toPosition>
 8001e86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e8a:	2205      	movs	r2, #5
 8001e8c:	2105      	movs	r1, #5
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fcf6 	bl	8000880 <Vector2_init>
 8001e94:	4638      	mov	r0, r7
 8001e96:	2304      	movs	r3, #4
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ea0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001ea4:	ca06      	ldmia	r2, {r1, r2}
 8001ea6:	f7fe fe21 	bl	8000aec <Transform_init>
 8001eaa:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001eae:	463d      	mov	r5, r7
 8001eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eb4:	682b      	ldr	r3, [r5, #0]
 8001eb6:	6023      	str	r3, [r4, #0]
	player.health = 2;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	63fb      	str	r3, [r7, #60]	; 0x3c
	player.speed =1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	643b      	str	r3, [r7, #64]	; 0x40
	player.maxBombCount = 1;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	647b      	str	r3, [r7, #68]	; 0x44
	player.bombRange =1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	64bb      	str	r3, [r7, #72]	; 0x48
	player.currentUseBomb =0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	64fb      	str	r3, [r7, #76]	; 0x4c
	player.deadFlag = false;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	player.imgPtr1 = imgPtr1;
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
	player.imgPtr2 = imgPtr2;
 8001ed6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001eda:	663b      	str	r3, [r7, #96]	; 0x60
	player.botFlag = botFlag;
 8001edc:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001ee0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	return player;
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	461d      	mov	r5, r3
 8001ee8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001efc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001f00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f02:	3778      	adds	r7, #120	; 0x78
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bdb0      	pop	{r4, r5, r7, pc}

08001f08 <getPlayerIndex>:
Vector2 getPlayerIndex(Player* player){
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
	return toIndex(player->transform.position);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f1a:	f7fe fda1 	bl	8000a60 <toIndex>
}
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <getIndexAtDirection>:
bool walkMap[MAP_HEIGHT][MAP_WIDTH];
int bombRangeMap[MAP_HEIGHT][MAP_WIDTH][4];
typedef enum DirectionEnum{
	Up,Down,Left,Right
}Direction;
Vector2 getIndexAtDirection(Vector2 index,Direction direction){
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b08a      	sub	sp, #40	; 0x28
 8001f2a:	af02      	add	r7, sp, #8
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	1d38      	adds	r0, r7, #4
 8001f30:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f34:	70fb      	strb	r3, [r7, #3]
	if(direction&0b10)
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d017      	beq.n	8001f70 <getIndexAtDirection+0x4a>
		return Add(index,Vector2_init(direction&0b1?1:-1,0));
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <getIndexAtDirection+0x28>
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	e001      	b.n	8001f52 <getIndexAtDirection+0x2c>
 8001f4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f52:	f107 0310 	add.w	r3, r7, #16
 8001f56:	2200      	movs	r2, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fc91 	bl	8000880 <Vector2_init>
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1d3a      	adds	r2, r7, #4
 8001f68:	ca06      	ldmia	r2, {r1, r2}
 8001f6a:	f7fe fca1 	bl	80008b0 <Add>
 8001f6e:	e016      	b.n	8001f9e <getIndexAtDirection+0x78>
	else
		return Add(index,Vector2_init(0,direction&0b1?1:-1));
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <getIndexAtDirection+0x58>
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	e001      	b.n	8001f82 <getIndexAtDirection+0x5c>
 8001f7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f82:	f107 0318 	add.w	r3, r7, #24
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fc79 	bl	8000880 <Vector2_init>
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	1d3a      	adds	r2, r7, #4
 8001f98:	ca06      	ldmia	r2, {r1, r2}
 8001f9a:	f7fe fc89 	bl	80008b0 <Add>
}
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	3720      	adds	r7, #32
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <updateMap>:
void updateMap(){
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b09f      	sub	sp, #124	; 0x7c
 8001fac:	af00      	add	r7, sp, #0
	for(Vector2 index = Vector2_init(0,0);index.y<MAP_HEIGHT;index.y++){
 8001fae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fc62 	bl	8000880 <Vector2_init>
 8001fbc:	e089      	b.n	80020d2 <updateMap+0x12a>
		for(index.x=0;index.x<MAP_WIDTH;index.x++){
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	653b      	str	r3, [r7, #80]	; 0x50
 8001fc2:	e07f      	b.n	80020c4 <updateMap+0x11c>
			bombRangeMap[index.y][index.x][Up]=0;
 8001fc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001fc8:	48a5      	ldr	r0, [pc, #660]	; (8002260 <updateMap+0x2b8>)
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	4403      	add	r3, r0
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
			bombRangeMap[index.y][index.x][Down]=0;
 8001fde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fe0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001fe2:	489f      	ldr	r0, [pc, #636]	; (8002260 <updateMap+0x2b8>)
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	440b      	add	r3, r1
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	4403      	add	r3, r0
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
			bombRangeMap[index.y][index.x][Left]=0;
 8001ffa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ffc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001ffe:	4898      	ldr	r0, [pc, #608]	; (8002260 <updateMap+0x2b8>)
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	440b      	add	r3, r1
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	4403      	add	r3, r0
 8002010:	3308      	adds	r3, #8
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
			bombRangeMap[index.y][index.x][Right]=0;
 8002016:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002018:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800201a:	4891      	ldr	r0, [pc, #580]	; (8002260 <updateMap+0x2b8>)
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	440b      	add	r3, r1
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	4403      	add	r3, r0
 800202c:	330c      	adds	r3, #12
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
			dangerMap[index.y][index.x] = false;
 8002032:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002034:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002036:	488b      	ldr	r0, [pc, #556]	; (8002264 <updateMap+0x2bc>)
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	4403      	add	r3, r0
 8002044:	440b      	add	r3, r1
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
			ObjectType type=getCell(index)->objType;
 800204a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800204e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002052:	f7ff fe1f 	bl	8001c94 <getCell>
 8002056:	4603      	mov	r3, r0
 8002058:	7e1b      	ldrb	r3, [r3, #24]
 800205a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			switch(type){
 800205e:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8002062:	2b03      	cmp	r3, #3
 8002064:	dc02      	bgt.n	800206c <updateMap+0xc4>
 8002066:	2b00      	cmp	r3, #0
 8002068:	dc03      	bgt.n	8002072 <updateMap+0xca>
 800206a:	e01b      	b.n	80020a4 <updateMap+0xfc>
 800206c:	2b04      	cmp	r3, #4
 800206e:	d00d      	beq.n	800208c <updateMap+0xe4>
 8002070:	e018      	b.n	80020a4 <updateMap+0xfc>
				case BreakableWall:
				case UnbreakableWall:
				case BombObject:
					walkMap[index.y][index.x]=true;
 8002072:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002074:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002076:	487c      	ldr	r0, [pc, #496]	; (8002268 <updateMap+0x2c0>)
 8002078:	4613      	mov	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	4403      	add	r3, r0
 8002084:	440b      	add	r3, r1
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
					break;
 800208a:	e018      	b.n	80020be <updateMap+0x116>
				case DetonateEffectObject:
					dangerMap[index.y][index.x]=true;
 800208c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800208e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002090:	4874      	ldr	r0, [pc, #464]	; (8002264 <updateMap+0x2bc>)
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	4403      	add	r3, r0
 800209e:	440b      	add	r3, r1
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
				default:
					walkMap[index.y][index.x]=false;
 80020a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80020a8:	486f      	ldr	r0, [pc, #444]	; (8002268 <updateMap+0x2c0>)
 80020aa:	4613      	mov	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	4403      	add	r3, r0
 80020b6:	440b      	add	r3, r1
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
					break;
 80020bc:	bf00      	nop
		for(index.x=0;index.x<MAP_WIDTH;index.x++){
 80020be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c0:	3301      	adds	r3, #1
 80020c2:	653b      	str	r3, [r7, #80]	; 0x50
 80020c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	f77f af7c 	ble.w	8001fc4 <updateMap+0x1c>
	for(Vector2 index = Vector2_init(0,0);index.y<MAP_HEIGHT;index.y++){
 80020cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ce:	3301      	adds	r3, #1
 80020d0:	657b      	str	r3, [r7, #84]	; 0x54
 80020d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d4:	2b0c      	cmp	r3, #12
 80020d6:	f77f af72 	ble.w	8001fbe <updateMap+0x16>
			}
		}
	}
	for(Vector2 index = Vector2_init(0,0);index.y+1<MAP_HEIGHT;index.y++){
 80020da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fbcc 	bl	8000880 <Vector2_init>
 80020e8:	e08f      	b.n	800220a <updateMap+0x262>
		for(index.x=0;index.x+1<MAP_WIDTH;index.x++){
 80020ea:	2300      	movs	r3, #0
 80020ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80020ee:	e085      	b.n	80021fc <updateMap+0x254>
			ObjectType type =getCell(index)->objType;
 80020f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020f8:	f7ff fdcc 	bl	8001c94 <getCell>
 80020fc:	4603      	mov	r3, r0
 80020fe:	7e1b      	ldrb	r3, [r3, #24]
 8002100:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			if(type == BreakableWall){
 8002104:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8002108:	2b02      	cmp	r3, #2
 800210a:	d11d      	bne.n	8002148 <updateMap+0x1a0>
				bombRangeMap[index.y][index.x+1][Left]=1;
 800210c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800210e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002110:	1c59      	adds	r1, r3, #1
 8002112:	4853      	ldr	r0, [pc, #332]	; (8002260 <updateMap+0x2b8>)
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	440b      	add	r3, r1
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	4403      	add	r3, r0
 8002124:	3308      	adds	r3, #8
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]
				bombRangeMap[index.y+1][index.x][Up]=1;
 800212a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002130:	484b      	ldr	r0, [pc, #300]	; (8002260 <updateMap+0x2b8>)
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	440b      	add	r3, r1
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	4403      	add	r3, r0
 8002142:	2201      	movs	r2, #1
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	e056      	b.n	80021f6 <updateMap+0x24e>
			}
			else if(type != UnbreakableWall){
 8002148:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800214c:	2b01      	cmp	r3, #1
 800214e:	d052      	beq.n	80021f6 <updateMap+0x24e>
				if(bombRangeMap[index.y][index.x][Left]>0){
 8002150:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002152:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002154:	4842      	ldr	r0, [pc, #264]	; (8002260 <updateMap+0x2b8>)
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	440b      	add	r3, r1
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	4403      	add	r3, r0
 8002166:	3308      	adds	r3, #8
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	dd1b      	ble.n	80021a6 <updateMap+0x1fe>
					bombRangeMap[index.y][index.x+1][Left]=bombRangeMap[index.y][index.x][Left]+1;
 800216e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002170:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002172:	483b      	ldr	r0, [pc, #236]	; (8002260 <updateMap+0x2b8>)
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	440b      	add	r3, r1
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	4403      	add	r3, r0
 8002184:	3308      	adds	r3, #8
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800218a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800218c:	1c48      	adds	r0, r1, #1
 800218e:	1c59      	adds	r1, r3, #1
 8002190:	4c33      	ldr	r4, [pc, #204]	; (8002260 <updateMap+0x2b8>)
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	4403      	add	r3, r0
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	4423      	add	r3, r4
 80021a2:	3308      	adds	r3, #8
 80021a4:	6019      	str	r1, [r3, #0]
				}
				if(bombRangeMap[index.y][index.x][Up]>0){
 80021a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021a8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80021aa:	482d      	ldr	r0, [pc, #180]	; (8002260 <updateMap+0x2b8>)
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	4403      	add	r3, r0
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	dd19      	ble.n	80021f6 <updateMap+0x24e>
					bombRangeMap[index.y+1][index.x][Up]=bombRangeMap[index.y][index.x][Up]+1;
 80021c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021c4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80021c6:	4826      	ldr	r0, [pc, #152]	; (8002260 <updateMap+0x2b8>)
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	440b      	add	r3, r1
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	4403      	add	r3, r0
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021dc:	3201      	adds	r2, #1
 80021de:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80021e0:	1c59      	adds	r1, r3, #1
 80021e2:	4c1f      	ldr	r4, [pc, #124]	; (8002260 <updateMap+0x2b8>)
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	4403      	add	r3, r0
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	4423      	add	r3, r4
 80021f4:	6019      	str	r1, [r3, #0]
		for(index.x=0;index.x+1<MAP_WIDTH;index.x++){
 80021f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f8:	3301      	adds	r3, #1
 80021fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80021fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021fe:	2b0b      	cmp	r3, #11
 8002200:	f77f af76 	ble.w	80020f0 <updateMap+0x148>
	for(Vector2 index = Vector2_init(0,0);index.y+1<MAP_HEIGHT;index.y++){
 8002204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002206:	3301      	adds	r3, #1
 8002208:	64fb      	str	r3, [r7, #76]	; 0x4c
 800220a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800220c:	2b0b      	cmp	r3, #11
 800220e:	f77f af6c 	ble.w	80020ea <updateMap+0x142>
				}
			}
		}
	}
	for(Vector2 index = Vector2_init(0,MAP_HEIGHT-1);index.x+1<MAP_WIDTH;index.x++){
 8002212:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002216:	220c      	movs	r2, #12
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe fb30 	bl	8000880 <Vector2_init>
 8002220:	e056      	b.n	80022d0 <updateMap+0x328>
		ObjectType type =getCell(index)->objType;
 8002222:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002226:	e893 0003 	ldmia.w	r3, {r0, r1}
 800222a:	f7ff fd33 	bl	8001c94 <getCell>
 800222e:	4603      	mov	r3, r0
 8002230:	7e1b      	ldrb	r3, [r3, #24]
 8002232:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		if(type == BreakableWall){
 8002236:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800223a:	2b02      	cmp	r3, #2
 800223c:	d116      	bne.n	800226c <updateMap+0x2c4>
			bombRangeMap[index.y][index.x+1][Left]=1;
 800223e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002242:	1c59      	adds	r1, r3, #1
 8002244:	4806      	ldr	r0, [pc, #24]	; (8002260 <updateMap+0x2b8>)
 8002246:	4613      	mov	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	440b      	add	r3, r1
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	4403      	add	r3, r0
 8002256:	3308      	adds	r3, #8
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	e035      	b.n	80022ca <updateMap+0x322>
 800225e:	bf00      	nop
 8002260:	20000460 	.word	0x20000460
 8002264:	20000308 	.word	0x20000308
 8002268:	200003b4 	.word	0x200003b4
		}
		else if(type != UnbreakableWall&&bombRangeMap[index.y][index.x][Left]){
 800226c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002270:	2b01      	cmp	r3, #1
 8002272:	d02a      	beq.n	80022ca <updateMap+0x322>
 8002274:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002276:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002278:	48a5      	ldr	r0, [pc, #660]	; (8002510 <updateMap+0x568>)
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	440b      	add	r3, r1
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	4403      	add	r3, r0
 800228a:	3308      	adds	r3, #8
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01b      	beq.n	80022ca <updateMap+0x322>
			bombRangeMap[index.y][index.x+1][Left]=bombRangeMap[index.y][index.x][Left]+1;
 8002292:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002294:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002296:	489e      	ldr	r0, [pc, #632]	; (8002510 <updateMap+0x568>)
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	4403      	add	r3, r0
 80022a8:	3308      	adds	r3, #8
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80022b0:	1c48      	adds	r0, r1, #1
 80022b2:	1c59      	adds	r1, r3, #1
 80022b4:	4c96      	ldr	r4, [pc, #600]	; (8002510 <updateMap+0x568>)
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	4403      	add	r3, r0
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	4423      	add	r3, r4
 80022c6:	3308      	adds	r3, #8
 80022c8:	6019      	str	r1, [r3, #0]
	for(Vector2 index = Vector2_init(0,MAP_HEIGHT-1);index.x+1<MAP_WIDTH;index.x++){
 80022ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022cc:	3301      	adds	r3, #1
 80022ce:	643b      	str	r3, [r7, #64]	; 0x40
 80022d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022d2:	2b0b      	cmp	r3, #11
 80022d4:	dda5      	ble.n	8002222 <updateMap+0x27a>
		}
	}
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,0);index.y+1<MAP_HEIGHT;index.y++){
 80022d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022da:	2200      	movs	r2, #0
 80022dc:	210c      	movs	r1, #12
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe face 	bl	8000880 <Vector2_init>
 80022e4:	e04b      	b.n	800237e <updateMap+0x3d6>
		ObjectType type =getCell(index)->objType;
 80022e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022ee:	f7ff fcd1 	bl	8001c94 <getCell>
 80022f2:	4603      	mov	r3, r0
 80022f4:	7e1b      	ldrb	r3, [r3, #24]
 80022f6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		if(type == BreakableWall){
 80022fa:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d10e      	bne.n	8002320 <updateMap+0x378>
			bombRangeMap[index.y+1][index.x][Up]=1;
 8002302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002308:	4881      	ldr	r0, [pc, #516]	; (8002510 <updateMap+0x568>)
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	440b      	add	r3, r1
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	4403      	add	r3, r0
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e02b      	b.n	8002378 <updateMap+0x3d0>
		}
		else if(type != UnbreakableWall&&bombRangeMap[index.y][index.x][Up]){
 8002320:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d027      	beq.n	8002378 <updateMap+0x3d0>
 8002328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800232a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800232c:	4878      	ldr	r0, [pc, #480]	; (8002510 <updateMap+0x568>)
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	440b      	add	r3, r1
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	4403      	add	r3, r0
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d019      	beq.n	8002378 <updateMap+0x3d0>
			bombRangeMap[index.y+1][index.x][Up]=bombRangeMap[index.y][index.x][Up]+1;
 8002344:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002346:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002348:	4871      	ldr	r0, [pc, #452]	; (8002510 <updateMap+0x568>)
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	440b      	add	r3, r1
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	4403      	add	r3, r0
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800235e:	3201      	adds	r2, #1
 8002360:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002362:	1c59      	adds	r1, r3, #1
 8002364:	4c6a      	ldr	r4, [pc, #424]	; (8002510 <updateMap+0x568>)
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	4403      	add	r3, r0
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	4423      	add	r3, r4
 8002376:	6019      	str	r1, [r3, #0]
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,0);index.y+1<MAP_HEIGHT;index.y++){
 8002378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800237a:	3301      	adds	r3, #1
 800237c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800237e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002380:	2b0b      	cmp	r3, #11
 8002382:	ddb0      	ble.n	80022e6 <updateMap+0x33e>
		}
	}
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,MAP_HEIGHT-1);index.y>0;index.y--){
 8002384:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002388:	220c      	movs	r2, #12
 800238a:	210c      	movs	r1, #12
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe fa77 	bl	8000880 <Vector2_init>
 8002392:	e093      	b.n	80024bc <updateMap+0x514>
			for(index.x=MAP_WIDTH-1;index.x>0;index.x--){
 8002394:	230c      	movs	r3, #12
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
 8002398:	e089      	b.n	80024ae <updateMap+0x506>
				ObjectType type =getCell(index)->objType;
 800239a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800239e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023a2:	f7ff fc77 	bl	8001c94 <getCell>
 80023a6:	4603      	mov	r3, r0
 80023a8:	7e1b      	ldrb	r3, [r3, #24]
 80023aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
				if(type == BreakableWall){
 80023ae:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d11e      	bne.n	80023f4 <updateMap+0x44c>
					bombRangeMap[index.y][index.x-1][Right]=1;
 80023b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ba:	1e59      	subs	r1, r3, #1
 80023bc:	4854      	ldr	r0, [pc, #336]	; (8002510 <updateMap+0x568>)
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	440b      	add	r3, r1
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	4403      	add	r3, r0
 80023ce:	330c      	adds	r3, #12
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
					bombRangeMap[index.y-1][index.x][Down]=1;
 80023d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d6:	1e5a      	subs	r2, r3, #1
 80023d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023da:	484d      	ldr	r0, [pc, #308]	; (8002510 <updateMap+0x568>)
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	440b      	add	r3, r1
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	4403      	add	r3, r0
 80023ec:	3304      	adds	r3, #4
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	e059      	b.n	80024a8 <updateMap+0x500>
				}
				else if(type != UnbreakableWall){
 80023f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d055      	beq.n	80024a8 <updateMap+0x500>
					if(bombRangeMap[index.y][index.x][Right]){
 80023fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002400:	4843      	ldr	r0, [pc, #268]	; (8002510 <updateMap+0x568>)
 8002402:	4613      	mov	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	440b      	add	r3, r1
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	4403      	add	r3, r0
 8002412:	330c      	adds	r3, #12
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01b      	beq.n	8002452 <updateMap+0x4aa>
						bombRangeMap[index.y][index.x-1][Right]=bombRangeMap[index.y][index.x][Right]+1;
 800241a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800241c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800241e:	483c      	ldr	r0, [pc, #240]	; (8002510 <updateMap+0x568>)
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	440b      	add	r3, r1
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	4403      	add	r3, r0
 8002430:	330c      	adds	r3, #12
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002436:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002438:	1e48      	subs	r0, r1, #1
 800243a:	1c59      	adds	r1, r3, #1
 800243c:	4c34      	ldr	r4, [pc, #208]	; (8002510 <updateMap+0x568>)
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	4403      	add	r3, r0
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	4423      	add	r3, r4
 800244e:	330c      	adds	r3, #12
 8002450:	6019      	str	r1, [r3, #0]
					}
					if(bombRangeMap[index.y][index.x][Down]){
 8002452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002454:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002456:	482e      	ldr	r0, [pc, #184]	; (8002510 <updateMap+0x568>)
 8002458:	4613      	mov	r3, r2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	440b      	add	r3, r1
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	4403      	add	r3, r0
 8002468:	3304      	adds	r3, #4
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01b      	beq.n	80024a8 <updateMap+0x500>
						bombRangeMap[index.y-1][index.x][Down]=bombRangeMap[index.y][index.x][Down]+1;
 8002470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002472:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002474:	4826      	ldr	r0, [pc, #152]	; (8002510 <updateMap+0x568>)
 8002476:	4613      	mov	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	440b      	add	r3, r1
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	4403      	add	r3, r0
 8002486:	3304      	adds	r3, #4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800248c:	3a01      	subs	r2, #1
 800248e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002490:	1c59      	adds	r1, r3, #1
 8002492:	4c1f      	ldr	r4, [pc, #124]	; (8002510 <updateMap+0x568>)
 8002494:	4613      	mov	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	4403      	add	r3, r0
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	4423      	add	r3, r4
 80024a4:	3304      	adds	r3, #4
 80024a6:	6019      	str	r1, [r3, #0]
			for(index.x=MAP_WIDTH-1;index.x>0;index.x--){
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	3b01      	subs	r3, #1
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30
 80024ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f73f af72 	bgt.w	800239a <updateMap+0x3f2>
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,MAP_HEIGHT-1);index.y>0;index.y--){
 80024b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b8:	3b01      	subs	r3, #1
 80024ba:	637b      	str	r3, [r7, #52]	; 0x34
 80024bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f73f af68 	bgt.w	8002394 <updateMap+0x3ec>
					}
				}
			}
		}
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,0);index.x>0;index.x--){
 80024c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024c8:	2200      	movs	r2, #0
 80024ca:	210c      	movs	r1, #12
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe f9d7 	bl	8000880 <Vector2_init>
 80024d2:	e051      	b.n	8002578 <updateMap+0x5d0>
			ObjectType type =getCell(index)->objType;
 80024d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024dc:	f7ff fbda 	bl	8001c94 <getCell>
 80024e0:	4603      	mov	r3, r0
 80024e2:	7e1b      	ldrb	r3, [r3, #24]
 80024e4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			if(type == BreakableWall){
 80024e8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d111      	bne.n	8002514 <updateMap+0x56c>
				bombRangeMap[index.y][index.x-1][Right]=1;
 80024f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	1e59      	subs	r1, r3, #1
 80024f6:	4806      	ldr	r0, [pc, #24]	; (8002510 <updateMap+0x568>)
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	440b      	add	r3, r1
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	4403      	add	r3, r0
 8002508:	330c      	adds	r3, #12
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	e030      	b.n	8002572 <updateMap+0x5ca>
 8002510:	20000460 	.word	0x20000460
			}
			else if(type != UnbreakableWall&&bombRangeMap[index.y][index.x][Right]){
 8002514:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002518:	2b01      	cmp	r3, #1
 800251a:	d02a      	beq.n	8002572 <updateMap+0x5ca>
 800251c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002520:	4896      	ldr	r0, [pc, #600]	; (800277c <updateMap+0x7d4>)
 8002522:	4613      	mov	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	440b      	add	r3, r1
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	4403      	add	r3, r0
 8002532:	330c      	adds	r3, #12
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d01b      	beq.n	8002572 <updateMap+0x5ca>
				bombRangeMap[index.y][index.x-1][Right]=bombRangeMap[index.y][index.x][Right]+1;
 800253a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800253c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800253e:	488f      	ldr	r0, [pc, #572]	; (800277c <updateMap+0x7d4>)
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	440b      	add	r3, r1
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	4403      	add	r3, r0
 8002550:	330c      	adds	r3, #12
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002556:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002558:	1e48      	subs	r0, r1, #1
 800255a:	1c59      	adds	r1, r3, #1
 800255c:	4c87      	ldr	r4, [pc, #540]	; (800277c <updateMap+0x7d4>)
 800255e:	4613      	mov	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	4403      	add	r3, r0
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	4423      	add	r3, r4
 800256e:	330c      	adds	r3, #12
 8002570:	6019      	str	r1, [r3, #0]
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,0);index.x>0;index.x--){
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
 8002578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257a:	2b00      	cmp	r3, #0
 800257c:	dcaa      	bgt.n	80024d4 <updateMap+0x52c>
			}
		}
		for(Vector2 index = Vector2_init(0,MAP_HEIGHT-1);index.y>0;index.y--){
 800257e:	f107 0320 	add.w	r3, r7, #32
 8002582:	220c      	movs	r2, #12
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe f97a 	bl	8000880 <Vector2_init>
 800258c:	e04f      	b.n	800262e <updateMap+0x686>
			ObjectType type =getCell(index)->objType;
 800258e:	f107 0320 	add.w	r3, r7, #32
 8002592:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002596:	f7ff fb7d 	bl	8001c94 <getCell>
 800259a:	4603      	mov	r3, r0
 800259c:	7e1b      	ldrb	r3, [r3, #24]
 800259e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if(type == BreakableWall){
 80025a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d10f      	bne.n	80025ca <updateMap+0x622>
				bombRangeMap[index.y-1][index.x][Down]=1;
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	1e5a      	subs	r2, r3, #1
 80025ae:	6a39      	ldr	r1, [r7, #32]
 80025b0:	4872      	ldr	r0, [pc, #456]	; (800277c <updateMap+0x7d4>)
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	440b      	add	r3, r1
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	4403      	add	r3, r0
 80025c2:	3304      	adds	r3, #4
 80025c4:	2201      	movs	r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	e02e      	b.n	8002628 <updateMap+0x680>
			}
			else if(type != UnbreakableWall&&bombRangeMap[index.y][index.x][Down]){
 80025ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d02a      	beq.n	8002628 <updateMap+0x680>
 80025d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d4:	6a39      	ldr	r1, [r7, #32]
 80025d6:	4869      	ldr	r0, [pc, #420]	; (800277c <updateMap+0x7d4>)
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	4403      	add	r3, r0
 80025e8:	3304      	adds	r3, #4
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01b      	beq.n	8002628 <updateMap+0x680>
				bombRangeMap[index.y-1][index.x][Down]=bombRangeMap[index.y][index.x][Down]+1;
 80025f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f2:	6a39      	ldr	r1, [r7, #32]
 80025f4:	4861      	ldr	r0, [pc, #388]	; (800277c <updateMap+0x7d4>)
 80025f6:	4613      	mov	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	440b      	add	r3, r1
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	4403      	add	r3, r0
 8002606:	3304      	adds	r3, #4
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260c:	3a01      	subs	r2, #1
 800260e:	6a38      	ldr	r0, [r7, #32]
 8002610:	1c59      	adds	r1, r3, #1
 8002612:	4c5a      	ldr	r4, [pc, #360]	; (800277c <updateMap+0x7d4>)
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	4403      	add	r3, r0
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	4423      	add	r3, r4
 8002624:	3304      	adds	r3, #4
 8002626:	6019      	str	r1, [r3, #0]
		for(Vector2 index = Vector2_init(0,MAP_HEIGHT-1);index.y>0;index.y--){
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	3b01      	subs	r3, #1
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	2b00      	cmp	r3, #0
 8002632:	dcac      	bgt.n	800258e <updateMap+0x5e6>
			}
		}
	QueueElement* element = bombs.front;
 8002634:	4b52      	ldr	r3, [pc, #328]	; (8002780 <updateMap+0x7d8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	677b      	str	r3, [r7, #116]	; 0x74
	while(element != NULL){
 800263a:	e074      	b.n	8002726 <updateMap+0x77e>
		Bomb* bomb = (Bomb*)element->value;
 800263c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	667b      	str	r3, [r7, #100]	; 0x64
		Vector2 startIndex = bomb->index,index;
 8002642:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002644:	f107 0318 	add.w	r3, r7, #24
 8002648:	e892 0003 	ldmia.w	r2, {r0, r1}
 800264c:	e883 0003 	stmia.w	r3, {r0, r1}
		int range = bomb->range;
 8002650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	663b      	str	r3, [r7, #96]	; 0x60
		element =element->next;
 8002656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	677b      	str	r3, [r7, #116]	; 0x74
		dangerMap[startIndex.y][startIndex.x]=true;
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	69b9      	ldr	r1, [r7, #24]
 8002660:	4848      	ldr	r0, [pc, #288]	; (8002784 <updateMap+0x7dc>)
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	4403      	add	r3, r0
 800266e:	440b      	add	r3, r1
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<4;i++){
 8002674:	2300      	movs	r3, #0
 8002676:	673b      	str	r3, [r7, #112]	; 0x70
 8002678:	e052      	b.n	8002720 <updateMap+0x778>
			index = getIndexAtDirection(startIndex,(Direction)i);
 800267a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f107 0010 	add.w	r0, r7, #16
 8002682:	f107 0218 	add.w	r2, r7, #24
 8002686:	ca06      	ldmia	r2, {r1, r2}
 8002688:	f7ff fc4d 	bl	8001f26 <getIndexAtDirection>
			for(int j=0;j<range&&inBetween(0,index.x,MAP_WIDTH-1)&&inBetween(0,index.y,MAP_HEIGHT-1)&&!walkMap[index.y][index.x];j++,index=getIndexAtDirection(index,(Direction)i)){
 800268c:	2300      	movs	r3, #0
 800268e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002690:	e01d      	b.n	80026ce <updateMap+0x726>
				dangerMap[index.y][index.x]=true;
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	6939      	ldr	r1, [r7, #16]
 8002696:	483b      	ldr	r0, [pc, #236]	; (8002784 <updateMap+0x7dc>)
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	4403      	add	r3, r0
 80026a4:	440b      	add	r3, r1
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<range&&inBetween(0,index.x,MAP_WIDTH-1)&&inBetween(0,index.y,MAP_HEIGHT-1)&&!walkMap[index.y][index.x];j++,index=getIndexAtDirection(index,(Direction)i)){
 80026aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ac:	3301      	adds	r3, #1
 80026ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	4638      	mov	r0, r7
 80026b6:	f107 0210 	add.w	r2, r7, #16
 80026ba:	ca06      	ldmia	r2, {r1, r2}
 80026bc:	f7ff fc33 	bl	8001f26 <getIndexAtDirection>
 80026c0:	f107 0310 	add.w	r3, r7, #16
 80026c4:	463a      	mov	r2, r7
 80026c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80026ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026d2:	429a      	cmp	r2, r3
 80026d4:	da21      	bge.n	800271a <updateMap+0x772>
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	220c      	movs	r2, #12
 80026da:	4619      	mov	r1, r3
 80026dc:	2000      	movs	r0, #0
 80026de:	f002 faa4 	bl	8004c2a <inBetween>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d018      	beq.n	800271a <updateMap+0x772>
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	220c      	movs	r2, #12
 80026ec:	4619      	mov	r1, r3
 80026ee:	2000      	movs	r0, #0
 80026f0:	f002 fa9b 	bl	8004c2a <inBetween>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00f      	beq.n	800271a <updateMap+0x772>
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	6939      	ldr	r1, [r7, #16]
 80026fe:	4822      	ldr	r0, [pc, #136]	; (8002788 <updateMap+0x7e0>)
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	4403      	add	r3, r0
 800270c:	440b      	add	r3, r1
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	f083 0301 	eor.w	r3, r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1bb      	bne.n	8002692 <updateMap+0x6ea>
		for(int i=0;i<4;i++){
 800271a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800271c:	3301      	adds	r3, #1
 800271e:	673b      	str	r3, [r7, #112]	; 0x70
 8002720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002722:	2b03      	cmp	r3, #3
 8002724:	dda9      	ble.n	800267a <updateMap+0x6d2>
	while(element != NULL){
 8002726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002728:	2b00      	cmp	r3, #0
 800272a:	d187      	bne.n	800263c <updateMap+0x694>
			}
		}
	}
	for(int i=0;i<playerCount;i++){
 800272c:	2300      	movs	r3, #0
 800272e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002730:	e019      	b.n	8002766 <updateMap+0x7be>
		Vector2 index=getPlayerIndex(&players[i]);
 8002732:	4b16      	ldr	r3, [pc, #88]	; (800278c <updateMap+0x7e4>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002738:	019b      	lsls	r3, r3, #6
 800273a:	441a      	add	r2, r3
 800273c:	f107 0308 	add.w	r3, r7, #8
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fbe0 	bl	8001f08 <getPlayerIndex>
		walkMap[index.y][index.x]=true;
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	480e      	ldr	r0, [pc, #56]	; (8002788 <updateMap+0x7e0>)
 800274e:	4613      	mov	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	4403      	add	r3, r0
 800275a:	440b      	add	r3, r1
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<playerCount;i++){
 8002760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002762:	3301      	adds	r3, #1
 8002764:	66bb      	str	r3, [r7, #104]	; 0x68
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <updateMap+0x7e8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800276c:	429a      	cmp	r2, r3
 800276e:	dbe0      	blt.n	8002732 <updateMap+0x78a>
	}

}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	377c      	adds	r7, #124	; 0x7c
 8002776:	46bd      	mov	sp, r7
 8002778:	bd90      	pop	{r4, r7, pc}
 800277a:	bf00      	nop
 800277c:	20000460 	.word	0x20000460
 8002780:	2000241c 	.word	0x2000241c
 8002784:	20000308 	.word	0x20000308
 8002788:	200003b4 	.word	0x200003b4
 800278c:	20002414 	.word	0x20002414
 8002790:	20000068 	.word	0x20000068

08002794 <BFSValue_init>:
typedef struct BFSValueStruct{
	Vector2 index;
	int weight;
	Direction startDirection;
}BFSValue;
BFSValue* BFSValue_init(Vector2 index,int weight,Direction startDirection){
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	f107 0408 	add.w	r4, r7, #8
 800279e:	e884 0003 	stmia.w	r4, {r0, r1}
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	70fb      	strb	r3, [r7, #3]
	BFSValue* val=(BFSValue*)malloc(sizeof(BFSValue ));
 80027a6:	2010      	movs	r0, #16
 80027a8:	f007 fc88 	bl	800a0bc <malloc>
 80027ac:	4603      	mov	r3, r0
 80027ae:	617b      	str	r3, [r7, #20]
	val->index = index;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	461a      	mov	r2, r3
 80027b4:	f107 0308 	add.w	r3, r7, #8
 80027b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80027bc:	e882 0003 	stmia.w	r2, {r0, r1}
	val->weight = weight;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	609a      	str	r2, [r3, #8]
	val->startDirection = startDirection;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	731a      	strb	r2, [r3, #12]
	return val;
 80027cc:	697b      	ldr	r3, [r7, #20]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd90      	pop	{r4, r7, pc}
	...

080027d8 <findNextIndex>:
Vector2 findNextIndex(Player* player){
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 80027de:	af00      	add	r7, sp, #0
 80027e0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80027e4:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80027e8:	6018      	str	r0, [r3, #0]
 80027ea:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80027ee:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80027f2:	6019      	str	r1, [r3, #0]
	Vector2 startIndex = getPlayerIndex(player);
 80027f4:	f507 7266 	add.w	r2, r7, #920	; 0x398
 80027f8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80027fc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002800:	6819      	ldr	r1, [r3, #0]
 8002802:	4610      	mov	r0, r2
 8002804:	f7ff fb80 	bl	8001f08 <getPlayerIndex>
	bool havePasts[MAP_HEIGHT][MAP_WIDTH];
	for(int i=0;i<MAP_HEIGHT;i++){
 8002808:	2300      	movs	r3, #0
 800280a:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800280e:	e022      	b.n	8002856 <findNextIndex+0x7e>
		for(int j=0;j<MAP_WIDTH;j++){
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8002816:	e015      	b.n	8002844 <findNextIndex+0x6c>
			havePasts[i][j]=false;
 8002818:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800281c:	f5a3 7182 	sub.w	r1, r3, #260	; 0x104
 8002820:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	18ca      	adds	r2, r1, r3
 8002830:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8002834:	4413      	add	r3, r2
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
		for(int j=0;j<MAP_WIDTH;j++){
 800283a:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 800283e:	3301      	adds	r3, #1
 8002840:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8002844:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8002848:	2b0c      	cmp	r3, #12
 800284a:	dde5      	ble.n	8002818 <findNextIndex+0x40>
	for(int i=0;i<MAP_HEIGHT;i++){
 800284c:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002850:	3301      	adds	r3, #1
 8002852:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8002856:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800285a:	2b0c      	cmp	r3, #12
 800285c:	ddd8      	ble.n	8002810 <findNextIndex+0x38>
		}
	}
	havePasts[startIndex.y][startIndex.x]=true;
 800285e:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 8002862:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 8002866:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800286a:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	4403      	add	r3, r0
 800287a:	440b      	add	r3, r1
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
	if(dangerMap[startIndex.y][startIndex.x]){
 8002880:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 8002884:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 8002888:	48cd      	ldr	r0, [pc, #820]	; (8002bc0 <findNextIndex+0x3e8>)
 800288a:	4613      	mov	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	4403      	add	r3, r0
 8002896:	440b      	add	r3, r1
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8201 	beq.w	8002ca2 <findNextIndex+0x4ca>
		Queue q = {NULL,NULL,0};
 80028a0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80028a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80028b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028b4:	2200      	movs	r2, #0
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80028bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
		Vector2 index;
		for(int i=0;i<4;i++){
 80028c4:	2300      	movs	r3, #0
 80028c6:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 80028ca:	e0d3      	b.n	8002a74 <findNextIndex+0x29c>
			index = getIndexAtDirection(startIndex,(Direction)i);
 80028cc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 80028d6:	f5a2 708c 	sub.w	r0, r2, #280	; 0x118
 80028da:	f507 7266 	add.w	r2, r7, #920	; 0x398
 80028de:	ca06      	ldmia	r2, {r1, r2}
 80028e0:	f7ff fb21 	bl	8001f26 <getIndexAtDirection>
			if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 80028e4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80028e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	220c      	movs	r2, #12
 80028f0:	4619      	mov	r1, r3
 80028f2:	2000      	movs	r0, #0
 80028f4:	f002 f999 	bl	8004c2a <inBetween>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 80b5 	beq.w	8002a6a <findNextIndex+0x292>
 8002900:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002904:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	220c      	movs	r2, #12
 800290c:	4619      	mov	r1, r3
 800290e:	2000      	movs	r0, #0
 8002910:	f002 f98b 	bl	8004c2a <inBetween>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80a7 	beq.w	8002a6a <findNextIndex+0x292>
					!walkMap[index.y][index.x]&&!havePasts[index.y][index.x]&&
 800291c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002920:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800292a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800292e:	6819      	ldr	r1, [r3, #0]
 8002930:	48a4      	ldr	r0, [pc, #656]	; (8002bc4 <findNextIndex+0x3ec>)
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	4403      	add	r3, r0
 800293e:	440b      	add	r3, r1
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	f083 0301 	eor.w	r3, r3, #1
 8002946:	b2db      	uxtb	r3, r3
			if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 808e 	beq.w	8002a6a <findNextIndex+0x292>
					!walkMap[index.y][index.x]&&!havePasts[index.y][index.x]&&
 800294e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002952:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800295c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002960:	6819      	ldr	r1, [r3, #0]
 8002962:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002966:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	4403      	add	r3, r0
 8002976:	440b      	add	r3, r1
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	f083 0301 	eor.w	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d072      	beq.n	8002a6a <findNextIndex+0x292>
					(getCell(index)->objType!=DetonateEffectObject||player->immortalFlag)){
 8002984:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002988:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800298c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002990:	f7ff f980 	bl	8001c94 <getCell>
 8002994:	4603      	mov	r3, r0
 8002996:	7e1b      	ldrb	r3, [r3, #24]
					!walkMap[index.y][index.x]&&!havePasts[index.y][index.x]&&
 8002998:	2b04      	cmp	r3, #4
 800299a:	d108      	bne.n	80029ae <findNextIndex+0x1d6>
					(getCell(index)->objType!=DetonateEffectObject||player->immortalFlag)){
 800299c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80029a0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d05d      	beq.n	8002a6a <findNextIndex+0x292>
				if(!dangerMap[index.y][index.x]){
 80029ae:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80029b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80029bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029c0:	6819      	ldr	r1, [r3, #0]
 80029c2:	487f      	ldr	r0, [pc, #508]	; (8002bc0 <findNextIndex+0x3e8>)
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	4403      	add	r3, r0
 80029d0:	440b      	add	r3, r1
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	f083 0301 	eor.w	r3, r3, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01c      	beq.n	8002a18 <findNextIndex+0x240>
					while(q.size!=0)
 80029de:	e004      	b.n	80029ea <findNextIndex+0x212>
						dequeue(&q);
 80029e0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f002 f9be 	bl	8004d66 <dequeue>
					while(q.size!=0)
 80029ea:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80029ee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f3      	bne.n	80029e0 <findNextIndex+0x208>
					return index;
 80029f8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80029fc:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8002a00:	6819      	ldr	r1, [r3, #0]
 8002a02:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a06:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a10:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a14:	f000 bd9d 	b.w	8003552 <findNextIndex+0xd7a>
				}
				else{
					havePasts[index.y][index.x]=true;
 8002a18:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a1c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a26:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a2a:	6819      	ldr	r1, [r3, #0]
 8002a2c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a30:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	4403      	add	r3, r0
 8002a40:	440b      	add	r3, r1
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
					enqueue(&q,BFSValue_init(index,1,(Direction)i));
 8002a46:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002a50:	f5a2 718c 	sub.w	r1, r2, #280	; 0x118
 8002a54:	2201      	movs	r2, #1
 8002a56:	c903      	ldmia	r1, {r0, r1}
 8002a58:	f7ff fe9c 	bl	8002794 <BFSValue_init>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8002a62:	4611      	mov	r1, r2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f002 f94a 	bl	8004cfe <enqueue>
		for(int i=0;i<4;i++){
 8002a6a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002a6e:	3301      	adds	r3, #1
 8002a70:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8002a74:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	f77f af27 	ble.w	80028cc <findNextIndex+0xf4>
				}
			}
		}
		while(q.size!=0){
 8002a7e:	e0fa      	b.n	8002c76 <findNextIndex+0x49e>
			BFSValue* val = (BFSValue*)q.front->value;
 8002a80:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
			for(int i=0;i<4;i++){
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8002a96:	e0e4      	b.n	8002c62 <findNextIndex+0x48a>
				index = getIndexAtDirection(val->index,(Direction)i);
 8002a98:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002aa2:	f5a2 748c 	sub.w	r4, r2, #280	; 0x118
 8002aa6:	4638      	mov	r0, r7
 8002aa8:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 8002aac:	ca06      	ldmia	r2, {r1, r2}
 8002aae:	f7ff fa3a 	bl	8001f26 <getIndexAtDirection>
 8002ab2:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002ab6:	f5a3 727c 	sub.w	r2, r3, #1008	; 0x3f0
 8002aba:	4623      	mov	r3, r4
 8002abc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ac0:	e883 0003 	stmia.w	r3, {r0, r1}
				if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)
 8002ac4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002ac8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	220c      	movs	r2, #12
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f002 f8a9 	bl	8004c2a <inBetween>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80bc 	beq.w	8002c58 <findNextIndex+0x480>
 8002ae0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002ae4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	220c      	movs	r2, #12
 8002aec:	4619      	mov	r1, r3
 8002aee:	2000      	movs	r0, #0
 8002af0:	f002 f89b 	bl	8004c2a <inBetween>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80ae 	beq.w	8002c58 <findNextIndex+0x480>
						&&!walkMap[index.y][index.x]&&!havePasts[index.y][index.x]&&
 8002afc:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b00:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b0a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b0e:	6819      	ldr	r1, [r3, #0]
 8002b10:	482c      	ldr	r0, [pc, #176]	; (8002bc4 <findNextIndex+0x3ec>)
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	4403      	add	r3, r0
 8002b1e:	440b      	add	r3, r1
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	f083 0301 	eor.w	r3, r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8095 	beq.w	8002c58 <findNextIndex+0x480>
 8002b2e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b32:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b40:	6819      	ldr	r1, [r3, #0]
 8002b42:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b46:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	4403      	add	r3, r0
 8002b56:	440b      	add	r3, r1
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	f083 0301 	eor.w	r3, r3, #1
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d079      	beq.n	8002c58 <findNextIndex+0x480>
						(getCell(index)->objType!=DetonateEffectObject||player->immortalFlag)){
 8002b64:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b70:	f7ff f890 	bl	8001c94 <getCell>
 8002b74:	4603      	mov	r3, r0
 8002b76:	7e1b      	ldrb	r3, [r3, #24]
						&&!walkMap[index.y][index.x]&&!havePasts[index.y][index.x]&&
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d108      	bne.n	8002b8e <findNextIndex+0x3b6>
						(getCell(index)->objType!=DetonateEffectObject||player->immortalFlag)){
 8002b7c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b80:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d064      	beq.n	8002c58 <findNextIndex+0x480>
					if(!dangerMap[index.y][index.x]){
 8002b8e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b92:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ba0:	6819      	ldr	r1, [r3, #0]
 8002ba2:	4807      	ldr	r0, [pc, #28]	; (8002bc0 <findNextIndex+0x3e8>)
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	4403      	add	r3, r0
 8002bb0:	440b      	add	r3, r1
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	f083 0301 	eor.w	r3, r3, #1
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d020      	beq.n	8002c00 <findNextIndex+0x428>
						while(q.size!=0)
 8002bbe:	e008      	b.n	8002bd2 <findNextIndex+0x3fa>
 8002bc0:	20000308 	.word	0x20000308
 8002bc4:	200003b4 	.word	0x200003b4
							dequeue(&q);
 8002bc8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f002 f8ca 	bl	8004d66 <dequeue>
						while(q.size!=0)
 8002bd2:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002bd6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f3      	bne.n	8002bc8 <findNextIndex+0x3f0>
						return getIndexAtDirection(startIndex,val->startDirection);
 8002be0:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002be4:	7b1a      	ldrb	r2, [r3, #12]
 8002be6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002bea:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8002bf6:	ca06      	ldmia	r2, {r1, r2}
 8002bf8:	f7ff f995 	bl	8001f26 <getIndexAtDirection>
 8002bfc:	f000 bca9 	b.w	8003552 <findNextIndex+0xd7a>
					}
					else{
						havePasts[index.y][index.x]=true;
 8002c00:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c0e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c12:	6819      	ldr	r1, [r3, #0]
 8002c14:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c18:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	4403      	add	r3, r0
 8002c28:	440b      	add	r3, r1
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
						enqueue(&q,BFSValue_init(index,val->weight+1,val->startDirection));
 8002c2e:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002c3a:	7b1b      	ldrb	r3, [r3, #12]
 8002c3c:	f507 717c 	add.w	r1, r7, #1008	; 0x3f0
 8002c40:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8002c44:	c903      	ldmia	r1, {r0, r1}
 8002c46:	f7ff fda5 	bl	8002794 <BFSValue_init>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f002 f853 	bl	8004cfe <enqueue>
			for(int i=0;i<4;i++){
 8002c58:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8002c62:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	f77f af16 	ble.w	8002a98 <findNextIndex+0x2c0>
					}
				}
			}
			dequeue(&q);
 8002c6c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f002 f878 	bl	8004d66 <dequeue>
		while(q.size!=0){
 8002c76:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c7a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f47f aefd 	bne.w	8002a80 <findNextIndex+0x2a8>
		}
		return startIndex;
 8002c86:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c8a:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002c96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c9a:	e882 0003 	stmia.w	r2, {r0, r1}
 8002c9e:	f000 bc58 	b.w	8003552 <findNextIndex+0xd7a>
	}
	else{
		int scoreMap[MAP_HEIGHT][MAP_WIDTH];
		for(int i=0;i<MAP_HEIGHT;i++){
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8002ca8:	e0e3      	b.n	8002e72 <findNextIndex+0x69a>
			for(int j=0;j<MAP_WIDTH;j++){
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8002cb0:	e0d5      	b.n	8002e5e <findNextIndex+0x686>
				scoreMap[i][j]=0;
 8002cb2:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002cb6:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002cba:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002ccc:	4413      	add	r3, r2
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int k=0;k<4;k++){
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8002cda:	e051      	b.n	8002d80 <findNextIndex+0x5a8>
					if(bombRangeMap[i][j][k]&&player->bombRange>=bombRangeMap[i][j][k]){
 8002cdc:	4980      	ldr	r1, [pc, #512]	; (8002ee0 <findNextIndex+0x708>)
 8002cde:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009a      	lsls	r2, r3, #2
 8002cf4:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d039      	beq.n	8002d76 <findNextIndex+0x59e>
 8002d02:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002d06:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6a19      	ldr	r1, [r3, #32]
 8002d0e:	4874      	ldr	r0, [pc, #464]	; (8002ee0 <findNextIndex+0x708>)
 8002d10:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002d22:	4413      	add	r3, r2
 8002d24:	009a      	lsls	r2, r3, #2
 8002d26:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002d30:	4299      	cmp	r1, r3
 8002d32:	db20      	blt.n	8002d76 <findNextIndex+0x59e>
						scoreMap[i][j]+=5;
 8002d34:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002d38:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002d3c:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002d40:	4613      	mov	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002d4e:	4413      	add	r3, r2
 8002d50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d54:	1d58      	adds	r0, r3, #5
 8002d56:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002d5a:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002d5e:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002d62:	4613      	mov	r3, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002d70:	4413      	add	r3, r2
 8002d72:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				for(int k=0;k<4;k++){
 8002d76:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8002d80:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	dda9      	ble.n	8002cdc <findNextIndex+0x504>
					}
				}
				if(map[i][j].objType==SpeedItem||
 8002d88:	4956      	ldr	r1, [pc, #344]	; (8002ee4 <findNextIndex+0x70c>)
 8002d8a:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002d9c:	4413      	add	r3, r2
 8002d9e:	015b      	lsls	r3, r3, #5
 8002da0:	440b      	add	r3, r1
 8002da2:	3318      	adds	r3, #24
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b05      	cmp	r3, #5
 8002da8:	d032      	beq.n	8002e10 <findNextIndex+0x638>
					map[i][j].objType==BombAmountItem||
 8002daa:	494e      	ldr	r1, [pc, #312]	; (8002ee4 <findNextIndex+0x70c>)
 8002dac:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002dbe:	4413      	add	r3, r2
 8002dc0:	015b      	lsls	r3, r3, #5
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3318      	adds	r3, #24
 8002dc6:	781b      	ldrb	r3, [r3, #0]
				if(map[i][j].objType==SpeedItem||
 8002dc8:	2b06      	cmp	r3, #6
 8002dca:	d021      	beq.n	8002e10 <findNextIndex+0x638>
					map[i][j].objType==BombRangeItem||
 8002dcc:	4945      	ldr	r1, [pc, #276]	; (8002ee4 <findNextIndex+0x70c>)
 8002dce:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002de0:	4413      	add	r3, r2
 8002de2:	015b      	lsls	r3, r3, #5
 8002de4:	440b      	add	r3, r1
 8002de6:	3318      	adds	r3, #24
 8002de8:	781b      	ldrb	r3, [r3, #0]
					map[i][j].objType==BombAmountItem||
 8002dea:	2b07      	cmp	r3, #7
 8002dec:	d010      	beq.n	8002e10 <findNextIndex+0x638>
					map[i][j].objType==HealthItem){
 8002dee:	493d      	ldr	r1, [pc, #244]	; (8002ee4 <findNextIndex+0x70c>)
 8002df0:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002e02:	4413      	add	r3, r2
 8002e04:	015b      	lsls	r3, r3, #5
 8002e06:	440b      	add	r3, r1
 8002e08:	3318      	adds	r3, #24
 8002e0a:	781b      	ldrb	r3, [r3, #0]
					map[i][j].objType==BombRangeItem||
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d121      	bne.n	8002e54 <findNextIndex+0x67c>
					scoreMap[i][j]+=15;
 8002e10:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002e14:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002e18:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e30:	f103 000f 	add.w	r0, r3, #15
 8002e34:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002e38:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002e3c:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002e4e:	4413      	add	r3, r2
 8002e50:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
			for(int j=0;j<MAP_WIDTH;j++){
 8002e54:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8002e58:	3301      	adds	r3, #1
 8002e5a:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8002e5e:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	f77f af25 	ble.w	8002cb2 <findNextIndex+0x4da>
		for(int i=0;i<MAP_HEIGHT;i++){
 8002e68:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8002e72:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002e76:	2b0c      	cmp	r3, #12
 8002e78:	f77f af17 	ble.w	8002caa <findNextIndex+0x4d2>
				}

			}
		}
		for(int i=0;i<playerCount;i++){
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8002e82:	e0dc      	b.n	800303e <findNextIndex+0x866>
			if((&players[i])!=player){
 8002e84:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <findNextIndex+0x710>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8002e8c:	019b      	lsls	r3, r3, #6
 8002e8e:	4413      	add	r3, r2
 8002e90:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002e94:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	f000 80ca 	beq.w	8003034 <findNextIndex+0x85c>
				for(int j=0;j<4;j++){
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8002ea6:	e0c0      	b.n	800302a <findNextIndex+0x852>
					Vector2 index = getIndexAtDirection(getPlayerIndex(&players[i]),(Direction)j);
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <findNextIndex+0x710>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8002eb0:	019b      	lsls	r3, r3, #6
 8002eb2:	441a      	add	r2, r3
 8002eb4:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff f824 	bl	8001f08 <getPlayerIndex>
 8002ec0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002eca:	f5a2 709e 	sub.w	r0, r2, #316	; 0x13c
 8002ece:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 8002ed2:	ca06      	ldmia	r2, {r1, r2}
 8002ed4:	f7ff f827 	bl	8001f26 <getIndexAtDirection>
					for(int k=0;k<player->bombRange&&inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&(!walkMap[index.y][index.x]||Equal(index,startIndex) );k++,index=getIndexAtDirection(index,(Direction)j)){
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8002ede:	e054      	b.n	8002f8a <findNextIndex+0x7b2>
 8002ee0:	20000460 	.word	0x20000460
 8002ee4:	20000ef0 	.word	0x20000ef0
 8002ee8:	20002414 	.word	0x20002414
						scoreMap[index.y][index.x]+=10-2*k;
 8002eec:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002ef0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002efa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002f04:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	4403      	add	r3, r0
 8002f14:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002f18:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8002f1c:	f1c3 0305 	rsb	r3, r3, #5
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002f26:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8002f2a:	6852      	ldr	r2, [r2, #4]
 8002f2c:	f507 707c 	add.w	r0, r7, #1008	; 0x3f0
 8002f30:	f5a0 709e 	sub.w	r0, r0, #316	; 0x13c
 8002f34:	6804      	ldr	r4, [r0, #0]
 8002f36:	18c8      	adds	r0, r1, r3
 8002f38:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002f3c:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	4423      	add	r3, r4
 8002f4c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
					for(int k=0;k<player->bombRange&&inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&(!walkMap[index.y][index.x]||Equal(index,startIndex) );k++,index=getIndexAtDirection(index,(Direction)j)){
 8002f50:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8002f54:	3301      	adds	r3, #1
 8002f56:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8002f5a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002f64:	f5a2 749e 	sub.w	r4, r2, #316	; 0x13c
 8002f68:	4638      	mov	r0, r7
 8002f6a:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002f6e:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8002f72:	ca06      	ldmia	r2, {r1, r2}
 8002f74:	f7fe ffd7 	bl	8001f26 <getIndexAtDirection>
 8002f78:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002f7c:	f5a3 727c 	sub.w	r2, r3, #1008	; 0x3f0
 8002f80:	4623      	mov	r3, r4
 8002f82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f86:	e883 0003 	stmia.w	r3, {r0, r1}
 8002f8a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002f8e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	da40      	bge.n	8003020 <findNextIndex+0x848>
 8002f9e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002fa2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	220c      	movs	r2, #12
 8002faa:	4619      	mov	r1, r3
 8002fac:	2000      	movs	r0, #0
 8002fae:	f001 fe3c 	bl	8004c2a <inBetween>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d033      	beq.n	8003020 <findNextIndex+0x848>
 8002fb8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002fbc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	220c      	movs	r2, #12
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f001 fe2f 	bl	8004c2a <inBetween>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d026      	beq.n	8003020 <findNextIndex+0x848>
 8002fd2:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002fd6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002fe0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fe4:	6819      	ldr	r1, [r3, #0]
 8002fe6:	48a7      	ldr	r0, [pc, #668]	; (8003284 <findNextIndex+0xaac>)
 8002fe8:	4613      	mov	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	4403      	add	r3, r0
 8002ff4:	440b      	add	r3, r1
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	f083 0301 	eor.w	r3, r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f47f af74 	bne.w	8002eec <findNextIndex+0x714>
 8003004:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003008:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 800300c:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003010:	cb0c      	ldmia	r3, {r2, r3}
 8003012:	c903      	ldmia	r1, {r0, r1}
 8003014:	f7fd fceb 	bl	80009ee <Equal>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	f47f af66 	bne.w	8002eec <findNextIndex+0x714>
				for(int j=0;j<4;j++){
 8003020:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8003024:	3301      	adds	r3, #1
 8003026:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800302a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 800302e:	2b03      	cmp	r3, #3
 8003030:	f77f af3a 	ble.w	8002ea8 <findNextIndex+0x6d0>
		for(int i=0;i<playerCount;i++){
 8003034:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8003038:	3301      	adds	r3, #1
 800303a:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 800303e:	4b92      	ldr	r3, [pc, #584]	; (8003288 <findNextIndex+0xab0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8003046:	429a      	cmp	r2, r3
 8003048:	f6ff af1c 	blt.w	8002e84 <findNextIndex+0x6ac>
					}
				}
			}
		}
		Vector2 resultIndex=startIndex;
 800304c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003050:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003054:	461a      	mov	r2, r3
 8003056:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800305a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800305e:	e882 0003 	stmia.w	r2, {r0, r1}
		Direction resultDirection;
		int mxResult=scoreMap[startIndex.y][startIndex.x];
 8003062:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 8003066:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 800306a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800306e:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8003072:	4613      	mov	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	4403      	add	r3, r0
 800307e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003082:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		Queue q = {NULL,NULL,0};
 8003086:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800308a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800309a:	2200      	movs	r2, #0
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80030a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
		Vector2 index;
		for(int i=0;i<4;i++){
 80030aa:	2300      	movs	r3, #0
 80030ac:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 80030b0:	e0d5      	b.n	800325e <findNextIndex+0xa86>
			index = getIndexAtDirection(startIndex,(Direction)i);
 80030b2:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 80030bc:	f5a2 709a 	sub.w	r0, r2, #308	; 0x134
 80030c0:	f507 7266 	add.w	r2, r7, #920	; 0x398
 80030c4:	ca06      	ldmia	r2, {r1, r2}
 80030c6:	f7fe ff2e 	bl	8001f26 <getIndexAtDirection>
			if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 80030ca:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80030ce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	220c      	movs	r2, #12
 80030d6:	4619      	mov	r1, r3
 80030d8:	2000      	movs	r0, #0
 80030da:	f001 fda6 	bl	8004c2a <inBetween>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80b7 	beq.w	8003254 <findNextIndex+0xa7c>
 80030e6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80030ea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	220c      	movs	r2, #12
 80030f2:	4619      	mov	r1, r3
 80030f4:	2000      	movs	r0, #0
 80030f6:	f001 fd98 	bl	8004c2a <inBetween>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80a9 	beq.w	8003254 <findNextIndex+0xa7c>
					!walkMap[index.y][index.x]&&
 8003102:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003106:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003110:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003114:	6819      	ldr	r1, [r3, #0]
 8003116:	485b      	ldr	r0, [pc, #364]	; (8003284 <findNextIndex+0xaac>)
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	4403      	add	r3, r0
 8003124:	440b      	add	r3, r1
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	f083 0301 	eor.w	r3, r3, #1
 800312c:	b2db      	uxtb	r3, r3
			if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 8090 	beq.w	8003254 <findNextIndex+0xa7c>
					!havePasts[index.y][index.x]&&
 8003134:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003138:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003142:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003146:	6819      	ldr	r1, [r3, #0]
 8003148:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800314c:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	4403      	add	r3, r0
 800315c:	440b      	add	r3, r1
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	f083 0301 	eor.w	r3, r3, #1
 8003164:	b2db      	uxtb	r3, r3
					!walkMap[index.y][index.x]&&
 8003166:	2b00      	cmp	r3, #0
 8003168:	d074      	beq.n	8003254 <findNextIndex+0xa7c>
					!dangerMap[index.y][index.x]){
 800316a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800316e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003178:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800317c:	6819      	ldr	r1, [r3, #0]
 800317e:	4843      	ldr	r0, [pc, #268]	; (800328c <findNextIndex+0xab4>)
 8003180:	4613      	mov	r3, r2
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	4403      	add	r3, r0
 800318c:	440b      	add	r3, r1
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	f083 0301 	eor.w	r3, r3, #1
 8003194:	b2db      	uxtb	r3, r3
					!havePasts[index.y][index.x]&&
 8003196:	2b00      	cmp	r3, #0
 8003198:	d05c      	beq.n	8003254 <findNextIndex+0xa7c>
				int newResult =scoreMap[index.y][index.x]-2;
 800319a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800319e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80031a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80031b2:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 80031b6:	4613      	mov	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	4403      	add	r3, r0
 80031c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80031c6:	3b02      	subs	r3, #2
 80031c8:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
				if(mxResult<newResult){
 80031cc:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 80031d0:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 80031d4:	429a      	cmp	r2, r3
 80031d6:	da14      	bge.n	8003202 <findNextIndex+0xa2a>
					mxResult = newResult;
 80031d8:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 80031dc:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
					resultIndex = index;
 80031e0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80031e4:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80031e8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80031ec:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 80031f0:	460b      	mov	r3, r1
 80031f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031f6:	e883 0003 	stmia.w	r3, {r0, r1}
					resultDirection = i;
 80031fa:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 80031fe:	f887 33c7 	strb.w	r3, [r7, #967]	; 0x3c7
				}
				havePasts[index.y][index.x]=true;
 8003202:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003206:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003210:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003214:	6819      	ldr	r1, [r3, #0]
 8003216:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800321a:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800321e:	4613      	mov	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	4403      	add	r3, r0
 800322a:	440b      	add	r3, r1
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
				enqueue(&q,BFSValue_init(index,2,(Direction)i));
 8003230:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 800323a:	f5a2 719a 	sub.w	r1, r2, #308	; 0x134
 800323e:	2202      	movs	r2, #2
 8003240:	c903      	ldmia	r1, {r0, r1}
 8003242:	f7ff faa7 	bl	8002794 <BFSValue_init>
 8003246:	4602      	mov	r2, r0
 8003248:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f001 fd55 	bl	8004cfe <enqueue>
		for(int i=0;i<4;i++){
 8003254:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8003258:	3301      	adds	r3, #1
 800325a:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 800325e:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8003262:	2b03      	cmp	r3, #3
 8003264:	f77f af25 	ble.w	80030b2 <findNextIndex+0x8da>
			}
		}
		while(q.size!=0){
 8003268:	e125      	b.n	80034b6 <findNextIndex+0xcde>
			BFSValue* val = (BFSValue*)q.front->value;
 800326a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800326e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
			for(int i=0;i<4;i++){
 800327a:	2300      	movs	r3, #0
 800327c:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8003280:	e10f      	b.n	80034a2 <findNextIndex+0xcca>
 8003282:	bf00      	nop
 8003284:	200003b4 	.word	0x200003b4
 8003288:	20000068 	.word	0x20000068
 800328c:	20000308 	.word	0x20000308
				index = getIndexAtDirection(val->index,(Direction)i);
 8003290:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 800329a:	f5a2 749a 	sub.w	r4, r2, #308	; 0x134
 800329e:	4638      	mov	r0, r7
 80032a0:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80032a4:	ca06      	ldmia	r2, {r1, r2}
 80032a6:	f7fe fe3e 	bl	8001f26 <getIndexAtDirection>
 80032aa:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80032ae:	f5a3 727c 	sub.w	r2, r3, #1008	; 0x3f0
 80032b2:	4623      	mov	r3, r4
 80032b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032b8:	e883 0003 	stmia.w	r3, {r0, r1}
				if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 80032bc:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80032c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	220c      	movs	r2, #12
 80032c8:	4619      	mov	r1, r3
 80032ca:	2000      	movs	r0, #0
 80032cc:	f001 fcad 	bl	8004c2a <inBetween>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80e0 	beq.w	8003498 <findNextIndex+0xcc0>
 80032d8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80032dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	220c      	movs	r2, #12
 80032e4:	4619      	mov	r1, r3
 80032e6:	2000      	movs	r0, #0
 80032e8:	f001 fc9f 	bl	8004c2a <inBetween>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80d2 	beq.w	8003498 <findNextIndex+0xcc0>
						!walkMap[index.y][index.x]&&
 80032f4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80032f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003302:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003306:	6819      	ldr	r1, [r3, #0]
 8003308:	4896      	ldr	r0, [pc, #600]	; (8003564 <findNextIndex+0xd8c>)
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	4403      	add	r3, r0
 8003316:	440b      	add	r3, r1
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	f083 0301 	eor.w	r3, r3, #1
 800331e:	b2db      	uxtb	r3, r3
				if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80b9 	beq.w	8003498 <findNextIndex+0xcc0>
						!havePasts[index.y][index.x]&&
 8003326:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800332a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003334:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003338:	6819      	ldr	r1, [r3, #0]
 800333a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800333e:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8003342:	4613      	mov	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	4403      	add	r3, r0
 800334e:	440b      	add	r3, r1
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	f083 0301 	eor.w	r3, r3, #1
 8003356:	b2db      	uxtb	r3, r3
						!walkMap[index.y][index.x]&&
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 809d 	beq.w	8003498 <findNextIndex+0xcc0>
						!dangerMap[index.y][index.x]){
 800335e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003362:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800336c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003370:	6819      	ldr	r1, [r3, #0]
 8003372:	487d      	ldr	r0, [pc, #500]	; (8003568 <findNextIndex+0xd90>)
 8003374:	4613      	mov	r3, r2
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	4403      	add	r3, r0
 8003380:	440b      	add	r3, r1
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	f083 0301 	eor.w	r3, r3, #1
 8003388:	b2db      	uxtb	r3, r3
						!havePasts[index.y][index.x]&&
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 8084 	beq.w	8003498 <findNextIndex+0xcc0>
					int newResult =scoreMap[index.y][index.x]-(val->weight*2);
 8003390:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003394:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800339e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80033a8:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 80033ac:	4613      	mov	r3, r2
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	4403      	add	r3, r0
 80033b8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80033bc:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
					if(scoreMap[index.y][index.x]>0 && newResult<=0){
 80033ca:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80033ce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80033d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80033e2:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 80033e6:	4613      	mov	r3, r2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	4403      	add	r3, r0
 80033f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	dd06      	ble.n	8003408 <findNextIndex+0xc30>
 80033fa:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	dc02      	bgt.n	8003408 <findNextIndex+0xc30>
						newResult =1;
 8003402:	2301      	movs	r3, #1
 8003404:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
					}
					if(mxResult<newResult){
 8003408:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 800340c:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8003410:	429a      	cmp	r2, r3
 8003412:	da15      	bge.n	8003440 <findNextIndex+0xc68>
						mxResult = newResult;
 8003414:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8003418:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
						resultIndex = index;
 800341c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003420:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8003424:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003428:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 800342c:	460b      	mov	r3, r1
 800342e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003432:	e883 0003 	stmia.w	r3, {r0, r1}
						resultDirection = val->startDirection;
 8003436:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800343a:	7b1b      	ldrb	r3, [r3, #12]
 800343c:	f887 33c7 	strb.w	r3, [r7, #967]	; 0x3c7
					}
					havePasts[index.y][index.x]=true;
 8003440:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003444:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800344e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003452:	6819      	ldr	r1, [r3, #0]
 8003454:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003458:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800345c:	4613      	mov	r3, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	4403      	add	r3, r0
 8003468:	440b      	add	r3, r1
 800346a:	2201      	movs	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
					enqueue(&q,BFSValue_init(index,val->weight+1,val->startDirection));
 800346e:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800347a:	7b1b      	ldrb	r3, [r3, #12]
 800347c:	f507 717c 	add.w	r1, r7, #1008	; 0x3f0
 8003480:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 8003484:	c903      	ldmia	r1, {r0, r1}
 8003486:	f7ff f985 	bl	8002794 <BFSValue_init>
 800348a:	4602      	mov	r2, r0
 800348c:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8003490:	4611      	mov	r1, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f001 fc33 	bl	8004cfe <enqueue>
			for(int i=0;i<4;i++){
 8003498:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 800349c:	3301      	adds	r3, #1
 800349e:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 80034a2:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	f77f aef2 	ble.w	8003290 <findNextIndex+0xab8>
				}
			}
			dequeue(&q);
 80034ac:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80034b0:	4618      	mov	r0, r3
 80034b2:	f001 fc58 	bl	8004d66 <dequeue>
		while(q.size!=0){
 80034b6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80034ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f47f aed2 	bne.w	800326a <findNextIndex+0xa92>
		}
		if(Equal(resultIndex , startIndex) &&players->currentUseBomb<players->maxBombCount&&mxResult!=0){
 80034c6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80034ca:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80034ce:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80034d2:	cb0c      	ldmia	r3, {r2, r3}
 80034d4:	c903      	ldmia	r1, {r0, r1}
 80034d6:	f7fd fa8a 	bl	80009ee <Equal>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d012      	beq.n	8003506 <findNextIndex+0xd2e>
 80034e0:	4b22      	ldr	r3, [pc, #136]	; (800356c <findNextIndex+0xd94>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034e6:	4b21      	ldr	r3, [pc, #132]	; (800356c <findNextIndex+0xd94>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	da0a      	bge.n	8003506 <findNextIndex+0xd2e>
 80034f0:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d006      	beq.n	8003506 <findNextIndex+0xd2e>
			placeBomb(player);
 80034f8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80034fc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	f7fe fb97 	bl	8001c34 <placeBomb>
		}

		if(Equal(resultIndex , startIndex))
 8003506:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800350a:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 800350e:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003512:	cb0c      	ldmia	r3, {r2, r3}
 8003514:	c903      	ldmia	r1, {r0, r1}
 8003516:	f7fd fa6a 	bl	80009ee <Equal>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00c      	beq.n	800353a <findNextIndex+0xd62>
			return startIndex;
 8003520:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003524:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003530:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003534:	e882 0003 	stmia.w	r2, {r0, r1}
 8003538:	e00b      	b.n	8003552 <findNextIndex+0xd7a>
		else{
			return getIndexAtDirection(startIndex,resultDirection) ;
 800353a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800353e:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	f897 33c7 	ldrb.w	r3, [r7, #967]	; 0x3c7
 8003548:	f507 7266 	add.w	r2, r7, #920	; 0x398
 800354c:	ca06      	ldmia	r2, {r1, r2}
 800354e:	f7fe fcea 	bl	8001f26 <getIndexAtDirection>
		}
	}
}
 8003552:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003556:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	f507 777d 	add.w	r7, r7, #1012	; 0x3f4
 8003560:	46bd      	mov	sp, r7
 8003562:	bd90      	pop	{r4, r7, pc}
 8003564:	200003b4 	.word	0x200003b4
 8003568:	20000308 	.word	0x20000308
 800356c:	20002414 	.word	0x20002414

08003570 <PlayerUI_init>:
PlayerUI PlayerUI_init(Player* player,Vector2 offset){
 8003570:	b5b0      	push	{r4, r5, r7, lr}
 8003572:	b0ca      	sub	sp, #296	; 0x128
 8003574:	af02      	add	r7, sp, #8
 8003576:	6278      	str	r0, [r7, #36]	; 0x24
 8003578:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800357c:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8003580:	6001      	str	r1, [r0, #0]
 8003582:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8003586:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 800358a:	e881 000c 	stmia.w	r1, {r2, r3}
	PlayerUI playerUI;
	int x = 16 + UI_MARGIN;
 800358e:	2312      	movs	r3, #18
 8003590:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	int y = 16 + UI_MARGIN;
 8003594:	2312      	movs	r3, #18
 8003596:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	playerUI.player = player;
 800359a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800359e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
	playerUI.charactorTrans = Transform_init(Add(offset,Vector2_init(0,y)),Vector2_init(16,16),TopLeft);
 80035a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80035aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fd f965 	bl	8000880 <Vector2_init>
 80035b6:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80035ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80035be:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80035c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035cc:	ca06      	ldmia	r2, {r1, r2}
 80035ce:	f7fd f96f 	bl	80008b0 <Add>
 80035d2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80035d6:	2210      	movs	r2, #16
 80035d8:	2110      	movs	r1, #16
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fd f950 	bl	8000880 <Vector2_init>
 80035e0:	4638      	mov	r0, r7
 80035e2:	2300      	movs	r3, #0
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035f0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80035f4:	ca06      	ldmia	r2, {r1, r2}
 80035f6:	f7fd fa79 	bl	8000aec <Transform_init>
 80035fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80035fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003602:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8003606:	461d      	mov	r5, r3
 8003608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800360a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800360c:	682b      	ldr	r3, [r5, #0]
 800360e:	6023      	str	r3, [r4, #0]

	playerUI.speedImgTrans = Transform_init(Add(offset,Vector2_init(x,y)) ,Vector2_init(16,16),TopLeft);
 8003610:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003614:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003618:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800361c:	4618      	mov	r0, r3
 800361e:	f7fd f92f 	bl	8000880 <Vector2_init>
 8003622:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8003626:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800362a:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800362e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003638:	ca06      	ldmia	r2, {r1, r2}
 800363a:	f7fd f939 	bl	80008b0 <Add>
 800363e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003642:	2210      	movs	r2, #16
 8003644:	2110      	movs	r1, #16
 8003646:	4618      	mov	r0, r3
 8003648:	f7fd f91a 	bl	8000880 <Vector2_init>
 800364c:	4638      	mov	r0, r7
 800364e:	2300      	movs	r3, #0
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800365c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003660:	ca06      	ldmia	r2, {r1, r2}
 8003662:	f7fd fa43 	bl	8000aec <Transform_init>
 8003666:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800366a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800366e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8003672:	461d      	mov	r5, r3
 8003674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003678:	682b      	ldr	r3, [r5, #0]
 800367a:	6023      	str	r3, [r4, #0]
	playerUI.bombAmountImgTrans = Transform_init(Add(offset,Vector2_init(x*2,y)) ,Vector2_init(16,16),TopLeft);
 800367c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003680:	0059      	lsls	r1, r3, #1
 8003682:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003686:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd f8f8 	bl	8000880 <Vector2_init>
 8003690:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8003694:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003698:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800369c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036a6:	ca06      	ldmia	r2, {r1, r2}
 80036a8:	f7fd f902 	bl	80008b0 <Add>
 80036ac:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80036b0:	2210      	movs	r2, #16
 80036b2:	2110      	movs	r1, #16
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fd f8e3 	bl	8000880 <Vector2_init>
 80036ba:	4638      	mov	r0, r7
 80036bc:	2300      	movs	r3, #0
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036ca:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80036ce:	ca06      	ldmia	r2, {r1, r2}
 80036d0:	f7fd fa0c 	bl	8000aec <Transform_init>
 80036d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80036d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80036dc:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80036e0:	461d      	mov	r5, r3
 80036e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036e6:	682b      	ldr	r3, [r5, #0]
 80036e8:	6023      	str	r3, [r4, #0]
	playerUI.bombRangeImgTrans = Transform_init(Add(offset,Vector2_init(x*3,y)) ,Vector2_init(16,16),TopLeft);
 80036ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80036ee:	4613      	mov	r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	1899      	adds	r1, r3, r2
 80036f4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80036f8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fd f8bf 	bl	8000880 <Vector2_init>
 8003702:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8003706:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800370a:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003718:	ca06      	ldmia	r2, {r1, r2}
 800371a:	f7fd f8c9 	bl	80008b0 <Add>
 800371e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003722:	2210      	movs	r2, #16
 8003724:	2110      	movs	r1, #16
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd f8aa 	bl	8000880 <Vector2_init>
 800372c:	4638      	mov	r0, r7
 800372e:	2300      	movs	r3, #0
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800373c:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8003740:	ca06      	ldmia	r2, {r1, r2}
 8003742:	f7fd f9d3 	bl	8000aec <Transform_init>
 8003746:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800374a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800374e:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8003752:	461d      	mov	r5, r3
 8003754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003758:	682b      	ldr	r3, [r5, #0]
 800375a:	6023      	str	r3, [r4, #0]
	playerUI.healthImgTrans = Transform_init(Add(offset,Vector2_init(x*4,y)) ,Vector2_init(16,16),TopLeft);
 800375c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003760:	0099      	lsls	r1, r3, #2
 8003762:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003766:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800376a:	4618      	mov	r0, r3
 800376c:	f7fd f888 	bl	8000880 <Vector2_init>
 8003770:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8003774:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003778:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800377c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003786:	ca06      	ldmia	r2, {r1, r2}
 8003788:	f7fd f892 	bl	80008b0 <Add>
 800378c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003790:	2210      	movs	r2, #16
 8003792:	2110      	movs	r1, #16
 8003794:	4618      	mov	r0, r3
 8003796:	f7fd f873 	bl	8000880 <Vector2_init>
 800379a:	4638      	mov	r0, r7
 800379c:	2300      	movs	r3, #0
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80037aa:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80037ae:	ca06      	ldmia	r2, {r1, r2}
 80037b0:	f7fd f99c 	bl	8000aec <Transform_init>
 80037b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80037b8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80037bc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80037c0:	461d      	mov	r5, r3
 80037c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037c6:	682b      	ldr	r3, [r5, #0]
 80037c8:	6023      	str	r3, [r4, #0]

	playerUI.startTextPos = Add(offset,Vector2_init(x,0));
 80037ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fd f853 	bl	8000880 <Vector2_init>
 80037da:	4638      	mov	r0, r7
 80037dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80037e0:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80037ee:	ca06      	ldmia	r2, {r1, r2}
 80037f0:	f7fd f85e 	bl	80008b0 <Add>
 80037f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80037f8:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 80037fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003804:	e883 0003 	stmia.w	r3, {r0, r1}
	return playerUI;
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	4618      	mov	r0, r3
 800380c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003810:	2270      	movs	r2, #112	; 0x70
 8003812:	4619      	mov	r1, r3
 8003814:	f007 f822 	bl	800a85c <memcpy>
}
 8003818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800381a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800381e:	46bd      	mov	sp, r7
 8003820:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003824 <DrawPlayerUI>:
void DrawPlayerUI(PlayerUI* playerUI){
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af02      	add	r7, sp, #8
 800382a:	6078      	str	r0, [r7, #4]
	char str[10];

	DrawImage(&playerUI->charactorTrans,playerUI->player->imgPtr1);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	1d1a      	adds	r2, r3, #4
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003836:	4619      	mov	r1, r3
 8003838:	4610      	mov	r0, r2
 800383a:	f7fd fa43 	bl	8000cc4 <DrawImage>

	Vector2 pos =playerUI->startTextPos;
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	f107 030c 	add.w	r3, r7, #12
 8003844:	3268      	adds	r2, #104	; 0x68
 8003846:	e892 0003 	ldmia.w	r2, {r0, r1}
 800384a:	e883 0003 	stmia.w	r3, {r0, r1}
	DrawImage(&playerUI->speedImgTrans,bootImage);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	332c      	adds	r3, #44	; 0x2c
 8003852:	493f      	ldr	r1, [pc, #252]	; (8003950 <DrawPlayerUI+0x12c>)
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd fa35 	bl	8000cc4 <DrawImage>
	sprintf(str,"%d",playerUI->player->speed);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699a      	ldr	r2, [r3, #24]
 8003860:	f107 0314 	add.w	r3, r7, #20
 8003864:	493b      	ldr	r1, [pc, #236]	; (8003954 <DrawPlayerUI+0x130>)
 8003866:	4618      	mov	r0, r3
 8003868:	f006 fe74 	bl	800a554 <siprintf>
	ILI9341_Draw_Text(str,pos.x,pos.y, WHITE, 2, BLACK);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	b2d9      	uxtb	r1, r3
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	b2da      	uxtb	r2, r3
 8003874:	f107 0014 	add.w	r0, r7, #20
 8003878:	2300      	movs	r3, #0
 800387a:	9301      	str	r3, [sp, #4]
 800387c:	2302      	movs	r3, #2
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003884:	f001 fba2 	bl	8004fcc <ILI9341_Draw_Text>

	pos.x+= 16+UI_MARGIN;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3312      	adds	r3, #18
 800388c:	60fb      	str	r3, [r7, #12]
	DrawImage(&playerUI->bombAmountImgTrans,addBombImage);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3340      	adds	r3, #64	; 0x40
 8003892:	4931      	ldr	r1, [pc, #196]	; (8003958 <DrawPlayerUI+0x134>)
 8003894:	4618      	mov	r0, r3
 8003896:	f7fd fa15 	bl	8000cc4 <DrawImage>
	sprintf(str,"%d",playerUI->player->maxBombCount);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69da      	ldr	r2, [r3, #28]
 80038a0:	f107 0314 	add.w	r3, r7, #20
 80038a4:	492b      	ldr	r1, [pc, #172]	; (8003954 <DrawPlayerUI+0x130>)
 80038a6:	4618      	mov	r0, r3
 80038a8:	f006 fe54 	bl	800a554 <siprintf>
	ILI9341_Draw_Text(str,pos.x,pos.y, GREEN, 2, BLACK);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	b2d9      	uxtb	r1, r3
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	f107 0014 	add.w	r0, r7, #20
 80038b8:	2300      	movs	r3, #0
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	2302      	movs	r3, #2
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038c4:	f001 fb82 	bl	8004fcc <ILI9341_Draw_Text>

	pos.x+= 16+UI_MARGIN;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3312      	adds	r3, #18
 80038cc:	60fb      	str	r3, [r7, #12]
	DrawImage(&playerUI->bombRangeImgTrans,potionImage);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3354      	adds	r3, #84	; 0x54
 80038d2:	4922      	ldr	r1, [pc, #136]	; (800395c <DrawPlayerUI+0x138>)
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fd f9f5 	bl	8000cc4 <DrawImage>
	sprintf(str,"%d",playerUI->player->bombRange);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6a1a      	ldr	r2, [r3, #32]
 80038e0:	f107 0314 	add.w	r3, r7, #20
 80038e4:	491b      	ldr	r1, [pc, #108]	; (8003954 <DrawPlayerUI+0x130>)
 80038e6:	4618      	mov	r0, r3
 80038e8:	f006 fe34 	bl	800a554 <siprintf>
	ILI9341_Draw_Text(str,pos.x,pos.y, BLUE, 2, BLACK);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	b2d9      	uxtb	r1, r3
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	f107 0014 	add.w	r0, r7, #20
 80038f8:	2300      	movs	r3, #0
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	2302      	movs	r3, #2
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	231f      	movs	r3, #31
 8003902:	f001 fb63 	bl	8004fcc <ILI9341_Draw_Text>

	pos.x+= 16+UI_MARGIN;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	3312      	adds	r3, #18
 800390a:	60fb      	str	r3, [r7, #12]
	DrawImage(&playerUI->healthImgTrans,heartImage);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3318      	adds	r3, #24
 8003910:	4913      	ldr	r1, [pc, #76]	; (8003960 <DrawPlayerUI+0x13c>)
 8003912:	4618      	mov	r0, r3
 8003914:	f7fd f9d6 	bl	8000cc4 <DrawImage>
	sprintf(str,"%d",playerUI->player->health);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	f107 0314 	add.w	r3, r7, #20
 8003922:	490c      	ldr	r1, [pc, #48]	; (8003954 <DrawPlayerUI+0x130>)
 8003924:	4618      	mov	r0, r3
 8003926:	f006 fe15 	bl	800a554 <siprintf>
	ILI9341_Draw_Text(str,pos.x,pos.y, RED, 2, BLACK);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	b2d9      	uxtb	r1, r3
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	f107 0014 	add.w	r0, r7, #20
 8003936:	2300      	movs	r3, #0
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	2302      	movs	r3, #2
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003942:	f001 fb43 	bl	8004fcc <ILI9341_Draw_Text>
}
 8003946:	bf00      	nop
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	0800dec4 	.word	0x0800dec4
 8003954:	0800ca7c 	.word	0x0800ca7c
 8003958:	0800e8c4 	.word	0x0800e8c4
 800395c:	0800e2c4 	.word	0x0800e2c4
 8003960:	0800e0c4 	.word	0x0800e0c4

08003964 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08e      	sub	sp, #56	; 0x38
 8003968:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	60da      	str	r2, [r3, #12]
 8003978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800397a:	4ba7      	ldr	r3, [pc, #668]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	4aa6      	ldr	r2, [pc, #664]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 8003980:	f043 0310 	orr.w	r3, r3, #16
 8003984:	6313      	str	r3, [r2, #48]	; 0x30
 8003986:	4ba4      	ldr	r3, [pc, #656]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	623b      	str	r3, [r7, #32]
 8003990:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003992:	4ba1      	ldr	r3, [pc, #644]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4aa0      	ldr	r2, [pc, #640]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 8003998:	f043 0304 	orr.w	r3, r3, #4
 800399c:	6313      	str	r3, [r2, #48]	; 0x30
 800399e:	4b9e      	ldr	r3, [pc, #632]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	61fb      	str	r3, [r7, #28]
 80039a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80039aa:	4b9b      	ldr	r3, [pc, #620]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	4a9a      	ldr	r2, [pc, #616]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 80039b0:	f043 0320 	orr.w	r3, r3, #32
 80039b4:	6313      	str	r3, [r2, #48]	; 0x30
 80039b6:	4b98      	ldr	r3, [pc, #608]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	61bb      	str	r3, [r7, #24]
 80039c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039c2:	4b95      	ldr	r3, [pc, #596]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	4a94      	ldr	r2, [pc, #592]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 80039c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039cc:	6313      	str	r3, [r2, #48]	; 0x30
 80039ce:	4b92      	ldr	r3, [pc, #584]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039da:	4b8f      	ldr	r3, [pc, #572]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	4a8e      	ldr	r2, [pc, #568]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	6313      	str	r3, [r2, #48]	; 0x30
 80039e6:	4b8c      	ldr	r3, [pc, #560]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f2:	4b89      	ldr	r3, [pc, #548]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	4a88      	ldr	r2, [pc, #544]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 80039f8:	f043 0302 	orr.w	r3, r3, #2
 80039fc:	6313      	str	r3, [r2, #48]	; 0x30
 80039fe:	4b86      	ldr	r3, [pc, #536]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a0a:	4b83      	ldr	r3, [pc, #524]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	4a82      	ldr	r2, [pc, #520]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 8003a10:	f043 0308 	orr.w	r3, r3, #8
 8003a14:	6313      	str	r3, [r2, #48]	; 0x30
 8003a16:	4b80      	ldr	r3, [pc, #512]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a22:	4b7d      	ldr	r3, [pc, #500]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	4a7c      	ldr	r2, [pc, #496]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 8003a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2e:	4b7a      	ldr	r3, [pc, #488]	; (8003c18 <MX_GPIO_Init+0x2b4>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	607b      	str	r3, [r7, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2168      	movs	r1, #104	; 0x68
 8003a3e:	4877      	ldr	r0, [pc, #476]	; (8003c1c <MX_GPIO_Init+0x2b8>)
 8003a40:	f003 f9e8 	bl	8006e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003a44:	2200      	movs	r2, #0
 8003a46:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8003a4a:	4875      	ldr	r0, [pc, #468]	; (8003c20 <MX_GPIO_Init+0x2bc>)
 8003a4c:	f003 f9e2 	bl	8006e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003a50:	2200      	movs	r2, #0
 8003a52:	2140      	movs	r1, #64	; 0x40
 8003a54:	4873      	ldr	r0, [pc, #460]	; (8003c24 <MX_GPIO_Init+0x2c0>)
 8003a56:	f003 f9dd 	bl	8006e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003a60:	4871      	ldr	r0, [pc, #452]	; (8003c28 <MX_GPIO_Init+0x2c4>)
 8003a62:	f003 f9d7 	bl	8006e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8003a66:	2314      	movs	r3, #20
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a76:	4619      	mov	r1, r3
 8003a78:	4868      	ldr	r0, [pc, #416]	; (8003c1c <MX_GPIO_Init+0x2b8>)
 8003a7a:	f003 f81f 	bl	8006abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8003a7e:	2368      	movs	r3, #104	; 0x68
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a82:	2301      	movs	r3, #1
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a92:	4619      	mov	r1, r3
 8003a94:	4861      	ldr	r0, [pc, #388]	; (8003c1c <MX_GPIO_Init+0x2b8>)
 8003a96:	f003 f811 	bl	8006abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003aa0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aae:	4619      	mov	r1, r3
 8003ab0:	485d      	ldr	r0, [pc, #372]	; (8003c28 <MX_GPIO_Init+0x2c4>)
 8003ab2:	f003 f803 	bl	8006abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ab6:	2310      	movs	r3, #16
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003aba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4858      	ldr	r0, [pc, #352]	; (8003c2c <MX_GPIO_Init+0x2c8>)
 8003acc:	f002 fff6 	bl	8006abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003ad0:	2332      	movs	r3, #50	; 0x32
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003adc:	2303      	movs	r3, #3
 8003ade:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ae0:	230b      	movs	r3, #11
 8003ae2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae8:	4619      	mov	r1, r3
 8003aea:	484f      	ldr	r0, [pc, #316]	; (8003c28 <MX_GPIO_Init+0x2c4>)
 8003aec:	f002 ffe6 	bl	8006abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003af0:	2308      	movs	r3, #8
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003af4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b02:	4619      	mov	r1, r3
 8003b04:	4848      	ldr	r0, [pc, #288]	; (8003c28 <MX_GPIO_Init+0x2c4>)
 8003b06:	f002 ffd9 	bl	8006abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003b0a:	2386      	movs	r3, #134	; 0x86
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b16:	2303      	movs	r3, #3
 8003b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b1a:	230b      	movs	r3, #11
 8003b1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b22:	4619      	mov	r1, r3
 8003b24:	4842      	ldr	r0, [pc, #264]	; (8003c30 <MX_GPIO_Init+0x2cc>)
 8003b26:	f002 ffc9 	bl	8006abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003b2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b30:	2302      	movs	r3, #2
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b3c:	230b      	movs	r3, #11
 8003b3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b44:	4619      	mov	r1, r3
 8003b46:	4836      	ldr	r0, [pc, #216]	; (8003c20 <MX_GPIO_Init+0x2bc>)
 8003b48:	f002 ffb8 	bl	8006abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8003b4c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b52:	2301      	movs	r3, #1
 8003b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b62:	4619      	mov	r1, r3
 8003b64:	482e      	ldr	r0, [pc, #184]	; (8003c20 <MX_GPIO_Init+0x2bc>)
 8003b66:	f002 ffa9 	bl	8006abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003b6a:	2340      	movs	r3, #64	; 0x40
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b76:	2300      	movs	r3, #0
 8003b78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4828      	ldr	r0, [pc, #160]	; (8003c24 <MX_GPIO_Init+0x2c0>)
 8003b82:	f002 ff9b 	bl	8006abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b96:	4619      	mov	r1, r3
 8003b98:	4822      	ldr	r0, [pc, #136]	; (8003c24 <MX_GPIO_Init+0x2c0>)
 8003b9a:	f002 ff8f 	bl	8006abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8003b9e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bac:	2303      	movs	r3, #3
 8003bae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	481c      	ldr	r0, [pc, #112]	; (8003c28 <MX_GPIO_Init+0x2c4>)
 8003bb8:	f002 ff80 	bl	8006abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003bbc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003bce:	230b      	movs	r3, #11
 8003bd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4812      	ldr	r0, [pc, #72]	; (8003c24 <MX_GPIO_Init+0x2c0>)
 8003bda:	f002 ff6f 	bl	8006abc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003bde:	2200      	movs	r2, #0
 8003be0:	2100      	movs	r1, #0
 8003be2:	2009      	movs	r0, #9
 8003be4:	f002 fbbb 	bl	800635e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003be8:	2009      	movs	r0, #9
 8003bea:	f002 fbd4 	bl	8006396 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	200a      	movs	r0, #10
 8003bf4:	f002 fbb3 	bl	800635e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003bf8:	200a      	movs	r0, #10
 8003bfa:	f002 fbcc 	bl	8006396 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2101      	movs	r1, #1
 8003c02:	2028      	movs	r0, #40	; 0x28
 8003c04:	f002 fbab 	bl	800635e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c08:	2028      	movs	r0, #40	; 0x28
 8003c0a:	f002 fbc4 	bl	8006396 <HAL_NVIC_EnableIRQ>

}
 8003c0e:	bf00      	nop
 8003c10:	3738      	adds	r7, #56	; 0x38
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40020400 	.word	0x40020400
 8003c24:	40021800 	.word	0x40021800
 8003c28:	40020800 	.word	0x40020800
 8003c2c:	40021400 	.word	0x40021400
 8003c30:	40020000 	.word	0x40020000

08003c34 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003c38:	f3bf 8f4f 	dsb	sy
}
 8003c3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c3e:	f3bf 8f6f 	isb	sy
}
 8003c42:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003c44:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <SCB_EnableICache+0x48>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003c4c:	f3bf 8f4f 	dsb	sy
}
 8003c50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c52:	f3bf 8f6f 	isb	sy
}
 8003c56:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003c58:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <SCB_EnableICache+0x48>)
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	4a07      	ldr	r2, [pc, #28]	; (8003c7c <SCB_EnableICache+0x48>)
 8003c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c64:	f3bf 8f4f 	dsb	sy
}
 8003c68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c6a:	f3bf 8f6f 	isb	sy
}
 8003c6e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8003c70:	bf00      	nop
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003c86:	4b1f      	ldr	r3, [pc, #124]	; (8003d04 <SCB_EnableDCache+0x84>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003c8e:	f3bf 8f4f 	dsb	sy
}
 8003c92:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003c94:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <SCB_EnableDCache+0x84>)
 8003c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c9a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	0b5b      	lsrs	r3, r3, #13
 8003ca0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003ca4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	08db      	lsrs	r3, r3, #3
 8003caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cae:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003cb8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003cbe:	4911      	ldr	r1, [pc, #68]	; (8003d04 <SCB_EnableDCache+0x84>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	1e5a      	subs	r2, r3, #1
 8003cca:	60ba      	str	r2, [r7, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1ef      	bne.n	8003cb0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1e5a      	subs	r2, r3, #1
 8003cd4:	60fa      	str	r2, [r7, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e5      	bne.n	8003ca6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8003cda:	f3bf 8f4f 	dsb	sy
}
 8003cde:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003ce0:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <SCB_EnableDCache+0x84>)
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	4a07      	ldr	r2, [pc, #28]	; (8003d04 <SCB_EnableDCache+0x84>)
 8003ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003cec:	f3bf 8f4f 	dsb	sy
}
 8003cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003cf2:	f3bf 8f6f 	isb	sy
}
 8003cf6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <HAL_TIM_PeriodElapsedCallback>:
PlayerUI* playerUIs;
Queue bombs ={NULL,NULL,0};
Queue detonateEffects = {NULL,NULL,0};
int32_t buffer[4];
char str[90];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	if(htim==&htim1){
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d128      	bne.n	8003d6a <HAL_TIM_PeriodElapsedCallback+0x62>
		TimeTotal += 20;
 8003d18:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3314      	adds	r3, #20
 8003d1e:	4a16      	ldr	r2, [pc, #88]	; (8003d78 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003d20:	6013      	str	r3, [r2, #0]
		int deadFlagTotal = 0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
		for(int i=0;i<playerCount;i++){
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	e00e      	b.n	8003d4a <HAL_TIM_PeriodElapsedCallback+0x42>
			if(players[i].deadFlag)
 8003d2c:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	019b      	lsls	r3, r3, #6
 8003d34:	4413      	add	r3, r2
 8003d36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_TIM_PeriodElapsedCallback+0x3c>
				deadFlagTotal ++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3301      	adds	r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]
		for(int i=0;i<playerCount;i++){
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	3301      	adds	r3, #1
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	4b0d      	ldr	r3, [pc, #52]	; (8003d80 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	dbeb      	blt.n	8003d2c <HAL_TIM_PeriodElapsedCallback+0x24>
		}
		if(deadFlagTotal+1<playerCount){
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	da04      	bge.n	8003d6a <HAL_TIM_PeriodElapsedCallback+0x62>
			HAL_ADC_Start_DMA(&hadc1,(uint32_t *)buffer,4);
 8003d60:	2204      	movs	r2, #4
 8003d62:	4908      	ldr	r1, [pc, #32]	; (8003d84 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003d64:	4808      	ldr	r0, [pc, #32]	; (8003d88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003d66:	f001 fe3f 	bl	80059e8 <HAL_ADC_Start_DMA>
		}
	}
}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	200024bc 	.word	0x200024bc
 8003d78:	20002410 	.word	0x20002410
 8003d7c:	20002414 	.word	0x20002414
 8003d80:	20000068 	.word	0x20000068
 8003d84:	20002434 	.word	0x20002434
 8003d88:	20000260 	.word	0x20000260

08003d8c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003d8c:	b590      	push	{r4, r7, lr}
 8003d8e:	ed2d 8b02 	vpush	{d8}
 8003d92:	b093      	sub	sp, #76	; 0x4c
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	6078      	str	r0, [r7, #4]
	int time=TimeTotal;
 8003d98:	4b9d      	ldr	r3, [pc, #628]	; (8004010 <HAL_ADC_ConvCpltCallback+0x284>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(bombs.size&&((Bomb*)bombs.front->value)->detonateTime<time){
 8003d9e:	e005      	b.n	8003dac <HAL_ADC_ConvCpltCallback+0x20>

		detonate((Bomb*)bombs.front->value);
 8003da0:	4b9c      	ldr	r3, [pc, #624]	; (8004014 <HAL_ADC_ConvCpltCallback+0x288>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fd ffa6 	bl	8001cf8 <detonate>
	while(bombs.size&&((Bomb*)bombs.front->value)->detonateTime<time){
 8003dac:	4b99      	ldr	r3, [pc, #612]	; (8004014 <HAL_ADC_ConvCpltCallback+0x288>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00f      	beq.n	8003dd4 <HAL_ADC_ConvCpltCallback+0x48>
 8003db4:	4b97      	ldr	r3, [pc, #604]	; (8004014 <HAL_ADC_ConvCpltCallback+0x288>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	dcee      	bgt.n	8003da0 <HAL_ADC_ConvCpltCallback+0x14>
	}
	while(detonateEffects.size&&((DetonateEffect*)detonateEffects.front->value)->deconstructTime<time){
 8003dc2:	e007      	b.n	8003dd4 <HAL_ADC_ConvCpltCallback+0x48>

		clearObject(((DetonateEffect*)detonateEffects.front->value)->index,true);
 8003dc4:	4b94      	ldr	r3, [pc, #592]	; (8004018 <HAL_ADC_ConvCpltCallback+0x28c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003dd0:	f7fd fe78 	bl	8001ac4 <clearObject>
	while(detonateEffects.size&&((DetonateEffect*)detonateEffects.front->value)->deconstructTime<time){
 8003dd4:	4b90      	ldr	r3, [pc, #576]	; (8004018 <HAL_ADC_ConvCpltCallback+0x28c>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d006      	beq.n	8003dea <HAL_ADC_ConvCpltCallback+0x5e>
 8003ddc:	4b8e      	ldr	r3, [pc, #568]	; (8004018 <HAL_ADC_ConvCpltCallback+0x28c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003de6:	429a      	cmp	r2, r3
 8003de8:	dcec      	bgt.n	8003dc4 <HAL_ADC_ConvCpltCallback+0x38>
	}
	for(int i=0;i<playerCount;i++){
 8003dea:	2300      	movs	r3, #0
 8003dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dee:	e01f      	b.n	8003e30 <HAL_ADC_ConvCpltCallback+0xa4>
		if(players[i].immortalFlag&&time-players[i].initialImmortalTime>IMMORTAL_DURATION)
 8003df0:	4b8a      	ldr	r3, [pc, #552]	; (800401c <HAL_ADC_ConvCpltCallback+0x290>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df6:	019b      	lsls	r3, r3, #6
 8003df8:	4413      	add	r3, r2
 8003dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d013      	beq.n	8003e2a <HAL_ADC_ConvCpltCallback+0x9e>
 8003e02:	4b86      	ldr	r3, [pc, #536]	; (800401c <HAL_ADC_ConvCpltCallback+0x290>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e08:	019b      	lsls	r3, r3, #6
 8003e0a:	4413      	add	r3, r2
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003e16:	4293      	cmp	r3, r2
 8003e18:	dd07      	ble.n	8003e2a <HAL_ADC_ConvCpltCallback+0x9e>
			players[i].immortalFlag = false;
 8003e1a:	4b80      	ldr	r3, [pc, #512]	; (800401c <HAL_ADC_ConvCpltCallback+0x290>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e20:	019b      	lsls	r3, r3, #6
 8003e22:	4413      	add	r3, r2
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for(int i=0;i<playerCount;i++){
 8003e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e30:	4b7b      	ldr	r3, [pc, #492]	; (8004020 <HAL_ADC_ConvCpltCallback+0x294>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e36:	429a      	cmp	r2, r3
 8003e38:	dbda      	blt.n	8003df0 <HAL_ADC_ConvCpltCallback+0x64>
	}
	updateMap();
 8003e3a:	f7fe f8b5 	bl	8001fa8 <updateMap>
	for(int i=0,humanPlayerCount =0;i<playerCount;i++){
 8003e3e:	2300      	movs	r3, #0
 8003e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e42:	2300      	movs	r3, #0
 8003e44:	637b      	str	r3, [r7, #52]	; 0x34
 8003e46:	e0b7      	b.n	8003fb8 <HAL_ADC_ConvCpltCallback+0x22c>
		if(players[i].botFlag){
 8003e48:	4b74      	ldr	r3, [pc, #464]	; (800401c <HAL_ADC_ConvCpltCallback+0x290>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4e:	019b      	lsls	r3, r3, #6
 8003e50:	4413      	add	r3, r2
 8003e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d04c      	beq.n	8003ef4 <HAL_ADC_ConvCpltCallback+0x168>
			if(!players[i].deadFlag){
 8003e5a:	4b70      	ldr	r3, [pc, #448]	; (800401c <HAL_ADC_ConvCpltCallback+0x290>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e60:	019b      	lsls	r3, r3, #6
 8003e62:	4413      	add	r3, r2
 8003e64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e68:	f083 0301 	eor.w	r3, r3, #1
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 809f 	beq.w	8003fb2 <HAL_ADC_ConvCpltCallback+0x226>
				Vector2 dst=Sub( toPosition(findNextIndex(&players[i])) ,players[i].transform.position);
 8003e74:	4b69      	ldr	r3, [pc, #420]	; (800401c <HAL_ADC_ConvCpltCallback+0x290>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	019b      	lsls	r3, r3, #6
 8003e7c:	441a      	add	r2, r3
 8003e7e:	f107 0310 	add.w	r3, r7, #16
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fe fca7 	bl	80027d8 <findNextIndex>
 8003e8a:	f107 0018 	add.w	r0, r7, #24
 8003e8e:	f107 0310 	add.w	r3, r7, #16
 8003e92:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003e96:	f7fc fe09 	bl	8000aac <toPosition>
 8003e9a:	4b60      	ldr	r3, [pc, #384]	; (800401c <HAL_ADC_ConvCpltCallback+0x290>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	019b      	lsls	r3, r3, #6
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f107 0008 	add.w	r0, r7, #8
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	9200      	str	r2, [sp, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f107 0218 	add.w	r2, r7, #24
 8003eb2:	ca06      	ldmia	r2, {r1, r2}
 8003eb4:	f7fc fd1b 	bl	80008ee <Sub>
				dst.x = clamp(-1,dst.x,1);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ec2:	f000 fe99 	bl	8004bf8 <clamp>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	60bb      	str	r3, [r7, #8]
				dst.y = clamp(-1,dst.y,1);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	4619      	mov	r1, r3
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ed4:	f000 fe90 	bl	8004bf8 <clamp>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	60fb      	str	r3, [r7, #12]
				Move(&players[i],dst);
 8003edc:	4b4f      	ldr	r3, [pc, #316]	; (800401c <HAL_ADC_ConvCpltCallback+0x290>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee2:	019b      	lsls	r3, r3, #6
 8003ee4:	18d0      	adds	r0, r2, r3
 8003ee6:	f107 0308 	add.w	r3, r7, #8
 8003eea:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003eee:	f7fd f85f 	bl	8000fb0 <Move>
 8003ef2:	e05e      	b.n	8003fb2 <HAL_ADC_ConvCpltCallback+0x226>
			}
		}
		else{
			int num =(humanPlayerCount == 0)?0:2;
 8003ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_ADC_ConvCpltCallback+0x172>
 8003efa:	2300      	movs	r3, #0
 8003efc:	e000      	b.n	8003f00 <HAL_ADC_ConvCpltCallback+0x174>
 8003efe:	2302      	movs	r3, #2
 8003f00:	62bb      	str	r3, [r7, #40]	; 0x28
			if(humanPlayerCount<2){
 8003f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	dc51      	bgt.n	8003fac <HAL_ADC_ConvCpltCallback+0x220>
				if(!players[i].deadFlag)
 8003f08:	4b44      	ldr	r3, [pc, #272]	; (800401c <HAL_ADC_ConvCpltCallback+0x290>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0e:	019b      	lsls	r3, r3, #6
 8003f10:	4413      	add	r3, r2
 8003f12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f16:	f083 0301 	eor.w	r3, r3, #1
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d045      	beq.n	8003fac <HAL_ADC_ConvCpltCallback+0x220>
					Move(&players[i],Vector2_init(mappingValue(buffer[num],0,0xfff,-3,3) ,mappingValue(buffer[num+1],0,0xfff,3,-3)));
 8003f20:	4b3e      	ldr	r3, [pc, #248]	; (800401c <HAL_ADC_ConvCpltCallback+0x290>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f26:	019b      	lsls	r3, r3, #6
 8003f28:	18d4      	adds	r4, r2, r3
 8003f2a:	4a3e      	ldr	r2, [pc, #248]	; (8004024 <HAL_ADC_ConvCpltCallback+0x298>)
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f3a:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 8003f3e:	eef8 1a08 	vmov.f32	s3, #136	; 0xc0400000 -3.0
 8003f42:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8004028 <HAL_ADC_ConvCpltCallback+0x29c>
 8003f46:	eddf 0a39 	vldr	s1, [pc, #228]	; 800402c <HAL_ADC_ConvCpltCallback+0x2a0>
 8003f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f4e:	f000 fe25 	bl	8004b9c <mappingValue>
 8003f52:	eef0 7a40 	vmov.f32	s15, s0
 8003f56:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	4a31      	ldr	r2, [pc, #196]	; (8004024 <HAL_ADC_ConvCpltCallback+0x298>)
 8003f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f6c:	eeb8 2a08 	vmov.f32	s4, #136	; 0xc0400000 -3.0
 8003f70:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8003f74:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8004028 <HAL_ADC_ConvCpltCallback+0x29c>
 8003f78:	eddf 0a2c 	vldr	s1, [pc, #176]	; 800402c <HAL_ADC_ConvCpltCallback+0x2a0>
 8003f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f80:	f000 fe0c 	bl	8004b9c <mappingValue>
 8003f84:	eef0 7a40 	vmov.f32	s15, s0
 8003f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f8c:	f107 0320 	add.w	r3, r7, #32
 8003f90:	ee17 2a90 	vmov	r2, s15
 8003f94:	ee18 1a10 	vmov	r1, s16
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fc fc71 	bl	8000880 <Vector2_init>
 8003f9e:	f107 0320 	add.w	r3, r7, #32
 8003fa2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f7fd f802 	bl	8000fb0 <Move>
			}

			humanPlayerCount++;
 8003fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fae:	3301      	adds	r3, #1
 8003fb0:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=0,humanPlayerCount =0;i<playerCount;i++){
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fb8:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_ADC_ConvCpltCallback+0x294>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	f6ff af42 	blt.w	8003e48 <HAL_ADC_ConvCpltCallback+0xbc>
		}
	}

	drawPlayers(players,playerCount);
 8003fc4:	4b15      	ldr	r3, [pc, #84]	; (800401c <HAL_ADC_ConvCpltCallback+0x290>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a15      	ldr	r2, [pc, #84]	; (8004020 <HAL_ADC_ConvCpltCallback+0x294>)
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	4611      	mov	r1, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fd fa40 	bl	8001454 <drawPlayers>
	for(int i=0;i<playerCount;i++)
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8003fd8:	e00d      	b.n	8003ff6 <HAL_ADC_ConvCpltCallback+0x26a>
		DrawPlayerUI(&playerUIs[i]);
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8003fdc:	6819      	ldr	r1, [r3, #0]
 8003fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	440b      	add	r3, r1
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff fc1a 	bl	8003824 <DrawPlayerUI>
	for(int i=0;i<playerCount;i++)
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <HAL_ADC_ConvCpltCallback+0x294>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	dbec      	blt.n	8003fda <HAL_ADC_ConvCpltCallback+0x24e>
}
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	3744      	adds	r7, #68	; 0x44
 8004006:	46bd      	mov	sp, r7
 8004008:	ecbd 8b02 	vpop	{d8}
 800400c:	bd90      	pop	{r4, r7, pc}
 800400e:	bf00      	nop
 8004010:	20002410 	.word	0x20002410
 8004014:	2000241c 	.word	0x2000241c
 8004018:	20002428 	.word	0x20002428
 800401c:	20002414 	.word	0x20002414
 8004020:	20000068 	.word	0x20000068
 8004024:	20002434 	.word	0x20002434
 8004028:	457ff000 	.word	0x457ff000
 800402c:	00000000 	.word	0x00000000
 8004030:	20002418 	.word	0x20002418

08004034 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	80fb      	strh	r3, [r7, #6]
	int humanTotal = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
	int val=-1;
 8004042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004046:	613b      	str	r3, [r7, #16]
	if(GPIO_Pin==GPIO_PIN_3){ val =1; }
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	2b08      	cmp	r3, #8
 800404c:	d102      	bne.n	8004054 <HAL_GPIO_EXTI_Callback+0x20>
 800404e:	2301      	movs	r3, #1
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	e004      	b.n	800405e <HAL_GPIO_EXTI_Callback+0x2a>
	else if(GPIO_Pin==GPIO_PIN_4){ val =2; }
 8004054:	88fb      	ldrh	r3, [r7, #6]
 8004056:	2b10      	cmp	r3, #16
 8004058:	d101      	bne.n	800405e <HAL_GPIO_EXTI_Callback+0x2a>
 800405a:	2302      	movs	r3, #2
 800405c:	613b      	str	r3, [r7, #16]
	if(val!=-1){
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004064:	d027      	beq.n	80040b6 <HAL_GPIO_EXTI_Callback+0x82>
		for(int i=0;i<playerCount;i++){
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	e01f      	b.n	80040ac <HAL_GPIO_EXTI_Callback+0x78>
			if(!players[i].botFlag){
 800406c:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <HAL_GPIO_EXTI_Callback+0x8c>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	019b      	lsls	r3, r3, #6
 8004074:	4413      	add	r3, r2
 8004076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407a:	f083 0301 	eor.w	r3, r3, #1
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d010      	beq.n	80040a6 <HAL_GPIO_EXTI_Callback+0x72>
				humanTotal++;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	3301      	adds	r3, #1
 8004088:	617b      	str	r3, [r7, #20]
				if(humanTotal == val){
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	429a      	cmp	r2, r3
 8004090:	d109      	bne.n	80040a6 <HAL_GPIO_EXTI_Callback+0x72>
					placeBomb(&players[i]);
 8004092:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	019b      	lsls	r3, r3, #6
 800409a:	4413      	add	r3, r2
 800409c:	4618      	mov	r0, r3
 800409e:	f7fd fdc9 	bl	8001c34 <placeBomb>
					break;
 80040a2:	bf00      	nop
				}
			}
		}
	}
}
 80040a4:	e007      	b.n	80040b6 <HAL_GPIO_EXTI_Callback+0x82>
		for(int i=0;i<playerCount;i++){
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3301      	adds	r3, #1
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <HAL_GPIO_EXTI_Callback+0x90>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	dbda      	blt.n	800406c <HAL_GPIO_EXTI_Callback+0x38>
}
 80040b6:	bf00      	nop
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20002414 	.word	0x20002414
 80040c4:	20000068 	.word	0x20000068

080040c8 <SetPlayers>:
void SetPlayers(int count,bool* isBot){
 80040c8:	b5b0      	push	{r4, r5, r7, lr}
 80040ca:	b0ce      	sub	sp, #312	; 0x138
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 80040d2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
	playerCount = count;
 80040d6:	4a6b      	ldr	r2, [pc, #428]	; (8004284 <SetPlayers+0x1bc>)
 80040d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80040dc:	6013      	str	r3, [r2, #0]
	players = calloc(playerCount,sizeof(Player));
 80040de:	4b69      	ldr	r3, [pc, #420]	; (8004284 <SetPlayers+0x1bc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2140      	movs	r1, #64	; 0x40
 80040e4:	4618      	mov	r0, r3
 80040e6:	f005 fd1f 	bl	8009b28 <calloc>
 80040ea:	4603      	mov	r3, r0
 80040ec:	461a      	mov	r2, r3
 80040ee:	4b66      	ldr	r3, [pc, #408]	; (8004288 <SetPlayers+0x1c0>)
 80040f0:	601a      	str	r2, [r3, #0]
	playerUIs = calloc(playerCount,sizeof(PlayerUI));
 80040f2:	4b64      	ldr	r3, [pc, #400]	; (8004284 <SetPlayers+0x1bc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2170      	movs	r1, #112	; 0x70
 80040f8:	4618      	mov	r0, r3
 80040fa:	f005 fd15 	bl	8009b28 <calloc>
 80040fe:	4603      	mov	r3, r0
 8004100:	461a      	mov	r2, r3
 8004102:	4b62      	ldr	r3, [pc, #392]	; (800428c <SetPlayers+0x1c4>)
 8004104:	601a      	str	r2, [r3, #0]
	char *playerImage[4]={
 8004106:	4b62      	ldr	r3, [pc, #392]	; (8004290 <SetPlayers+0x1c8>)
 8004108:	f507 7480 	add.w	r4, r7, #256	; 0x100
 800410c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800410e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		playerImage1,
		playerImage2,
		playerImage3,
		playerImage4
	};
	char *playerImageBomb[4]={
 8004112:	4b60      	ldr	r3, [pc, #384]	; (8004294 <SetPlayers+0x1cc>)
 8004114:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8004118:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800411a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			playerImage1Bomb,
			playerImage2Bomb,
			playerImage3Bomb,
			playerImage4Bomb
		};
	Vector2 startPosition[4]={
 800411e:	4b5e      	ldr	r3, [pc, #376]	; (8004298 <SetPlayers+0x1d0>)
 8004120:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8004124:	461d      	mov	r5, r3
 8004126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800412a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800412e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,0},
			{0,MAP_HEIGHT-1},
			{MAP_WIDTH-1,0},
			{MAP_WIDTH-1,MAP_HEIGHT-1},
	};
	for(int i=0;i<playerCount;i++){
 8004132:	2300      	movs	r3, #0
 8004134:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004138:	e03b      	b.n	80041b2 <SetPlayers+0xea>
		players[i] = Player_init(startPosition[i],playerImage[i],playerImageBomb[i],isBot[i]);
 800413a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8004144:	443b      	add	r3, r7
 8004146:	f853 4c30 	ldr.w	r4, [r3, #-48]
 800414a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8004154:	443b      	add	r3, r7
 8004156:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800415a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800415e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8004162:	440a      	add	r2, r1
 8004164:	7811      	ldrb	r1, [r2, #0]
 8004166:	4a48      	ldr	r2, [pc, #288]	; (8004288 <SetPlayers+0x1c0>)
 8004168:	6810      	ldr	r0, [r2, #0]
 800416a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800416e:	0192      	lsls	r2, r2, #6
 8004170:	1885      	adds	r5, r0, r2
 8004172:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8004176:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800417a:	00d2      	lsls	r2, r2, #3
 800417c:	f502 7298 	add.w	r2, r2, #304	; 0x130
 8004180:	443a      	add	r2, r7
 8004182:	9101      	str	r1, [sp, #4]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	4623      	mov	r3, r4
 8004188:	3a60      	subs	r2, #96	; 0x60
 800418a:	ca06      	ldmia	r2, {r1, r2}
 800418c:	f7fd fe6a 	bl	8001e64 <Player_init>
 8004190:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8004194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800419a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800419c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800419e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80041a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	for(int i=0;i<playerCount;i++){
 80041a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041ac:	3301      	adds	r3, #1
 80041ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80041b2:	4b34      	ldr	r3, [pc, #208]	; (8004284 <SetPlayers+0x1bc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80041ba:	429a      	cmp	r2, r3
 80041bc:	dbbd      	blt.n	800413a <SetPlayers+0x72>
	}
	for(int i=0;i<playerCount;i++){
 80041be:	2300      	movs	r3, #0
 80041c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80041c4:	e031      	b.n	800422a <SetPlayers+0x162>
		playerUIs[i] = PlayerUI_init(&players[i],Vector2_init(5,20+(16+UI_MARGIN)*3*i));
 80041c6:	4b30      	ldr	r3, [pc, #192]	; (8004288 <SetPlayers+0x1c0>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041ce:	019b      	lsls	r3, r3, #6
 80041d0:	18d4      	adds	r4, r2, r3
 80041d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041d6:	2236      	movs	r2, #54	; 0x36
 80041d8:	fb02 f303 	mul.w	r3, r2, r3
 80041dc:	f103 0214 	add.w	r2, r3, #20
 80041e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80041e4:	2105      	movs	r1, #5
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fc fb4a 	bl	8000880 <Vector2_init>
 80041ec:	4b27      	ldr	r3, [pc, #156]	; (800428c <SetPlayers+0x1c4>)
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80041f4:	4613      	mov	r3, r2
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	18cd      	adds	r5, r1, r3
 80041fe:	4638      	mov	r0, r7
 8004200:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004204:	cb0c      	ldmia	r3, {r2, r3}
 8004206:	4621      	mov	r1, r4
 8004208:	f7ff f9b2 	bl	8003570 <PlayerUI_init>
 800420c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004214:	4628      	mov	r0, r5
 8004216:	4619      	mov	r1, r3
 8004218:	2370      	movs	r3, #112	; 0x70
 800421a:	461a      	mov	r2, r3
 800421c:	f006 fb1e 	bl	800a85c <memcpy>
	for(int i=0;i<playerCount;i++){
 8004220:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004224:	3301      	adds	r3, #1
 8004226:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800422a:	4b16      	ldr	r3, [pc, #88]	; (8004284 <SetPlayers+0x1bc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004232:	429a      	cmp	r2, r3
 8004234:	dbc7      	blt.n	80041c6 <SetPlayers+0xfe>
	}
	Transform UI_Bg =Transform_init(Vector2_init(0,0),Vector2_init(5+(16+UI_MARGIN)*5,240),TopLeft);
 8004236:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800423a:	2200      	movs	r2, #0
 800423c:	2100      	movs	r1, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f7fc fb1e 	bl	8000880 <Vector2_init>
 8004244:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004248:	22f0      	movs	r2, #240	; 0xf0
 800424a:	215f      	movs	r1, #95	; 0x5f
 800424c:	4618      	mov	r0, r3
 800424e:	f7fc fb17 	bl	8000880 <Vector2_init>
 8004252:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8004256:	2300      	movs	r3, #0
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004264:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004268:	ca06      	ldmia	r2, {r1, r2}
 800426a:	f7fc fc3f 	bl	8000aec <Transform_init>
	Draw(&UI_Bg,BLACK);
 800426e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004272:	2100      	movs	r1, #0
 8004274:	4618      	mov	r0, r3
 8004276:	f7fc fcfc 	bl	8000c72 <Draw>
}
 800427a:	bf00      	nop
 800427c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004280:	46bd      	mov	sp, r7
 8004282:	bdb0      	pop	{r4, r5, r7, pc}
 8004284:	20000068 	.word	0x20000068
 8004288:	20002414 	.word	0x20002414
 800428c:	20002418 	.word	0x20002418
 8004290:	0800ca80 	.word	0x0800ca80
 8004294:	0800ca90 	.word	0x0800ca90
 8004298:	0800caa0 	.word	0x0800caa0

0800429c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800429c:	b5b0      	push	{r4, r5, r7, lr}
 800429e:	b090      	sub	sp, #64	; 0x40
 80042a0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80042a2:	f7ff fcc7 	bl	8003c34 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80042a6:	f7ff fceb 	bl	8003c80 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042aa:	f001 facf 	bl	800584c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042ae:	f000 f87b 	bl	80043a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042b2:	f7ff fb57 	bl	8003964 <MX_GPIO_Init>
  MX_DMA_Init();
 80042b6:	f7fc fac5 	bl	8000844 <MX_DMA_Init>
  MX_TIM1_Init();
 80042ba:	f000 fb03 	bl	80048c4 <MX_TIM1_Init>
  MX_RNG_Init();
 80042be:	f000 f8e7 	bl	8004490 <MX_RNG_Init>
  MX_ADC1_Init();
 80042c2:	f7fc f993 	bl	80005ec <MX_ADC1_Init>
  MX_SPI5_Init();
 80042c6:	f000 f92b 	bl	8004520 <MX_SPI5_Init>
  MX_USART3_UART_Init();
 80042ca:	f000 fbd7 	bl	8004a7c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80042ce:	f000 fb4f 	bl	8004970 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 80042d2:	f000 ffd9 	bl	8005288 <ILI9341_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  srand(HAL_GetTick());
 80042d6:	f001 fb13 	bl	8005900 <HAL_GetTick>
 80042da:	4603      	mov	r3, r0
 80042dc:	4618      	mov	r0, r3
 80042de:	f006 f959 	bl	800a594 <srand>
  HAL_TIM_Base_Start_IT(&htim2);
 80042e2:	482b      	ldr	r0, [pc, #172]	; (8004390 <main+0xf4>)
 80042e4:	f004 fb48 	bl	8008978 <HAL_TIM_Base_Start_IT>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80042e8:	2001      	movs	r0, #1
 80042ea:	f000 ff6f 	bl	80051cc <ILI9341_Set_Rotation>
	for(int i=0;i<mapSize.y;i++){
 80042ee:	2300      	movs	r3, #0
 80042f0:	637b      	str	r3, [r7, #52]	; 0x34
 80042f2:	e039      	b.n	8004368 <main+0xcc>
		for(int j=0;j<mapSize.x;j++){
 80042f4:	2300      	movs	r3, #0
 80042f6:	633b      	str	r3, [r7, #48]	; 0x30
 80042f8:	e02e      	b.n	8004358 <main+0xbc>
			Vector2 index = Vector2_init(j,i);
 80042fa:	f107 031c 	add.w	r3, r7, #28
 80042fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004300:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004302:	4618      	mov	r0, r3
 8004304:	f7fc fabc 	bl	8000880 <Vector2_init>
			map[i][j].floor = Transform_init(toPosition(index),cellSize,MiddleCenter);
 8004308:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800430c:	f107 031c 	add.w	r3, r7, #28
 8004310:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004314:	f7fc fbca 	bl	8000aac <toPosition>
 8004318:	491e      	ldr	r1, [pc, #120]	; (8004394 <main+0xf8>)
 800431a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800431c:	4613      	mov	r3, r2
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	4413      	add	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004328:	4413      	add	r3, r2
 800432a:	015b      	lsls	r3, r3, #5
 800432c:	18cc      	adds	r4, r1, r3
 800432e:	4638      	mov	r0, r7
 8004330:	4b19      	ldr	r3, [pc, #100]	; (8004398 <main+0xfc>)
 8004332:	2204      	movs	r2, #4
 8004334:	9201      	str	r2, [sp, #4]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	9200      	str	r2, [sp, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004340:	ca06      	ldmia	r2, {r1, r2}
 8004342:	f7fc fbd3 	bl	8000aec <Transform_init>
 8004346:	4625      	mov	r5, r4
 8004348:	463c      	mov	r4, r7
 800434a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800434c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	602b      	str	r3, [r5, #0]
		for(int j=0;j<mapSize.x;j++){
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	3301      	adds	r3, #1
 8004356:	633b      	str	r3, [r7, #48]	; 0x30
 8004358:	4b10      	ldr	r3, [pc, #64]	; (800439c <main+0x100>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800435e:	429a      	cmp	r2, r3
 8004360:	dbcb      	blt.n	80042fa <main+0x5e>
	for(int i=0;i<mapSize.y;i++){
 8004362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004364:	3301      	adds	r3, #1
 8004366:	637b      	str	r3, [r7, #52]	; 0x34
 8004368:	4b0c      	ldr	r3, [pc, #48]	; (800439c <main+0x100>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800436e:	429a      	cmp	r2, r3
 8004370:	dbc0      	blt.n	80042f4 <main+0x58>
		}
	}
	setMap();
 8004372:	f7fd fa0d 	bl	8001790 <setMap>
	bool isBot[4]={false,true,true,true};
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <main+0x104>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
	SetPlayers(4,isBot);
 800437c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004380:	4619      	mov	r1, r3
 8004382:	2004      	movs	r0, #4
 8004384:	f7ff fea0 	bl	80040c8 <SetPlayers>
	HAL_TIM_Base_Start_IT(&htim1);
 8004388:	4806      	ldr	r0, [pc, #24]	; (80043a4 <main+0x108>)
 800438a:	f004 faf5 	bl	8008978 <HAL_TIM_Base_Start_IT>
  while (1)
 800438e:	e7fe      	b.n	800438e <main+0xf2>
 8004390:	20002508 	.word	0x20002508
 8004394:	20000ef0 	.word	0x20000ef0
 8004398:	20000010 	.word	0x20000010
 800439c:	20000008 	.word	0x20000008
 80043a0:	0800cac0 	.word	0x0800cac0
 80043a4:	200024bc 	.word	0x200024bc

080043a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b094      	sub	sp, #80	; 0x50
 80043ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043ae:	f107 031c 	add.w	r3, r7, #28
 80043b2:	2234      	movs	r2, #52	; 0x34
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f006 fa08 	bl	800a7cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043bc:	f107 0308 	add.w	r3, r7, #8
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	605a      	str	r2, [r3, #4]
 80043c6:	609a      	str	r2, [r3, #8]
 80043c8:	60da      	str	r2, [r3, #12]
 80043ca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80043cc:	f002 fd54 	bl	8006e78 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80043d0:	4b2b      	ldr	r3, [pc, #172]	; (8004480 <SystemClock_Config+0xd8>)
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	4a2a      	ldr	r2, [pc, #168]	; (8004480 <SystemClock_Config+0xd8>)
 80043d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043da:	6413      	str	r3, [r2, #64]	; 0x40
 80043dc:	4b28      	ldr	r3, [pc, #160]	; (8004480 <SystemClock_Config+0xd8>)
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80043e8:	4b26      	ldr	r3, [pc, #152]	; (8004484 <SystemClock_Config+0xdc>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a25      	ldr	r2, [pc, #148]	; (8004484 <SystemClock_Config+0xdc>)
 80043ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	4b23      	ldr	r3, [pc, #140]	; (8004484 <SystemClock_Config+0xdc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80043fc:	603b      	str	r3, [r7, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004400:	2301      	movs	r3, #1
 8004402:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004404:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004408:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800440a:	2302      	movs	r3, #2
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800440e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004412:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004414:	2304      	movs	r3, #4
 8004416:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8004418:	23d8      	movs	r3, #216	; 0xd8
 800441a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800441c:	2302      	movs	r3, #2
 800441e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004420:	2309      	movs	r3, #9
 8004422:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004424:	2302      	movs	r3, #2
 8004426:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004428:	f107 031c 	add.w	r3, r7, #28
 800442c:	4618      	mov	r0, r3
 800442e:	f002 fd83 	bl	8006f38 <HAL_RCC_OscConfig>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004438:	f000 f826 	bl	8004488 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800443c:	f002 fd2c 	bl	8006e98 <HAL_PWREx_EnableOverDrive>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8004446:	f000 f81f 	bl	8004488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800444a:	230f      	movs	r3, #15
 800444c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800444e:	2302      	movs	r3, #2
 8004450:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004452:	2300      	movs	r3, #0
 8004454:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004456:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800445a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800445c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004460:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004462:	f107 0308 	add.w	r3, r7, #8
 8004466:	2107      	movs	r1, #7
 8004468:	4618      	mov	r0, r3
 800446a:	f003 f813 	bl	8007494 <HAL_RCC_ClockConfig>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8004474:	f000 f808 	bl	8004488 <Error_Handler>
  }
}
 8004478:	bf00      	nop
 800447a:	3750      	adds	r7, #80	; 0x50
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40023800 	.word	0x40023800
 8004484:	40007000 	.word	0x40007000

08004488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800448c:	e7fe      	b.n	800448c <Error_Handler+0x4>
	...

08004490 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8004494:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <MX_RNG_Init+0x20>)
 8004496:	4a07      	ldr	r2, [pc, #28]	; (80044b4 <MX_RNG_Init+0x24>)
 8004498:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800449a:	4805      	ldr	r0, [pc, #20]	; (80044b0 <MX_RNG_Init+0x20>)
 800449c:	f003 fe48 	bl	8008130 <HAL_RNG_Init>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80044a6:	f7ff ffef 	bl	8004488 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20002444 	.word	0x20002444
 80044b4:	50060800 	.word	0x50060800

080044b8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b0a8      	sub	sp, #160	; 0xa0
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80044c0:	f107 0310 	add.w	r3, r7, #16
 80044c4:	2290      	movs	r2, #144	; 0x90
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f006 f97f 	bl	800a7cc <memset>
  if(rngHandle->Instance==RNG)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a11      	ldr	r2, [pc, #68]	; (8004518 <HAL_RNG_MspInit+0x60>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d11b      	bne.n	8004510 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80044d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80044de:	2300      	movs	r3, #0
 80044e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044e4:	f107 0310 	add.w	r3, r7, #16
 80044e8:	4618      	mov	r0, r3
 80044ea:	f003 f9f9 	bl	80078e0 <HAL_RCCEx_PeriphCLKConfig>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80044f4:	f7ff ffc8 	bl	8004488 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80044f8:	4b08      	ldr	r3, [pc, #32]	; (800451c <HAL_RNG_MspInit+0x64>)
 80044fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fc:	4a07      	ldr	r2, [pc, #28]	; (800451c <HAL_RNG_MspInit+0x64>)
 80044fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004502:	6353      	str	r3, [r2, #52]	; 0x34
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RNG_MspInit+0x64>)
 8004506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8004510:	bf00      	nop
 8004512:	37a0      	adds	r7, #160	; 0xa0
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	50060800 	.word	0x50060800
 800451c:	40023800 	.word	0x40023800

08004520 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8004524:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <MX_SPI5_Init+0x74>)
 8004526:	4a1c      	ldr	r2, [pc, #112]	; (8004598 <MX_SPI5_Init+0x78>)
 8004528:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800452a:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <MX_SPI5_Init+0x74>)
 800452c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004530:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004532:	4b18      	ldr	r3, [pc, #96]	; (8004594 <MX_SPI5_Init+0x74>)
 8004534:	2200      	movs	r2, #0
 8004536:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004538:	4b16      	ldr	r3, [pc, #88]	; (8004594 <MX_SPI5_Init+0x74>)
 800453a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800453e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004540:	4b14      	ldr	r3, [pc, #80]	; (8004594 <MX_SPI5_Init+0x74>)
 8004542:	2200      	movs	r2, #0
 8004544:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004546:	4b13      	ldr	r3, [pc, #76]	; (8004594 <MX_SPI5_Init+0x74>)
 8004548:	2200      	movs	r2, #0
 800454a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800454c:	4b11      	ldr	r3, [pc, #68]	; (8004594 <MX_SPI5_Init+0x74>)
 800454e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004552:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004554:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <MX_SPI5_Init+0x74>)
 8004556:	2200      	movs	r2, #0
 8004558:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800455a:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <MX_SPI5_Init+0x74>)
 800455c:	2200      	movs	r2, #0
 800455e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004560:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <MX_SPI5_Init+0x74>)
 8004562:	2200      	movs	r2, #0
 8004564:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004566:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <MX_SPI5_Init+0x74>)
 8004568:	2200      	movs	r2, #0
 800456a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 800456c:	4b09      	ldr	r3, [pc, #36]	; (8004594 <MX_SPI5_Init+0x74>)
 800456e:	2207      	movs	r2, #7
 8004570:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004572:	4b08      	ldr	r3, [pc, #32]	; (8004594 <MX_SPI5_Init+0x74>)
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <MX_SPI5_Init+0x74>)
 800457a:	2200      	movs	r2, #0
 800457c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800457e:	4805      	ldr	r0, [pc, #20]	; (8004594 <MX_SPI5_Init+0x74>)
 8004580:	f003 fe00 	bl	8008184 <HAL_SPI_Init>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800458a:	f7ff ff7d 	bl	8004488 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800458e:	bf00      	nop
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20002454 	.word	0x20002454
 8004598:	40015000 	.word	0x40015000

0800459c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	; 0x28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a4:	f107 0314 	add.w	r3, r7, #20
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	605a      	str	r2, [r3, #4]
 80045ae:	609a      	str	r2, [r3, #8]
 80045b0:	60da      	str	r2, [r3, #12]
 80045b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a17      	ldr	r2, [pc, #92]	; (8004618 <HAL_SPI_MspInit+0x7c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d128      	bne.n	8004610 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80045be:	4b17      	ldr	r3, [pc, #92]	; (800461c <HAL_SPI_MspInit+0x80>)
 80045c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c2:	4a16      	ldr	r2, [pc, #88]	; (800461c <HAL_SPI_MspInit+0x80>)
 80045c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045c8:	6453      	str	r3, [r2, #68]	; 0x44
 80045ca:	4b14      	ldr	r3, [pc, #80]	; (800461c <HAL_SPI_MspInit+0x80>)
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80045d6:	4b11      	ldr	r3, [pc, #68]	; (800461c <HAL_SPI_MspInit+0x80>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	4a10      	ldr	r2, [pc, #64]	; (800461c <HAL_SPI_MspInit+0x80>)
 80045dc:	f043 0320 	orr.w	r3, r3, #32
 80045e0:	6313      	str	r3, [r2, #48]	; 0x30
 80045e2:	4b0e      	ldr	r3, [pc, #56]	; (800461c <HAL_SPI_MspInit+0x80>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80045ee:	f44f 7360 	mov.w	r3, #896	; 0x380
 80045f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f4:	2302      	movs	r3, #2
 80045f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045fc:	2303      	movs	r3, #3
 80045fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004600:	2305      	movs	r3, #5
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004604:	f107 0314 	add.w	r3, r7, #20
 8004608:	4619      	mov	r1, r3
 800460a:	4805      	ldr	r0, [pc, #20]	; (8004620 <HAL_SPI_MspInit+0x84>)
 800460c:	f002 fa56 	bl	8006abc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004610:	bf00      	nop
 8004612:	3728      	adds	r7, #40	; 0x28
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40015000 	.word	0x40015000
 800461c:	40023800 	.word	0x40023800
 8004620:	40021400 	.word	0x40021400

08004624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <HAL_MspInit+0x44>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	4a0e      	ldr	r2, [pc, #56]	; (8004668 <HAL_MspInit+0x44>)
 8004630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004634:	6413      	str	r3, [r2, #64]	; 0x40
 8004636:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <HAL_MspInit+0x44>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463e:	607b      	str	r3, [r7, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004642:	4b09      	ldr	r3, [pc, #36]	; (8004668 <HAL_MspInit+0x44>)
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	4a08      	ldr	r2, [pc, #32]	; (8004668 <HAL_MspInit+0x44>)
 8004648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800464c:	6453      	str	r3, [r2, #68]	; 0x44
 800464e:	4b06      	ldr	r3, [pc, #24]	; (8004668 <HAL_MspInit+0x44>)
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800465a:	2005      	movs	r0, #5
 800465c:	f001 fe74 	bl	8006348 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40023800 	.word	0x40023800

0800466c <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004670:	f001 f932 	bl	80058d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004674:	bf00      	nop
 8004676:	bd80      	pop	{r7, pc}

08004678 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800467c:	2008      	movs	r0, #8
 800467e:	f002 fbe3 	bl	8006e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004682:	bf00      	nop
 8004684:	bd80      	pop	{r7, pc}

08004686 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800468a:	2010      	movs	r0, #16
 800468c:	f002 fbdc 	bl	8006e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004690:	bf00      	nop
 8004692:	bd80      	pop	{r7, pc}

08004694 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004698:	4802      	ldr	r0, [pc, #8]	; (80046a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800469a:	f004 f9e5 	bl	8008a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800469e:	bf00      	nop
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	200024bc 	.word	0x200024bc

080046a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80046ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80046b0:	f002 fbca 	bl	8006e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80046b4:	bf00      	nop
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80046bc:	4802      	ldr	r0, [pc, #8]	; (80046c8 <DMA2_Stream0_IRQHandler+0x10>)
 80046be:	f001 ff93 	bl	80065e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	200002a8 	.word	0x200002a8

080046cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
	return 1;
 80046d0:	2301      	movs	r3, #1
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <_kill>:

int _kill(int pid, int sig)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80046e6:	f006 f88d 	bl	800a804 <__errno>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2216      	movs	r2, #22
 80046ee:	601a      	str	r2, [r3, #0]
	return -1;
 80046f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <_exit>:

void _exit (int status)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004704:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff ffe7 	bl	80046dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800470e:	e7fe      	b.n	800470e <_exit+0x12>

08004710 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	e00a      	b.n	8004738 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004722:	f3af 8000 	nop.w
 8004726:	4601      	mov	r1, r0
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	60ba      	str	r2, [r7, #8]
 800472e:	b2ca      	uxtb	r2, r1
 8004730:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	3301      	adds	r3, #1
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	429a      	cmp	r2, r3
 800473e:	dbf0      	blt.n	8004722 <_read+0x12>
	}

return len;
 8004740:	687b      	ldr	r3, [r7, #4]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b086      	sub	sp, #24
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	e009      	b.n	8004770 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	60ba      	str	r2, [r7, #8]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	3301      	adds	r3, #1
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	429a      	cmp	r2, r3
 8004776:	dbf1      	blt.n	800475c <_write+0x12>
	}
	return len;
 8004778:	687b      	ldr	r3, [r7, #4]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <_close>:

int _close(int file)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
	return -1;
 800478a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800478e:	4618      	mov	r0, r3
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047aa:	605a      	str	r2, [r3, #4]
	return 0;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <_isatty>:

int _isatty(int file)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
	return 1;
 80047c2:	2301      	movs	r3, #1
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
	return 0;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047f4:	4a14      	ldr	r2, [pc, #80]	; (8004848 <_sbrk+0x5c>)
 80047f6:	4b15      	ldr	r3, [pc, #84]	; (800484c <_sbrk+0x60>)
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004800:	4b13      	ldr	r3, [pc, #76]	; (8004850 <_sbrk+0x64>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d102      	bne.n	800480e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004808:	4b11      	ldr	r3, [pc, #68]	; (8004850 <_sbrk+0x64>)
 800480a:	4a12      	ldr	r2, [pc, #72]	; (8004854 <_sbrk+0x68>)
 800480c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800480e:	4b10      	ldr	r3, [pc, #64]	; (8004850 <_sbrk+0x64>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4413      	add	r3, r2
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	429a      	cmp	r2, r3
 800481a:	d207      	bcs.n	800482c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800481c:	f005 fff2 	bl	800a804 <__errno>
 8004820:	4603      	mov	r3, r0
 8004822:	220c      	movs	r2, #12
 8004824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800482a:	e009      	b.n	8004840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800482c:	4b08      	ldr	r3, [pc, #32]	; (8004850 <_sbrk+0x64>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <_sbrk+0x64>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4413      	add	r3, r2
 800483a:	4a05      	ldr	r2, [pc, #20]	; (8004850 <_sbrk+0x64>)
 800483c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800483e:	68fb      	ldr	r3, [r7, #12]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20080000 	.word	0x20080000
 800484c:	00000400 	.word	0x00000400
 8004850:	200024b8 	.word	0x200024b8
 8004854:	20002730 	.word	0x20002730

08004858 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800485c:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <SystemInit+0x5c>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	4a14      	ldr	r2, [pc, #80]	; (80048b4 <SystemInit+0x5c>)
 8004864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800486c:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <SystemInit+0x60>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a11      	ldr	r2, [pc, #68]	; (80048b8 <SystemInit+0x60>)
 8004872:	f043 0301 	orr.w	r3, r3, #1
 8004876:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004878:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <SystemInit+0x60>)
 800487a:	2200      	movs	r2, #0
 800487c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800487e:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <SystemInit+0x60>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	490d      	ldr	r1, [pc, #52]	; (80048b8 <SystemInit+0x60>)
 8004884:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <SystemInit+0x64>)
 8004886:	4013      	ands	r3, r2
 8004888:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800488a:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <SystemInit+0x60>)
 800488c:	4a0c      	ldr	r2, [pc, #48]	; (80048c0 <SystemInit+0x68>)
 800488e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004890:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <SystemInit+0x60>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a08      	ldr	r2, [pc, #32]	; (80048b8 <SystemInit+0x60>)
 8004896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800489a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800489c:	4b06      	ldr	r3, [pc, #24]	; (80048b8 <SystemInit+0x60>)
 800489e:	2200      	movs	r2, #0
 80048a0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80048a2:	4b04      	ldr	r3, [pc, #16]	; (80048b4 <SystemInit+0x5c>)
 80048a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048a8:	609a      	str	r2, [r3, #8]
#endif
}
 80048aa:	bf00      	nop
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	e000ed00 	.word	0xe000ed00
 80048b8:	40023800 	.word	0x40023800
 80048bc:	fef6ffff 	.word	0xfef6ffff
 80048c0:	24003010 	.word	0x24003010

080048c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048ca:	f107 0310 	add.w	r3, r7, #16
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	605a      	str	r2, [r3, #4]
 80048d4:	609a      	str	r2, [r3, #8]
 80048d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048d8:	1d3b      	adds	r3, r7, #4
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	605a      	str	r2, [r3, #4]
 80048e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80048e2:	4b21      	ldr	r3, [pc, #132]	; (8004968 <MX_TIM1_Init+0xa4>)
 80048e4:	4a21      	ldr	r2, [pc, #132]	; (800496c <MX_TIM1_Init+0xa8>)
 80048e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2160-1;
 80048e8:	4b1f      	ldr	r3, [pc, #124]	; (8004968 <MX_TIM1_Init+0xa4>)
 80048ea:	f640 026f 	movw	r2, #2159	; 0x86f
 80048ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048f0:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <MX_TIM1_Init+0xa4>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80048f6:	4b1c      	ldr	r3, [pc, #112]	; (8004968 <MX_TIM1_Init+0xa4>)
 80048f8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80048fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80048fe:	4b1a      	ldr	r3, [pc, #104]	; (8004968 <MX_TIM1_Init+0xa4>)
 8004900:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004904:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004906:	4b18      	ldr	r3, [pc, #96]	; (8004968 <MX_TIM1_Init+0xa4>)
 8004908:	2200      	movs	r2, #0
 800490a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800490c:	4b16      	ldr	r3, [pc, #88]	; (8004968 <MX_TIM1_Init+0xa4>)
 800490e:	2200      	movs	r2, #0
 8004910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004912:	4815      	ldr	r0, [pc, #84]	; (8004968 <MX_TIM1_Init+0xa4>)
 8004914:	f003 ffd8 	bl	80088c8 <HAL_TIM_Base_Init>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800491e:	f7ff fdb3 	bl	8004488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004926:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004928:	f107 0310 	add.w	r3, r7, #16
 800492c:	4619      	mov	r1, r3
 800492e:	480e      	ldr	r0, [pc, #56]	; (8004968 <MX_TIM1_Init+0xa4>)
 8004930:	f004 f9ba 	bl	8008ca8 <HAL_TIM_ConfigClockSource>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800493a:	f7ff fda5 	bl	8004488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800493e:	2300      	movs	r3, #0
 8004940:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004942:	2300      	movs	r3, #0
 8004944:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800494a:	1d3b      	adds	r3, r7, #4
 800494c:	4619      	mov	r1, r3
 800494e:	4806      	ldr	r0, [pc, #24]	; (8004968 <MX_TIM1_Init+0xa4>)
 8004950:	f004 fbd6 	bl	8009100 <HAL_TIMEx_MasterConfigSynchronization>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800495a:	f7ff fd95 	bl	8004488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800495e:	bf00      	nop
 8004960:	3720      	adds	r7, #32
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	200024bc 	.word	0x200024bc
 800496c:	40010000 	.word	0x40010000

08004970 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004976:	f107 0310 	add.w	r3, r7, #16
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	605a      	str	r2, [r3, #4]
 8004980:	609a      	str	r2, [r3, #8]
 8004982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004984:	1d3b      	adds	r3, r7, #4
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	605a      	str	r2, [r3, #4]
 800498c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800498e:	4b1e      	ldr	r3, [pc, #120]	; (8004a08 <MX_TIM2_Init+0x98>)
 8004990:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004994:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004996:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <MX_TIM2_Init+0x98>)
 8004998:	2200      	movs	r2, #0
 800499a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800499c:	4b1a      	ldr	r3, [pc, #104]	; (8004a08 <MX_TIM2_Init+0x98>)
 800499e:	2200      	movs	r2, #0
 80049a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80049a2:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <MX_TIM2_Init+0x98>)
 80049a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049aa:	4b17      	ldr	r3, [pc, #92]	; (8004a08 <MX_TIM2_Init+0x98>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049b0:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <MX_TIM2_Init+0x98>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80049b6:	4814      	ldr	r0, [pc, #80]	; (8004a08 <MX_TIM2_Init+0x98>)
 80049b8:	f003 ff86 	bl	80088c8 <HAL_TIM_Base_Init>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80049c2:	f7ff fd61 	bl	8004488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80049cc:	f107 0310 	add.w	r3, r7, #16
 80049d0:	4619      	mov	r1, r3
 80049d2:	480d      	ldr	r0, [pc, #52]	; (8004a08 <MX_TIM2_Init+0x98>)
 80049d4:	f004 f968 	bl	8008ca8 <HAL_TIM_ConfigClockSource>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80049de:	f7ff fd53 	bl	8004488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049e2:	2300      	movs	r3, #0
 80049e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80049ea:	1d3b      	adds	r3, r7, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	4806      	ldr	r0, [pc, #24]	; (8004a08 <MX_TIM2_Init+0x98>)
 80049f0:	f004 fb86 	bl	8009100 <HAL_TIMEx_MasterConfigSynchronization>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80049fa:	f7ff fd45 	bl	8004488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80049fe:	bf00      	nop
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20002508 	.word	0x20002508

08004a0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a16      	ldr	r2, [pc, #88]	; (8004a74 <HAL_TIM_Base_MspInit+0x68>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d114      	bne.n	8004a48 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004a1e:	4b16      	ldr	r3, [pc, #88]	; (8004a78 <HAL_TIM_Base_MspInit+0x6c>)
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	4a15      	ldr	r2, [pc, #84]	; (8004a78 <HAL_TIM_Base_MspInit+0x6c>)
 8004a24:	f043 0301 	orr.w	r3, r3, #1
 8004a28:	6453      	str	r3, [r2, #68]	; 0x44
 8004a2a:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <HAL_TIM_Base_MspInit+0x6c>)
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8004a36:	2200      	movs	r2, #0
 8004a38:	2102      	movs	r1, #2
 8004a3a:	2019      	movs	r0, #25
 8004a3c:	f001 fc8f 	bl	800635e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004a40:	2019      	movs	r0, #25
 8004a42:	f001 fca8 	bl	8006396 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004a46:	e010      	b.n	8004a6a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a50:	d10b      	bne.n	8004a6a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a52:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <HAL_TIM_Base_MspInit+0x6c>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	4a08      	ldr	r2, [pc, #32]	; (8004a78 <HAL_TIM_Base_MspInit+0x6c>)
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a5e:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <HAL_TIM_Base_MspInit+0x6c>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	60bb      	str	r3, [r7, #8]
 8004a68:	68bb      	ldr	r3, [r7, #8]
}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40010000 	.word	0x40010000
 8004a78:	40023800 	.word	0x40023800

08004a7c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004a80:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <MX_USART3_UART_Init+0x58>)
 8004a82:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <MX_USART3_UART_Init+0x5c>)
 8004a84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004a86:	4b13      	ldr	r3, [pc, #76]	; (8004ad4 <MX_USART3_UART_Init+0x58>)
 8004a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a8e:	4b11      	ldr	r3, [pc, #68]	; (8004ad4 <MX_USART3_UART_Init+0x58>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004a94:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <MX_USART3_UART_Init+0x58>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004a9a:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <MX_USART3_UART_Init+0x58>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <MX_USART3_UART_Init+0x58>)
 8004aa2:	220c      	movs	r2, #12
 8004aa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <MX_USART3_UART_Init+0x58>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004aac:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <MX_USART3_UART_Init+0x58>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ab2:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <MX_USART3_UART_Init+0x58>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ab8:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <MX_USART3_UART_Init+0x58>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004abe:	4805      	ldr	r0, [pc, #20]	; (8004ad4 <MX_USART3_UART_Init+0x58>)
 8004ac0:	f004 fbca 	bl	8009258 <HAL_UART_Init>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004aca:	f7ff fcdd 	bl	8004488 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20002554 	.word	0x20002554
 8004ad8:	40004800 	.word	0x40004800

08004adc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b0ae      	sub	sp, #184	; 0xb8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	609a      	str	r2, [r3, #8]
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004af4:	f107 0314 	add.w	r3, r7, #20
 8004af8:	2290      	movs	r2, #144	; 0x90
 8004afa:	2100      	movs	r1, #0
 8004afc:	4618      	mov	r0, r3
 8004afe:	f005 fe65 	bl	800a7cc <memset>
  if(uartHandle->Instance==USART3)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a22      	ldr	r2, [pc, #136]	; (8004b90 <HAL_UART_MspInit+0xb4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d13c      	bne.n	8004b86 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004b0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b10:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004b12:	2300      	movs	r3, #0
 8004b14:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b16:	f107 0314 	add.w	r3, r7, #20
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f002 fee0 	bl	80078e0 <HAL_RCCEx_PeriphCLKConfig>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004b26:	f7ff fcaf 	bl	8004488 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b2a:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <HAL_UART_MspInit+0xb8>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	4a19      	ldr	r2, [pc, #100]	; (8004b94 <HAL_UART_MspInit+0xb8>)
 8004b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b34:	6413      	str	r3, [r2, #64]	; 0x40
 8004b36:	4b17      	ldr	r3, [pc, #92]	; (8004b94 <HAL_UART_MspInit+0xb8>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <HAL_UART_MspInit+0xb8>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <HAL_UART_MspInit+0xb8>)
 8004b48:	f043 0308 	orr.w	r3, r3, #8
 8004b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b4e:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <HAL_UART_MspInit+0xb8>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b62:	2302      	movs	r3, #2
 8004b64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004b74:	2307      	movs	r3, #7
 8004b76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b7a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4805      	ldr	r0, [pc, #20]	; (8004b98 <HAL_UART_MspInit+0xbc>)
 8004b82:	f001 ff9b 	bl	8006abc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004b86:	bf00      	nop
 8004b88:	37b8      	adds	r7, #184	; 0xb8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40004800 	.word	0x40004800
 8004b94:	40023800 	.word	0x40023800
 8004b98:	40020c00 	.word	0x40020c00

08004b9c <mappingValue>:
#include "utility.h"
extern UART_HandleTypeDef huart3;

float mappingValue(float val,float preMin,float preMax,float postMin,float postMax){
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	ed87 0a05 	vstr	s0, [r7, #20]
 8004ba6:	edc7 0a04 	vstr	s1, [r7, #16]
 8004baa:	ed87 1a03 	vstr	s2, [r7, #12]
 8004bae:	edc7 1a02 	vstr	s3, [r7, #8]
 8004bb2:	ed87 2a01 	vstr	s4, [r7, #4]
	  return (val-preMin)/(preMax-preMin)*(postMax-postMin)+postMin;
 8004bb6:	ed97 7a05 	vldr	s14, [r7, #20]
 8004bba:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bbe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004bc2:	ed97 7a03 	vldr	s14, [r7, #12]
 8004bc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd2:	edd7 6a01 	vldr	s13, [r7, #4]
 8004bd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004bde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004be2:	edd7 7a02 	vldr	s15, [r7, #8]
 8004be6:	ee77 7a27 	vadd.f32	s15, s14, s15
  }
 8004bea:	eeb0 0a67 	vmov.f32	s0, s15
 8004bee:	371c      	adds	r7, #28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <clamp>:
int clamp(int min,int value,int max){
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
	if(min>value)
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	dd01      	ble.n	8004c10 <clamp+0x18>
		return min;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	e006      	b.n	8004c1e <clamp+0x26>
	else if(max<value)
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	da01      	bge.n	8004c1c <clamp+0x24>
		return max;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	e000      	b.n	8004c1e <clamp+0x26>
	else
		return value;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <inBetween>:
bool inBetween(int min,int value,int max){
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	607a      	str	r2, [r7, #4]
	return (min<=value)&&(value<=max);
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	dc05      	bgt.n	8004c4a <inBetween+0x20>
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	dc01      	bgt.n	8004c4a <inBetween+0x20>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <inBetween+0x22>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	b2db      	uxtb	r3, r3
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <QueueElement_init>:
	tim->Instance -> CCR2 = (1000-1) * dutyCycle;
}
void setBlue(TIM_HandleTypeDef* tim,float dutyCycle){
	tim->Instance -> CCR3 = (1000-1) * dutyCycle;
}
QueueElement* QueueElement_init(void* value){
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b084      	sub	sp, #16
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
	QueueElement* element = malloc(sizeof(QueueElement));
 8004c66:	200c      	movs	r0, #12
 8004c68:	f005 fa28 	bl	800a0bc <malloc>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	60fb      	str	r3, [r7, #12]
	element->value = value;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	601a      	str	r2, [r3, #0]
	element->previous = NULL;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	609a      	str	r2, [r3, #8]
	element->next = NULL;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	605a      	str	r2, [r3, #4]
	return element;
 8004c82:	68fb      	ldr	r3, [r7, #12]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <DeleteQueueElement>:
	q->front = NULL;
	q->back = NULL;
	q->size = 0;
	return q;
}
void DeleteQueueElement(Queue* q,QueueElement* element){
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
	if(q==NULL||element==NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d02c      	beq.n	8004cf6 <DeleteQueueElement+0x6a>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d029      	beq.n	8004cf6 <DeleteQueueElement+0x6a>
		return;
	q->size--;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	1e5a      	subs	r2, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	609a      	str	r2, [r3, #8]
	if(element->next == NULL){
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d104      	bne.n	8004cbe <DeleteQueueElement+0x32>
		q->back = element->previous;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	605a      	str	r2, [r3, #4]
 8004cbc:	e004      	b.n	8004cc8 <DeleteQueueElement+0x3c>
	}
	else{
		element->next->previous = element->previous;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	6892      	ldr	r2, [r2, #8]
 8004cc6:	609a      	str	r2, [r3, #8]
	}
	if(element->previous == NULL){
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d104      	bne.n	8004cda <DeleteQueueElement+0x4e>
		q->front = element->next;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	e004      	b.n	8004ce4 <DeleteQueueElement+0x58>
	}
	else{
		element->previous->next = element->next;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	6852      	ldr	r2, [r2, #4]
 8004ce2:	605a      	str	r2, [r3, #4]
	}
	free(element->value);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f005 f9ef 	bl	800a0cc <free>
	free(element);
 8004cee:	6838      	ldr	r0, [r7, #0]
 8004cf0:	f005 f9ec 	bl	800a0cc <free>
 8004cf4:	e000      	b.n	8004cf8 <DeleteQueueElement+0x6c>
		return;
 8004cf6:	bf00      	nop
}
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <enqueue>:
QueueElement* enqueue(Queue* q,void* ptr){
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
	if(q == NULL&&ptr == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d104      	bne.n	8004d18 <enqueue+0x1a>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <enqueue+0x1a>
		return NULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	e022      	b.n	8004d5e <enqueue+0x60>
	QueueElement* element = QueueElement_init(ptr);
 8004d18:	6838      	ldr	r0, [r7, #0]
 8004d1a:	f7ff ffa0 	bl	8004c5e <QueueElement_init>
 8004d1e:	60f8      	str	r0, [r7, #12]
	if(q->size){
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d008      	beq.n	8004d3a <enqueue+0x3c>
		q->back->next =element;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	605a      	str	r2, [r3, #4]
		element->previous = q->back;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	609a      	str	r2, [r3, #8]
 8004d38:	e008      	b.n	8004d4c <enqueue+0x4e>
	}
	else{
		q->front = element;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	601a      	str	r2, [r3, #0]
		element->previous = NULL;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	609a      	str	r2, [r3, #8]
		element->next = NULL;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	605a      	str	r2, [r3, #4]
	}
	q->size++;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	609a      	str	r2, [r3, #8]
	q->back=element;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	605a      	str	r2, [r3, #4]
	return element;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <dequeue>:
void dequeue(Queue* q){
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
	if(q != NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <dequeue+0x1a>
		DeleteQueueElement(q,q->front);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff ff86 	bl	8004c8c <DeleteQueueElement>

}
 8004d80:	bf00      	nop
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004dc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004d8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004d8e:	e003      	b.n	8004d98 <LoopCopyDataInit>

08004d90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004d90:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004d92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004d94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004d96:	3104      	adds	r1, #4

08004d98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004d98:	480b      	ldr	r0, [pc, #44]	; (8004dc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004d9a:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004d9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004d9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004da0:	d3f6      	bcc.n	8004d90 <CopyDataInit>
  ldr  r2, =_sbss
 8004da2:	4a0b      	ldr	r2, [pc, #44]	; (8004dd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004da4:	e002      	b.n	8004dac <LoopFillZerobss>

08004da6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004da6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004da8:	f842 3b04 	str.w	r3, [r2], #4

08004dac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004dac:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004dae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004db0:	d3f9      	bcc.n	8004da6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004db2:	f7ff fd51 	bl	8004858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004db6:	f005 fd2b 	bl	800a810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004dba:	f7ff fa6f 	bl	800429c <main>
  bx  lr    
 8004dbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004dc0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004dc4:	0800f100 	.word	0x0800f100
  ldr  r0, =_sdata
 8004dc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004dcc:	20000244 	.word	0x20000244
  ldr  r2, =_sbss
 8004dd0:	20000244 	.word	0x20000244
  ldr  r3, = _ebss
 8004dd4:	2000272c 	.word	0x2000272c

08004dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dd8:	e7fe      	b.n	8004dd8 <ADC_IRQHandler>

08004dda <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8004dda:	b590      	push	{r4, r7, lr}
 8004ddc:	b089      	sub	sp, #36	; 0x24
 8004dde:	af02      	add	r7, sp, #8
 8004de0:	4604      	mov	r4, r0
 8004de2:	4608      	mov	r0, r1
 8004de4:	4611      	mov	r1, r2
 8004de6:	461a      	mov	r2, r3
 8004de8:	4623      	mov	r3, r4
 8004dea:	80fb      	strh	r3, [r7, #6]
 8004dec:	4603      	mov	r3, r0
 8004dee:	80bb      	strh	r3, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	807b      	strh	r3, [r7, #2]
 8004df4:	4613      	mov	r3, r2
 8004df6:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8004e14:	887a      	ldrh	r2, [r7, #2]
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	da01      	bge.n	8004e26 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8004e22:	2301      	movs	r3, #1
 8004e24:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8004e2a:	883a      	ldrh	r2, [r7, #0]
 8004e2c:	88bb      	ldrh	r3, [r7, #4]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	da01      	bge.n	8004e3c <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8004e3c:	7cfb      	ldrb	r3, [r7, #19]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8004e42:	887a      	ldrh	r2, [r7, #2]
 8004e44:	88fb      	ldrh	r3, [r7, #6]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8004e4a:	88fb      	ldrh	r3, [r7, #6]
 8004e4c:	823b      	strh	r3, [r7, #16]
 8004e4e:	e005      	b.n	8004e5c <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8004e50:	88fa      	ldrh	r2, [r7, #6]
 8004e52:	887b      	ldrh	r3, [r7, #2]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8004e58:	887b      	ldrh	r3, [r7, #2]
 8004e5a:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8004e5c:	7cbb      	ldrb	r3, [r7, #18]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8004e62:	883a      	ldrh	r2, [r7, #0]
 8004e64:	88bb      	ldrh	r3, [r7, #4]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8004e6a:	88bb      	ldrh	r3, [r7, #4]
 8004e6c:	81fb      	strh	r3, [r7, #14]
 8004e6e:	e005      	b.n	8004e7c <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8004e70:	88ba      	ldrh	r2, [r7, #4]
 8004e72:	883b      	ldrh	r3, [r7, #0]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8004e78:	883b      	ldrh	r3, [r7, #0]
 8004e7a:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8004e7c:	8abc      	ldrh	r4, [r7, #20]
 8004e7e:	8afa      	ldrh	r2, [r7, #22]
 8004e80:	89f9      	ldrh	r1, [r7, #14]
 8004e82:	8a38      	ldrh	r0, [r7, #16]
 8004e84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	4623      	mov	r3, r4
 8004e8a:	f000 fc83 	bl	8005794 <ILI9341_Draw_Rectangle>
}
 8004e8e:	bf00      	nop
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd90      	pop	{r4, r7, pc}
	...

08004e98 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b089      	sub	sp, #36	; 0x24
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	71fb      	strb	r3, [r7, #7]
 8004eaa:	4603      	mov	r3, r0
 8004eac:	71bb      	strb	r3, [r7, #6]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	717b      	strb	r3, [r7, #5]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8004eba:	7dfb      	ldrb	r3, [r7, #23]
 8004ebc:	2b1f      	cmp	r3, #31
 8004ebe:	d802      	bhi.n	8004ec6 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	71fb      	strb	r3, [r7, #7]
 8004ec4:	e002      	b.n	8004ecc <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8004ec6:	7dfb      	ldrb	r3, [r7, #23]
 8004ec8:	3b20      	subs	r3, #32
 8004eca:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8004ecc:	2300      	movs	r3, #0
 8004ece:	753b      	strb	r3, [r7, #20]
 8004ed0:	e012      	b.n	8004ef8 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8004ed2:	7dfa      	ldrb	r2, [r7, #23]
 8004ed4:	7d38      	ldrb	r0, [r7, #20]
 8004ed6:	7d39      	ldrb	r1, [r7, #20]
 8004ed8:	4c3b      	ldr	r4, [pc, #236]	; (8004fc8 <ILI9341_Draw_Char+0x130>)
 8004eda:	4613      	mov	r3, r2
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	4413      	add	r3, r2
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	4423      	add	r3, r4
 8004ee4:	4403      	add	r3, r0
 8004ee6:	781a      	ldrb	r2, [r3, #0]
 8004ee8:	f101 0318 	add.w	r3, r1, #24
 8004eec:	443b      	add	r3, r7
 8004eee:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8004ef2:	7d3b      	ldrb	r3, [r7, #20]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	753b      	strb	r3, [r7, #20]
 8004ef8:	7d3b      	ldrb	r3, [r7, #20]
 8004efa:	2b05      	cmp	r3, #5
 8004efc:	d9e9      	bls.n	8004ed2 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8004efe:	79bb      	ldrb	r3, [r7, #6]
 8004f00:	b298      	uxth	r0, r3
 8004f02:	797b      	ldrb	r3, [r7, #5]
 8004f04:	b299      	uxth	r1, r3
 8004f06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f08:	461a      	mov	r2, r3
 8004f0a:	0052      	lsls	r2, r2, #1
 8004f0c:	4413      	add	r3, r2
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	b29c      	uxth	r4, r3
 8004f18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	4623      	mov	r3, r4
 8004f1e:	f000 fc39 	bl	8005794 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8004f22:	2300      	movs	r3, #0
 8004f24:	757b      	strb	r3, [r7, #21]
 8004f26:	e047      	b.n	8004fb8 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8004f28:	2300      	movs	r3, #0
 8004f2a:	75bb      	strb	r3, [r7, #22]
 8004f2c:	e03e      	b.n	8004fac <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8004f2e:	7d7b      	ldrb	r3, [r7, #21]
 8004f30:	3318      	adds	r3, #24
 8004f32:	443b      	add	r3, r7
 8004f34:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	7dbb      	ldrb	r3, [r7, #22]
 8004f3c:	fa42 f303 	asr.w	r3, r2, r3
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d02e      	beq.n	8004fa6 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8004f48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d110      	bne.n	8004f70 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8004f4e:	79bb      	ldrb	r3, [r7, #6]
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	7d7b      	ldrb	r3, [r7, #21]
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	4413      	add	r3, r2
 8004f58:	b298      	uxth	r0, r3
 8004f5a:	797b      	ldrb	r3, [r7, #5]
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	7dbb      	ldrb	r3, [r7, #22]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	4413      	add	r3, r2
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	887a      	ldrh	r2, [r7, #2]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	f000 fb39 	bl	80055e0 <ILI9341_Draw_Pixel>
 8004f6e:	e01a      	b.n	8004fa6 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8004f70:	79bb      	ldrb	r3, [r7, #6]
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	7d7b      	ldrb	r3, [r7, #21]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8004f7a:	fb11 f303 	smulbb	r3, r1, r3
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	4413      	add	r3, r2
 8004f82:	b298      	uxth	r0, r3
 8004f84:	797b      	ldrb	r3, [r7, #5]
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	7dbb      	ldrb	r3, [r7, #22]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8004f8e:	fb11 f303 	smulbb	r3, r1, r3
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	4413      	add	r3, r2
 8004f96:	b299      	uxth	r1, r3
 8004f98:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8004f9a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004f9c:	887b      	ldrh	r3, [r7, #2]
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	4623      	mov	r3, r4
 8004fa2:	f000 fbf7 	bl	8005794 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8004fa6:	7dbb      	ldrb	r3, [r7, #22]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	75bb      	strb	r3, [r7, #22]
 8004fac:	7dbb      	ldrb	r3, [r7, #22]
 8004fae:	2b07      	cmp	r3, #7
 8004fb0:	d9bd      	bls.n	8004f2e <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8004fb2:	7d7b      	ldrb	r3, [r7, #21]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	757b      	strb	r3, [r7, #21]
 8004fb8:	7d7b      	ldrb	r3, [r7, #21]
 8004fba:	2b05      	cmp	r3, #5
 8004fbc:	d9b4      	bls.n	8004f28 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	371c      	adds	r7, #28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd90      	pop	{r4, r7, pc}
 8004fc8:	0800eadc 	.word	0x0800eadc

08004fcc <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8004fcc:	b590      	push	{r4, r7, lr}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	4608      	mov	r0, r1
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4603      	mov	r3, r0
 8004fdc:	70fb      	strb	r3, [r7, #3]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	70bb      	strb	r3, [r7, #2]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8004fe6:	e017      	b.n	8005018 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	607a      	str	r2, [r7, #4]
 8004fee:	7818      	ldrb	r0, [r3, #0]
 8004ff0:	883c      	ldrh	r4, [r7, #0]
 8004ff2:	78ba      	ldrb	r2, [r7, #2]
 8004ff4:	78f9      	ldrb	r1, [r7, #3]
 8004ff6:	8bbb      	ldrh	r3, [r7, #28]
 8004ff8:	9301      	str	r3, [sp, #4]
 8004ffa:	8b3b      	ldrh	r3, [r7, #24]
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	4623      	mov	r3, r4
 8005000:	f7ff ff4a 	bl	8004e98 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8005004:	8b3b      	ldrh	r3, [r7, #24]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	0052      	lsls	r2, r2, #1
 800500c:	4413      	add	r3, r2
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	b2da      	uxtb	r2, r3
 8005012:	78fb      	ldrb	r3, [r7, #3]
 8005014:	4413      	add	r3, r2
 8005016:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e3      	bne.n	8004fe8 <ILI9341_Draw_Text+0x1c>
    }
}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	bd90      	pop	{r4, r7, pc}
	...

0800502c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8005030:	f7ff fa76 	bl	8004520 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8005034:	f7fe fc96 	bl	8003964 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8005038:	2200      	movs	r2, #0
 800503a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800503e:	4802      	ldr	r0, [pc, #8]	; (8005048 <ILI9341_SPI_Init+0x1c>)
 8005040:	f001 fee8 	bl	8006e14 <HAL_GPIO_WritePin>
}
 8005044:	bf00      	nop
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40020800 	.word	0x40020800

0800504c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8005056:	1df9      	adds	r1, r7, #7
 8005058:	2301      	movs	r3, #1
 800505a:	2201      	movs	r2, #1
 800505c:	4803      	ldr	r0, [pc, #12]	; (800506c <ILI9341_SPI_Send+0x20>)
 800505e:	f003 f93c 	bl	80082da <HAL_SPI_Transmit>
}
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20002454 	.word	0x20002454

08005070 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800507a:	2200      	movs	r2, #0
 800507c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005080:	480b      	ldr	r0, [pc, #44]	; (80050b0 <ILI9341_Write_Command+0x40>)
 8005082:	f001 fec7 	bl	8006e14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8005086:	2200      	movs	r2, #0
 8005088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800508c:	4808      	ldr	r0, [pc, #32]	; (80050b0 <ILI9341_Write_Command+0x40>)
 800508e:	f001 fec1 	bl	8006e14 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff ffd9 	bl	800504c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800509a:	2201      	movs	r2, #1
 800509c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050a0:	4803      	ldr	r0, [pc, #12]	; (80050b0 <ILI9341_Write_Command+0x40>)
 80050a2:	f001 feb7 	bl	8006e14 <HAL_GPIO_WritePin>
}
 80050a6:	bf00      	nop
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40020800 	.word	0x40020800

080050b4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4603      	mov	r3, r0
 80050bc:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80050be:	2201      	movs	r2, #1
 80050c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050c4:	480b      	ldr	r0, [pc, #44]	; (80050f4 <ILI9341_Write_Data+0x40>)
 80050c6:	f001 fea5 	bl	8006e14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80050ca:	2200      	movs	r2, #0
 80050cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050d0:	4808      	ldr	r0, [pc, #32]	; (80050f4 <ILI9341_Write_Data+0x40>)
 80050d2:	f001 fe9f 	bl	8006e14 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff ffb7 	bl	800504c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80050de:	2201      	movs	r2, #1
 80050e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050e4:	4803      	ldr	r0, [pc, #12]	; (80050f4 <ILI9341_Write_Data+0x40>)
 80050e6:	f001 fe95 	bl	8006e14 <HAL_GPIO_WritePin>
}
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40020800 	.word	0x40020800

080050f8 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80050f8:	b590      	push	{r4, r7, lr}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	4604      	mov	r4, r0
 8005100:	4608      	mov	r0, r1
 8005102:	4611      	mov	r1, r2
 8005104:	461a      	mov	r2, r3
 8005106:	4623      	mov	r3, r4
 8005108:	80fb      	strh	r3, [r7, #6]
 800510a:	4603      	mov	r3, r0
 800510c:	80bb      	strh	r3, [r7, #4]
 800510e:	460b      	mov	r3, r1
 8005110:	807b      	strh	r3, [r7, #2]
 8005112:	4613      	mov	r3, r2
 8005114:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8005116:	202a      	movs	r0, #42	; 0x2a
 8005118:	f7ff ffaa 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 800511c:	88fb      	ldrh	r3, [r7, #6]
 800511e:	0a1b      	lsrs	r3, r3, #8
 8005120:	b29b      	uxth	r3, r3
 8005122:	b2db      	uxtb	r3, r3
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff ffc5 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff ffc0 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8005134:	887b      	ldrh	r3, [r7, #2]
 8005136:	0a1b      	lsrs	r3, r3, #8
 8005138:	b29b      	uxth	r3, r3
 800513a:	b2db      	uxtb	r3, r3
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff ffb9 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8005142:	887b      	ldrh	r3, [r7, #2]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff ffb4 	bl	80050b4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 800514c:	202b      	movs	r0, #43	; 0x2b
 800514e:	f7ff ff8f 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8005152:	88bb      	ldrh	r3, [r7, #4]
 8005154:	0a1b      	lsrs	r3, r3, #8
 8005156:	b29b      	uxth	r3, r3
 8005158:	b2db      	uxtb	r3, r3
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff ffaa 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8005160:	88bb      	ldrh	r3, [r7, #4]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff ffa5 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800516a:	883b      	ldrh	r3, [r7, #0]
 800516c:	0a1b      	lsrs	r3, r3, #8
 800516e:	b29b      	uxth	r3, r3
 8005170:	b2db      	uxtb	r3, r3
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff ff9e 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8005178:	883b      	ldrh	r3, [r7, #0]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff ff99 	bl	80050b4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8005182:	202c      	movs	r0, #44	; 0x2c
 8005184:	f7ff ff74 	bl	8005070 <ILI9341_Write_Command>
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bd90      	pop	{r4, r7, pc}

08005190 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005194:	2201      	movs	r2, #1
 8005196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800519a:	480b      	ldr	r0, [pc, #44]	; (80051c8 <ILI9341_Reset+0x38>)
 800519c:	f001 fe3a 	bl	8006e14 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80051a0:	20c8      	movs	r0, #200	; 0xc8
 80051a2:	f000 fbb9 	bl	8005918 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80051a6:	2200      	movs	r2, #0
 80051a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051ac:	4806      	ldr	r0, [pc, #24]	; (80051c8 <ILI9341_Reset+0x38>)
 80051ae:	f001 fe31 	bl	8006e14 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80051b2:	20c8      	movs	r0, #200	; 0xc8
 80051b4:	f000 fbb0 	bl	8005918 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80051b8:	2201      	movs	r2, #1
 80051ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80051be:	4802      	ldr	r0, [pc, #8]	; (80051c8 <ILI9341_Reset+0x38>)
 80051c0:	f001 fe28 	bl	8006e14 <HAL_GPIO_WritePin>
}
 80051c4:	bf00      	nop
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40020800 	.word	0x40020800

080051cc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80051da:	2036      	movs	r0, #54	; 0x36
 80051dc:	f7ff ff48 	bl	8005070 <ILI9341_Write_Command>
HAL_Delay(1);
 80051e0:	2001      	movs	r0, #1
 80051e2:	f000 fb99 	bl	8005918 <HAL_Delay>
	
switch(screen_rotation) 
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d837      	bhi.n	800525c <ILI9341_Set_Rotation+0x90>
 80051ec:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <ILI9341_Set_Rotation+0x28>)
 80051ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f2:	bf00      	nop
 80051f4:	08005205 	.word	0x08005205
 80051f8:	0800521b 	.word	0x0800521b
 80051fc:	08005231 	.word	0x08005231
 8005200:	08005247 	.word	0x08005247
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8005204:	2048      	movs	r0, #72	; 0x48
 8005206:	f7ff ff55 	bl	80050b4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800520a:	4b17      	ldr	r3, [pc, #92]	; (8005268 <ILI9341_Set_Rotation+0x9c>)
 800520c:	22f0      	movs	r2, #240	; 0xf0
 800520e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8005210:	4b16      	ldr	r3, [pc, #88]	; (800526c <ILI9341_Set_Rotation+0xa0>)
 8005212:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005216:	801a      	strh	r2, [r3, #0]
			break;
 8005218:	e021      	b.n	800525e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800521a:	2028      	movs	r0, #40	; 0x28
 800521c:	f7ff ff4a 	bl	80050b4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <ILI9341_Set_Rotation+0x9c>)
 8005222:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005226:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8005228:	4b10      	ldr	r3, [pc, #64]	; (800526c <ILI9341_Set_Rotation+0xa0>)
 800522a:	22f0      	movs	r2, #240	; 0xf0
 800522c:	801a      	strh	r2, [r3, #0]
			break;
 800522e:	e016      	b.n	800525e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8005230:	2088      	movs	r0, #136	; 0x88
 8005232:	f7ff ff3f 	bl	80050b4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8005236:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <ILI9341_Set_Rotation+0x9c>)
 8005238:	22f0      	movs	r2, #240	; 0xf0
 800523a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800523c:	4b0b      	ldr	r3, [pc, #44]	; (800526c <ILI9341_Set_Rotation+0xa0>)
 800523e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005242:	801a      	strh	r2, [r3, #0]
			break;
 8005244:	e00b      	b.n	800525e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8005246:	20e8      	movs	r0, #232	; 0xe8
 8005248:	f7ff ff34 	bl	80050b4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800524c:	4b06      	ldr	r3, [pc, #24]	; (8005268 <ILI9341_Set_Rotation+0x9c>)
 800524e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005252:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8005254:	4b05      	ldr	r3, [pc, #20]	; (800526c <ILI9341_Set_Rotation+0xa0>)
 8005256:	22f0      	movs	r2, #240	; 0xf0
 8005258:	801a      	strh	r2, [r3, #0]
			break;
 800525a:	e000      	b.n	800525e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800525c:	bf00      	nop
	}
}
 800525e:	bf00      	nop
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000072 	.word	0x20000072
 800526c:	20000070 	.word	0x20000070

08005270 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8005274:	2201      	movs	r2, #1
 8005276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800527a:	4802      	ldr	r0, [pc, #8]	; (8005284 <ILI9341_Enable+0x14>)
 800527c:	f001 fdca 	bl	8006e14 <HAL_GPIO_WritePin>
}
 8005280:	bf00      	nop
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40020800 	.word	0x40020800

08005288 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800528c:	f7ff fff0 	bl	8005270 <ILI9341_Enable>
ILI9341_SPI_Init();
 8005290:	f7ff fecc 	bl	800502c <ILI9341_SPI_Init>
ILI9341_Reset();
 8005294:	f7ff ff7c 	bl	8005190 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8005298:	2001      	movs	r0, #1
 800529a:	f7ff fee9 	bl	8005070 <ILI9341_Write_Command>
HAL_Delay(1000);
 800529e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052a2:	f000 fb39 	bl	8005918 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80052a6:	20cb      	movs	r0, #203	; 0xcb
 80052a8:	f7ff fee2 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80052ac:	2039      	movs	r0, #57	; 0x39
 80052ae:	f7ff ff01 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80052b2:	202c      	movs	r0, #44	; 0x2c
 80052b4:	f7ff fefe 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80052b8:	2000      	movs	r0, #0
 80052ba:	f7ff fefb 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80052be:	2034      	movs	r0, #52	; 0x34
 80052c0:	f7ff fef8 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80052c4:	2002      	movs	r0, #2
 80052c6:	f7ff fef5 	bl	80050b4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80052ca:	20cf      	movs	r0, #207	; 0xcf
 80052cc:	f7ff fed0 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80052d0:	2000      	movs	r0, #0
 80052d2:	f7ff feef 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80052d6:	20c1      	movs	r0, #193	; 0xc1
 80052d8:	f7ff feec 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80052dc:	2030      	movs	r0, #48	; 0x30
 80052de:	f7ff fee9 	bl	80050b4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80052e2:	20e8      	movs	r0, #232	; 0xe8
 80052e4:	f7ff fec4 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80052e8:	2085      	movs	r0, #133	; 0x85
 80052ea:	f7ff fee3 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80052ee:	2000      	movs	r0, #0
 80052f0:	f7ff fee0 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80052f4:	2078      	movs	r0, #120	; 0x78
 80052f6:	f7ff fedd 	bl	80050b4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80052fa:	20ea      	movs	r0, #234	; 0xea
 80052fc:	f7ff feb8 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8005300:	2000      	movs	r0, #0
 8005302:	f7ff fed7 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8005306:	2000      	movs	r0, #0
 8005308:	f7ff fed4 	bl	80050b4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800530c:	20ed      	movs	r0, #237	; 0xed
 800530e:	f7ff feaf 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8005312:	2064      	movs	r0, #100	; 0x64
 8005314:	f7ff fece 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8005318:	2003      	movs	r0, #3
 800531a:	f7ff fecb 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800531e:	2012      	movs	r0, #18
 8005320:	f7ff fec8 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8005324:	2081      	movs	r0, #129	; 0x81
 8005326:	f7ff fec5 	bl	80050b4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800532a:	20f7      	movs	r0, #247	; 0xf7
 800532c:	f7ff fea0 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8005330:	2020      	movs	r0, #32
 8005332:	f7ff febf 	bl	80050b4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8005336:	20c0      	movs	r0, #192	; 0xc0
 8005338:	f7ff fe9a 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800533c:	2023      	movs	r0, #35	; 0x23
 800533e:	f7ff feb9 	bl	80050b4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8005342:	20c1      	movs	r0, #193	; 0xc1
 8005344:	f7ff fe94 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8005348:	2010      	movs	r0, #16
 800534a:	f7ff feb3 	bl	80050b4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800534e:	20c5      	movs	r0, #197	; 0xc5
 8005350:	f7ff fe8e 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8005354:	203e      	movs	r0, #62	; 0x3e
 8005356:	f7ff fead 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800535a:	2028      	movs	r0, #40	; 0x28
 800535c:	f7ff feaa 	bl	80050b4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8005360:	20c7      	movs	r0, #199	; 0xc7
 8005362:	f7ff fe85 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8005366:	2086      	movs	r0, #134	; 0x86
 8005368:	f7ff fea4 	bl	80050b4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 800536c:	2036      	movs	r0, #54	; 0x36
 800536e:	f7ff fe7f 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8005372:	2048      	movs	r0, #72	; 0x48
 8005374:	f7ff fe9e 	bl	80050b4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8005378:	203a      	movs	r0, #58	; 0x3a
 800537a:	f7ff fe79 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800537e:	2055      	movs	r0, #85	; 0x55
 8005380:	f7ff fe98 	bl	80050b4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8005384:	20b1      	movs	r0, #177	; 0xb1
 8005386:	f7ff fe73 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800538a:	2000      	movs	r0, #0
 800538c:	f7ff fe92 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8005390:	2018      	movs	r0, #24
 8005392:	f7ff fe8f 	bl	80050b4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8005396:	20b6      	movs	r0, #182	; 0xb6
 8005398:	f7ff fe6a 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 800539c:	2008      	movs	r0, #8
 800539e:	f7ff fe89 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80053a2:	2082      	movs	r0, #130	; 0x82
 80053a4:	f7ff fe86 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80053a8:	2027      	movs	r0, #39	; 0x27
 80053aa:	f7ff fe83 	bl	80050b4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80053ae:	20f2      	movs	r0, #242	; 0xf2
 80053b0:	f7ff fe5e 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80053b4:	2000      	movs	r0, #0
 80053b6:	f7ff fe7d 	bl	80050b4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80053ba:	2026      	movs	r0, #38	; 0x26
 80053bc:	f7ff fe58 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80053c0:	2001      	movs	r0, #1
 80053c2:	f7ff fe77 	bl	80050b4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80053c6:	20e0      	movs	r0, #224	; 0xe0
 80053c8:	f7ff fe52 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80053cc:	200f      	movs	r0, #15
 80053ce:	f7ff fe71 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80053d2:	2031      	movs	r0, #49	; 0x31
 80053d4:	f7ff fe6e 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80053d8:	202b      	movs	r0, #43	; 0x2b
 80053da:	f7ff fe6b 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80053de:	200c      	movs	r0, #12
 80053e0:	f7ff fe68 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80053e4:	200e      	movs	r0, #14
 80053e6:	f7ff fe65 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80053ea:	2008      	movs	r0, #8
 80053ec:	f7ff fe62 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80053f0:	204e      	movs	r0, #78	; 0x4e
 80053f2:	f7ff fe5f 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80053f6:	20f1      	movs	r0, #241	; 0xf1
 80053f8:	f7ff fe5c 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80053fc:	2037      	movs	r0, #55	; 0x37
 80053fe:	f7ff fe59 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8005402:	2007      	movs	r0, #7
 8005404:	f7ff fe56 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8005408:	2010      	movs	r0, #16
 800540a:	f7ff fe53 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800540e:	2003      	movs	r0, #3
 8005410:	f7ff fe50 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8005414:	200e      	movs	r0, #14
 8005416:	f7ff fe4d 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800541a:	2009      	movs	r0, #9
 800541c:	f7ff fe4a 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8005420:	2000      	movs	r0, #0
 8005422:	f7ff fe47 	bl	80050b4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8005426:	20e1      	movs	r0, #225	; 0xe1
 8005428:	f7ff fe22 	bl	8005070 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800542c:	2000      	movs	r0, #0
 800542e:	f7ff fe41 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8005432:	200e      	movs	r0, #14
 8005434:	f7ff fe3e 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8005438:	2014      	movs	r0, #20
 800543a:	f7ff fe3b 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800543e:	2003      	movs	r0, #3
 8005440:	f7ff fe38 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8005444:	2011      	movs	r0, #17
 8005446:	f7ff fe35 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800544a:	2007      	movs	r0, #7
 800544c:	f7ff fe32 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8005450:	2031      	movs	r0, #49	; 0x31
 8005452:	f7ff fe2f 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8005456:	20c1      	movs	r0, #193	; 0xc1
 8005458:	f7ff fe2c 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 800545c:	2048      	movs	r0, #72	; 0x48
 800545e:	f7ff fe29 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8005462:	2008      	movs	r0, #8
 8005464:	f7ff fe26 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8005468:	200f      	movs	r0, #15
 800546a:	f7ff fe23 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800546e:	200c      	movs	r0, #12
 8005470:	f7ff fe20 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8005474:	2031      	movs	r0, #49	; 0x31
 8005476:	f7ff fe1d 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800547a:	2036      	movs	r0, #54	; 0x36
 800547c:	f7ff fe1a 	bl	80050b4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8005480:	200f      	movs	r0, #15
 8005482:	f7ff fe17 	bl	80050b4 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8005486:	2011      	movs	r0, #17
 8005488:	f7ff fdf2 	bl	8005070 <ILI9341_Write_Command>
HAL_Delay(120);
 800548c:	2078      	movs	r0, #120	; 0x78
 800548e:	f000 fa43 	bl	8005918 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8005492:	2029      	movs	r0, #41	; 0x29
 8005494:	f7ff fdec 	bl	8005070 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8005498:	2000      	movs	r0, #0
 800549a:	f7ff fe97 	bl	80051cc <ILI9341_Set_Rotation>
}
 800549e:	bf00      	nop
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80054a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054a8:	b08d      	sub	sp, #52	; 0x34
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	4603      	mov	r3, r0
 80054ae:	6039      	str	r1, [r7, #0]
 80054b0:	80fb      	strh	r3, [r7, #6]
 80054b2:	466b      	mov	r3, sp
 80054b4:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80054c2:	d202      	bcs.n	80054ca <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054c8:	e002      	b.n	80054d0 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80054ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80054d0:	2201      	movs	r2, #1
 80054d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054d6:	4840      	ldr	r0, [pc, #256]	; (80055d8 <ILI9341_Draw_Colour_Burst+0x134>)
 80054d8:	f001 fc9c 	bl	8006e14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80054dc:	2200      	movs	r2, #0
 80054de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054e2:	483d      	ldr	r0, [pc, #244]	; (80055d8 <ILI9341_Draw_Colour_Burst+0x134>)
 80054e4:	f001 fc96 	bl	8006e14 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80054e8:	88fb      	ldrh	r3, [r7, #6]
 80054ea:	0a1b      	lsrs	r3, r3, #8
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80054f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054f4:	460b      	mov	r3, r1
 80054f6:	3b01      	subs	r3, #1
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	2300      	movs	r3, #0
 80054fc:	4688      	mov	r8, r1
 80054fe:	4699      	mov	r9, r3
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800550c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005510:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005514:	2300      	movs	r3, #0
 8005516:	460c      	mov	r4, r1
 8005518:	461d      	mov	r5, r3
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	f04f 0300 	mov.w	r3, #0
 8005522:	00eb      	lsls	r3, r5, #3
 8005524:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005528:	00e2      	lsls	r2, r4, #3
 800552a:	1dcb      	adds	r3, r1, #7
 800552c:	08db      	lsrs	r3, r3, #3
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	ebad 0d03 	sub.w	sp, sp, r3
 8005534:	466b      	mov	r3, sp
 8005536:	3300      	adds	r3, #0
 8005538:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800553a:	2300      	movs	r3, #0
 800553c:	62bb      	str	r3, [r7, #40]	; 0x28
 800553e:	e00e      	b.n	800555e <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	4413      	add	r3, r2
 8005546:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800554a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	3301      	adds	r3, #1
 8005550:	88fa      	ldrh	r2, [r7, #6]
 8005552:	b2d1      	uxtb	r1, r2
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	3302      	adds	r3, #2
 800555c:	62bb      	str	r3, [r7, #40]	; 0x28
 800555e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	429a      	cmp	r2, r3
 8005564:	d3ec      	bcc.n	8005540 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	fbb2 f3f3 	udiv	r3, r2, r3
 8005574:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800557a:	fbb3 f2f2 	udiv	r2, r3, r2
 800557e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005580:	fb01 f202 	mul.w	r2, r1, r2
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d010      	beq.n	80055b0 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800558e:	2300      	movs	r3, #0
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
 8005592:	e009      	b.n	80055a8 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	b29a      	uxth	r2, r3
 8005598:	230a      	movs	r3, #10
 800559a:	69b9      	ldr	r1, [r7, #24]
 800559c:	480f      	ldr	r0, [pc, #60]	; (80055dc <ILI9341_Draw_Colour_Burst+0x138>)
 800559e:	f002 fe9c 	bl	80082da <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	3301      	adds	r3, #1
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
 80055a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d3f1      	bcc.n	8005594 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	230a      	movs	r3, #10
 80055b6:	69b9      	ldr	r1, [r7, #24]
 80055b8:	4808      	ldr	r0, [pc, #32]	; (80055dc <ILI9341_Draw_Colour_Burst+0x138>)
 80055ba:	f002 fe8e 	bl	80082da <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80055be:	2201      	movs	r2, #1
 80055c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055c4:	4804      	ldr	r0, [pc, #16]	; (80055d8 <ILI9341_Draw_Colour_Burst+0x134>)
 80055c6:	f001 fc25 	bl	8006e14 <HAL_GPIO_WritePin>
 80055ca:	46b5      	mov	sp, r6
}
 80055cc:	bf00      	nop
 80055ce:	3734      	adds	r7, #52	; 0x34
 80055d0:	46bd      	mov	sp, r7
 80055d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055d6:	bf00      	nop
 80055d8:	40020800 	.word	0x40020800
 80055dc:	20002454 	.word	0x20002454

080055e0 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	80fb      	strh	r3, [r7, #6]
 80055ea:	460b      	mov	r3, r1
 80055ec:	80bb      	strh	r3, [r7, #4]
 80055ee:	4613      	mov	r3, r2
 80055f0:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80055f2:	4b64      	ldr	r3, [pc, #400]	; (8005784 <ILI9341_Draw_Pixel+0x1a4>)
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	88fa      	ldrh	r2, [r7, #6]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	f080 80be 	bcs.w	800577c <ILI9341_Draw_Pixel+0x19c>
 8005600:	4b61      	ldr	r3, [pc, #388]	; (8005788 <ILI9341_Draw_Pixel+0x1a8>)
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	b29b      	uxth	r3, r3
 8005606:	88ba      	ldrh	r2, [r7, #4]
 8005608:	429a      	cmp	r2, r3
 800560a:	f080 80b7 	bcs.w	800577c <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800560e:	2200      	movs	r2, #0
 8005610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005614:	485d      	ldr	r0, [pc, #372]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 8005616:	f001 fbfd 	bl	8006e14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800561a:	2200      	movs	r2, #0
 800561c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005620:	485a      	ldr	r0, [pc, #360]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 8005622:	f001 fbf7 	bl	8006e14 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8005626:	202a      	movs	r0, #42	; 0x2a
 8005628:	f7ff fd10 	bl	800504c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800562c:	2201      	movs	r2, #1
 800562e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005632:	4856      	ldr	r0, [pc, #344]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 8005634:	f001 fbee 	bl	8006e14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8005638:	2201      	movs	r2, #1
 800563a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800563e:	4853      	ldr	r0, [pc, #332]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 8005640:	f001 fbe8 	bl	8006e14 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8005644:	2200      	movs	r2, #0
 8005646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800564a:	4850      	ldr	r0, [pc, #320]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 800564c:	f001 fbe2 	bl	8006e14 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8005650:	88fb      	ldrh	r3, [r7, #6]
 8005652:	0a1b      	lsrs	r3, r3, #8
 8005654:	b29b      	uxth	r3, r3
 8005656:	b2db      	uxtb	r3, r3
 8005658:	753b      	strb	r3, [r7, #20]
 800565a:	88fb      	ldrh	r3, [r7, #6]
 800565c:	b2db      	uxtb	r3, r3
 800565e:	757b      	strb	r3, [r7, #21]
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	3301      	adds	r3, #1
 8005664:	121b      	asrs	r3, r3, #8
 8005666:	b2db      	uxtb	r3, r3
 8005668:	75bb      	strb	r3, [r7, #22]
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	3301      	adds	r3, #1
 8005670:	b2db      	uxtb	r3, r3
 8005672:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8005674:	f107 0114 	add.w	r1, r7, #20
 8005678:	2301      	movs	r3, #1
 800567a:	2204      	movs	r2, #4
 800567c:	4844      	ldr	r0, [pc, #272]	; (8005790 <ILI9341_Draw_Pixel+0x1b0>)
 800567e:	f002 fe2c 	bl	80082da <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005682:	2201      	movs	r2, #1
 8005684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005688:	4840      	ldr	r0, [pc, #256]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 800568a:	f001 fbc3 	bl	8006e14 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800568e:	2200      	movs	r2, #0
 8005690:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005694:	483d      	ldr	r0, [pc, #244]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 8005696:	f001 fbbd 	bl	8006e14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800569a:	2200      	movs	r2, #0
 800569c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056a0:	483a      	ldr	r0, [pc, #232]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 80056a2:	f001 fbb7 	bl	8006e14 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80056a6:	202b      	movs	r0, #43	; 0x2b
 80056a8:	f7ff fcd0 	bl	800504c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80056ac:	2201      	movs	r2, #1
 80056ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056b2:	4836      	ldr	r0, [pc, #216]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 80056b4:	f001 fbae 	bl	8006e14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80056b8:	2201      	movs	r2, #1
 80056ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056be:	4833      	ldr	r0, [pc, #204]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 80056c0:	f001 fba8 	bl	8006e14 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80056c4:	2200      	movs	r2, #0
 80056c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056ca:	4830      	ldr	r0, [pc, #192]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 80056cc:	f001 fba2 	bl	8006e14 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80056d0:	88bb      	ldrh	r3, [r7, #4]
 80056d2:	0a1b      	lsrs	r3, r3, #8
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	743b      	strb	r3, [r7, #16]
 80056da:	88bb      	ldrh	r3, [r7, #4]
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	747b      	strb	r3, [r7, #17]
 80056e0:	88bb      	ldrh	r3, [r7, #4]
 80056e2:	3301      	adds	r3, #1
 80056e4:	121b      	asrs	r3, r3, #8
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	74bb      	strb	r3, [r7, #18]
 80056ea:	88bb      	ldrh	r3, [r7, #4]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	3301      	adds	r3, #1
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80056f4:	f107 0110 	add.w	r1, r7, #16
 80056f8:	2301      	movs	r3, #1
 80056fa:	2204      	movs	r2, #4
 80056fc:	4824      	ldr	r0, [pc, #144]	; (8005790 <ILI9341_Draw_Pixel+0x1b0>)
 80056fe:	f002 fdec 	bl	80082da <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005702:	2201      	movs	r2, #1
 8005704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005708:	4820      	ldr	r0, [pc, #128]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 800570a:	f001 fb83 	bl	8006e14 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800570e:	2200      	movs	r2, #0
 8005710:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005714:	481d      	ldr	r0, [pc, #116]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 8005716:	f001 fb7d 	bl	8006e14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800571a:	2200      	movs	r2, #0
 800571c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005720:	481a      	ldr	r0, [pc, #104]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 8005722:	f001 fb77 	bl	8006e14 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8005726:	202c      	movs	r0, #44	; 0x2c
 8005728:	f7ff fc90 	bl	800504c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800572c:	2201      	movs	r2, #1
 800572e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005732:	4816      	ldr	r0, [pc, #88]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 8005734:	f001 fb6e 	bl	8006e14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8005738:	2201      	movs	r2, #1
 800573a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800573e:	4813      	ldr	r0, [pc, #76]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 8005740:	f001 fb68 	bl	8006e14 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005744:	2200      	movs	r2, #0
 8005746:	f44f 7180 	mov.w	r1, #256	; 0x100
 800574a:	4810      	ldr	r0, [pc, #64]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 800574c:	f001 fb62 	bl	8006e14 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8005750:	887b      	ldrh	r3, [r7, #2]
 8005752:	0a1b      	lsrs	r3, r3, #8
 8005754:	b29b      	uxth	r3, r3
 8005756:	b2db      	uxtb	r3, r3
 8005758:	733b      	strb	r3, [r7, #12]
 800575a:	887b      	ldrh	r3, [r7, #2]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8005760:	f107 010c 	add.w	r1, r7, #12
 8005764:	2301      	movs	r3, #1
 8005766:	2202      	movs	r2, #2
 8005768:	4809      	ldr	r0, [pc, #36]	; (8005790 <ILI9341_Draw_Pixel+0x1b0>)
 800576a:	f002 fdb6 	bl	80082da <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800576e:	2201      	movs	r2, #1
 8005770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005774:	4805      	ldr	r0, [pc, #20]	; (800578c <ILI9341_Draw_Pixel+0x1ac>)
 8005776:	f001 fb4d 	bl	8006e14 <HAL_GPIO_WritePin>
 800577a:	e000      	b.n	800577e <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800577c:	bf00      	nop
	
}
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20000072 	.word	0x20000072
 8005788:	20000070 	.word	0x20000070
 800578c:	40020800 	.word	0x40020800
 8005790:	20002454 	.word	0x20002454

08005794 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8005794:	b590      	push	{r4, r7, lr}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	4604      	mov	r4, r0
 800579c:	4608      	mov	r0, r1
 800579e:	4611      	mov	r1, r2
 80057a0:	461a      	mov	r2, r3
 80057a2:	4623      	mov	r3, r4
 80057a4:	80fb      	strh	r3, [r7, #6]
 80057a6:	4603      	mov	r3, r0
 80057a8:	80bb      	strh	r3, [r7, #4]
 80057aa:	460b      	mov	r3, r1
 80057ac:	807b      	strh	r3, [r7, #2]
 80057ae:	4613      	mov	r3, r2
 80057b0:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80057b2:	4b24      	ldr	r3, [pc, #144]	; (8005844 <ILI9341_Draw_Rectangle+0xb0>)
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	88fa      	ldrh	r2, [r7, #6]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d23d      	bcs.n	800583a <ILI9341_Draw_Rectangle+0xa6>
 80057be:	4b22      	ldr	r3, [pc, #136]	; (8005848 <ILI9341_Draw_Rectangle+0xb4>)
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	88ba      	ldrh	r2, [r7, #4]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d237      	bcs.n	800583a <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80057ca:	88fa      	ldrh	r2, [r7, #6]
 80057cc:	887b      	ldrh	r3, [r7, #2]
 80057ce:	4413      	add	r3, r2
 80057d0:	4a1c      	ldr	r2, [pc, #112]	; (8005844 <ILI9341_Draw_Rectangle+0xb0>)
 80057d2:	8812      	ldrh	r2, [r2, #0]
 80057d4:	b292      	uxth	r2, r2
 80057d6:	4293      	cmp	r3, r2
 80057d8:	dd05      	ble.n	80057e6 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80057da:	4b1a      	ldr	r3, [pc, #104]	; (8005844 <ILI9341_Draw_Rectangle+0xb0>)
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b29a      	uxth	r2, r3
 80057e0:	88fb      	ldrh	r3, [r7, #6]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80057e6:	88ba      	ldrh	r2, [r7, #4]
 80057e8:	883b      	ldrh	r3, [r7, #0]
 80057ea:	4413      	add	r3, r2
 80057ec:	4a16      	ldr	r2, [pc, #88]	; (8005848 <ILI9341_Draw_Rectangle+0xb4>)
 80057ee:	8812      	ldrh	r2, [r2, #0]
 80057f0:	b292      	uxth	r2, r2
 80057f2:	4293      	cmp	r3, r2
 80057f4:	dd05      	ble.n	8005802 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80057f6:	4b14      	ldr	r3, [pc, #80]	; (8005848 <ILI9341_Draw_Rectangle+0xb4>)
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	88bb      	ldrh	r3, [r7, #4]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8005802:	88fa      	ldrh	r2, [r7, #6]
 8005804:	887b      	ldrh	r3, [r7, #2]
 8005806:	4413      	add	r3, r2
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29c      	uxth	r4, r3
 800580e:	88ba      	ldrh	r2, [r7, #4]
 8005810:	883b      	ldrh	r3, [r7, #0]
 8005812:	4413      	add	r3, r2
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b29b      	uxth	r3, r3
 800581a:	88b9      	ldrh	r1, [r7, #4]
 800581c:	88f8      	ldrh	r0, [r7, #6]
 800581e:	4622      	mov	r2, r4
 8005820:	f7ff fc6a 	bl	80050f8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8005824:	883b      	ldrh	r3, [r7, #0]
 8005826:	887a      	ldrh	r2, [r7, #2]
 8005828:	fb02 f303 	mul.w	r3, r2, r3
 800582c:	461a      	mov	r2, r3
 800582e:	8b3b      	ldrh	r3, [r7, #24]
 8005830:	4611      	mov	r1, r2
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff fe36 	bl	80054a4 <ILI9341_Draw_Colour_Burst>
 8005838:	e000      	b.n	800583c <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800583a:	bf00      	nop
}
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	bd90      	pop	{r4, r7, pc}
 8005842:	bf00      	nop
 8005844:	20000072 	.word	0x20000072
 8005848:	20000070 	.word	0x20000070

0800584c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005850:	4b08      	ldr	r3, [pc, #32]	; (8005874 <HAL_Init+0x28>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a07      	ldr	r2, [pc, #28]	; (8005874 <HAL_Init+0x28>)
 8005856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800585c:	2003      	movs	r0, #3
 800585e:	f000 fd73 	bl	8006348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005862:	2000      	movs	r0, #0
 8005864:	f000 f808 	bl	8005878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005868:	f7fe fedc 	bl	8004624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40023c00 	.word	0x40023c00

08005878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005880:	4b12      	ldr	r3, [pc, #72]	; (80058cc <HAL_InitTick+0x54>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <HAL_InitTick+0x58>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	4619      	mov	r1, r3
 800588a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800588e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005892:	fbb2 f3f3 	udiv	r3, r2, r3
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fd8b 	bl	80063b2 <HAL_SYSTICK_Config>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e00e      	b.n	80058c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b0f      	cmp	r3, #15
 80058aa:	d80a      	bhi.n	80058c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058ac:	2200      	movs	r2, #0
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058b4:	f000 fd53 	bl	800635e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80058b8:	4a06      	ldr	r2, [pc, #24]	; (80058d4 <HAL_InitTick+0x5c>)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	e000      	b.n	80058c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	2000006c 	.word	0x2000006c
 80058d0:	20000078 	.word	0x20000078
 80058d4:	20000074 	.word	0x20000074

080058d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <HAL_IncTick+0x20>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <HAL_IncTick+0x24>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4413      	add	r3, r2
 80058e8:	4a04      	ldr	r2, [pc, #16]	; (80058fc <HAL_IncTick+0x24>)
 80058ea:	6013      	str	r3, [r2, #0]
}
 80058ec:	bf00      	nop
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20000078 	.word	0x20000078
 80058fc:	200025dc 	.word	0x200025dc

08005900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  return uwTick;
 8005904:	4b03      	ldr	r3, [pc, #12]	; (8005914 <HAL_GetTick+0x14>)
 8005906:	681b      	ldr	r3, [r3, #0]
}
 8005908:	4618      	mov	r0, r3
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	200025dc 	.word	0x200025dc

08005918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005920:	f7ff ffee 	bl	8005900 <HAL_GetTick>
 8005924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005930:	d005      	beq.n	800593e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005932:	4b0a      	ldr	r3, [pc, #40]	; (800595c <HAL_Delay+0x44>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800593e:	bf00      	nop
 8005940:	f7ff ffde 	bl	8005900 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	429a      	cmp	r2, r3
 800594e:	d8f7      	bhi.n	8005940 <HAL_Delay+0x28>
  {
  }
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000078 	.word	0x20000078

08005960 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e031      	b.n	80059da <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d109      	bne.n	8005992 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fa feb0 	bl	80006e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	2b00      	cmp	r3, #0
 800599c:	d116      	bne.n	80059cc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059a2:	4b10      	ldr	r3, [pc, #64]	; (80059e4 <HAL_ADC_Init+0x84>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	f043 0202 	orr.w	r2, r3, #2
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fa7e 	bl	8005eb0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	f023 0303 	bic.w	r3, r3, #3
 80059c2:	f043 0201 	orr.w	r2, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40
 80059ca:	e001      	b.n	80059d0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	ffffeefd 	.word	0xffffeefd

080059e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_ADC_Start_DMA+0x1e>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e0d4      	b.n	8005bb0 <HAL_ADC_Start_DMA+0x1c8>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d018      	beq.n	8005a4e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005a2c:	4b62      	ldr	r3, [pc, #392]	; (8005bb8 <HAL_ADC_Start_DMA+0x1d0>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a62      	ldr	r2, [pc, #392]	; (8005bbc <HAL_ADC_Start_DMA+0x1d4>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	0c9a      	lsrs	r2, r3, #18
 8005a38:	4613      	mov	r3, r2
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	4413      	add	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8005a40:	e002      	b.n	8005a48 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1f9      	bne.n	8005a42 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	f040 809c 	bne.w	8005b96 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a62:	4b57      	ldr	r3, [pc, #348]	; (8005bc0 <HAL_ADC_Start_DMA+0x1d8>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d007      	beq.n	8005a8c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a98:	d106      	bne.n	8005aa8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9e:	f023 0206 	bic.w	r2, r3, #6
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	645a      	str	r2, [r3, #68]	; 0x44
 8005aa6:	e002      	b.n	8005aae <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	4a42      	ldr	r2, [pc, #264]	; (8005bc4 <HAL_ADC_Start_DMA+0x1dc>)
 8005abc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	4a41      	ldr	r2, [pc, #260]	; (8005bc8 <HAL_ADC_Start_DMA+0x1e0>)
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	4a40      	ldr	r2, [pc, #256]	; (8005bcc <HAL_ADC_Start_DMA+0x1e4>)
 8005acc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005ad6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005ae6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005af6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	334c      	adds	r3, #76	; 0x4c
 8005b02:	4619      	mov	r1, r3
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f000 fd0e 	bl	8006528 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005b0c:	4b30      	ldr	r3, [pc, #192]	; (8005bd0 <HAL_ADC_Start_DMA+0x1e8>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f003 031f 	and.w	r3, r3, #31
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10f      	bne.n	8005b38 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d143      	bne.n	8005bae <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005b34:	609a      	str	r2, [r3, #8]
 8005b36:	e03a      	b.n	8005bae <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a25      	ldr	r2, [pc, #148]	; (8005bd4 <HAL_ADC_Start_DMA+0x1ec>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d10e      	bne.n	8005b60 <HAL_ADC_Start_DMA+0x178>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d107      	bne.n	8005b60 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005b5e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005b60:	4b1b      	ldr	r3, [pc, #108]	; (8005bd0 <HAL_ADC_Start_DMA+0x1e8>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f003 0310 	and.w	r3, r3, #16
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d120      	bne.n	8005bae <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a19      	ldr	r2, [pc, #100]	; (8005bd8 <HAL_ADC_Start_DMA+0x1f0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d11b      	bne.n	8005bae <HAL_ADC_Start_DMA+0x1c6>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d114      	bne.n	8005bae <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005b92:	609a      	str	r2, [r3, #8]
 8005b94:	e00b      	b.n	8005bae <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	f043 0210 	orr.w	r2, r3, #16
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba6:	f043 0201 	orr.w	r2, r3, #1
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	2000006c 	.word	0x2000006c
 8005bbc:	431bde83 	.word	0x431bde83
 8005bc0:	fffff8fe 	.word	0xfffff8fe
 8005bc4:	080060a5 	.word	0x080060a5
 8005bc8:	0800615f 	.word	0x0800615f
 8005bcc:	0800617b 	.word	0x0800617b
 8005bd0:	40012300 	.word	0x40012300
 8005bd4:	40012000 	.word	0x40012000
 8005bd8:	40012200 	.word	0x40012200

08005bdc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_ADC_ConfigChannel+0x1c>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e136      	b.n	8005e8e <HAL_ADC_ConfigChannel+0x28a>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b09      	cmp	r3, #9
 8005c2e:	d93a      	bls.n	8005ca6 <HAL_ADC_ConfigChannel+0xa2>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c38:	d035      	beq.n	8005ca6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68d9      	ldr	r1, [r3, #12]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	461a      	mov	r2, r3
 8005c48:	4613      	mov	r3, r2
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	4413      	add	r3, r2
 8005c4e:	3b1e      	subs	r3, #30
 8005c50:	2207      	movs	r2, #7
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43da      	mvns	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	400a      	ands	r2, r1
 8005c5e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a8d      	ldr	r2, [pc, #564]	; (8005e9c <HAL_ADC_ConfigChannel+0x298>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d10a      	bne.n	8005c80 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68d9      	ldr	r1, [r3, #12]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	061a      	lsls	r2, r3, #24
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c7e:	e035      	b.n	8005cec <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68d9      	ldr	r1, [r3, #12]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	4618      	mov	r0, r3
 8005c92:	4603      	mov	r3, r0
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	4403      	add	r3, r0
 8005c98:	3b1e      	subs	r3, #30
 8005c9a:	409a      	lsls	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ca4:	e022      	b.n	8005cec <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6919      	ldr	r1, [r3, #16]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	4413      	add	r3, r2
 8005cba:	2207      	movs	r2, #7
 8005cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc0:	43da      	mvns	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	400a      	ands	r2, r1
 8005cc8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6919      	ldr	r1, [r3, #16]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	4618      	mov	r0, r3
 8005cdc:	4603      	mov	r3, r0
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	4403      	add	r3, r0
 8005ce2:	409a      	lsls	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	2b06      	cmp	r3, #6
 8005cf2:	d824      	bhi.n	8005d3e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	3b05      	subs	r3, #5
 8005d06:	221f      	movs	r2, #31
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	43da      	mvns	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	400a      	ands	r2, r1
 8005d14:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	4618      	mov	r0, r3
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3b05      	subs	r3, #5
 8005d30:	fa00 f203 	lsl.w	r2, r0, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	635a      	str	r2, [r3, #52]	; 0x34
 8005d3c:	e04c      	b.n	8005dd8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b0c      	cmp	r3, #12
 8005d44:	d824      	bhi.n	8005d90 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	3b23      	subs	r3, #35	; 0x23
 8005d58:	221f      	movs	r2, #31
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	43da      	mvns	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	400a      	ands	r2, r1
 8005d66:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	4618      	mov	r0, r3
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	3b23      	subs	r3, #35	; 0x23
 8005d82:	fa00 f203 	lsl.w	r2, r0, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8005d8e:	e023      	b.n	8005dd8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	3b41      	subs	r3, #65	; 0x41
 8005da2:	221f      	movs	r2, #31
 8005da4:	fa02 f303 	lsl.w	r3, r2, r3
 8005da8:	43da      	mvns	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	400a      	ands	r2, r1
 8005db0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	3b41      	subs	r3, #65	; 0x41
 8005dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a30      	ldr	r2, [pc, #192]	; (8005ea0 <HAL_ADC_ConfigChannel+0x29c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d10a      	bne.n	8005df8 <HAL_ADC_ConfigChannel+0x1f4>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dea:	d105      	bne.n	8005df8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005dec:	4b2d      	ldr	r3, [pc, #180]	; (8005ea4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	4a2c      	ldr	r2, [pc, #176]	; (8005ea4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005df2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005df6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a28      	ldr	r2, [pc, #160]	; (8005ea0 <HAL_ADC_ConfigChannel+0x29c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d10f      	bne.n	8005e22 <HAL_ADC_ConfigChannel+0x21e>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b12      	cmp	r3, #18
 8005e08:	d10b      	bne.n	8005e22 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005e0a:	4b26      	ldr	r3, [pc, #152]	; (8005ea4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	4a25      	ldr	r2, [pc, #148]	; (8005ea4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e10:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005e14:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005e16:	4b23      	ldr	r3, [pc, #140]	; (8005ea4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	4a22      	ldr	r2, [pc, #136]	; (8005ea4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e20:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1e      	ldr	r2, [pc, #120]	; (8005ea0 <HAL_ADC_ConfigChannel+0x29c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d12b      	bne.n	8005e84 <HAL_ADC_ConfigChannel+0x280>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1a      	ldr	r2, [pc, #104]	; (8005e9c <HAL_ADC_ConfigChannel+0x298>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d003      	beq.n	8005e3e <HAL_ADC_ConfigChannel+0x23a>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b11      	cmp	r3, #17
 8005e3c:	d122      	bne.n	8005e84 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005e3e:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	4a18      	ldr	r2, [pc, #96]	; (8005ea4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e44:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005e48:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005e4a:	4b16      	ldr	r3, [pc, #88]	; (8005ea4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	4a15      	ldr	r2, [pc, #84]	; (8005ea4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e54:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a10      	ldr	r2, [pc, #64]	; (8005e9c <HAL_ADC_ConfigChannel+0x298>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d111      	bne.n	8005e84 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005e60:	4b11      	ldr	r3, [pc, #68]	; (8005ea8 <HAL_ADC_ConfigChannel+0x2a4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a11      	ldr	r2, [pc, #68]	; (8005eac <HAL_ADC_ConfigChannel+0x2a8>)
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	0c9a      	lsrs	r2, r3, #18
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005e76:	e002      	b.n	8005e7e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1f9      	bne.n	8005e78 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	10000012 	.word	0x10000012
 8005ea0:	40012000 	.word	0x40012000
 8005ea4:	40012300 	.word	0x40012300
 8005ea8:	2000006c 	.word	0x2000006c
 8005eac:	431bde83 	.word	0x431bde83

08005eb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005eb8:	4b78      	ldr	r3, [pc, #480]	; (800609c <ADC_Init+0x1ec>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	4a77      	ldr	r2, [pc, #476]	; (800609c <ADC_Init+0x1ec>)
 8005ebe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005ec2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005ec4:	4b75      	ldr	r3, [pc, #468]	; (800609c <ADC_Init+0x1ec>)
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	4973      	ldr	r1, [pc, #460]	; (800609c <ADC_Init+0x1ec>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ee0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6859      	ldr	r1, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	021a      	lsls	r2, r3, #8
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005f04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6859      	ldr	r1, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6899      	ldr	r1, [r3, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3e:	4a58      	ldr	r2, [pc, #352]	; (80060a0 <ADC_Init+0x1f0>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d022      	beq.n	8005f8a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6899      	ldr	r1, [r3, #8]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6899      	ldr	r1, [r3, #8]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	609a      	str	r2, [r3, #8]
 8005f88:	e00f      	b.n	8005faa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005fa8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0202 	bic.w	r2, r2, #2
 8005fb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6899      	ldr	r1, [r3, #8]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	005a      	lsls	r2, r3, #1
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01b      	beq.n	8006010 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fe6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005ff6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6859      	ldr	r1, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	3b01      	subs	r3, #1
 8006004:	035a      	lsls	r2, r3, #13
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	605a      	str	r2, [r3, #4]
 800600e:	e007      	b.n	8006020 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800601e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800602e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	3b01      	subs	r3, #1
 800603c:	051a      	lsls	r2, r3, #20
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006054:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6899      	ldr	r1, [r3, #8]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006062:	025a      	lsls	r2, r3, #9
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800607a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6899      	ldr	r1, [r3, #8]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	029a      	lsls	r2, r3, #10
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	609a      	str	r2, [r3, #8]
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	40012300 	.word	0x40012300
 80060a0:	0f000001 	.word	0x0f000001

080060a4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d13c      	bne.n	8006138 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d12b      	bne.n	8006130 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d127      	bne.n	8006130 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d006      	beq.n	80060fc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d119      	bne.n	8006130 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0220 	bic.w	r2, r2, #32
 800610a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006110:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d105      	bne.n	8006130 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006128:	f043 0201 	orr.w	r2, r3, #1
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f7fd fe2b 	bl	8003d8c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006136:	e00e      	b.n	8006156 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613c:	f003 0310 	and.w	r3, r3, #16
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff fd53 	bl	8005bf0 <HAL_ADC_ErrorCallback>
}
 800614a:	e004      	b.n	8006156 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	4798      	blx	r3
}
 8006156:	bf00      	nop
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f7ff fd35 	bl	8005bdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006172:	bf00      	nop
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2240      	movs	r2, #64	; 0x40
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006192:	f043 0204 	orr.w	r2, r3, #4
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff fd28 	bl	8005bf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061a0:	bf00      	nop
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <__NVIC_SetPriorityGrouping>:
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061b8:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <__NVIC_SetPriorityGrouping+0x40>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061c4:	4013      	ands	r3, r2
 80061c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80061d0:	4b06      	ldr	r3, [pc, #24]	; (80061ec <__NVIC_SetPriorityGrouping+0x44>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061d6:	4a04      	ldr	r2, [pc, #16]	; (80061e8 <__NVIC_SetPriorityGrouping+0x40>)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	60d3      	str	r3, [r2, #12]
}
 80061dc:	bf00      	nop
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	e000ed00 	.word	0xe000ed00
 80061ec:	05fa0000 	.word	0x05fa0000

080061f0 <__NVIC_GetPriorityGrouping>:
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061f4:	4b04      	ldr	r3, [pc, #16]	; (8006208 <__NVIC_GetPriorityGrouping+0x18>)
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	0a1b      	lsrs	r3, r3, #8
 80061fa:	f003 0307 	and.w	r3, r3, #7
}
 80061fe:	4618      	mov	r0, r3
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	e000ed00 	.word	0xe000ed00

0800620c <__NVIC_EnableIRQ>:
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	4603      	mov	r3, r0
 8006214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800621a:	2b00      	cmp	r3, #0
 800621c:	db0b      	blt.n	8006236 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	f003 021f 	and.w	r2, r3, #31
 8006224:	4907      	ldr	r1, [pc, #28]	; (8006244 <__NVIC_EnableIRQ+0x38>)
 8006226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	2001      	movs	r0, #1
 800622e:	fa00 f202 	lsl.w	r2, r0, r2
 8006232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	e000e100 	.word	0xe000e100

08006248 <__NVIC_SetPriority>:
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	6039      	str	r1, [r7, #0]
 8006252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006258:	2b00      	cmp	r3, #0
 800625a:	db0a      	blt.n	8006272 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	b2da      	uxtb	r2, r3
 8006260:	490c      	ldr	r1, [pc, #48]	; (8006294 <__NVIC_SetPriority+0x4c>)
 8006262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006266:	0112      	lsls	r2, r2, #4
 8006268:	b2d2      	uxtb	r2, r2
 800626a:	440b      	add	r3, r1
 800626c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006270:	e00a      	b.n	8006288 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	b2da      	uxtb	r2, r3
 8006276:	4908      	ldr	r1, [pc, #32]	; (8006298 <__NVIC_SetPriority+0x50>)
 8006278:	79fb      	ldrb	r3, [r7, #7]
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	3b04      	subs	r3, #4
 8006280:	0112      	lsls	r2, r2, #4
 8006282:	b2d2      	uxtb	r2, r2
 8006284:	440b      	add	r3, r1
 8006286:	761a      	strb	r2, [r3, #24]
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	e000e100 	.word	0xe000e100
 8006298:	e000ed00 	.word	0xe000ed00

0800629c <NVIC_EncodePriority>:
{
 800629c:	b480      	push	{r7}
 800629e:	b089      	sub	sp, #36	; 0x24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	f1c3 0307 	rsb	r3, r3, #7
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	bf28      	it	cs
 80062ba:	2304      	movcs	r3, #4
 80062bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	3304      	adds	r3, #4
 80062c2:	2b06      	cmp	r3, #6
 80062c4:	d902      	bls.n	80062cc <NVIC_EncodePriority+0x30>
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	3b03      	subs	r3, #3
 80062ca:	e000      	b.n	80062ce <NVIC_EncodePriority+0x32>
 80062cc:	2300      	movs	r3, #0
 80062ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	fa02 f303 	lsl.w	r3, r2, r3
 80062da:	43da      	mvns	r2, r3
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	401a      	ands	r2, r3
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	fa01 f303 	lsl.w	r3, r1, r3
 80062ee:	43d9      	mvns	r1, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062f4:	4313      	orrs	r3, r2
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3724      	adds	r7, #36	; 0x24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
	...

08006304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3b01      	subs	r3, #1
 8006310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006314:	d301      	bcc.n	800631a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006316:	2301      	movs	r3, #1
 8006318:	e00f      	b.n	800633a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800631a:	4a0a      	ldr	r2, [pc, #40]	; (8006344 <SysTick_Config+0x40>)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3b01      	subs	r3, #1
 8006320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006322:	210f      	movs	r1, #15
 8006324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006328:	f7ff ff8e 	bl	8006248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800632c:	4b05      	ldr	r3, [pc, #20]	; (8006344 <SysTick_Config+0x40>)
 800632e:	2200      	movs	r2, #0
 8006330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006332:	4b04      	ldr	r3, [pc, #16]	; (8006344 <SysTick_Config+0x40>)
 8006334:	2207      	movs	r2, #7
 8006336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	e000e010 	.word	0xe000e010

08006348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff ff29 	bl	80061a8 <__NVIC_SetPriorityGrouping>
}
 8006356:	bf00      	nop
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800635e:	b580      	push	{r7, lr}
 8006360:	b086      	sub	sp, #24
 8006362:	af00      	add	r7, sp, #0
 8006364:	4603      	mov	r3, r0
 8006366:	60b9      	str	r1, [r7, #8]
 8006368:	607a      	str	r2, [r7, #4]
 800636a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800636c:	2300      	movs	r3, #0
 800636e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006370:	f7ff ff3e 	bl	80061f0 <__NVIC_GetPriorityGrouping>
 8006374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	68b9      	ldr	r1, [r7, #8]
 800637a:	6978      	ldr	r0, [r7, #20]
 800637c:	f7ff ff8e 	bl	800629c <NVIC_EncodePriority>
 8006380:	4602      	mov	r2, r0
 8006382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006386:	4611      	mov	r1, r2
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff ff5d 	bl	8006248 <__NVIC_SetPriority>
}
 800638e:	bf00      	nop
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b082      	sub	sp, #8
 800639a:	af00      	add	r7, sp, #0
 800639c:	4603      	mov	r3, r0
 800639e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff ff31 	bl	800620c <__NVIC_EnableIRQ>
}
 80063aa:	bf00      	nop
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b082      	sub	sp, #8
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff ffa2 	bl	8006304 <SysTick_Config>
 80063c0:	4603      	mov	r3, r0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80063d8:	f7ff fa92 	bl	8005900 <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e099      	b.n	800651c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0201 	bic.w	r2, r2, #1
 8006406:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006408:	e00f      	b.n	800642a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800640a:	f7ff fa79 	bl	8005900 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b05      	cmp	r3, #5
 8006416:	d908      	bls.n	800642a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2203      	movs	r2, #3
 8006422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e078      	b.n	800651c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e8      	bne.n	800640a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4b38      	ldr	r3, [pc, #224]	; (8006524 <HAL_DMA_Init+0x158>)
 8006444:	4013      	ands	r3, r2
 8006446:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006456:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800646e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	2b04      	cmp	r3, #4
 8006482:	d107      	bne.n	8006494 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	4313      	orrs	r3, r2
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	4313      	orrs	r3, r2
 8006492:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f023 0307 	bic.w	r3, r3, #7
 80064aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d117      	bne.n	80064ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00e      	beq.n	80064ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fa77 	bl	80069c4 <DMA_CheckFifoParam>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d008      	beq.n	80064ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2240      	movs	r2, #64	; 0x40
 80064e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80064ea:	2301      	movs	r3, #1
 80064ec:	e016      	b.n	800651c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fa2e 	bl	8006958 <DMA_CalcBaseAndBitshift>
 80064fc:	4603      	mov	r3, r0
 80064fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006504:	223f      	movs	r2, #63	; 0x3f
 8006506:	409a      	lsls	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	e010803f 	.word	0xe010803f

08006528 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006546:	2b01      	cmp	r3, #1
 8006548:	d101      	bne.n	800654e <HAL_DMA_Start_IT+0x26>
 800654a:	2302      	movs	r3, #2
 800654c:	e048      	b.n	80065e0 <HAL_DMA_Start_IT+0xb8>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b01      	cmp	r3, #1
 8006560:	d137      	bne.n	80065d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2202      	movs	r2, #2
 8006566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	68b9      	ldr	r1, [r7, #8]
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 f9c0 	bl	80068fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006580:	223f      	movs	r2, #63	; 0x3f
 8006582:	409a      	lsls	r2, r3
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f042 0216 	orr.w	r2, r2, #22
 8006596:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695a      	ldr	r2, [r3, #20]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065a6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d007      	beq.n	80065c0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0208 	orr.w	r2, r2, #8
 80065be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0201 	orr.w	r2, r2, #1
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	e005      	b.n	80065de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80065da:	2302      	movs	r3, #2
 80065dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80065de:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80065f4:	4b8e      	ldr	r3, [pc, #568]	; (8006830 <HAL_DMA_IRQHandler+0x248>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a8e      	ldr	r2, [pc, #568]	; (8006834 <HAL_DMA_IRQHandler+0x24c>)
 80065fa:	fba2 2303 	umull	r2, r3, r2, r3
 80065fe:	0a9b      	lsrs	r3, r3, #10
 8006600:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006606:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006612:	2208      	movs	r2, #8
 8006614:	409a      	lsls	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4013      	ands	r3, r2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01a      	beq.n	8006654 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d013      	beq.n	8006654 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0204 	bic.w	r2, r2, #4
 800663a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006640:	2208      	movs	r2, #8
 8006642:	409a      	lsls	r2, r3
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664c:	f043 0201 	orr.w	r2, r3, #1
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006658:	2201      	movs	r2, #1
 800665a:	409a      	lsls	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4013      	ands	r3, r2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d012      	beq.n	800668a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006676:	2201      	movs	r2, #1
 8006678:	409a      	lsls	r2, r3
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006682:	f043 0202 	orr.w	r2, r3, #2
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668e:	2204      	movs	r2, #4
 8006690:	409a      	lsls	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4013      	ands	r3, r2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d012      	beq.n	80066c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00b      	beq.n	80066c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ac:	2204      	movs	r2, #4
 80066ae:	409a      	lsls	r2, r3
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b8:	f043 0204 	orr.w	r2, r3, #4
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c4:	2210      	movs	r2, #16
 80066c6:	409a      	lsls	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4013      	ands	r3, r2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d043      	beq.n	8006758 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0308 	and.w	r3, r3, #8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d03c      	beq.n	8006758 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e2:	2210      	movs	r2, #16
 80066e4:	409a      	lsls	r2, r3
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d018      	beq.n	800672a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d108      	bne.n	8006718 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	2b00      	cmp	r3, #0
 800670c:	d024      	beq.n	8006758 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	4798      	blx	r3
 8006716:	e01f      	b.n	8006758 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01b      	beq.n	8006758 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
 8006728:	e016      	b.n	8006758 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006734:	2b00      	cmp	r3, #0
 8006736:	d107      	bne.n	8006748 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0208 	bic.w	r2, r2, #8
 8006746:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675c:	2220      	movs	r2, #32
 800675e:	409a      	lsls	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4013      	ands	r3, r2
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 808f 	beq.w	8006888 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0310 	and.w	r3, r3, #16
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 8087 	beq.w	8006888 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800677e:	2220      	movs	r2, #32
 8006780:	409a      	lsls	r2, r3
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b05      	cmp	r3, #5
 8006790:	d136      	bne.n	8006800 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0216 	bic.w	r2, r2, #22
 80067a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	695a      	ldr	r2, [r3, #20]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d103      	bne.n	80067c2 <HAL_DMA_IRQHandler+0x1da>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d007      	beq.n	80067d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0208 	bic.w	r2, r2, #8
 80067d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d6:	223f      	movs	r2, #63	; 0x3f
 80067d8:	409a      	lsls	r2, r3
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d07e      	beq.n	80068f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	4798      	blx	r3
        }
        return;
 80067fe:	e079      	b.n	80068f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d01d      	beq.n	800684a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10d      	bne.n	8006838 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006820:	2b00      	cmp	r3, #0
 8006822:	d031      	beq.n	8006888 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	4798      	blx	r3
 800682c:	e02c      	b.n	8006888 <HAL_DMA_IRQHandler+0x2a0>
 800682e:	bf00      	nop
 8006830:	2000006c 	.word	0x2000006c
 8006834:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683c:	2b00      	cmp	r3, #0
 800683e:	d023      	beq.n	8006888 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	4798      	blx	r3
 8006848:	e01e      	b.n	8006888 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10f      	bne.n	8006878 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0210 	bic.w	r2, r2, #16
 8006866:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688c:	2b00      	cmp	r3, #0
 800688e:	d032      	beq.n	80068f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d022      	beq.n	80068e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2205      	movs	r2, #5
 80068a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0201 	bic.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	3301      	adds	r3, #1
 80068b8:	60bb      	str	r3, [r7, #8]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d307      	bcc.n	80068d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f2      	bne.n	80068b4 <HAL_DMA_IRQHandler+0x2cc>
 80068ce:	e000      	b.n	80068d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80068d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	4798      	blx	r3
 80068f2:	e000      	b.n	80068f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80068f4:	bf00      	nop
    }
  }
}
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
 8006908:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006918:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	2b40      	cmp	r3, #64	; 0x40
 8006928:	d108      	bne.n	800693c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800693a:	e007      	b.n	800694c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	60da      	str	r2, [r3, #12]
}
 800694c:	bf00      	nop
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	b2db      	uxtb	r3, r3
 8006966:	3b10      	subs	r3, #16
 8006968:	4a13      	ldr	r2, [pc, #76]	; (80069b8 <DMA_CalcBaseAndBitshift+0x60>)
 800696a:	fba2 2303 	umull	r2, r3, r2, r3
 800696e:	091b      	lsrs	r3, r3, #4
 8006970:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006972:	4a12      	ldr	r2, [pc, #72]	; (80069bc <DMA_CalcBaseAndBitshift+0x64>)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4413      	add	r3, r2
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b03      	cmp	r3, #3
 8006984:	d908      	bls.n	8006998 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <DMA_CalcBaseAndBitshift+0x68>)
 800698e:	4013      	ands	r3, r2
 8006990:	1d1a      	adds	r2, r3, #4
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	659a      	str	r2, [r3, #88]	; 0x58
 8006996:	e006      	b.n	80069a6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	461a      	mov	r2, r3
 800699e:	4b08      	ldr	r3, [pc, #32]	; (80069c0 <DMA_CalcBaseAndBitshift+0x68>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	aaaaaaab 	.word	0xaaaaaaab
 80069bc:	0800ed1c 	.word	0x0800ed1c
 80069c0:	fffffc00 	.word	0xfffffc00

080069c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d11f      	bne.n	8006a1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b03      	cmp	r3, #3
 80069e2:	d856      	bhi.n	8006a92 <DMA_CheckFifoParam+0xce>
 80069e4:	a201      	add	r2, pc, #4	; (adr r2, 80069ec <DMA_CheckFifoParam+0x28>)
 80069e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ea:	bf00      	nop
 80069ec:	080069fd 	.word	0x080069fd
 80069f0:	08006a0f 	.word	0x08006a0f
 80069f4:	080069fd 	.word	0x080069fd
 80069f8:	08006a93 	.word	0x08006a93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d046      	beq.n	8006a96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a0c:	e043      	b.n	8006a96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006a16:	d140      	bne.n	8006a9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a1c:	e03d      	b.n	8006a9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a26:	d121      	bne.n	8006a6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d837      	bhi.n	8006a9e <DMA_CheckFifoParam+0xda>
 8006a2e:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <DMA_CheckFifoParam+0x70>)
 8006a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a34:	08006a45 	.word	0x08006a45
 8006a38:	08006a4b 	.word	0x08006a4b
 8006a3c:	08006a45 	.word	0x08006a45
 8006a40:	08006a5d 	.word	0x08006a5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	73fb      	strb	r3, [r7, #15]
      break;
 8006a48:	e030      	b.n	8006aac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d025      	beq.n	8006aa2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a5a:	e022      	b.n	8006aa2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006a64:	d11f      	bne.n	8006aa6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006a6a:	e01c      	b.n	8006aa6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d903      	bls.n	8006a7a <DMA_CheckFifoParam+0xb6>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d003      	beq.n	8006a80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006a78:	e018      	b.n	8006aac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a7e:	e015      	b.n	8006aac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00e      	beq.n	8006aaa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a90:	e00b      	b.n	8006aaa <DMA_CheckFifoParam+0xe6>
      break;
 8006a92:	bf00      	nop
 8006a94:	e00a      	b.n	8006aac <DMA_CheckFifoParam+0xe8>
      break;
 8006a96:	bf00      	nop
 8006a98:	e008      	b.n	8006aac <DMA_CheckFifoParam+0xe8>
      break;
 8006a9a:	bf00      	nop
 8006a9c:	e006      	b.n	8006aac <DMA_CheckFifoParam+0xe8>
      break;
 8006a9e:	bf00      	nop
 8006aa0:	e004      	b.n	8006aac <DMA_CheckFifoParam+0xe8>
      break;
 8006aa2:	bf00      	nop
 8006aa4:	e002      	b.n	8006aac <DMA_CheckFifoParam+0xe8>
      break;   
 8006aa6:	bf00      	nop
 8006aa8:	e000      	b.n	8006aac <DMA_CheckFifoParam+0xe8>
      break;
 8006aaa:	bf00      	nop
    }
  } 
  
  return status; 
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop

08006abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b089      	sub	sp, #36	; 0x24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006aca:	2300      	movs	r3, #0
 8006acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	61fb      	str	r3, [r7, #28]
 8006ada:	e175      	b.n	8006dc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006adc:	2201      	movs	r2, #1
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	4013      	ands	r3, r2
 8006aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	f040 8164 	bne.w	8006dc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d005      	beq.n	8006b12 <HAL_GPIO_Init+0x56>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d130      	bne.n	8006b74 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	2203      	movs	r2, #3
 8006b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b22:	43db      	mvns	r3, r3
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	4013      	ands	r3, r2
 8006b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	fa02 f303 	lsl.w	r3, r2, r3
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b48:	2201      	movs	r2, #1
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	43db      	mvns	r3, r3
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	4013      	ands	r3, r2
 8006b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	091b      	lsrs	r3, r3, #4
 8006b5e:	f003 0201 	and.w	r2, r3, #1
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	fa02 f303 	lsl.w	r3, r2, r3
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f003 0303 	and.w	r3, r3, #3
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d017      	beq.n	8006bb0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	2203      	movs	r2, #3
 8006b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b90:	43db      	mvns	r3, r3
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	4013      	ands	r3, r2
 8006b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	69ba      	ldr	r2, [r7, #24]
 8006bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f003 0303 	and.w	r3, r3, #3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d123      	bne.n	8006c04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	08da      	lsrs	r2, r3, #3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3208      	adds	r2, #8
 8006bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	220f      	movs	r2, #15
 8006bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd8:	43db      	mvns	r3, r3
 8006bda:	69ba      	ldr	r2, [r7, #24]
 8006bdc:	4013      	ands	r3, r2
 8006bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	691a      	ldr	r2, [r3, #16]
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	08da      	lsrs	r2, r3, #3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3208      	adds	r2, #8
 8006bfe:	69b9      	ldr	r1, [r7, #24]
 8006c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	2203      	movs	r2, #3
 8006c10:	fa02 f303 	lsl.w	r3, r2, r3
 8006c14:	43db      	mvns	r3, r3
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	4013      	ands	r3, r2
 8006c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f003 0203 	and.w	r2, r3, #3
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 80be 	beq.w	8006dc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c46:	4b66      	ldr	r3, [pc, #408]	; (8006de0 <HAL_GPIO_Init+0x324>)
 8006c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4a:	4a65      	ldr	r2, [pc, #404]	; (8006de0 <HAL_GPIO_Init+0x324>)
 8006c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c50:	6453      	str	r3, [r2, #68]	; 0x44
 8006c52:	4b63      	ldr	r3, [pc, #396]	; (8006de0 <HAL_GPIO_Init+0x324>)
 8006c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006c5e:	4a61      	ldr	r2, [pc, #388]	; (8006de4 <HAL_GPIO_Init+0x328>)
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	089b      	lsrs	r3, r3, #2
 8006c64:	3302      	adds	r3, #2
 8006c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	f003 0303 	and.w	r3, r3, #3
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	220f      	movs	r2, #15
 8006c76:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7a:	43db      	mvns	r3, r3
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a58      	ldr	r2, [pc, #352]	; (8006de8 <HAL_GPIO_Init+0x32c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d037      	beq.n	8006cfa <HAL_GPIO_Init+0x23e>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a57      	ldr	r2, [pc, #348]	; (8006dec <HAL_GPIO_Init+0x330>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d031      	beq.n	8006cf6 <HAL_GPIO_Init+0x23a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a56      	ldr	r2, [pc, #344]	; (8006df0 <HAL_GPIO_Init+0x334>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d02b      	beq.n	8006cf2 <HAL_GPIO_Init+0x236>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a55      	ldr	r2, [pc, #340]	; (8006df4 <HAL_GPIO_Init+0x338>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d025      	beq.n	8006cee <HAL_GPIO_Init+0x232>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a54      	ldr	r2, [pc, #336]	; (8006df8 <HAL_GPIO_Init+0x33c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d01f      	beq.n	8006cea <HAL_GPIO_Init+0x22e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a53      	ldr	r2, [pc, #332]	; (8006dfc <HAL_GPIO_Init+0x340>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d019      	beq.n	8006ce6 <HAL_GPIO_Init+0x22a>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a52      	ldr	r2, [pc, #328]	; (8006e00 <HAL_GPIO_Init+0x344>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d013      	beq.n	8006ce2 <HAL_GPIO_Init+0x226>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a51      	ldr	r2, [pc, #324]	; (8006e04 <HAL_GPIO_Init+0x348>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00d      	beq.n	8006cde <HAL_GPIO_Init+0x222>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a50      	ldr	r2, [pc, #320]	; (8006e08 <HAL_GPIO_Init+0x34c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d007      	beq.n	8006cda <HAL_GPIO_Init+0x21e>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a4f      	ldr	r2, [pc, #316]	; (8006e0c <HAL_GPIO_Init+0x350>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d101      	bne.n	8006cd6 <HAL_GPIO_Init+0x21a>
 8006cd2:	2309      	movs	r3, #9
 8006cd4:	e012      	b.n	8006cfc <HAL_GPIO_Init+0x240>
 8006cd6:	230a      	movs	r3, #10
 8006cd8:	e010      	b.n	8006cfc <HAL_GPIO_Init+0x240>
 8006cda:	2308      	movs	r3, #8
 8006cdc:	e00e      	b.n	8006cfc <HAL_GPIO_Init+0x240>
 8006cde:	2307      	movs	r3, #7
 8006ce0:	e00c      	b.n	8006cfc <HAL_GPIO_Init+0x240>
 8006ce2:	2306      	movs	r3, #6
 8006ce4:	e00a      	b.n	8006cfc <HAL_GPIO_Init+0x240>
 8006ce6:	2305      	movs	r3, #5
 8006ce8:	e008      	b.n	8006cfc <HAL_GPIO_Init+0x240>
 8006cea:	2304      	movs	r3, #4
 8006cec:	e006      	b.n	8006cfc <HAL_GPIO_Init+0x240>
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e004      	b.n	8006cfc <HAL_GPIO_Init+0x240>
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	e002      	b.n	8006cfc <HAL_GPIO_Init+0x240>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e000      	b.n	8006cfc <HAL_GPIO_Init+0x240>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	69fa      	ldr	r2, [r7, #28]
 8006cfe:	f002 0203 	and.w	r2, r2, #3
 8006d02:	0092      	lsls	r2, r2, #2
 8006d04:	4093      	lsls	r3, r2
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006d0c:	4935      	ldr	r1, [pc, #212]	; (8006de4 <HAL_GPIO_Init+0x328>)
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	089b      	lsrs	r3, r3, #2
 8006d12:	3302      	adds	r3, #2
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d1a:	4b3d      	ldr	r3, [pc, #244]	; (8006e10 <HAL_GPIO_Init+0x354>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	43db      	mvns	r3, r3
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	4013      	ands	r3, r2
 8006d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006d3e:	4a34      	ldr	r2, [pc, #208]	; (8006e10 <HAL_GPIO_Init+0x354>)
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006d44:	4b32      	ldr	r3, [pc, #200]	; (8006e10 <HAL_GPIO_Init+0x354>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	43db      	mvns	r3, r3
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	4013      	ands	r3, r2
 8006d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d68:	4a29      	ldr	r2, [pc, #164]	; (8006e10 <HAL_GPIO_Init+0x354>)
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006d6e:	4b28      	ldr	r3, [pc, #160]	; (8006e10 <HAL_GPIO_Init+0x354>)
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	43db      	mvns	r3, r3
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d92:	4a1f      	ldr	r2, [pc, #124]	; (8006e10 <HAL_GPIO_Init+0x354>)
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d98:	4b1d      	ldr	r3, [pc, #116]	; (8006e10 <HAL_GPIO_Init+0x354>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	43db      	mvns	r3, r3
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	4013      	ands	r3, r2
 8006da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006dbc:	4a14      	ldr	r2, [pc, #80]	; (8006e10 <HAL_GPIO_Init+0x354>)
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	61fb      	str	r3, [r7, #28]
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	2b0f      	cmp	r3, #15
 8006dcc:	f67f ae86 	bls.w	8006adc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006dd0:	bf00      	nop
 8006dd2:	bf00      	nop
 8006dd4:	3724      	adds	r7, #36	; 0x24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	40023800 	.word	0x40023800
 8006de4:	40013800 	.word	0x40013800
 8006de8:	40020000 	.word	0x40020000
 8006dec:	40020400 	.word	0x40020400
 8006df0:	40020800 	.word	0x40020800
 8006df4:	40020c00 	.word	0x40020c00
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	40021400 	.word	0x40021400
 8006e00:	40021800 	.word	0x40021800
 8006e04:	40021c00 	.word	0x40021c00
 8006e08:	40022000 	.word	0x40022000
 8006e0c:	40022400 	.word	0x40022400
 8006e10:	40013c00 	.word	0x40013c00

08006e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	807b      	strh	r3, [r7, #2]
 8006e20:	4613      	mov	r3, r2
 8006e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e24:	787b      	ldrb	r3, [r7, #1]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e2a:	887a      	ldrh	r2, [r7, #2]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006e30:	e003      	b.n	8006e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006e32:	887b      	ldrh	r3, [r7, #2]
 8006e34:	041a      	lsls	r2, r3, #16
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	619a      	str	r2, [r3, #24]
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
	...

08006e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006e52:	4b08      	ldr	r3, [pc, #32]	; (8006e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e54:	695a      	ldr	r2, [r3, #20]
 8006e56:	88fb      	ldrh	r3, [r7, #6]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d006      	beq.n	8006e6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e5e:	4a05      	ldr	r2, [pc, #20]	; (8006e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e60:	88fb      	ldrh	r3, [r7, #6]
 8006e62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e64:	88fb      	ldrh	r3, [r7, #6]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fd f8e4 	bl	8004034 <HAL_GPIO_EXTI_Callback>
  }
}
 8006e6c:	bf00      	nop
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40013c00 	.word	0x40013c00

08006e78 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e7c:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a04      	ldr	r2, [pc, #16]	; (8006e94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e86:	6013      	str	r3, [r2, #0]
}
 8006e88:	bf00      	nop
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40007000 	.word	0x40007000

08006e98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006ea2:	4b23      	ldr	r3, [pc, #140]	; (8006f30 <HAL_PWREx_EnableOverDrive+0x98>)
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	4a22      	ldr	r2, [pc, #136]	; (8006f30 <HAL_PWREx_EnableOverDrive+0x98>)
 8006ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eac:	6413      	str	r3, [r2, #64]	; 0x40
 8006eae:	4b20      	ldr	r3, [pc, #128]	; (8006f30 <HAL_PWREx_EnableOverDrive+0x98>)
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006eba:	4b1e      	ldr	r3, [pc, #120]	; (8006f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a1d      	ldr	r2, [pc, #116]	; (8006f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ec4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ec6:	f7fe fd1b 	bl	8005900 <HAL_GetTick>
 8006eca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006ecc:	e009      	b.n	8006ee2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006ece:	f7fe fd17 	bl	8005900 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006edc:	d901      	bls.n	8006ee2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e022      	b.n	8006f28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006ee2:	4b14      	ldr	r3, [pc, #80]	; (8006f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eee:	d1ee      	bne.n	8006ece <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006ef0:	4b10      	ldr	r3, [pc, #64]	; (8006f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a0f      	ldr	r2, [pc, #60]	; (8006f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006efa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006efc:	f7fe fd00 	bl	8005900 <HAL_GetTick>
 8006f00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f02:	e009      	b.n	8006f18 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f04:	f7fe fcfc 	bl	8005900 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f12:	d901      	bls.n	8006f18 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e007      	b.n	8006f28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f18:	4b06      	ldr	r3, [pc, #24]	; (8006f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f24:	d1ee      	bne.n	8006f04 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	40023800 	.word	0x40023800
 8006f34:	40007000 	.word	0x40007000

08006f38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006f40:	2300      	movs	r3, #0
 8006f42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e29b      	b.n	8007486 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 8087 	beq.w	800706a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f5c:	4b96      	ldr	r3, [pc, #600]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f003 030c 	and.w	r3, r3, #12
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d00c      	beq.n	8006f82 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f68:	4b93      	ldr	r3, [pc, #588]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f003 030c 	and.w	r3, r3, #12
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d112      	bne.n	8006f9a <HAL_RCC_OscConfig+0x62>
 8006f74:	4b90      	ldr	r3, [pc, #576]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f80:	d10b      	bne.n	8006f9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f82:	4b8d      	ldr	r3, [pc, #564]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d06c      	beq.n	8007068 <HAL_RCC_OscConfig+0x130>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d168      	bne.n	8007068 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e275      	b.n	8007486 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa2:	d106      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x7a>
 8006fa4:	4b84      	ldr	r3, [pc, #528]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a83      	ldr	r2, [pc, #524]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8006faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	e02e      	b.n	8007010 <HAL_RCC_OscConfig+0xd8>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10c      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x9c>
 8006fba:	4b7f      	ldr	r3, [pc, #508]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a7e      	ldr	r2, [pc, #504]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8006fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	4b7c      	ldr	r3, [pc, #496]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a7b      	ldr	r2, [pc, #492]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8006fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	e01d      	b.n	8007010 <HAL_RCC_OscConfig+0xd8>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fdc:	d10c      	bne.n	8006ff8 <HAL_RCC_OscConfig+0xc0>
 8006fde:	4b76      	ldr	r3, [pc, #472]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a75      	ldr	r2, [pc, #468]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8006fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	4b73      	ldr	r3, [pc, #460]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a72      	ldr	r2, [pc, #456]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8006ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	e00b      	b.n	8007010 <HAL_RCC_OscConfig+0xd8>
 8006ff8:	4b6f      	ldr	r3, [pc, #444]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a6e      	ldr	r2, [pc, #440]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8006ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	4b6c      	ldr	r3, [pc, #432]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a6b      	ldr	r2, [pc, #428]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 800700a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800700e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d013      	beq.n	8007040 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007018:	f7fe fc72 	bl	8005900 <HAL_GetTick>
 800701c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800701e:	e008      	b.n	8007032 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007020:	f7fe fc6e 	bl	8005900 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b64      	cmp	r3, #100	; 0x64
 800702c:	d901      	bls.n	8007032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e229      	b.n	8007486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007032:	4b61      	ldr	r3, [pc, #388]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0f0      	beq.n	8007020 <HAL_RCC_OscConfig+0xe8>
 800703e:	e014      	b.n	800706a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007040:	f7fe fc5e 	bl	8005900 <HAL_GetTick>
 8007044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007046:	e008      	b.n	800705a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007048:	f7fe fc5a 	bl	8005900 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	2b64      	cmp	r3, #100	; 0x64
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e215      	b.n	8007486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800705a:	4b57      	ldr	r3, [pc, #348]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1f0      	bne.n	8007048 <HAL_RCC_OscConfig+0x110>
 8007066:	e000      	b.n	800706a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d069      	beq.n	800714a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007076:	4b50      	ldr	r3, [pc, #320]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f003 030c 	and.w	r3, r3, #12
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00b      	beq.n	800709a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007082:	4b4d      	ldr	r3, [pc, #308]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 030c 	and.w	r3, r3, #12
 800708a:	2b08      	cmp	r3, #8
 800708c:	d11c      	bne.n	80070c8 <HAL_RCC_OscConfig+0x190>
 800708e:	4b4a      	ldr	r3, [pc, #296]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d116      	bne.n	80070c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800709a:	4b47      	ldr	r3, [pc, #284]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d005      	beq.n	80070b2 <HAL_RCC_OscConfig+0x17a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d001      	beq.n	80070b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e1e9      	b.n	8007486 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070b2:	4b41      	ldr	r3, [pc, #260]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	00db      	lsls	r3, r3, #3
 80070c0:	493d      	ldr	r1, [pc, #244]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070c6:	e040      	b.n	800714a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d023      	beq.n	8007118 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070d0:	4b39      	ldr	r3, [pc, #228]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a38      	ldr	r2, [pc, #224]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 80070d6:	f043 0301 	orr.w	r3, r3, #1
 80070da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070dc:	f7fe fc10 	bl	8005900 <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070e4:	f7fe fc0c 	bl	8005900 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e1c7      	b.n	8007486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070f6:	4b30      	ldr	r3, [pc, #192]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0f0      	beq.n	80070e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007102:	4b2d      	ldr	r3, [pc, #180]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	4929      	ldr	r1, [pc, #164]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8007112:	4313      	orrs	r3, r2
 8007114:	600b      	str	r3, [r1, #0]
 8007116:	e018      	b.n	800714a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007118:	4b27      	ldr	r3, [pc, #156]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a26      	ldr	r2, [pc, #152]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 800711e:	f023 0301 	bic.w	r3, r3, #1
 8007122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007124:	f7fe fbec 	bl	8005900 <HAL_GetTick>
 8007128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800712a:	e008      	b.n	800713e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800712c:	f7fe fbe8 	bl	8005900 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e1a3      	b.n	8007486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800713e:	4b1e      	ldr	r3, [pc, #120]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1f0      	bne.n	800712c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0308 	and.w	r3, r3, #8
 8007152:	2b00      	cmp	r3, #0
 8007154:	d038      	beq.n	80071c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d019      	beq.n	8007192 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800715e:	4b16      	ldr	r3, [pc, #88]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8007160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007162:	4a15      	ldr	r2, [pc, #84]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8007164:	f043 0301 	orr.w	r3, r3, #1
 8007168:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800716a:	f7fe fbc9 	bl	8005900 <HAL_GetTick>
 800716e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007170:	e008      	b.n	8007184 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007172:	f7fe fbc5 	bl	8005900 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e180      	b.n	8007486 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007184:	4b0c      	ldr	r3, [pc, #48]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8007186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0f0      	beq.n	8007172 <HAL_RCC_OscConfig+0x23a>
 8007190:	e01a      	b.n	80071c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007192:	4b09      	ldr	r3, [pc, #36]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8007194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007196:	4a08      	ldr	r2, [pc, #32]	; (80071b8 <HAL_RCC_OscConfig+0x280>)
 8007198:	f023 0301 	bic.w	r3, r3, #1
 800719c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800719e:	f7fe fbaf 	bl	8005900 <HAL_GetTick>
 80071a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071a4:	e00a      	b.n	80071bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071a6:	f7fe fbab 	bl	8005900 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d903      	bls.n	80071bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e166      	b.n	8007486 <HAL_RCC_OscConfig+0x54e>
 80071b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071bc:	4b92      	ldr	r3, [pc, #584]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 80071be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1ee      	bne.n	80071a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80a4 	beq.w	800731e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071d6:	4b8c      	ldr	r3, [pc, #560]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10d      	bne.n	80071fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80071e2:	4b89      	ldr	r3, [pc, #548]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	4a88      	ldr	r2, [pc, #544]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 80071e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ec:	6413      	str	r3, [r2, #64]	; 0x40
 80071ee:	4b86      	ldr	r3, [pc, #536]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071f6:	60bb      	str	r3, [r7, #8]
 80071f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071fa:	2301      	movs	r3, #1
 80071fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071fe:	4b83      	ldr	r3, [pc, #524]	; (800740c <HAL_RCC_OscConfig+0x4d4>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007206:	2b00      	cmp	r3, #0
 8007208:	d118      	bne.n	800723c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800720a:	4b80      	ldr	r3, [pc, #512]	; (800740c <HAL_RCC_OscConfig+0x4d4>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a7f      	ldr	r2, [pc, #508]	; (800740c <HAL_RCC_OscConfig+0x4d4>)
 8007210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007216:	f7fe fb73 	bl	8005900 <HAL_GetTick>
 800721a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800721c:	e008      	b.n	8007230 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800721e:	f7fe fb6f 	bl	8005900 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	2b64      	cmp	r3, #100	; 0x64
 800722a:	d901      	bls.n	8007230 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e12a      	b.n	8007486 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007230:	4b76      	ldr	r3, [pc, #472]	; (800740c <HAL_RCC_OscConfig+0x4d4>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007238:	2b00      	cmp	r3, #0
 800723a:	d0f0      	beq.n	800721e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d106      	bne.n	8007252 <HAL_RCC_OscConfig+0x31a>
 8007244:	4b70      	ldr	r3, [pc, #448]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 8007246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007248:	4a6f      	ldr	r2, [pc, #444]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 800724a:	f043 0301 	orr.w	r3, r3, #1
 800724e:	6713      	str	r3, [r2, #112]	; 0x70
 8007250:	e02d      	b.n	80072ae <HAL_RCC_OscConfig+0x376>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10c      	bne.n	8007274 <HAL_RCC_OscConfig+0x33c>
 800725a:	4b6b      	ldr	r3, [pc, #428]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 800725c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725e:	4a6a      	ldr	r2, [pc, #424]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 8007260:	f023 0301 	bic.w	r3, r3, #1
 8007264:	6713      	str	r3, [r2, #112]	; 0x70
 8007266:	4b68      	ldr	r3, [pc, #416]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 8007268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726a:	4a67      	ldr	r2, [pc, #412]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 800726c:	f023 0304 	bic.w	r3, r3, #4
 8007270:	6713      	str	r3, [r2, #112]	; 0x70
 8007272:	e01c      	b.n	80072ae <HAL_RCC_OscConfig+0x376>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	2b05      	cmp	r3, #5
 800727a:	d10c      	bne.n	8007296 <HAL_RCC_OscConfig+0x35e>
 800727c:	4b62      	ldr	r3, [pc, #392]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 800727e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007280:	4a61      	ldr	r2, [pc, #388]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 8007282:	f043 0304 	orr.w	r3, r3, #4
 8007286:	6713      	str	r3, [r2, #112]	; 0x70
 8007288:	4b5f      	ldr	r3, [pc, #380]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 800728a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728c:	4a5e      	ldr	r2, [pc, #376]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 800728e:	f043 0301 	orr.w	r3, r3, #1
 8007292:	6713      	str	r3, [r2, #112]	; 0x70
 8007294:	e00b      	b.n	80072ae <HAL_RCC_OscConfig+0x376>
 8007296:	4b5c      	ldr	r3, [pc, #368]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 8007298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729a:	4a5b      	ldr	r2, [pc, #364]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 800729c:	f023 0301 	bic.w	r3, r3, #1
 80072a0:	6713      	str	r3, [r2, #112]	; 0x70
 80072a2:	4b59      	ldr	r3, [pc, #356]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a6:	4a58      	ldr	r2, [pc, #352]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 80072a8:	f023 0304 	bic.w	r3, r3, #4
 80072ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d015      	beq.n	80072e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072b6:	f7fe fb23 	bl	8005900 <HAL_GetTick>
 80072ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072bc:	e00a      	b.n	80072d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072be:	f7fe fb1f 	bl	8005900 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d901      	bls.n	80072d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e0d8      	b.n	8007486 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072d4:	4b4c      	ldr	r3, [pc, #304]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 80072d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d0ee      	beq.n	80072be <HAL_RCC_OscConfig+0x386>
 80072e0:	e014      	b.n	800730c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072e2:	f7fe fb0d 	bl	8005900 <HAL_GetTick>
 80072e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072e8:	e00a      	b.n	8007300 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ea:	f7fe fb09 	bl	8005900 <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d901      	bls.n	8007300 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e0c2      	b.n	8007486 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007300:	4b41      	ldr	r3, [pc, #260]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 8007302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1ee      	bne.n	80072ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800730c:	7dfb      	ldrb	r3, [r7, #23]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d105      	bne.n	800731e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007312:	4b3d      	ldr	r3, [pc, #244]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	4a3c      	ldr	r2, [pc, #240]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 8007318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800731c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	2b00      	cmp	r3, #0
 8007324:	f000 80ae 	beq.w	8007484 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007328:	4b37      	ldr	r3, [pc, #220]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f003 030c 	and.w	r3, r3, #12
 8007330:	2b08      	cmp	r3, #8
 8007332:	d06d      	beq.n	8007410 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	2b02      	cmp	r3, #2
 800733a:	d14b      	bne.n	80073d4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800733c:	4b32      	ldr	r3, [pc, #200]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a31      	ldr	r2, [pc, #196]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 8007342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007348:	f7fe fada 	bl	8005900 <HAL_GetTick>
 800734c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800734e:	e008      	b.n	8007362 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007350:	f7fe fad6 	bl	8005900 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	2b02      	cmp	r3, #2
 800735c:	d901      	bls.n	8007362 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e091      	b.n	8007486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007362:	4b29      	ldr	r3, [pc, #164]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1f0      	bne.n	8007350 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	69da      	ldr	r2, [r3, #28]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	019b      	lsls	r3, r3, #6
 800737e:	431a      	orrs	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007384:	085b      	lsrs	r3, r3, #1
 8007386:	3b01      	subs	r3, #1
 8007388:	041b      	lsls	r3, r3, #16
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	061b      	lsls	r3, r3, #24
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007398:	071b      	lsls	r3, r3, #28
 800739a:	491b      	ldr	r1, [pc, #108]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 800739c:	4313      	orrs	r3, r2
 800739e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073a0:	4b19      	ldr	r3, [pc, #100]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a18      	ldr	r2, [pc, #96]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 80073a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ac:	f7fe faa8 	bl	8005900 <HAL_GetTick>
 80073b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073b2:	e008      	b.n	80073c6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073b4:	f7fe faa4 	bl	8005900 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d901      	bls.n	80073c6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e05f      	b.n	8007486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073c6:	4b10      	ldr	r3, [pc, #64]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0f0      	beq.n	80073b4 <HAL_RCC_OscConfig+0x47c>
 80073d2:	e057      	b.n	8007484 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a0b      	ldr	r2, [pc, #44]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 80073da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e0:	f7fe fa8e 	bl	8005900 <HAL_GetTick>
 80073e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073e6:	e008      	b.n	80073fa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073e8:	f7fe fa8a 	bl	8005900 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d901      	bls.n	80073fa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e045      	b.n	8007486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073fa:	4b03      	ldr	r3, [pc, #12]	; (8007408 <HAL_RCC_OscConfig+0x4d0>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1f0      	bne.n	80073e8 <HAL_RCC_OscConfig+0x4b0>
 8007406:	e03d      	b.n	8007484 <HAL_RCC_OscConfig+0x54c>
 8007408:	40023800 	.word	0x40023800
 800740c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007410:	4b1f      	ldr	r3, [pc, #124]	; (8007490 <HAL_RCC_OscConfig+0x558>)
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d030      	beq.n	8007480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007428:	429a      	cmp	r2, r3
 800742a:	d129      	bne.n	8007480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007436:	429a      	cmp	r2, r3
 8007438:	d122      	bne.n	8007480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007440:	4013      	ands	r3, r2
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007446:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007448:	4293      	cmp	r3, r2
 800744a:	d119      	bne.n	8007480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007456:	085b      	lsrs	r3, r3, #1
 8007458:	3b01      	subs	r3, #1
 800745a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800745c:	429a      	cmp	r2, r3
 800745e:	d10f      	bne.n	8007480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800746c:	429a      	cmp	r2, r3
 800746e:	d107      	bne.n	8007480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800747c:	429a      	cmp	r2, r3
 800747e:	d001      	beq.n	8007484 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e000      	b.n	8007486 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	40023800 	.word	0x40023800

08007494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e0d0      	b.n	800764e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074ac:	4b6a      	ldr	r3, [pc, #424]	; (8007658 <HAL_RCC_ClockConfig+0x1c4>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d910      	bls.n	80074dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ba:	4b67      	ldr	r3, [pc, #412]	; (8007658 <HAL_RCC_ClockConfig+0x1c4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f023 020f 	bic.w	r2, r3, #15
 80074c2:	4965      	ldr	r1, [pc, #404]	; (8007658 <HAL_RCC_ClockConfig+0x1c4>)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ca:	4b63      	ldr	r3, [pc, #396]	; (8007658 <HAL_RCC_ClockConfig+0x1c4>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 030f 	and.w	r3, r3, #15
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d001      	beq.n	80074dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e0b8      	b.n	800764e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0302 	and.w	r3, r3, #2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d020      	beq.n	800752a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074f4:	4b59      	ldr	r3, [pc, #356]	; (800765c <HAL_RCC_ClockConfig+0x1c8>)
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	4a58      	ldr	r2, [pc, #352]	; (800765c <HAL_RCC_ClockConfig+0x1c8>)
 80074fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b00      	cmp	r3, #0
 800750a:	d005      	beq.n	8007518 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800750c:	4b53      	ldr	r3, [pc, #332]	; (800765c <HAL_RCC_ClockConfig+0x1c8>)
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	4a52      	ldr	r2, [pc, #328]	; (800765c <HAL_RCC_ClockConfig+0x1c8>)
 8007512:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007516:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007518:	4b50      	ldr	r3, [pc, #320]	; (800765c <HAL_RCC_ClockConfig+0x1c8>)
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	494d      	ldr	r1, [pc, #308]	; (800765c <HAL_RCC_ClockConfig+0x1c8>)
 8007526:	4313      	orrs	r3, r2
 8007528:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b00      	cmp	r3, #0
 8007534:	d040      	beq.n	80075b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d107      	bne.n	800754e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800753e:	4b47      	ldr	r3, [pc, #284]	; (800765c <HAL_RCC_ClockConfig+0x1c8>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d115      	bne.n	8007576 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e07f      	b.n	800764e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2b02      	cmp	r3, #2
 8007554:	d107      	bne.n	8007566 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007556:	4b41      	ldr	r3, [pc, #260]	; (800765c <HAL_RCC_ClockConfig+0x1c8>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d109      	bne.n	8007576 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e073      	b.n	800764e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007566:	4b3d      	ldr	r3, [pc, #244]	; (800765c <HAL_RCC_ClockConfig+0x1c8>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e06b      	b.n	800764e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007576:	4b39      	ldr	r3, [pc, #228]	; (800765c <HAL_RCC_ClockConfig+0x1c8>)
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f023 0203 	bic.w	r2, r3, #3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	4936      	ldr	r1, [pc, #216]	; (800765c <HAL_RCC_ClockConfig+0x1c8>)
 8007584:	4313      	orrs	r3, r2
 8007586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007588:	f7fe f9ba 	bl	8005900 <HAL_GetTick>
 800758c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800758e:	e00a      	b.n	80075a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007590:	f7fe f9b6 	bl	8005900 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	f241 3288 	movw	r2, #5000	; 0x1388
 800759e:	4293      	cmp	r3, r2
 80075a0:	d901      	bls.n	80075a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e053      	b.n	800764e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075a6:	4b2d      	ldr	r3, [pc, #180]	; (800765c <HAL_RCC_ClockConfig+0x1c8>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f003 020c 	and.w	r2, r3, #12
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d1eb      	bne.n	8007590 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075b8:	4b27      	ldr	r3, [pc, #156]	; (8007658 <HAL_RCC_ClockConfig+0x1c4>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 030f 	and.w	r3, r3, #15
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d210      	bcs.n	80075e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075c6:	4b24      	ldr	r3, [pc, #144]	; (8007658 <HAL_RCC_ClockConfig+0x1c4>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f023 020f 	bic.w	r2, r3, #15
 80075ce:	4922      	ldr	r1, [pc, #136]	; (8007658 <HAL_RCC_ClockConfig+0x1c4>)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075d6:	4b20      	ldr	r3, [pc, #128]	; (8007658 <HAL_RCC_ClockConfig+0x1c4>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 030f 	and.w	r3, r3, #15
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d001      	beq.n	80075e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e032      	b.n	800764e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d008      	beq.n	8007606 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075f4:	4b19      	ldr	r3, [pc, #100]	; (800765c <HAL_RCC_ClockConfig+0x1c8>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	4916      	ldr	r1, [pc, #88]	; (800765c <HAL_RCC_ClockConfig+0x1c8>)
 8007602:	4313      	orrs	r3, r2
 8007604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0308 	and.w	r3, r3, #8
 800760e:	2b00      	cmp	r3, #0
 8007610:	d009      	beq.n	8007626 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007612:	4b12      	ldr	r3, [pc, #72]	; (800765c <HAL_RCC_ClockConfig+0x1c8>)
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	00db      	lsls	r3, r3, #3
 8007620:	490e      	ldr	r1, [pc, #56]	; (800765c <HAL_RCC_ClockConfig+0x1c8>)
 8007622:	4313      	orrs	r3, r2
 8007624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007626:	f000 f821 	bl	800766c <HAL_RCC_GetSysClockFreq>
 800762a:	4602      	mov	r2, r0
 800762c:	4b0b      	ldr	r3, [pc, #44]	; (800765c <HAL_RCC_ClockConfig+0x1c8>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	091b      	lsrs	r3, r3, #4
 8007632:	f003 030f 	and.w	r3, r3, #15
 8007636:	490a      	ldr	r1, [pc, #40]	; (8007660 <HAL_RCC_ClockConfig+0x1cc>)
 8007638:	5ccb      	ldrb	r3, [r1, r3]
 800763a:	fa22 f303 	lsr.w	r3, r2, r3
 800763e:	4a09      	ldr	r2, [pc, #36]	; (8007664 <HAL_RCC_ClockConfig+0x1d0>)
 8007640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007642:	4b09      	ldr	r3, [pc, #36]	; (8007668 <HAL_RCC_ClockConfig+0x1d4>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe f916 	bl	8005878 <HAL_InitTick>

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	40023c00 	.word	0x40023c00
 800765c:	40023800 	.word	0x40023800
 8007660:	0800eac4 	.word	0x0800eac4
 8007664:	2000006c 	.word	0x2000006c
 8007668:	20000074 	.word	0x20000074

0800766c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800766c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007670:	b094      	sub	sp, #80	; 0x50
 8007672:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007674:	2300      	movs	r3, #0
 8007676:	647b      	str	r3, [r7, #68]	; 0x44
 8007678:	2300      	movs	r3, #0
 800767a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800767c:	2300      	movs	r3, #0
 800767e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007684:	4b79      	ldr	r3, [pc, #484]	; (800786c <HAL_RCC_GetSysClockFreq+0x200>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f003 030c 	and.w	r3, r3, #12
 800768c:	2b08      	cmp	r3, #8
 800768e:	d00d      	beq.n	80076ac <HAL_RCC_GetSysClockFreq+0x40>
 8007690:	2b08      	cmp	r3, #8
 8007692:	f200 80e1 	bhi.w	8007858 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <HAL_RCC_GetSysClockFreq+0x34>
 800769a:	2b04      	cmp	r3, #4
 800769c:	d003      	beq.n	80076a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800769e:	e0db      	b.n	8007858 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076a0:	4b73      	ldr	r3, [pc, #460]	; (8007870 <HAL_RCC_GetSysClockFreq+0x204>)
 80076a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80076a4:	e0db      	b.n	800785e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076a6:	4b73      	ldr	r3, [pc, #460]	; (8007874 <HAL_RCC_GetSysClockFreq+0x208>)
 80076a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80076aa:	e0d8      	b.n	800785e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076ac:	4b6f      	ldr	r3, [pc, #444]	; (800786c <HAL_RCC_GetSysClockFreq+0x200>)
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076b4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80076b6:	4b6d      	ldr	r3, [pc, #436]	; (800786c <HAL_RCC_GetSysClockFreq+0x200>)
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d063      	beq.n	800778a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076c2:	4b6a      	ldr	r3, [pc, #424]	; (800786c <HAL_RCC_GetSysClockFreq+0x200>)
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	099b      	lsrs	r3, r3, #6
 80076c8:	2200      	movs	r2, #0
 80076ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80076cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d4:	633b      	str	r3, [r7, #48]	; 0x30
 80076d6:	2300      	movs	r3, #0
 80076d8:	637b      	str	r3, [r7, #52]	; 0x34
 80076da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80076de:	4622      	mov	r2, r4
 80076e0:	462b      	mov	r3, r5
 80076e2:	f04f 0000 	mov.w	r0, #0
 80076e6:	f04f 0100 	mov.w	r1, #0
 80076ea:	0159      	lsls	r1, r3, #5
 80076ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076f0:	0150      	lsls	r0, r2, #5
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	4621      	mov	r1, r4
 80076f8:	1a51      	subs	r1, r2, r1
 80076fa:	6139      	str	r1, [r7, #16]
 80076fc:	4629      	mov	r1, r5
 80076fe:	eb63 0301 	sbc.w	r3, r3, r1
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	f04f 0200 	mov.w	r2, #0
 8007708:	f04f 0300 	mov.w	r3, #0
 800770c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007710:	4659      	mov	r1, fp
 8007712:	018b      	lsls	r3, r1, #6
 8007714:	4651      	mov	r1, sl
 8007716:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800771a:	4651      	mov	r1, sl
 800771c:	018a      	lsls	r2, r1, #6
 800771e:	4651      	mov	r1, sl
 8007720:	ebb2 0801 	subs.w	r8, r2, r1
 8007724:	4659      	mov	r1, fp
 8007726:	eb63 0901 	sbc.w	r9, r3, r1
 800772a:	f04f 0200 	mov.w	r2, #0
 800772e:	f04f 0300 	mov.w	r3, #0
 8007732:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007736:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800773a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800773e:	4690      	mov	r8, r2
 8007740:	4699      	mov	r9, r3
 8007742:	4623      	mov	r3, r4
 8007744:	eb18 0303 	adds.w	r3, r8, r3
 8007748:	60bb      	str	r3, [r7, #8]
 800774a:	462b      	mov	r3, r5
 800774c:	eb49 0303 	adc.w	r3, r9, r3
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	f04f 0200 	mov.w	r2, #0
 8007756:	f04f 0300 	mov.w	r3, #0
 800775a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800775e:	4629      	mov	r1, r5
 8007760:	024b      	lsls	r3, r1, #9
 8007762:	4621      	mov	r1, r4
 8007764:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007768:	4621      	mov	r1, r4
 800776a:	024a      	lsls	r2, r1, #9
 800776c:	4610      	mov	r0, r2
 800776e:	4619      	mov	r1, r3
 8007770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007772:	2200      	movs	r2, #0
 8007774:	62bb      	str	r3, [r7, #40]	; 0x28
 8007776:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007778:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800777c:	f7f8 fdb8 	bl	80002f0 <__aeabi_uldivmod>
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	4613      	mov	r3, r2
 8007786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007788:	e058      	b.n	800783c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800778a:	4b38      	ldr	r3, [pc, #224]	; (800786c <HAL_RCC_GetSysClockFreq+0x200>)
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	099b      	lsrs	r3, r3, #6
 8007790:	2200      	movs	r2, #0
 8007792:	4618      	mov	r0, r3
 8007794:	4611      	mov	r1, r2
 8007796:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800779a:	623b      	str	r3, [r7, #32]
 800779c:	2300      	movs	r3, #0
 800779e:	627b      	str	r3, [r7, #36]	; 0x24
 80077a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80077a4:	4642      	mov	r2, r8
 80077a6:	464b      	mov	r3, r9
 80077a8:	f04f 0000 	mov.w	r0, #0
 80077ac:	f04f 0100 	mov.w	r1, #0
 80077b0:	0159      	lsls	r1, r3, #5
 80077b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077b6:	0150      	lsls	r0, r2, #5
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	4641      	mov	r1, r8
 80077be:	ebb2 0a01 	subs.w	sl, r2, r1
 80077c2:	4649      	mov	r1, r9
 80077c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80077c8:	f04f 0200 	mov.w	r2, #0
 80077cc:	f04f 0300 	mov.w	r3, #0
 80077d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80077d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80077d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80077dc:	ebb2 040a 	subs.w	r4, r2, sl
 80077e0:	eb63 050b 	sbc.w	r5, r3, fp
 80077e4:	f04f 0200 	mov.w	r2, #0
 80077e8:	f04f 0300 	mov.w	r3, #0
 80077ec:	00eb      	lsls	r3, r5, #3
 80077ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077f2:	00e2      	lsls	r2, r4, #3
 80077f4:	4614      	mov	r4, r2
 80077f6:	461d      	mov	r5, r3
 80077f8:	4643      	mov	r3, r8
 80077fa:	18e3      	adds	r3, r4, r3
 80077fc:	603b      	str	r3, [r7, #0]
 80077fe:	464b      	mov	r3, r9
 8007800:	eb45 0303 	adc.w	r3, r5, r3
 8007804:	607b      	str	r3, [r7, #4]
 8007806:	f04f 0200 	mov.w	r2, #0
 800780a:	f04f 0300 	mov.w	r3, #0
 800780e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007812:	4629      	mov	r1, r5
 8007814:	028b      	lsls	r3, r1, #10
 8007816:	4621      	mov	r1, r4
 8007818:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800781c:	4621      	mov	r1, r4
 800781e:	028a      	lsls	r2, r1, #10
 8007820:	4610      	mov	r0, r2
 8007822:	4619      	mov	r1, r3
 8007824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007826:	2200      	movs	r2, #0
 8007828:	61bb      	str	r3, [r7, #24]
 800782a:	61fa      	str	r2, [r7, #28]
 800782c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007830:	f7f8 fd5e 	bl	80002f0 <__aeabi_uldivmod>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4613      	mov	r3, r2
 800783a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800783c:	4b0b      	ldr	r3, [pc, #44]	; (800786c <HAL_RCC_GetSysClockFreq+0x200>)
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	0c1b      	lsrs	r3, r3, #16
 8007842:	f003 0303 	and.w	r3, r3, #3
 8007846:	3301      	adds	r3, #1
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800784c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800784e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007850:	fbb2 f3f3 	udiv	r3, r2, r3
 8007854:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007856:	e002      	b.n	800785e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007858:	4b05      	ldr	r3, [pc, #20]	; (8007870 <HAL_RCC_GetSysClockFreq+0x204>)
 800785a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800785c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800785e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007860:	4618      	mov	r0, r3
 8007862:	3750      	adds	r7, #80	; 0x50
 8007864:	46bd      	mov	sp, r7
 8007866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800786a:	bf00      	nop
 800786c:	40023800 	.word	0x40023800
 8007870:	00f42400 	.word	0x00f42400
 8007874:	007a1200 	.word	0x007a1200

08007878 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007878:	b480      	push	{r7}
 800787a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800787c:	4b03      	ldr	r3, [pc, #12]	; (800788c <HAL_RCC_GetHCLKFreq+0x14>)
 800787e:	681b      	ldr	r3, [r3, #0]
}
 8007880:	4618      	mov	r0, r3
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	2000006c 	.word	0x2000006c

08007890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007894:	f7ff fff0 	bl	8007878 <HAL_RCC_GetHCLKFreq>
 8007898:	4602      	mov	r2, r0
 800789a:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	0a9b      	lsrs	r3, r3, #10
 80078a0:	f003 0307 	and.w	r3, r3, #7
 80078a4:	4903      	ldr	r1, [pc, #12]	; (80078b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078a6:	5ccb      	ldrb	r3, [r1, r3]
 80078a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	40023800 	.word	0x40023800
 80078b4:	0800ead4 	.word	0x0800ead4

080078b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80078bc:	f7ff ffdc 	bl	8007878 <HAL_RCC_GetHCLKFreq>
 80078c0:	4602      	mov	r2, r0
 80078c2:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	0b5b      	lsrs	r3, r3, #13
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	4903      	ldr	r1, [pc, #12]	; (80078dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80078ce:	5ccb      	ldrb	r3, [r1, r3]
 80078d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	40023800 	.word	0x40023800
 80078dc:	0800ead4 	.word	0x0800ead4

080078e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b088      	sub	sp, #32
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80078ec:	2300      	movs	r3, #0
 80078ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80078f0:	2300      	movs	r3, #0
 80078f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80078f4:	2300      	movs	r3, #0
 80078f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d012      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007908:	4b69      	ldr	r3, [pc, #420]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	4a68      	ldr	r2, [pc, #416]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800790e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007912:	6093      	str	r3, [r2, #8]
 8007914:	4b66      	ldr	r3, [pc, #408]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791c:	4964      	ldr	r1, [pc, #400]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800791e:	4313      	orrs	r3, r2
 8007920:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800792a:	2301      	movs	r3, #1
 800792c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d017      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800793a:	4b5d      	ldr	r3, [pc, #372]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800793c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007940:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007948:	4959      	ldr	r1, [pc, #356]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800794a:	4313      	orrs	r3, r2
 800794c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007958:	d101      	bne.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800795a:	2301      	movs	r3, #1
 800795c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007966:	2301      	movs	r3, #1
 8007968:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d017      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007976:	4b4e      	ldr	r3, [pc, #312]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800797c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007984:	494a      	ldr	r1, [pc, #296]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007986:	4313      	orrs	r3, r2
 8007988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007994:	d101      	bne.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007996:	2301      	movs	r3, #1
 8007998:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80079a2:	2301      	movs	r3, #1
 80079a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80079b2:	2301      	movs	r3, #1
 80079b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0320 	and.w	r3, r3, #32
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 808b 	beq.w	8007ada <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80079c4:	4b3a      	ldr	r3, [pc, #232]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c8:	4a39      	ldr	r2, [pc, #228]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ce:	6413      	str	r3, [r2, #64]	; 0x40
 80079d0:	4b37      	ldr	r3, [pc, #220]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079d8:	60bb      	str	r3, [r7, #8]
 80079da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80079dc:	4b35      	ldr	r3, [pc, #212]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a34      	ldr	r2, [pc, #208]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079e8:	f7fd ff8a 	bl	8005900 <HAL_GetTick>
 80079ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079ee:	e008      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079f0:	f7fd ff86 	bl	8005900 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	2b64      	cmp	r3, #100	; 0x64
 80079fc:	d901      	bls.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e38f      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a02:	4b2c      	ldr	r3, [pc, #176]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d0f0      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a0e:	4b28      	ldr	r3, [pc, #160]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d035      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a26:	693a      	ldr	r2, [r7, #16]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d02e      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a2c:	4b20      	ldr	r3, [pc, #128]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a36:	4b1e      	ldr	r3, [pc, #120]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a3a:	4a1d      	ldr	r2, [pc, #116]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a42:	4b1b      	ldr	r3, [pc, #108]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a46:	4a1a      	ldr	r2, [pc, #104]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007a4e:	4a18      	ldr	r2, [pc, #96]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a54:	4b16      	ldr	r3, [pc, #88]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d114      	bne.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a60:	f7fd ff4e 	bl	8005900 <HAL_GetTick>
 8007a64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a66:	e00a      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a68:	f7fd ff4a 	bl	8005900 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d901      	bls.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e351      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a7e:	4b0c      	ldr	r3, [pc, #48]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d0ee      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a96:	d111      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007a98:	4b05      	ldr	r3, [pc, #20]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007aa4:	4b04      	ldr	r3, [pc, #16]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007aa6:	400b      	ands	r3, r1
 8007aa8:	4901      	ldr	r1, [pc, #4]	; (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	608b      	str	r3, [r1, #8]
 8007aae:	e00b      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007ab0:	40023800 	.word	0x40023800
 8007ab4:	40007000 	.word	0x40007000
 8007ab8:	0ffffcff 	.word	0x0ffffcff
 8007abc:	4bac      	ldr	r3, [pc, #688]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	4aab      	ldr	r2, [pc, #684]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ac2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007ac6:	6093      	str	r3, [r2, #8]
 8007ac8:	4ba9      	ldr	r3, [pc, #676]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007aca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ad4:	49a6      	ldr	r1, [pc, #664]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0310 	and.w	r3, r3, #16
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d010      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ae6:	4ba2      	ldr	r3, [pc, #648]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aec:	4aa0      	ldr	r2, [pc, #640]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007af2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007af6:	4b9e      	ldr	r3, [pc, #632]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007af8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b00:	499b      	ldr	r1, [pc, #620]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00a      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b14:	4b96      	ldr	r3, [pc, #600]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b22:	4993      	ldr	r1, [pc, #588]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b36:	4b8e      	ldr	r3, [pc, #568]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b44:	498a      	ldr	r1, [pc, #552]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00a      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b58:	4b85      	ldr	r3, [pc, #532]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b66:	4982      	ldr	r1, [pc, #520]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00a      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b7a:	4b7d      	ldr	r3, [pc, #500]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b88:	4979      	ldr	r1, [pc, #484]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00a      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b9c:	4b74      	ldr	r3, [pc, #464]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba2:	f023 0203 	bic.w	r2, r3, #3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007baa:	4971      	ldr	r1, [pc, #452]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bac:	4313      	orrs	r3, r2
 8007bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00a      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bbe:	4b6c      	ldr	r3, [pc, #432]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc4:	f023 020c 	bic.w	r2, r3, #12
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bcc:	4968      	ldr	r1, [pc, #416]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00a      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007be0:	4b63      	ldr	r3, [pc, #396]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bee:	4960      	ldr	r1, [pc, #384]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00a      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c02:	4b5b      	ldr	r3, [pc, #364]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c10:	4957      	ldr	r1, [pc, #348]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00a      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c24:	4b52      	ldr	r3, [pc, #328]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c32:	494f      	ldr	r1, [pc, #316]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00a      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007c46:	4b4a      	ldr	r3, [pc, #296]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c54:	4946      	ldr	r1, [pc, #280]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00a      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007c68:	4b41      	ldr	r3, [pc, #260]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c76:	493e      	ldr	r1, [pc, #248]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00a      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007c8a:	4b39      	ldr	r3, [pc, #228]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c98:	4935      	ldr	r1, [pc, #212]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00a      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007cac:	4b30      	ldr	r3, [pc, #192]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cba:	492d      	ldr	r1, [pc, #180]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d011      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007cce:	4b28      	ldr	r3, [pc, #160]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cdc:	4924      	ldr	r1, [pc, #144]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cec:	d101      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0308 	and.w	r3, r3, #8
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d0e:	4b18      	ldr	r3, [pc, #96]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d1c:	4914      	ldr	r1, [pc, #80]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00b      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d30:	4b0f      	ldr	r3, [pc, #60]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d40:	490b      	ldr	r1, [pc, #44]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00f      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007d54:	4b06      	ldr	r3, [pc, #24]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d64:	4902      	ldr	r1, [pc, #8]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007d6c:	e002      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007d6e:	bf00      	nop
 8007d70:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00b      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d80:	4b8a      	ldr	r3, [pc, #552]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d90:	4986      	ldr	r1, [pc, #536]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007da4:	4b81      	ldr	r3, [pc, #516]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007daa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007db4:	497d      	ldr	r1, [pc, #500]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d006      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 80d6 	beq.w	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007dd0:	4b76      	ldr	r3, [pc, #472]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a75      	ldr	r2, [pc, #468]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007dda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ddc:	f7fd fd90 	bl	8005900 <HAL_GetTick>
 8007de0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007de2:	e008      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007de4:	f7fd fd8c 	bl	8005900 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	2b64      	cmp	r3, #100	; 0x64
 8007df0:	d901      	bls.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e195      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007df6:	4b6d      	ldr	r3, [pc, #436]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1f0      	bne.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d021      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d11d      	bne.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e16:	4b65      	ldr	r3, [pc, #404]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e1c:	0c1b      	lsrs	r3, r3, #16
 8007e1e:	f003 0303 	and.w	r3, r3, #3
 8007e22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e24:	4b61      	ldr	r3, [pc, #388]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e2a:	0e1b      	lsrs	r3, r3, #24
 8007e2c:	f003 030f 	and.w	r3, r3, #15
 8007e30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	019a      	lsls	r2, r3, #6
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	041b      	lsls	r3, r3, #16
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	061b      	lsls	r3, r3, #24
 8007e42:	431a      	orrs	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	071b      	lsls	r3, r3, #28
 8007e4a:	4958      	ldr	r1, [pc, #352]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d004      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e66:	d00a      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d02e      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e7c:	d129      	bne.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e7e:	4b4b      	ldr	r3, [pc, #300]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e84:	0c1b      	lsrs	r3, r3, #16
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e8c:	4b47      	ldr	r3, [pc, #284]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e92:	0f1b      	lsrs	r3, r3, #28
 8007e94:	f003 0307 	and.w	r3, r3, #7
 8007e98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	019a      	lsls	r2, r3, #6
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	041b      	lsls	r3, r3, #16
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	061b      	lsls	r3, r3, #24
 8007eac:	431a      	orrs	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	071b      	lsls	r3, r3, #28
 8007eb2:	493e      	ldr	r1, [pc, #248]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007eba:	4b3c      	ldr	r3, [pc, #240]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ec0:	f023 021f 	bic.w	r2, r3, #31
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	4938      	ldr	r1, [pc, #224]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d01d      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007ede:	4b33      	ldr	r3, [pc, #204]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ee4:	0e1b      	lsrs	r3, r3, #24
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007eec:	4b2f      	ldr	r3, [pc, #188]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ef2:	0f1b      	lsrs	r3, r3, #28
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	019a      	lsls	r2, r3, #6
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	041b      	lsls	r3, r3, #16
 8007f06:	431a      	orrs	r2, r3
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	061b      	lsls	r3, r3, #24
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	071b      	lsls	r3, r3, #28
 8007f12:	4926      	ldr	r1, [pc, #152]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d011      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	019a      	lsls	r2, r3, #6
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	041b      	lsls	r3, r3, #16
 8007f32:	431a      	orrs	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	061b      	lsls	r3, r3, #24
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	071b      	lsls	r3, r3, #28
 8007f42:	491a      	ldr	r1, [pc, #104]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f44:	4313      	orrs	r3, r2
 8007f46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007f4a:	4b18      	ldr	r3, [pc, #96]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a17      	ldr	r2, [pc, #92]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f56:	f7fd fcd3 	bl	8005900 <HAL_GetTick>
 8007f5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f5c:	e008      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f5e:	f7fd fccf 	bl	8005900 <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	2b64      	cmp	r3, #100	; 0x64
 8007f6a:	d901      	bls.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e0d8      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f70:	4b0e      	ldr	r3, [pc, #56]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d0f0      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	f040 80ce 	bne.w	8008120 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007f84:	4b09      	ldr	r3, [pc, #36]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a08      	ldr	r2, [pc, #32]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f90:	f7fd fcb6 	bl	8005900 <HAL_GetTick>
 8007f94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f96:	e00b      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007f98:	f7fd fcb2 	bl	8005900 <HAL_GetTick>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	2b64      	cmp	r3, #100	; 0x64
 8007fa4:	d904      	bls.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e0bb      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007faa:	bf00      	nop
 8007fac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fb0:	4b5e      	ldr	r3, [pc, #376]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fbc:	d0ec      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d009      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d02e      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d12a      	bne.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007fe6:	4b51      	ldr	r3, [pc, #324]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fec:	0c1b      	lsrs	r3, r3, #16
 8007fee:	f003 0303 	and.w	r3, r3, #3
 8007ff2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007ff4:	4b4d      	ldr	r3, [pc, #308]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ffa:	0f1b      	lsrs	r3, r3, #28
 8007ffc:	f003 0307 	and.w	r3, r3, #7
 8008000:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	019a      	lsls	r2, r3, #6
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	041b      	lsls	r3, r3, #16
 800800c:	431a      	orrs	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	061b      	lsls	r3, r3, #24
 8008014:	431a      	orrs	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	071b      	lsls	r3, r3, #28
 800801a:	4944      	ldr	r1, [pc, #272]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800801c:	4313      	orrs	r3, r2
 800801e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008022:	4b42      	ldr	r3, [pc, #264]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008028:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008030:	3b01      	subs	r3, #1
 8008032:	021b      	lsls	r3, r3, #8
 8008034:	493d      	ldr	r1, [pc, #244]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008036:	4313      	orrs	r3, r2
 8008038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d022      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800804c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008050:	d11d      	bne.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008052:	4b36      	ldr	r3, [pc, #216]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008058:	0e1b      	lsrs	r3, r3, #24
 800805a:	f003 030f 	and.w	r3, r3, #15
 800805e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008060:	4b32      	ldr	r3, [pc, #200]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008066:	0f1b      	lsrs	r3, r3, #28
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	019a      	lsls	r2, r3, #6
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	041b      	lsls	r3, r3, #16
 800807a:	431a      	orrs	r2, r3
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	061b      	lsls	r3, r3, #24
 8008080:	431a      	orrs	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	071b      	lsls	r3, r3, #28
 8008086:	4929      	ldr	r1, [pc, #164]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008088:	4313      	orrs	r3, r2
 800808a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0308 	and.w	r3, r3, #8
 8008096:	2b00      	cmp	r3, #0
 8008098:	d028      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800809a:	4b24      	ldr	r3, [pc, #144]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800809c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a0:	0e1b      	lsrs	r3, r3, #24
 80080a2:	f003 030f 	and.w	r3, r3, #15
 80080a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80080a8:	4b20      	ldr	r3, [pc, #128]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ae:	0c1b      	lsrs	r3, r3, #16
 80080b0:	f003 0303 	and.w	r3, r3, #3
 80080b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	019a      	lsls	r2, r3, #6
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	041b      	lsls	r3, r3, #16
 80080c0:	431a      	orrs	r2, r3
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	061b      	lsls	r3, r3, #24
 80080c6:	431a      	orrs	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	071b      	lsls	r3, r3, #28
 80080ce:	4917      	ldr	r1, [pc, #92]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80080d6:	4b15      	ldr	r3, [pc, #84]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e4:	4911      	ldr	r1, [pc, #68]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80080ec:	4b0f      	ldr	r3, [pc, #60]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a0e      	ldr	r2, [pc, #56]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080f8:	f7fd fc02 	bl	8005900 <HAL_GetTick>
 80080fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080fe:	e008      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008100:	f7fd fbfe 	bl	8005900 <HAL_GetTick>
 8008104:	4602      	mov	r2, r0
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	2b64      	cmp	r3, #100	; 0x64
 800810c:	d901      	bls.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e007      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008112:	4b06      	ldr	r3, [pc, #24]	; (800812c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800811a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800811e:	d1ef      	bne.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3720      	adds	r7, #32
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	40023800 	.word	0x40023800

08008130 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e01c      	b.n	800817c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	795b      	ldrb	r3, [r3, #5]
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d105      	bne.n	8008158 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7fc f9b0 	bl	80044b8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2202      	movs	r2, #2
 800815c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f042 0204 	orr.w	r2, r2, #4
 800816c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e09d      	b.n	80082d2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	2b00      	cmp	r3, #0
 800819c:	d108      	bne.n	80081b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081a6:	d009      	beq.n	80081bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	61da      	str	r2, [r3, #28]
 80081ae:	e005      	b.n	80081bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d106      	bne.n	80081dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7fc f9e0 	bl	800459c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80081fc:	d902      	bls.n	8008204 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80081fe:	2300      	movs	r3, #0
 8008200:	60fb      	str	r3, [r7, #12]
 8008202:	e002      	b.n	800820a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008208:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008212:	d007      	beq.n	8008224 <HAL_SPI_Init+0xa0>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800821c:	d002      	beq.n	8008224 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008234:	431a      	orrs	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	f003 0302 	and.w	r3, r3, #2
 800823e:	431a      	orrs	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	431a      	orrs	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008252:	431a      	orrs	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800825c:	431a      	orrs	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008266:	ea42 0103 	orr.w	r1, r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	0c1b      	lsrs	r3, r3, #16
 8008280:	f003 0204 	and.w	r2, r3, #4
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	431a      	orrs	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008292:	f003 0308 	and.w	r3, r3, #8
 8008296:	431a      	orrs	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80082a0:	ea42 0103 	orr.w	r1, r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	430a      	orrs	r2, r1
 80082b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	69da      	ldr	r2, [r3, #28]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b088      	sub	sp, #32
 80082de:	af00      	add	r7, sp, #0
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	603b      	str	r3, [r7, #0]
 80082e6:	4613      	mov	r3, r2
 80082e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d101      	bne.n	80082fc <HAL_SPI_Transmit+0x22>
 80082f8:	2302      	movs	r3, #2
 80082fa:	e158      	b.n	80085ae <HAL_SPI_Transmit+0x2d4>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008304:	f7fd fafc 	bl	8005900 <HAL_GetTick>
 8008308:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800830a:	88fb      	ldrh	r3, [r7, #6]
 800830c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b01      	cmp	r3, #1
 8008318:	d002      	beq.n	8008320 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800831a:	2302      	movs	r3, #2
 800831c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800831e:	e13d      	b.n	800859c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d002      	beq.n	800832c <HAL_SPI_Transmit+0x52>
 8008326:	88fb      	ldrh	r3, [r7, #6]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d102      	bne.n	8008332 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008330:	e134      	b.n	800859c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2203      	movs	r2, #3
 8008336:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	88fa      	ldrh	r2, [r7, #6]
 800834a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	88fa      	ldrh	r2, [r7, #6]
 8008350:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800837c:	d10f      	bne.n	800839e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800838c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800839c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a8:	2b40      	cmp	r3, #64	; 0x40
 80083aa:	d007      	beq.n	80083bc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083c4:	d94b      	bls.n	800845e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d002      	beq.n	80083d4 <HAL_SPI_Transmit+0xfa>
 80083ce:	8afb      	ldrh	r3, [r7, #22]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d13e      	bne.n	8008452 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	881a      	ldrh	r2, [r3, #0]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e4:	1c9a      	adds	r2, r3, #2
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	3b01      	subs	r3, #1
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80083f8:	e02b      	b.n	8008452 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f003 0302 	and.w	r3, r3, #2
 8008404:	2b02      	cmp	r3, #2
 8008406:	d112      	bne.n	800842e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	881a      	ldrh	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	1c9a      	adds	r2, r3, #2
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008422:	b29b      	uxth	r3, r3
 8008424:	3b01      	subs	r3, #1
 8008426:	b29a      	uxth	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800842c:	e011      	b.n	8008452 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800842e:	f7fd fa67 	bl	8005900 <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	429a      	cmp	r2, r3
 800843c:	d803      	bhi.n	8008446 <HAL_SPI_Transmit+0x16c>
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008444:	d102      	bne.n	800844c <HAL_SPI_Transmit+0x172>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d102      	bne.n	8008452 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008450:	e0a4      	b.n	800859c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008456:	b29b      	uxth	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1ce      	bne.n	80083fa <HAL_SPI_Transmit+0x120>
 800845c:	e07c      	b.n	8008558 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d002      	beq.n	800846c <HAL_SPI_Transmit+0x192>
 8008466:	8afb      	ldrh	r3, [r7, #22]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d170      	bne.n	800854e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008470:	b29b      	uxth	r3, r3
 8008472:	2b01      	cmp	r3, #1
 8008474:	d912      	bls.n	800849c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847a:	881a      	ldrh	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008486:	1c9a      	adds	r2, r3, #2
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008490:	b29b      	uxth	r3, r3
 8008492:	3b02      	subs	r3, #2
 8008494:	b29a      	uxth	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	87da      	strh	r2, [r3, #62]	; 0x3e
 800849a:	e058      	b.n	800854e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	330c      	adds	r3, #12
 80084a6:	7812      	ldrb	r2, [r2, #0]
 80084a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ae:	1c5a      	adds	r2, r3, #1
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	3b01      	subs	r3, #1
 80084bc:	b29a      	uxth	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80084c2:	e044      	b.n	800854e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d12b      	bne.n	800852a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d912      	bls.n	8008502 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e0:	881a      	ldrh	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ec:	1c9a      	adds	r2, r3, #2
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b02      	subs	r3, #2
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008500:	e025      	b.n	800854e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	330c      	adds	r3, #12
 800850c:	7812      	ldrb	r2, [r2, #0]
 800850e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008514:	1c5a      	adds	r2, r3, #1
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800851e:	b29b      	uxth	r3, r3
 8008520:	3b01      	subs	r3, #1
 8008522:	b29a      	uxth	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008528:	e011      	b.n	800854e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800852a:	f7fd f9e9 	bl	8005900 <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	683a      	ldr	r2, [r7, #0]
 8008536:	429a      	cmp	r2, r3
 8008538:	d803      	bhi.n	8008542 <HAL_SPI_Transmit+0x268>
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008540:	d102      	bne.n	8008548 <HAL_SPI_Transmit+0x26e>
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d102      	bne.n	800854e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800854c:	e026      	b.n	800859c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008552:	b29b      	uxth	r3, r3
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1b5      	bne.n	80084c4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008558:	69ba      	ldr	r2, [r7, #24]
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f000 f949 	bl	80087f4 <SPI_EndRxTxTransaction>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2220      	movs	r2, #32
 800856c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10a      	bne.n	800858c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008576:	2300      	movs	r3, #0
 8008578:	613b      	str	r3, [r7, #16]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	613b      	str	r3, [r7, #16]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	613b      	str	r3, [r7, #16]
 800858a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	77fb      	strb	r3, [r7, #31]
 8008598:	e000      	b.n	800859c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800859a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80085ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3720      	adds	r7, #32
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
	...

080085b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b088      	sub	sp, #32
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	603b      	str	r3, [r7, #0]
 80085c4:	4613      	mov	r3, r2
 80085c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80085c8:	f7fd f99a 	bl	8005900 <HAL_GetTick>
 80085cc:	4602      	mov	r2, r0
 80085ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d0:	1a9b      	subs	r3, r3, r2
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	4413      	add	r3, r2
 80085d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80085d8:	f7fd f992 	bl	8005900 <HAL_GetTick>
 80085dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80085de:	4b39      	ldr	r3, [pc, #228]	; (80086c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	015b      	lsls	r3, r3, #5
 80085e4:	0d1b      	lsrs	r3, r3, #20
 80085e6:	69fa      	ldr	r2, [r7, #28]
 80085e8:	fb02 f303 	mul.w	r3, r2, r3
 80085ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085ee:	e054      	b.n	800869a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085f6:	d050      	beq.n	800869a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085f8:	f7fd f982 	bl	8005900 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	69fa      	ldr	r2, [r7, #28]
 8008604:	429a      	cmp	r2, r3
 8008606:	d902      	bls.n	800860e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d13d      	bne.n	800868a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800861c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008626:	d111      	bne.n	800864c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008630:	d004      	beq.n	800863c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800863a:	d107      	bne.n	800864c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800864a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008654:	d10f      	bne.n	8008676 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008664:	601a      	str	r2, [r3, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008674:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e017      	b.n	80086ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008690:	2300      	movs	r3, #0
 8008692:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	3b01      	subs	r3, #1
 8008698:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	689a      	ldr	r2, [r3, #8]
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	4013      	ands	r3, r2
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	bf0c      	ite	eq
 80086aa:	2301      	moveq	r3, #1
 80086ac:	2300      	movne	r3, #0
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	461a      	mov	r2, r3
 80086b2:	79fb      	ldrb	r3, [r7, #7]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d19b      	bne.n	80085f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3720      	adds	r7, #32
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	2000006c 	.word	0x2000006c

080086c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b08a      	sub	sp, #40	; 0x28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
 80086d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80086d6:	2300      	movs	r3, #0
 80086d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80086da:	f7fd f911 	bl	8005900 <HAL_GetTick>
 80086de:	4602      	mov	r2, r0
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	1a9b      	subs	r3, r3, r2
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	4413      	add	r3, r2
 80086e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80086ea:	f7fd f909 	bl	8005900 <HAL_GetTick>
 80086ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	330c      	adds	r3, #12
 80086f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80086f8:	4b3d      	ldr	r3, [pc, #244]	; (80087f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	4613      	mov	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	00da      	lsls	r2, r3, #3
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	0d1b      	lsrs	r3, r3, #20
 8008708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800870a:	fb02 f303 	mul.w	r3, r2, r3
 800870e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008710:	e060      	b.n	80087d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008718:	d107      	bne.n	800872a <SPI_WaitFifoStateUntilTimeout+0x62>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d104      	bne.n	800872a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	b2db      	uxtb	r3, r3
 8008726:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008728:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008730:	d050      	beq.n	80087d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008732:	f7fd f8e5 	bl	8005900 <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873e:	429a      	cmp	r2, r3
 8008740:	d902      	bls.n	8008748 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008744:	2b00      	cmp	r3, #0
 8008746:	d13d      	bne.n	80087c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	685a      	ldr	r2, [r3, #4]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008756:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008760:	d111      	bne.n	8008786 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800876a:	d004      	beq.n	8008776 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008774:	d107      	bne.n	8008786 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008784:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800878e:	d10f      	bne.n	80087b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800879e:	601a      	str	r2, [r3, #0]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e010      	b.n	80087e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	3b01      	subs	r3, #1
 80087d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689a      	ldr	r2, [r3, #8]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	4013      	ands	r3, r2
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d196      	bne.n	8008712 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3728      	adds	r7, #40	; 0x28
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	2000006c 	.word	0x2000006c

080087f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b088      	sub	sp, #32
 80087f8:	af02      	add	r7, sp, #8
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2200      	movs	r2, #0
 8008808:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f7ff ff5b 	bl	80086c8 <SPI_WaitFifoStateUntilTimeout>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d007      	beq.n	8008828 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800881c:	f043 0220 	orr.w	r2, r3, #32
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e046      	b.n	80088b6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008828:	4b25      	ldr	r3, [pc, #148]	; (80088c0 <SPI_EndRxTxTransaction+0xcc>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a25      	ldr	r2, [pc, #148]	; (80088c4 <SPI_EndRxTxTransaction+0xd0>)
 800882e:	fba2 2303 	umull	r2, r3, r2, r3
 8008832:	0d5b      	lsrs	r3, r3, #21
 8008834:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008838:	fb02 f303 	mul.w	r3, r2, r3
 800883c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008846:	d112      	bne.n	800886e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	2200      	movs	r2, #0
 8008850:	2180      	movs	r1, #128	; 0x80
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7ff feb0 	bl	80085b8 <SPI_WaitFlagStateUntilTimeout>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d016      	beq.n	800888c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008862:	f043 0220 	orr.w	r2, r3, #32
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e023      	b.n	80088b6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00a      	beq.n	800888a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	3b01      	subs	r3, #1
 8008878:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008884:	2b80      	cmp	r3, #128	; 0x80
 8008886:	d0f2      	beq.n	800886e <SPI_EndRxTxTransaction+0x7a>
 8008888:	e000      	b.n	800888c <SPI_EndRxTxTransaction+0x98>
        break;
 800888a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	2200      	movs	r2, #0
 8008894:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f7ff ff15 	bl	80086c8 <SPI_WaitFifoStateUntilTimeout>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d007      	beq.n	80088b4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088a8:	f043 0220 	orr.w	r2, r3, #32
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e000      	b.n	80088b6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	2000006c 	.word	0x2000006c
 80088c4:	165e9f81 	.word	0x165e9f81

080088c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e049      	b.n	800896e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d106      	bne.n	80088f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7fc f88c 	bl	8004a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3304      	adds	r3, #4
 8008904:	4619      	mov	r1, r3
 8008906:	4610      	mov	r0, r2
 8008908:	f000 fac0 	bl	8008e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
	...

08008978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b01      	cmp	r3, #1
 800898a:	d001      	beq.n	8008990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e054      	b.n	8008a3a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2202      	movs	r2, #2
 8008994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68da      	ldr	r2, [r3, #12]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0201 	orr.w	r2, r2, #1
 80089a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a26      	ldr	r2, [pc, #152]	; (8008a48 <HAL_TIM_Base_Start_IT+0xd0>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d022      	beq.n	80089f8 <HAL_TIM_Base_Start_IT+0x80>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ba:	d01d      	beq.n	80089f8 <HAL_TIM_Base_Start_IT+0x80>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a22      	ldr	r2, [pc, #136]	; (8008a4c <HAL_TIM_Base_Start_IT+0xd4>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d018      	beq.n	80089f8 <HAL_TIM_Base_Start_IT+0x80>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a21      	ldr	r2, [pc, #132]	; (8008a50 <HAL_TIM_Base_Start_IT+0xd8>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d013      	beq.n	80089f8 <HAL_TIM_Base_Start_IT+0x80>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a1f      	ldr	r2, [pc, #124]	; (8008a54 <HAL_TIM_Base_Start_IT+0xdc>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d00e      	beq.n	80089f8 <HAL_TIM_Base_Start_IT+0x80>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a1e      	ldr	r2, [pc, #120]	; (8008a58 <HAL_TIM_Base_Start_IT+0xe0>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d009      	beq.n	80089f8 <HAL_TIM_Base_Start_IT+0x80>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a1c      	ldr	r2, [pc, #112]	; (8008a5c <HAL_TIM_Base_Start_IT+0xe4>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d004      	beq.n	80089f8 <HAL_TIM_Base_Start_IT+0x80>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a1b      	ldr	r2, [pc, #108]	; (8008a60 <HAL_TIM_Base_Start_IT+0xe8>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d115      	bne.n	8008a24 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	689a      	ldr	r2, [r3, #8]
 80089fe:	4b19      	ldr	r3, [pc, #100]	; (8008a64 <HAL_TIM_Base_Start_IT+0xec>)
 8008a00:	4013      	ands	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b06      	cmp	r3, #6
 8008a08:	d015      	beq.n	8008a36 <HAL_TIM_Base_Start_IT+0xbe>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a10:	d011      	beq.n	8008a36 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f042 0201 	orr.w	r2, r2, #1
 8008a20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a22:	e008      	b.n	8008a36 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f042 0201 	orr.w	r2, r2, #1
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	e000      	b.n	8008a38 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	40010000 	.word	0x40010000
 8008a4c:	40000400 	.word	0x40000400
 8008a50:	40000800 	.word	0x40000800
 8008a54:	40000c00 	.word	0x40000c00
 8008a58:	40010400 	.word	0x40010400
 8008a5c:	40014000 	.word	0x40014000
 8008a60:	40001800 	.word	0x40001800
 8008a64:	00010007 	.word	0x00010007

08008a68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	f003 0302 	and.w	r3, r3, #2
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d122      	bne.n	8008ac4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f003 0302 	and.w	r3, r3, #2
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d11b      	bne.n	8008ac4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f06f 0202 	mvn.w	r2, #2
 8008a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	f003 0303 	and.w	r3, r3, #3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f9d0 	bl	8008e50 <HAL_TIM_IC_CaptureCallback>
 8008ab0:	e005      	b.n	8008abe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f9c2 	bl	8008e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f9d3 	bl	8008e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	f003 0304 	and.w	r3, r3, #4
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d122      	bne.n	8008b18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	f003 0304 	and.w	r3, r3, #4
 8008adc:	2b04      	cmp	r3, #4
 8008ade:	d11b      	bne.n	8008b18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f06f 0204 	mvn.w	r2, #4
 8008ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2202      	movs	r2, #2
 8008aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d003      	beq.n	8008b06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f9a6 	bl	8008e50 <HAL_TIM_IC_CaptureCallback>
 8008b04:	e005      	b.n	8008b12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f998 	bl	8008e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f9a9 	bl	8008e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	f003 0308 	and.w	r3, r3, #8
 8008b22:	2b08      	cmp	r3, #8
 8008b24:	d122      	bne.n	8008b6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f003 0308 	and.w	r3, r3, #8
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	d11b      	bne.n	8008b6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f06f 0208 	mvn.w	r2, #8
 8008b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2204      	movs	r2, #4
 8008b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	f003 0303 	and.w	r3, r3, #3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f97c 	bl	8008e50 <HAL_TIM_IC_CaptureCallback>
 8008b58:	e005      	b.n	8008b66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f96e 	bl	8008e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f97f 	bl	8008e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	f003 0310 	and.w	r3, r3, #16
 8008b76:	2b10      	cmp	r3, #16
 8008b78:	d122      	bne.n	8008bc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	f003 0310 	and.w	r3, r3, #16
 8008b84:	2b10      	cmp	r3, #16
 8008b86:	d11b      	bne.n	8008bc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f06f 0210 	mvn.w	r2, #16
 8008b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2208      	movs	r2, #8
 8008b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f952 	bl	8008e50 <HAL_TIM_IC_CaptureCallback>
 8008bac:	e005      	b.n	8008bba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f944 	bl	8008e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f955 	bl	8008e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d10e      	bne.n	8008bec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f003 0301 	and.w	r3, r3, #1
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d107      	bne.n	8008bec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f06f 0201 	mvn.w	r2, #1
 8008be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7fb f88e 	bl	8003d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bf6:	2b80      	cmp	r3, #128	; 0x80
 8008bf8:	d10e      	bne.n	8008c18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c04:	2b80      	cmp	r3, #128	; 0x80
 8008c06:	d107      	bne.n	8008c18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fb0c 	bl	8009230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c26:	d10e      	bne.n	8008c46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c32:	2b80      	cmp	r3, #128	; 0x80
 8008c34:	d107      	bne.n	8008c46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 faff 	bl	8009244 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c50:	2b40      	cmp	r3, #64	; 0x40
 8008c52:	d10e      	bne.n	8008c72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5e:	2b40      	cmp	r3, #64	; 0x40
 8008c60:	d107      	bne.n	8008c72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f903 	bl	8008e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	f003 0320 	and.w	r3, r3, #32
 8008c7c:	2b20      	cmp	r3, #32
 8008c7e:	d10e      	bne.n	8008c9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	f003 0320 	and.w	r3, r3, #32
 8008c8a:	2b20      	cmp	r3, #32
 8008c8c:	d107      	bne.n	8008c9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f06f 0220 	mvn.w	r2, #32
 8008c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fabf 	bl	800921c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c9e:	bf00      	nop
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
	...

08008ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d101      	bne.n	8008cc4 <HAL_TIM_ConfigClockSource+0x1c>
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	e0b4      	b.n	8008e2e <HAL_TIM_ConfigClockSource+0x186>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	4b56      	ldr	r3, [pc, #344]	; (8008e38 <HAL_TIM_ConfigClockSource+0x190>)
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cfc:	d03e      	beq.n	8008d7c <HAL_TIM_ConfigClockSource+0xd4>
 8008cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d02:	f200 8087 	bhi.w	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
 8008d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d0a:	f000 8086 	beq.w	8008e1a <HAL_TIM_ConfigClockSource+0x172>
 8008d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d12:	d87f      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
 8008d14:	2b70      	cmp	r3, #112	; 0x70
 8008d16:	d01a      	beq.n	8008d4e <HAL_TIM_ConfigClockSource+0xa6>
 8008d18:	2b70      	cmp	r3, #112	; 0x70
 8008d1a:	d87b      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
 8008d1c:	2b60      	cmp	r3, #96	; 0x60
 8008d1e:	d050      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x11a>
 8008d20:	2b60      	cmp	r3, #96	; 0x60
 8008d22:	d877      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
 8008d24:	2b50      	cmp	r3, #80	; 0x50
 8008d26:	d03c      	beq.n	8008da2 <HAL_TIM_ConfigClockSource+0xfa>
 8008d28:	2b50      	cmp	r3, #80	; 0x50
 8008d2a:	d873      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
 8008d2c:	2b40      	cmp	r3, #64	; 0x40
 8008d2e:	d058      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x13a>
 8008d30:	2b40      	cmp	r3, #64	; 0x40
 8008d32:	d86f      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
 8008d34:	2b30      	cmp	r3, #48	; 0x30
 8008d36:	d064      	beq.n	8008e02 <HAL_TIM_ConfigClockSource+0x15a>
 8008d38:	2b30      	cmp	r3, #48	; 0x30
 8008d3a:	d86b      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
 8008d3c:	2b20      	cmp	r3, #32
 8008d3e:	d060      	beq.n	8008e02 <HAL_TIM_ConfigClockSource+0x15a>
 8008d40:	2b20      	cmp	r3, #32
 8008d42:	d867      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d05c      	beq.n	8008e02 <HAL_TIM_ConfigClockSource+0x15a>
 8008d48:	2b10      	cmp	r3, #16
 8008d4a:	d05a      	beq.n	8008e02 <HAL_TIM_ConfigClockSource+0x15a>
 8008d4c:	e062      	b.n	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d5e:	f000 f9af 	bl	80090c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	609a      	str	r2, [r3, #8]
      break;
 8008d7a:	e04f      	b.n	8008e1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d8c:	f000 f998 	bl	80090c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	689a      	ldr	r2, [r3, #8]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d9e:	609a      	str	r2, [r3, #8]
      break;
 8008da0:	e03c      	b.n	8008e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dae:	461a      	mov	r2, r3
 8008db0:	f000 f90c 	bl	8008fcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2150      	movs	r1, #80	; 0x50
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 f965 	bl	800908a <TIM_ITRx_SetConfig>
      break;
 8008dc0:	e02c      	b.n	8008e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f000 f92b 	bl	800902a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2160      	movs	r1, #96	; 0x60
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 f955 	bl	800908a <TIM_ITRx_SetConfig>
      break;
 8008de0:	e01c      	b.n	8008e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dee:	461a      	mov	r2, r3
 8008df0:	f000 f8ec 	bl	8008fcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2140      	movs	r1, #64	; 0x40
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 f945 	bl	800908a <TIM_ITRx_SetConfig>
      break;
 8008e00:	e00c      	b.n	8008e1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	f000 f93c 	bl	800908a <TIM_ITRx_SetConfig>
      break;
 8008e12:	e003      	b.n	8008e1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	73fb      	strb	r3, [r7, #15]
      break;
 8008e18:	e000      	b.n	8008e1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	fffeff88 	.word	0xfffeff88

08008e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a40      	ldr	r2, [pc, #256]	; (8008fa0 <TIM_Base_SetConfig+0x114>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d013      	beq.n	8008ecc <TIM_Base_SetConfig+0x40>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eaa:	d00f      	beq.n	8008ecc <TIM_Base_SetConfig+0x40>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a3d      	ldr	r2, [pc, #244]	; (8008fa4 <TIM_Base_SetConfig+0x118>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d00b      	beq.n	8008ecc <TIM_Base_SetConfig+0x40>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a3c      	ldr	r2, [pc, #240]	; (8008fa8 <TIM_Base_SetConfig+0x11c>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d007      	beq.n	8008ecc <TIM_Base_SetConfig+0x40>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a3b      	ldr	r2, [pc, #236]	; (8008fac <TIM_Base_SetConfig+0x120>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d003      	beq.n	8008ecc <TIM_Base_SetConfig+0x40>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a3a      	ldr	r2, [pc, #232]	; (8008fb0 <TIM_Base_SetConfig+0x124>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d108      	bne.n	8008ede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a2f      	ldr	r2, [pc, #188]	; (8008fa0 <TIM_Base_SetConfig+0x114>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d02b      	beq.n	8008f3e <TIM_Base_SetConfig+0xb2>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eec:	d027      	beq.n	8008f3e <TIM_Base_SetConfig+0xb2>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a2c      	ldr	r2, [pc, #176]	; (8008fa4 <TIM_Base_SetConfig+0x118>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d023      	beq.n	8008f3e <TIM_Base_SetConfig+0xb2>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a2b      	ldr	r2, [pc, #172]	; (8008fa8 <TIM_Base_SetConfig+0x11c>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d01f      	beq.n	8008f3e <TIM_Base_SetConfig+0xb2>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a2a      	ldr	r2, [pc, #168]	; (8008fac <TIM_Base_SetConfig+0x120>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d01b      	beq.n	8008f3e <TIM_Base_SetConfig+0xb2>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a29      	ldr	r2, [pc, #164]	; (8008fb0 <TIM_Base_SetConfig+0x124>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d017      	beq.n	8008f3e <TIM_Base_SetConfig+0xb2>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a28      	ldr	r2, [pc, #160]	; (8008fb4 <TIM_Base_SetConfig+0x128>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d013      	beq.n	8008f3e <TIM_Base_SetConfig+0xb2>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a27      	ldr	r2, [pc, #156]	; (8008fb8 <TIM_Base_SetConfig+0x12c>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d00f      	beq.n	8008f3e <TIM_Base_SetConfig+0xb2>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a26      	ldr	r2, [pc, #152]	; (8008fbc <TIM_Base_SetConfig+0x130>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d00b      	beq.n	8008f3e <TIM_Base_SetConfig+0xb2>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a25      	ldr	r2, [pc, #148]	; (8008fc0 <TIM_Base_SetConfig+0x134>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d007      	beq.n	8008f3e <TIM_Base_SetConfig+0xb2>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a24      	ldr	r2, [pc, #144]	; (8008fc4 <TIM_Base_SetConfig+0x138>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d003      	beq.n	8008f3e <TIM_Base_SetConfig+0xb2>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a23      	ldr	r2, [pc, #140]	; (8008fc8 <TIM_Base_SetConfig+0x13c>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d108      	bne.n	8008f50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	689a      	ldr	r2, [r3, #8]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a0a      	ldr	r2, [pc, #40]	; (8008fa0 <TIM_Base_SetConfig+0x114>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d003      	beq.n	8008f84 <TIM_Base_SetConfig+0xf8>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a0c      	ldr	r2, [pc, #48]	; (8008fb0 <TIM_Base_SetConfig+0x124>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d103      	bne.n	8008f8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	691a      	ldr	r2, [r3, #16]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	615a      	str	r2, [r3, #20]
}
 8008f92:	bf00      	nop
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	40010000 	.word	0x40010000
 8008fa4:	40000400 	.word	0x40000400
 8008fa8:	40000800 	.word	0x40000800
 8008fac:	40000c00 	.word	0x40000c00
 8008fb0:	40010400 	.word	0x40010400
 8008fb4:	40014000 	.word	0x40014000
 8008fb8:	40014400 	.word	0x40014400
 8008fbc:	40014800 	.word	0x40014800
 8008fc0:	40001800 	.word	0x40001800
 8008fc4:	40001c00 	.word	0x40001c00
 8008fc8:	40002000 	.word	0x40002000

08008fcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6a1b      	ldr	r3, [r3, #32]
 8008fdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	f023 0201 	bic.w	r2, r3, #1
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	011b      	lsls	r3, r3, #4
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	f023 030a 	bic.w	r3, r3, #10
 8009008:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	4313      	orrs	r3, r2
 8009010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	697a      	ldr	r2, [r7, #20]
 800901c:	621a      	str	r2, [r3, #32]
}
 800901e:	bf00      	nop
 8009020:	371c      	adds	r7, #28
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800902a:	b480      	push	{r7}
 800902c:	b087      	sub	sp, #28
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6a1b      	ldr	r3, [r3, #32]
 800903a:	f023 0210 	bic.w	r2, r3, #16
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6a1b      	ldr	r3, [r3, #32]
 800904c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009054:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	031b      	lsls	r3, r3, #12
 800905a:	697a      	ldr	r2, [r7, #20]
 800905c:	4313      	orrs	r3, r2
 800905e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009066:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	011b      	lsls	r3, r3, #4
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	4313      	orrs	r3, r2
 8009070:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	697a      	ldr	r2, [r7, #20]
 8009076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	693a      	ldr	r2, [r7, #16]
 800907c:	621a      	str	r2, [r3, #32]
}
 800907e:	bf00      	nop
 8009080:	371c      	adds	r7, #28
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800908a:	b480      	push	{r7}
 800908c:	b085      	sub	sp, #20
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	f043 0307 	orr.w	r3, r3, #7
 80090ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	609a      	str	r2, [r3, #8]
}
 80090b4:	bf00      	nop
 80090b6:	3714      	adds	r7, #20
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b087      	sub	sp, #28
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
 80090cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	021a      	lsls	r2, r3, #8
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	431a      	orrs	r2, r3
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	697a      	ldr	r2, [r7, #20]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	697a      	ldr	r2, [r7, #20]
 80090f2:	609a      	str	r2, [r3, #8]
}
 80090f4:	bf00      	nop
 80090f6:	371c      	adds	r7, #28
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009110:	2b01      	cmp	r3, #1
 8009112:	d101      	bne.n	8009118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009114:	2302      	movs	r3, #2
 8009116:	e06d      	b.n	80091f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2202      	movs	r2, #2
 8009124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a30      	ldr	r2, [pc, #192]	; (8009200 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d004      	beq.n	800914c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a2f      	ldr	r2, [pc, #188]	; (8009204 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d108      	bne.n	800915e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009152:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009164:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	4313      	orrs	r3, r2
 800916e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a20      	ldr	r2, [pc, #128]	; (8009200 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d022      	beq.n	80091c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800918a:	d01d      	beq.n	80091c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a1d      	ldr	r2, [pc, #116]	; (8009208 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d018      	beq.n	80091c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a1c      	ldr	r2, [pc, #112]	; (800920c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d013      	beq.n	80091c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a1a      	ldr	r2, [pc, #104]	; (8009210 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d00e      	beq.n	80091c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a15      	ldr	r2, [pc, #84]	; (8009204 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d009      	beq.n	80091c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a16      	ldr	r2, [pc, #88]	; (8009214 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d004      	beq.n	80091c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a15      	ldr	r2, [pc, #84]	; (8009218 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d10c      	bne.n	80091e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	40010000 	.word	0x40010000
 8009204:	40010400 	.word	0x40010400
 8009208:	40000400 	.word	0x40000400
 800920c:	40000800 	.word	0x40000800
 8009210:	40000c00 	.word	0x40000c00
 8009214:	40014000 	.word	0x40014000
 8009218:	40001800 	.word	0x40001800

0800921c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d101      	bne.n	800926a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e040      	b.n	80092ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800926e:	2b00      	cmp	r3, #0
 8009270:	d106      	bne.n	8009280 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7fb fc2e 	bl	8004adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2224      	movs	r2, #36	; 0x24
 8009284:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0201 	bic.w	r2, r2, #1
 8009294:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f82c 	bl	80092f4 <UART_SetConfig>
 800929c:	4603      	mov	r3, r0
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d101      	bne.n	80092a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e022      	b.n	80092ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fa84 	bl	80097bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689a      	ldr	r2, [r3, #8]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f042 0201 	orr.w	r2, r2, #1
 80092e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fb0b 	bl	8009900 <UART_CheckIdleState>
 80092ea:	4603      	mov	r3, r0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b088      	sub	sp, #32
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	431a      	orrs	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	431a      	orrs	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	69db      	ldr	r3, [r3, #28]
 8009314:	4313      	orrs	r3, r2
 8009316:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	4ba6      	ldr	r3, [pc, #664]	; (80095b8 <UART_SetConfig+0x2c4>)
 8009320:	4013      	ands	r3, r2
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	6812      	ldr	r2, [r2, #0]
 8009326:	6979      	ldr	r1, [r7, #20]
 8009328:	430b      	orrs	r3, r1
 800932a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68da      	ldr	r2, [r3, #12]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	430a      	orrs	r2, r1
 8009340:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a1b      	ldr	r3, [r3, #32]
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	4313      	orrs	r3, r2
 8009350:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	430a      	orrs	r2, r1
 8009364:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a94      	ldr	r2, [pc, #592]	; (80095bc <UART_SetConfig+0x2c8>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d120      	bne.n	80093b2 <UART_SetConfig+0xbe>
 8009370:	4b93      	ldr	r3, [pc, #588]	; (80095c0 <UART_SetConfig+0x2cc>)
 8009372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009376:	f003 0303 	and.w	r3, r3, #3
 800937a:	2b03      	cmp	r3, #3
 800937c:	d816      	bhi.n	80093ac <UART_SetConfig+0xb8>
 800937e:	a201      	add	r2, pc, #4	; (adr r2, 8009384 <UART_SetConfig+0x90>)
 8009380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009384:	08009395 	.word	0x08009395
 8009388:	080093a1 	.word	0x080093a1
 800938c:	0800939b 	.word	0x0800939b
 8009390:	080093a7 	.word	0x080093a7
 8009394:	2301      	movs	r3, #1
 8009396:	77fb      	strb	r3, [r7, #31]
 8009398:	e150      	b.n	800963c <UART_SetConfig+0x348>
 800939a:	2302      	movs	r3, #2
 800939c:	77fb      	strb	r3, [r7, #31]
 800939e:	e14d      	b.n	800963c <UART_SetConfig+0x348>
 80093a0:	2304      	movs	r3, #4
 80093a2:	77fb      	strb	r3, [r7, #31]
 80093a4:	e14a      	b.n	800963c <UART_SetConfig+0x348>
 80093a6:	2308      	movs	r3, #8
 80093a8:	77fb      	strb	r3, [r7, #31]
 80093aa:	e147      	b.n	800963c <UART_SetConfig+0x348>
 80093ac:	2310      	movs	r3, #16
 80093ae:	77fb      	strb	r3, [r7, #31]
 80093b0:	e144      	b.n	800963c <UART_SetConfig+0x348>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a83      	ldr	r2, [pc, #524]	; (80095c4 <UART_SetConfig+0x2d0>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d132      	bne.n	8009422 <UART_SetConfig+0x12e>
 80093bc:	4b80      	ldr	r3, [pc, #512]	; (80095c0 <UART_SetConfig+0x2cc>)
 80093be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c2:	f003 030c 	and.w	r3, r3, #12
 80093c6:	2b0c      	cmp	r3, #12
 80093c8:	d828      	bhi.n	800941c <UART_SetConfig+0x128>
 80093ca:	a201      	add	r2, pc, #4	; (adr r2, 80093d0 <UART_SetConfig+0xdc>)
 80093cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d0:	08009405 	.word	0x08009405
 80093d4:	0800941d 	.word	0x0800941d
 80093d8:	0800941d 	.word	0x0800941d
 80093dc:	0800941d 	.word	0x0800941d
 80093e0:	08009411 	.word	0x08009411
 80093e4:	0800941d 	.word	0x0800941d
 80093e8:	0800941d 	.word	0x0800941d
 80093ec:	0800941d 	.word	0x0800941d
 80093f0:	0800940b 	.word	0x0800940b
 80093f4:	0800941d 	.word	0x0800941d
 80093f8:	0800941d 	.word	0x0800941d
 80093fc:	0800941d 	.word	0x0800941d
 8009400:	08009417 	.word	0x08009417
 8009404:	2300      	movs	r3, #0
 8009406:	77fb      	strb	r3, [r7, #31]
 8009408:	e118      	b.n	800963c <UART_SetConfig+0x348>
 800940a:	2302      	movs	r3, #2
 800940c:	77fb      	strb	r3, [r7, #31]
 800940e:	e115      	b.n	800963c <UART_SetConfig+0x348>
 8009410:	2304      	movs	r3, #4
 8009412:	77fb      	strb	r3, [r7, #31]
 8009414:	e112      	b.n	800963c <UART_SetConfig+0x348>
 8009416:	2308      	movs	r3, #8
 8009418:	77fb      	strb	r3, [r7, #31]
 800941a:	e10f      	b.n	800963c <UART_SetConfig+0x348>
 800941c:	2310      	movs	r3, #16
 800941e:	77fb      	strb	r3, [r7, #31]
 8009420:	e10c      	b.n	800963c <UART_SetConfig+0x348>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a68      	ldr	r2, [pc, #416]	; (80095c8 <UART_SetConfig+0x2d4>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d120      	bne.n	800946e <UART_SetConfig+0x17a>
 800942c:	4b64      	ldr	r3, [pc, #400]	; (80095c0 <UART_SetConfig+0x2cc>)
 800942e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009432:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009436:	2b30      	cmp	r3, #48	; 0x30
 8009438:	d013      	beq.n	8009462 <UART_SetConfig+0x16e>
 800943a:	2b30      	cmp	r3, #48	; 0x30
 800943c:	d814      	bhi.n	8009468 <UART_SetConfig+0x174>
 800943e:	2b20      	cmp	r3, #32
 8009440:	d009      	beq.n	8009456 <UART_SetConfig+0x162>
 8009442:	2b20      	cmp	r3, #32
 8009444:	d810      	bhi.n	8009468 <UART_SetConfig+0x174>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d002      	beq.n	8009450 <UART_SetConfig+0x15c>
 800944a:	2b10      	cmp	r3, #16
 800944c:	d006      	beq.n	800945c <UART_SetConfig+0x168>
 800944e:	e00b      	b.n	8009468 <UART_SetConfig+0x174>
 8009450:	2300      	movs	r3, #0
 8009452:	77fb      	strb	r3, [r7, #31]
 8009454:	e0f2      	b.n	800963c <UART_SetConfig+0x348>
 8009456:	2302      	movs	r3, #2
 8009458:	77fb      	strb	r3, [r7, #31]
 800945a:	e0ef      	b.n	800963c <UART_SetConfig+0x348>
 800945c:	2304      	movs	r3, #4
 800945e:	77fb      	strb	r3, [r7, #31]
 8009460:	e0ec      	b.n	800963c <UART_SetConfig+0x348>
 8009462:	2308      	movs	r3, #8
 8009464:	77fb      	strb	r3, [r7, #31]
 8009466:	e0e9      	b.n	800963c <UART_SetConfig+0x348>
 8009468:	2310      	movs	r3, #16
 800946a:	77fb      	strb	r3, [r7, #31]
 800946c:	e0e6      	b.n	800963c <UART_SetConfig+0x348>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a56      	ldr	r2, [pc, #344]	; (80095cc <UART_SetConfig+0x2d8>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d120      	bne.n	80094ba <UART_SetConfig+0x1c6>
 8009478:	4b51      	ldr	r3, [pc, #324]	; (80095c0 <UART_SetConfig+0x2cc>)
 800947a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800947e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009482:	2bc0      	cmp	r3, #192	; 0xc0
 8009484:	d013      	beq.n	80094ae <UART_SetConfig+0x1ba>
 8009486:	2bc0      	cmp	r3, #192	; 0xc0
 8009488:	d814      	bhi.n	80094b4 <UART_SetConfig+0x1c0>
 800948a:	2b80      	cmp	r3, #128	; 0x80
 800948c:	d009      	beq.n	80094a2 <UART_SetConfig+0x1ae>
 800948e:	2b80      	cmp	r3, #128	; 0x80
 8009490:	d810      	bhi.n	80094b4 <UART_SetConfig+0x1c0>
 8009492:	2b00      	cmp	r3, #0
 8009494:	d002      	beq.n	800949c <UART_SetConfig+0x1a8>
 8009496:	2b40      	cmp	r3, #64	; 0x40
 8009498:	d006      	beq.n	80094a8 <UART_SetConfig+0x1b4>
 800949a:	e00b      	b.n	80094b4 <UART_SetConfig+0x1c0>
 800949c:	2300      	movs	r3, #0
 800949e:	77fb      	strb	r3, [r7, #31]
 80094a0:	e0cc      	b.n	800963c <UART_SetConfig+0x348>
 80094a2:	2302      	movs	r3, #2
 80094a4:	77fb      	strb	r3, [r7, #31]
 80094a6:	e0c9      	b.n	800963c <UART_SetConfig+0x348>
 80094a8:	2304      	movs	r3, #4
 80094aa:	77fb      	strb	r3, [r7, #31]
 80094ac:	e0c6      	b.n	800963c <UART_SetConfig+0x348>
 80094ae:	2308      	movs	r3, #8
 80094b0:	77fb      	strb	r3, [r7, #31]
 80094b2:	e0c3      	b.n	800963c <UART_SetConfig+0x348>
 80094b4:	2310      	movs	r3, #16
 80094b6:	77fb      	strb	r3, [r7, #31]
 80094b8:	e0c0      	b.n	800963c <UART_SetConfig+0x348>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a44      	ldr	r2, [pc, #272]	; (80095d0 <UART_SetConfig+0x2dc>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d125      	bne.n	8009510 <UART_SetConfig+0x21c>
 80094c4:	4b3e      	ldr	r3, [pc, #248]	; (80095c0 <UART_SetConfig+0x2cc>)
 80094c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094d2:	d017      	beq.n	8009504 <UART_SetConfig+0x210>
 80094d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094d8:	d817      	bhi.n	800950a <UART_SetConfig+0x216>
 80094da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094de:	d00b      	beq.n	80094f8 <UART_SetConfig+0x204>
 80094e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094e4:	d811      	bhi.n	800950a <UART_SetConfig+0x216>
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d003      	beq.n	80094f2 <UART_SetConfig+0x1fe>
 80094ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ee:	d006      	beq.n	80094fe <UART_SetConfig+0x20a>
 80094f0:	e00b      	b.n	800950a <UART_SetConfig+0x216>
 80094f2:	2300      	movs	r3, #0
 80094f4:	77fb      	strb	r3, [r7, #31]
 80094f6:	e0a1      	b.n	800963c <UART_SetConfig+0x348>
 80094f8:	2302      	movs	r3, #2
 80094fa:	77fb      	strb	r3, [r7, #31]
 80094fc:	e09e      	b.n	800963c <UART_SetConfig+0x348>
 80094fe:	2304      	movs	r3, #4
 8009500:	77fb      	strb	r3, [r7, #31]
 8009502:	e09b      	b.n	800963c <UART_SetConfig+0x348>
 8009504:	2308      	movs	r3, #8
 8009506:	77fb      	strb	r3, [r7, #31]
 8009508:	e098      	b.n	800963c <UART_SetConfig+0x348>
 800950a:	2310      	movs	r3, #16
 800950c:	77fb      	strb	r3, [r7, #31]
 800950e:	e095      	b.n	800963c <UART_SetConfig+0x348>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a2f      	ldr	r2, [pc, #188]	; (80095d4 <UART_SetConfig+0x2e0>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d125      	bne.n	8009566 <UART_SetConfig+0x272>
 800951a:	4b29      	ldr	r3, [pc, #164]	; (80095c0 <UART_SetConfig+0x2cc>)
 800951c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009520:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009524:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009528:	d017      	beq.n	800955a <UART_SetConfig+0x266>
 800952a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800952e:	d817      	bhi.n	8009560 <UART_SetConfig+0x26c>
 8009530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009534:	d00b      	beq.n	800954e <UART_SetConfig+0x25a>
 8009536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800953a:	d811      	bhi.n	8009560 <UART_SetConfig+0x26c>
 800953c:	2b00      	cmp	r3, #0
 800953e:	d003      	beq.n	8009548 <UART_SetConfig+0x254>
 8009540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009544:	d006      	beq.n	8009554 <UART_SetConfig+0x260>
 8009546:	e00b      	b.n	8009560 <UART_SetConfig+0x26c>
 8009548:	2301      	movs	r3, #1
 800954a:	77fb      	strb	r3, [r7, #31]
 800954c:	e076      	b.n	800963c <UART_SetConfig+0x348>
 800954e:	2302      	movs	r3, #2
 8009550:	77fb      	strb	r3, [r7, #31]
 8009552:	e073      	b.n	800963c <UART_SetConfig+0x348>
 8009554:	2304      	movs	r3, #4
 8009556:	77fb      	strb	r3, [r7, #31]
 8009558:	e070      	b.n	800963c <UART_SetConfig+0x348>
 800955a:	2308      	movs	r3, #8
 800955c:	77fb      	strb	r3, [r7, #31]
 800955e:	e06d      	b.n	800963c <UART_SetConfig+0x348>
 8009560:	2310      	movs	r3, #16
 8009562:	77fb      	strb	r3, [r7, #31]
 8009564:	e06a      	b.n	800963c <UART_SetConfig+0x348>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a1b      	ldr	r2, [pc, #108]	; (80095d8 <UART_SetConfig+0x2e4>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d138      	bne.n	80095e2 <UART_SetConfig+0x2ee>
 8009570:	4b13      	ldr	r3, [pc, #76]	; (80095c0 <UART_SetConfig+0x2cc>)
 8009572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009576:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800957a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800957e:	d017      	beq.n	80095b0 <UART_SetConfig+0x2bc>
 8009580:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009584:	d82a      	bhi.n	80095dc <UART_SetConfig+0x2e8>
 8009586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800958a:	d00b      	beq.n	80095a4 <UART_SetConfig+0x2b0>
 800958c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009590:	d824      	bhi.n	80095dc <UART_SetConfig+0x2e8>
 8009592:	2b00      	cmp	r3, #0
 8009594:	d003      	beq.n	800959e <UART_SetConfig+0x2aa>
 8009596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800959a:	d006      	beq.n	80095aa <UART_SetConfig+0x2b6>
 800959c:	e01e      	b.n	80095dc <UART_SetConfig+0x2e8>
 800959e:	2300      	movs	r3, #0
 80095a0:	77fb      	strb	r3, [r7, #31]
 80095a2:	e04b      	b.n	800963c <UART_SetConfig+0x348>
 80095a4:	2302      	movs	r3, #2
 80095a6:	77fb      	strb	r3, [r7, #31]
 80095a8:	e048      	b.n	800963c <UART_SetConfig+0x348>
 80095aa:	2304      	movs	r3, #4
 80095ac:	77fb      	strb	r3, [r7, #31]
 80095ae:	e045      	b.n	800963c <UART_SetConfig+0x348>
 80095b0:	2308      	movs	r3, #8
 80095b2:	77fb      	strb	r3, [r7, #31]
 80095b4:	e042      	b.n	800963c <UART_SetConfig+0x348>
 80095b6:	bf00      	nop
 80095b8:	efff69f3 	.word	0xefff69f3
 80095bc:	40011000 	.word	0x40011000
 80095c0:	40023800 	.word	0x40023800
 80095c4:	40004400 	.word	0x40004400
 80095c8:	40004800 	.word	0x40004800
 80095cc:	40004c00 	.word	0x40004c00
 80095d0:	40005000 	.word	0x40005000
 80095d4:	40011400 	.word	0x40011400
 80095d8:	40007800 	.word	0x40007800
 80095dc:	2310      	movs	r3, #16
 80095de:	77fb      	strb	r3, [r7, #31]
 80095e0:	e02c      	b.n	800963c <UART_SetConfig+0x348>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a72      	ldr	r2, [pc, #456]	; (80097b0 <UART_SetConfig+0x4bc>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d125      	bne.n	8009638 <UART_SetConfig+0x344>
 80095ec:	4b71      	ldr	r3, [pc, #452]	; (80097b4 <UART_SetConfig+0x4c0>)
 80095ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80095f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80095fa:	d017      	beq.n	800962c <UART_SetConfig+0x338>
 80095fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009600:	d817      	bhi.n	8009632 <UART_SetConfig+0x33e>
 8009602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009606:	d00b      	beq.n	8009620 <UART_SetConfig+0x32c>
 8009608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800960c:	d811      	bhi.n	8009632 <UART_SetConfig+0x33e>
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <UART_SetConfig+0x326>
 8009612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009616:	d006      	beq.n	8009626 <UART_SetConfig+0x332>
 8009618:	e00b      	b.n	8009632 <UART_SetConfig+0x33e>
 800961a:	2300      	movs	r3, #0
 800961c:	77fb      	strb	r3, [r7, #31]
 800961e:	e00d      	b.n	800963c <UART_SetConfig+0x348>
 8009620:	2302      	movs	r3, #2
 8009622:	77fb      	strb	r3, [r7, #31]
 8009624:	e00a      	b.n	800963c <UART_SetConfig+0x348>
 8009626:	2304      	movs	r3, #4
 8009628:	77fb      	strb	r3, [r7, #31]
 800962a:	e007      	b.n	800963c <UART_SetConfig+0x348>
 800962c:	2308      	movs	r3, #8
 800962e:	77fb      	strb	r3, [r7, #31]
 8009630:	e004      	b.n	800963c <UART_SetConfig+0x348>
 8009632:	2310      	movs	r3, #16
 8009634:	77fb      	strb	r3, [r7, #31]
 8009636:	e001      	b.n	800963c <UART_SetConfig+0x348>
 8009638:	2310      	movs	r3, #16
 800963a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009644:	d15b      	bne.n	80096fe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009646:	7ffb      	ldrb	r3, [r7, #31]
 8009648:	2b08      	cmp	r3, #8
 800964a:	d828      	bhi.n	800969e <UART_SetConfig+0x3aa>
 800964c:	a201      	add	r2, pc, #4	; (adr r2, 8009654 <UART_SetConfig+0x360>)
 800964e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009652:	bf00      	nop
 8009654:	08009679 	.word	0x08009679
 8009658:	08009681 	.word	0x08009681
 800965c:	08009689 	.word	0x08009689
 8009660:	0800969f 	.word	0x0800969f
 8009664:	0800968f 	.word	0x0800968f
 8009668:	0800969f 	.word	0x0800969f
 800966c:	0800969f 	.word	0x0800969f
 8009670:	0800969f 	.word	0x0800969f
 8009674:	08009697 	.word	0x08009697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009678:	f7fe f90a 	bl	8007890 <HAL_RCC_GetPCLK1Freq>
 800967c:	61b8      	str	r0, [r7, #24]
        break;
 800967e:	e013      	b.n	80096a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009680:	f7fe f91a 	bl	80078b8 <HAL_RCC_GetPCLK2Freq>
 8009684:	61b8      	str	r0, [r7, #24]
        break;
 8009686:	e00f      	b.n	80096a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009688:	4b4b      	ldr	r3, [pc, #300]	; (80097b8 <UART_SetConfig+0x4c4>)
 800968a:	61bb      	str	r3, [r7, #24]
        break;
 800968c:	e00c      	b.n	80096a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800968e:	f7fd ffed 	bl	800766c <HAL_RCC_GetSysClockFreq>
 8009692:	61b8      	str	r0, [r7, #24]
        break;
 8009694:	e008      	b.n	80096a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800969a:	61bb      	str	r3, [r7, #24]
        break;
 800969c:	e004      	b.n	80096a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800969e:	2300      	movs	r3, #0
 80096a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	77bb      	strb	r3, [r7, #30]
        break;
 80096a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d074      	beq.n	8009798 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	005a      	lsls	r2, r3, #1
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	085b      	lsrs	r3, r3, #1
 80096b8:	441a      	add	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	fbb2 f3f3 	udiv	r3, r2, r3
 80096c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	2b0f      	cmp	r3, #15
 80096c8:	d916      	bls.n	80096f8 <UART_SetConfig+0x404>
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096d0:	d212      	bcs.n	80096f8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	f023 030f 	bic.w	r3, r3, #15
 80096da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	085b      	lsrs	r3, r3, #1
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	f003 0307 	and.w	r3, r3, #7
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	89fb      	ldrh	r3, [r7, #14]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	89fa      	ldrh	r2, [r7, #14]
 80096f4:	60da      	str	r2, [r3, #12]
 80096f6:	e04f      	b.n	8009798 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	77bb      	strb	r3, [r7, #30]
 80096fc:	e04c      	b.n	8009798 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80096fe:	7ffb      	ldrb	r3, [r7, #31]
 8009700:	2b08      	cmp	r3, #8
 8009702:	d828      	bhi.n	8009756 <UART_SetConfig+0x462>
 8009704:	a201      	add	r2, pc, #4	; (adr r2, 800970c <UART_SetConfig+0x418>)
 8009706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970a:	bf00      	nop
 800970c:	08009731 	.word	0x08009731
 8009710:	08009739 	.word	0x08009739
 8009714:	08009741 	.word	0x08009741
 8009718:	08009757 	.word	0x08009757
 800971c:	08009747 	.word	0x08009747
 8009720:	08009757 	.word	0x08009757
 8009724:	08009757 	.word	0x08009757
 8009728:	08009757 	.word	0x08009757
 800972c:	0800974f 	.word	0x0800974f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009730:	f7fe f8ae 	bl	8007890 <HAL_RCC_GetPCLK1Freq>
 8009734:	61b8      	str	r0, [r7, #24]
        break;
 8009736:	e013      	b.n	8009760 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009738:	f7fe f8be 	bl	80078b8 <HAL_RCC_GetPCLK2Freq>
 800973c:	61b8      	str	r0, [r7, #24]
        break;
 800973e:	e00f      	b.n	8009760 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009740:	4b1d      	ldr	r3, [pc, #116]	; (80097b8 <UART_SetConfig+0x4c4>)
 8009742:	61bb      	str	r3, [r7, #24]
        break;
 8009744:	e00c      	b.n	8009760 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009746:	f7fd ff91 	bl	800766c <HAL_RCC_GetSysClockFreq>
 800974a:	61b8      	str	r0, [r7, #24]
        break;
 800974c:	e008      	b.n	8009760 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800974e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009752:	61bb      	str	r3, [r7, #24]
        break;
 8009754:	e004      	b.n	8009760 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009756:	2300      	movs	r3, #0
 8009758:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	77bb      	strb	r3, [r7, #30]
        break;
 800975e:	bf00      	nop
    }

    if (pclk != 0U)
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d018      	beq.n	8009798 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	085a      	lsrs	r2, r3, #1
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	441a      	add	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	fbb2 f3f3 	udiv	r3, r2, r3
 8009778:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	2b0f      	cmp	r3, #15
 800977e:	d909      	bls.n	8009794 <UART_SetConfig+0x4a0>
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009786:	d205      	bcs.n	8009794 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	b29a      	uxth	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	60da      	str	r2, [r3, #12]
 8009792:	e001      	b.n	8009798 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80097a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3720      	adds	r7, #32
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	40007c00 	.word	0x40007c00
 80097b4:	40023800 	.word	0x40023800
 80097b8:	00f42400 	.word	0x00f42400

080097bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c8:	f003 0301 	and.w	r3, r3, #1
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00a      	beq.n	80097e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	430a      	orrs	r2, r1
 80097e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ea:	f003 0302 	and.w	r3, r3, #2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00a      	beq.n	8009808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	430a      	orrs	r2, r1
 8009806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	f003 0304 	and.w	r3, r3, #4
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00a      	beq.n	800982a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	f003 0308 	and.w	r3, r3, #8
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00a      	beq.n	800984c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009850:	f003 0310 	and.w	r3, r3, #16
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00a      	beq.n	800986e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	430a      	orrs	r2, r1
 800986c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009872:	f003 0320 	and.w	r3, r3, #32
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	430a      	orrs	r2, r1
 800988e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009898:	2b00      	cmp	r3, #0
 800989a:	d01a      	beq.n	80098d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098ba:	d10a      	bne.n	80098d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	430a      	orrs	r2, r1
 80098d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00a      	beq.n	80098f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	430a      	orrs	r2, r1
 80098f2:	605a      	str	r2, [r3, #4]
  }
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af02      	add	r7, sp, #8
 8009906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009910:	f7fb fff6 	bl	8005900 <HAL_GetTick>
 8009914:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0308 	and.w	r3, r3, #8
 8009920:	2b08      	cmp	r3, #8
 8009922:	d10e      	bne.n	8009942 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009924:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f831 	bl	800999a <UART_WaitOnFlagUntilTimeout>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800993e:	2303      	movs	r3, #3
 8009940:	e027      	b.n	8009992 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f003 0304 	and.w	r3, r3, #4
 800994c:	2b04      	cmp	r3, #4
 800994e:	d10e      	bne.n	800996e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009950:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009954:	9300      	str	r3, [sp, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f81b 	bl	800999a <UART_WaitOnFlagUntilTimeout>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800996a:	2303      	movs	r3, #3
 800996c:	e011      	b.n	8009992 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2220      	movs	r2, #32
 8009972:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2220      	movs	r2, #32
 8009978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b09c      	sub	sp, #112	; 0x70
 800999e:	af00      	add	r7, sp, #0
 80099a0:	60f8      	str	r0, [r7, #12]
 80099a2:	60b9      	str	r1, [r7, #8]
 80099a4:	603b      	str	r3, [r7, #0]
 80099a6:	4613      	mov	r3, r2
 80099a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099aa:	e0a7      	b.n	8009afc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099b2:	f000 80a3 	beq.w	8009afc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099b6:	f7fb ffa3 	bl	8005900 <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d302      	bcc.n	80099cc <UART_WaitOnFlagUntilTimeout+0x32>
 80099c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d13f      	bne.n	8009a4c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099d4:	e853 3f00 	ldrex	r3, [r3]
 80099d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80099da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80099e0:	667b      	str	r3, [r7, #100]	; 0x64
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	461a      	mov	r2, r3
 80099e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80099f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80099f2:	e841 2300 	strex	r3, r2, [r1]
 80099f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80099f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1e6      	bne.n	80099cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3308      	adds	r3, #8
 8009a04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a08:	e853 3f00 	ldrex	r3, [r3]
 8009a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a10:	f023 0301 	bic.w	r3, r3, #1
 8009a14:	663b      	str	r3, [r7, #96]	; 0x60
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3308      	adds	r3, #8
 8009a1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009a1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009a20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a26:	e841 2300 	strex	r3, r2, [r1]
 8009a2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1e5      	bne.n	80099fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2220      	movs	r2, #32
 8009a36:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2220      	movs	r2, #32
 8009a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	e068      	b.n	8009b1e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0304 	and.w	r3, r3, #4
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d050      	beq.n	8009afc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	69db      	ldr	r3, [r3, #28]
 8009a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a68:	d148      	bne.n	8009afc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a72:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7c:	e853 3f00 	ldrex	r3, [r3]
 8009a80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a92:	637b      	str	r3, [r7, #52]	; 0x34
 8009a94:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a9a:	e841 2300 	strex	r3, r2, [r1]
 8009a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1e6      	bne.n	8009a74 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	3308      	adds	r3, #8
 8009aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	e853 3f00 	ldrex	r3, [r3]
 8009ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	f023 0301 	bic.w	r3, r3, #1
 8009abc:	66bb      	str	r3, [r7, #104]	; 0x68
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	3308      	adds	r3, #8
 8009ac4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ac6:	623a      	str	r2, [r7, #32]
 8009ac8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aca:	69f9      	ldr	r1, [r7, #28]
 8009acc:	6a3a      	ldr	r2, [r7, #32]
 8009ace:	e841 2300 	strex	r3, r2, [r1]
 8009ad2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1e5      	bne.n	8009aa6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2220      	movs	r2, #32
 8009ade:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2220      	movs	r2, #32
 8009ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2220      	movs	r2, #32
 8009aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009af8:	2303      	movs	r3, #3
 8009afa:	e010      	b.n	8009b1e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	69da      	ldr	r2, [r3, #28]
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	4013      	ands	r3, r2
 8009b06:	68ba      	ldr	r2, [r7, #8]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	bf0c      	ite	eq
 8009b0c:	2301      	moveq	r3, #1
 8009b0e:	2300      	movne	r3, #0
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	461a      	mov	r2, r3
 8009b14:	79fb      	ldrb	r3, [r7, #7]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	f43f af48 	beq.w	80099ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3770      	adds	r7, #112	; 0x70
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
	...

08009b28 <calloc>:
 8009b28:	4b02      	ldr	r3, [pc, #8]	; (8009b34 <calloc+0xc>)
 8009b2a:	460a      	mov	r2, r1
 8009b2c:	4601      	mov	r1, r0
 8009b2e:	6818      	ldr	r0, [r3, #0]
 8009b30:	f000 b802 	b.w	8009b38 <_calloc_r>
 8009b34:	200000d4 	.word	0x200000d4

08009b38 <_calloc_r>:
 8009b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b3a:	fba1 2402 	umull	r2, r4, r1, r2
 8009b3e:	b94c      	cbnz	r4, 8009b54 <_calloc_r+0x1c>
 8009b40:	4611      	mov	r1, r2
 8009b42:	9201      	str	r2, [sp, #4]
 8009b44:	f000 faea 	bl	800a11c <_malloc_r>
 8009b48:	9a01      	ldr	r2, [sp, #4]
 8009b4a:	4605      	mov	r5, r0
 8009b4c:	b930      	cbnz	r0, 8009b5c <_calloc_r+0x24>
 8009b4e:	4628      	mov	r0, r5
 8009b50:	b003      	add	sp, #12
 8009b52:	bd30      	pop	{r4, r5, pc}
 8009b54:	220c      	movs	r2, #12
 8009b56:	6002      	str	r2, [r0, #0]
 8009b58:	2500      	movs	r5, #0
 8009b5a:	e7f8      	b.n	8009b4e <_calloc_r+0x16>
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	f000 fe35 	bl	800a7cc <memset>
 8009b62:	e7f4      	b.n	8009b4e <_calloc_r+0x16>

08009b64 <__cvt>:
 8009b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b66:	ed2d 8b02 	vpush	{d8}
 8009b6a:	eeb0 8b40 	vmov.f64	d8, d0
 8009b6e:	b085      	sub	sp, #20
 8009b70:	4617      	mov	r7, r2
 8009b72:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009b74:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009b76:	ee18 2a90 	vmov	r2, s17
 8009b7a:	f025 0520 	bic.w	r5, r5, #32
 8009b7e:	2a00      	cmp	r2, #0
 8009b80:	bfb6      	itet	lt
 8009b82:	222d      	movlt	r2, #45	; 0x2d
 8009b84:	2200      	movge	r2, #0
 8009b86:	eeb1 8b40 	vneglt.f64	d8, d0
 8009b8a:	2d46      	cmp	r5, #70	; 0x46
 8009b8c:	460c      	mov	r4, r1
 8009b8e:	701a      	strb	r2, [r3, #0]
 8009b90:	d004      	beq.n	8009b9c <__cvt+0x38>
 8009b92:	2d45      	cmp	r5, #69	; 0x45
 8009b94:	d100      	bne.n	8009b98 <__cvt+0x34>
 8009b96:	3401      	adds	r4, #1
 8009b98:	2102      	movs	r1, #2
 8009b9a:	e000      	b.n	8009b9e <__cvt+0x3a>
 8009b9c:	2103      	movs	r1, #3
 8009b9e:	ab03      	add	r3, sp, #12
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	ab02      	add	r3, sp, #8
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	4633      	mov	r3, r6
 8009baa:	eeb0 0b48 	vmov.f64	d0, d8
 8009bae:	f000 ff0b 	bl	800a9c8 <_dtoa_r>
 8009bb2:	2d47      	cmp	r5, #71	; 0x47
 8009bb4:	d101      	bne.n	8009bba <__cvt+0x56>
 8009bb6:	07fb      	lsls	r3, r7, #31
 8009bb8:	d51a      	bpl.n	8009bf0 <__cvt+0x8c>
 8009bba:	2d46      	cmp	r5, #70	; 0x46
 8009bbc:	eb00 0204 	add.w	r2, r0, r4
 8009bc0:	d10c      	bne.n	8009bdc <__cvt+0x78>
 8009bc2:	7803      	ldrb	r3, [r0, #0]
 8009bc4:	2b30      	cmp	r3, #48	; 0x30
 8009bc6:	d107      	bne.n	8009bd8 <__cvt+0x74>
 8009bc8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd0:	bf1c      	itt	ne
 8009bd2:	f1c4 0401 	rsbne	r4, r4, #1
 8009bd6:	6034      	strne	r4, [r6, #0]
 8009bd8:	6833      	ldr	r3, [r6, #0]
 8009bda:	441a      	add	r2, r3
 8009bdc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009be4:	bf08      	it	eq
 8009be6:	9203      	streq	r2, [sp, #12]
 8009be8:	2130      	movs	r1, #48	; 0x30
 8009bea:	9b03      	ldr	r3, [sp, #12]
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d307      	bcc.n	8009c00 <__cvt+0x9c>
 8009bf0:	9b03      	ldr	r3, [sp, #12]
 8009bf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bf4:	1a1b      	subs	r3, r3, r0
 8009bf6:	6013      	str	r3, [r2, #0]
 8009bf8:	b005      	add	sp, #20
 8009bfa:	ecbd 8b02 	vpop	{d8}
 8009bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c00:	1c5c      	adds	r4, r3, #1
 8009c02:	9403      	str	r4, [sp, #12]
 8009c04:	7019      	strb	r1, [r3, #0]
 8009c06:	e7f0      	b.n	8009bea <__cvt+0x86>

08009c08 <__exponent>:
 8009c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2900      	cmp	r1, #0
 8009c0e:	bfb8      	it	lt
 8009c10:	4249      	neglt	r1, r1
 8009c12:	f803 2b02 	strb.w	r2, [r3], #2
 8009c16:	bfb4      	ite	lt
 8009c18:	222d      	movlt	r2, #45	; 0x2d
 8009c1a:	222b      	movge	r2, #43	; 0x2b
 8009c1c:	2909      	cmp	r1, #9
 8009c1e:	7042      	strb	r2, [r0, #1]
 8009c20:	dd2a      	ble.n	8009c78 <__exponent+0x70>
 8009c22:	f10d 0207 	add.w	r2, sp, #7
 8009c26:	4617      	mov	r7, r2
 8009c28:	260a      	movs	r6, #10
 8009c2a:	4694      	mov	ip, r2
 8009c2c:	fb91 f5f6 	sdiv	r5, r1, r6
 8009c30:	fb06 1415 	mls	r4, r6, r5, r1
 8009c34:	3430      	adds	r4, #48	; 0x30
 8009c36:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	2c63      	cmp	r4, #99	; 0x63
 8009c3e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009c42:	4629      	mov	r1, r5
 8009c44:	dcf1      	bgt.n	8009c2a <__exponent+0x22>
 8009c46:	3130      	adds	r1, #48	; 0x30
 8009c48:	f1ac 0402 	sub.w	r4, ip, #2
 8009c4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009c50:	1c41      	adds	r1, r0, #1
 8009c52:	4622      	mov	r2, r4
 8009c54:	42ba      	cmp	r2, r7
 8009c56:	d30a      	bcc.n	8009c6e <__exponent+0x66>
 8009c58:	f10d 0209 	add.w	r2, sp, #9
 8009c5c:	eba2 020c 	sub.w	r2, r2, ip
 8009c60:	42bc      	cmp	r4, r7
 8009c62:	bf88      	it	hi
 8009c64:	2200      	movhi	r2, #0
 8009c66:	4413      	add	r3, r2
 8009c68:	1a18      	subs	r0, r3, r0
 8009c6a:	b003      	add	sp, #12
 8009c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009c72:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009c76:	e7ed      	b.n	8009c54 <__exponent+0x4c>
 8009c78:	2330      	movs	r3, #48	; 0x30
 8009c7a:	3130      	adds	r1, #48	; 0x30
 8009c7c:	7083      	strb	r3, [r0, #2]
 8009c7e:	70c1      	strb	r1, [r0, #3]
 8009c80:	1d03      	adds	r3, r0, #4
 8009c82:	e7f1      	b.n	8009c68 <__exponent+0x60>
 8009c84:	0000      	movs	r0, r0
	...

08009c88 <_printf_float>:
 8009c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8c:	b08b      	sub	sp, #44	; 0x2c
 8009c8e:	460c      	mov	r4, r1
 8009c90:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009c94:	4616      	mov	r6, r2
 8009c96:	461f      	mov	r7, r3
 8009c98:	4605      	mov	r5, r0
 8009c9a:	f000 fd9f 	bl	800a7dc <_localeconv_r>
 8009c9e:	f8d0 b000 	ldr.w	fp, [r0]
 8009ca2:	4658      	mov	r0, fp
 8009ca4:	f7f6 fb1c 	bl	80002e0 <strlen>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	9308      	str	r3, [sp, #32]
 8009cac:	f8d8 3000 	ldr.w	r3, [r8]
 8009cb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009cb4:	6822      	ldr	r2, [r4, #0]
 8009cb6:	3307      	adds	r3, #7
 8009cb8:	f023 0307 	bic.w	r3, r3, #7
 8009cbc:	f103 0108 	add.w	r1, r3, #8
 8009cc0:	f8c8 1000 	str.w	r1, [r8]
 8009cc4:	ed93 0b00 	vldr	d0, [r3]
 8009cc8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8009f28 <_printf_float+0x2a0>
 8009ccc:	eeb0 7bc0 	vabs.f64	d7, d0
 8009cd0:	eeb4 7b46 	vcmp.f64	d7, d6
 8009cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8009cdc:	4682      	mov	sl, r0
 8009cde:	dd24      	ble.n	8009d2a <_printf_float+0xa2>
 8009ce0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce8:	d502      	bpl.n	8009cf0 <_printf_float+0x68>
 8009cea:	232d      	movs	r3, #45	; 0x2d
 8009cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cf0:	498f      	ldr	r1, [pc, #572]	; (8009f30 <_printf_float+0x2a8>)
 8009cf2:	4b90      	ldr	r3, [pc, #576]	; (8009f34 <_printf_float+0x2ac>)
 8009cf4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009cf8:	bf94      	ite	ls
 8009cfa:	4688      	movls	r8, r1
 8009cfc:	4698      	movhi	r8, r3
 8009cfe:	2303      	movs	r3, #3
 8009d00:	6123      	str	r3, [r4, #16]
 8009d02:	f022 0204 	bic.w	r2, r2, #4
 8009d06:	2300      	movs	r3, #0
 8009d08:	6022      	str	r2, [r4, #0]
 8009d0a:	9304      	str	r3, [sp, #16]
 8009d0c:	9700      	str	r7, [sp, #0]
 8009d0e:	4633      	mov	r3, r6
 8009d10:	aa09      	add	r2, sp, #36	; 0x24
 8009d12:	4621      	mov	r1, r4
 8009d14:	4628      	mov	r0, r5
 8009d16:	f000 fa81 	bl	800a21c <_printf_common>
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	f040 808a 	bne.w	8009e34 <_printf_float+0x1ac>
 8009d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d24:	b00b      	add	sp, #44	; 0x2c
 8009d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d2a:	eeb4 0b40 	vcmp.f64	d0, d0
 8009d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d32:	d709      	bvc.n	8009d48 <_printf_float+0xc0>
 8009d34:	ee10 3a90 	vmov	r3, s1
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	bfbc      	itt	lt
 8009d3c:	232d      	movlt	r3, #45	; 0x2d
 8009d3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d42:	497d      	ldr	r1, [pc, #500]	; (8009f38 <_printf_float+0x2b0>)
 8009d44:	4b7d      	ldr	r3, [pc, #500]	; (8009f3c <_printf_float+0x2b4>)
 8009d46:	e7d5      	b.n	8009cf4 <_printf_float+0x6c>
 8009d48:	6863      	ldr	r3, [r4, #4]
 8009d4a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009d4e:	9104      	str	r1, [sp, #16]
 8009d50:	1c59      	adds	r1, r3, #1
 8009d52:	d13c      	bne.n	8009dce <_printf_float+0x146>
 8009d54:	2306      	movs	r3, #6
 8009d56:	6063      	str	r3, [r4, #4]
 8009d58:	2300      	movs	r3, #0
 8009d5a:	9303      	str	r3, [sp, #12]
 8009d5c:	ab08      	add	r3, sp, #32
 8009d5e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009d62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d66:	ab07      	add	r3, sp, #28
 8009d68:	6861      	ldr	r1, [r4, #4]
 8009d6a:	9300      	str	r3, [sp, #0]
 8009d6c:	6022      	str	r2, [r4, #0]
 8009d6e:	f10d 031b 	add.w	r3, sp, #27
 8009d72:	4628      	mov	r0, r5
 8009d74:	f7ff fef6 	bl	8009b64 <__cvt>
 8009d78:	9b04      	ldr	r3, [sp, #16]
 8009d7a:	9907      	ldr	r1, [sp, #28]
 8009d7c:	2b47      	cmp	r3, #71	; 0x47
 8009d7e:	4680      	mov	r8, r0
 8009d80:	d108      	bne.n	8009d94 <_printf_float+0x10c>
 8009d82:	1cc8      	adds	r0, r1, #3
 8009d84:	db02      	blt.n	8009d8c <_printf_float+0x104>
 8009d86:	6863      	ldr	r3, [r4, #4]
 8009d88:	4299      	cmp	r1, r3
 8009d8a:	dd41      	ble.n	8009e10 <_printf_float+0x188>
 8009d8c:	f1a9 0902 	sub.w	r9, r9, #2
 8009d90:	fa5f f989 	uxtb.w	r9, r9
 8009d94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009d98:	d820      	bhi.n	8009ddc <_printf_float+0x154>
 8009d9a:	3901      	subs	r1, #1
 8009d9c:	464a      	mov	r2, r9
 8009d9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009da2:	9107      	str	r1, [sp, #28]
 8009da4:	f7ff ff30 	bl	8009c08 <__exponent>
 8009da8:	9a08      	ldr	r2, [sp, #32]
 8009daa:	9004      	str	r0, [sp, #16]
 8009dac:	1813      	adds	r3, r2, r0
 8009dae:	2a01      	cmp	r2, #1
 8009db0:	6123      	str	r3, [r4, #16]
 8009db2:	dc02      	bgt.n	8009dba <_printf_float+0x132>
 8009db4:	6822      	ldr	r2, [r4, #0]
 8009db6:	07d2      	lsls	r2, r2, #31
 8009db8:	d501      	bpl.n	8009dbe <_printf_float+0x136>
 8009dba:	3301      	adds	r3, #1
 8009dbc:	6123      	str	r3, [r4, #16]
 8009dbe:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d0a2      	beq.n	8009d0c <_printf_float+0x84>
 8009dc6:	232d      	movs	r3, #45	; 0x2d
 8009dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dcc:	e79e      	b.n	8009d0c <_printf_float+0x84>
 8009dce:	9904      	ldr	r1, [sp, #16]
 8009dd0:	2947      	cmp	r1, #71	; 0x47
 8009dd2:	d1c1      	bne.n	8009d58 <_printf_float+0xd0>
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1bf      	bne.n	8009d58 <_printf_float+0xd0>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e7bc      	b.n	8009d56 <_printf_float+0xce>
 8009ddc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009de0:	d118      	bne.n	8009e14 <_printf_float+0x18c>
 8009de2:	2900      	cmp	r1, #0
 8009de4:	6863      	ldr	r3, [r4, #4]
 8009de6:	dd0b      	ble.n	8009e00 <_printf_float+0x178>
 8009de8:	6121      	str	r1, [r4, #16]
 8009dea:	b913      	cbnz	r3, 8009df2 <_printf_float+0x16a>
 8009dec:	6822      	ldr	r2, [r4, #0]
 8009dee:	07d0      	lsls	r0, r2, #31
 8009df0:	d502      	bpl.n	8009df8 <_printf_float+0x170>
 8009df2:	3301      	adds	r3, #1
 8009df4:	440b      	add	r3, r1
 8009df6:	6123      	str	r3, [r4, #16]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	65a1      	str	r1, [r4, #88]	; 0x58
 8009dfc:	9304      	str	r3, [sp, #16]
 8009dfe:	e7de      	b.n	8009dbe <_printf_float+0x136>
 8009e00:	b913      	cbnz	r3, 8009e08 <_printf_float+0x180>
 8009e02:	6822      	ldr	r2, [r4, #0]
 8009e04:	07d2      	lsls	r2, r2, #31
 8009e06:	d501      	bpl.n	8009e0c <_printf_float+0x184>
 8009e08:	3302      	adds	r3, #2
 8009e0a:	e7f4      	b.n	8009df6 <_printf_float+0x16e>
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e7f2      	b.n	8009df6 <_printf_float+0x16e>
 8009e10:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009e14:	9b08      	ldr	r3, [sp, #32]
 8009e16:	4299      	cmp	r1, r3
 8009e18:	db05      	blt.n	8009e26 <_printf_float+0x19e>
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	6121      	str	r1, [r4, #16]
 8009e1e:	07d8      	lsls	r0, r3, #31
 8009e20:	d5ea      	bpl.n	8009df8 <_printf_float+0x170>
 8009e22:	1c4b      	adds	r3, r1, #1
 8009e24:	e7e7      	b.n	8009df6 <_printf_float+0x16e>
 8009e26:	2900      	cmp	r1, #0
 8009e28:	bfd4      	ite	le
 8009e2a:	f1c1 0202 	rsble	r2, r1, #2
 8009e2e:	2201      	movgt	r2, #1
 8009e30:	4413      	add	r3, r2
 8009e32:	e7e0      	b.n	8009df6 <_printf_float+0x16e>
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	055a      	lsls	r2, r3, #21
 8009e38:	d407      	bmi.n	8009e4a <_printf_float+0x1c2>
 8009e3a:	6923      	ldr	r3, [r4, #16]
 8009e3c:	4642      	mov	r2, r8
 8009e3e:	4631      	mov	r1, r6
 8009e40:	4628      	mov	r0, r5
 8009e42:	47b8      	blx	r7
 8009e44:	3001      	adds	r0, #1
 8009e46:	d12a      	bne.n	8009e9e <_printf_float+0x216>
 8009e48:	e76a      	b.n	8009d20 <_printf_float+0x98>
 8009e4a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009e4e:	f240 80e0 	bls.w	800a012 <_printf_float+0x38a>
 8009e52:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009e56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e5e:	d133      	bne.n	8009ec8 <_printf_float+0x240>
 8009e60:	4a37      	ldr	r2, [pc, #220]	; (8009f40 <_printf_float+0x2b8>)
 8009e62:	2301      	movs	r3, #1
 8009e64:	4631      	mov	r1, r6
 8009e66:	4628      	mov	r0, r5
 8009e68:	47b8      	blx	r7
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	f43f af58 	beq.w	8009d20 <_printf_float+0x98>
 8009e70:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	db02      	blt.n	8009e7e <_printf_float+0x1f6>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	07d8      	lsls	r0, r3, #31
 8009e7c:	d50f      	bpl.n	8009e9e <_printf_float+0x216>
 8009e7e:	4653      	mov	r3, sl
 8009e80:	465a      	mov	r2, fp
 8009e82:	4631      	mov	r1, r6
 8009e84:	4628      	mov	r0, r5
 8009e86:	47b8      	blx	r7
 8009e88:	3001      	adds	r0, #1
 8009e8a:	f43f af49 	beq.w	8009d20 <_printf_float+0x98>
 8009e8e:	f04f 0800 	mov.w	r8, #0
 8009e92:	f104 091a 	add.w	r9, r4, #26
 8009e96:	9b08      	ldr	r3, [sp, #32]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	4543      	cmp	r3, r8
 8009e9c:	dc09      	bgt.n	8009eb2 <_printf_float+0x22a>
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	079b      	lsls	r3, r3, #30
 8009ea2:	f100 8106 	bmi.w	800a0b2 <_printf_float+0x42a>
 8009ea6:	68e0      	ldr	r0, [r4, #12]
 8009ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eaa:	4298      	cmp	r0, r3
 8009eac:	bfb8      	it	lt
 8009eae:	4618      	movlt	r0, r3
 8009eb0:	e738      	b.n	8009d24 <_printf_float+0x9c>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	464a      	mov	r2, r9
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	4628      	mov	r0, r5
 8009eba:	47b8      	blx	r7
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	f43f af2f 	beq.w	8009d20 <_printf_float+0x98>
 8009ec2:	f108 0801 	add.w	r8, r8, #1
 8009ec6:	e7e6      	b.n	8009e96 <_printf_float+0x20e>
 8009ec8:	9b07      	ldr	r3, [sp, #28]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	dc3a      	bgt.n	8009f44 <_printf_float+0x2bc>
 8009ece:	4a1c      	ldr	r2, [pc, #112]	; (8009f40 <_printf_float+0x2b8>)
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	47b8      	blx	r7
 8009ed8:	3001      	adds	r0, #1
 8009eda:	f43f af21 	beq.w	8009d20 <_printf_float+0x98>
 8009ede:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	d102      	bne.n	8009eec <_printf_float+0x264>
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	07d9      	lsls	r1, r3, #31
 8009eea:	d5d8      	bpl.n	8009e9e <_printf_float+0x216>
 8009eec:	4653      	mov	r3, sl
 8009eee:	465a      	mov	r2, fp
 8009ef0:	4631      	mov	r1, r6
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	47b8      	blx	r7
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	f43f af12 	beq.w	8009d20 <_printf_float+0x98>
 8009efc:	f04f 0900 	mov.w	r9, #0
 8009f00:	f104 0a1a 	add.w	sl, r4, #26
 8009f04:	9b07      	ldr	r3, [sp, #28]
 8009f06:	425b      	negs	r3, r3
 8009f08:	454b      	cmp	r3, r9
 8009f0a:	dc01      	bgt.n	8009f10 <_printf_float+0x288>
 8009f0c:	9b08      	ldr	r3, [sp, #32]
 8009f0e:	e795      	b.n	8009e3c <_printf_float+0x1b4>
 8009f10:	2301      	movs	r3, #1
 8009f12:	4652      	mov	r2, sl
 8009f14:	4631      	mov	r1, r6
 8009f16:	4628      	mov	r0, r5
 8009f18:	47b8      	blx	r7
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	f43f af00 	beq.w	8009d20 <_printf_float+0x98>
 8009f20:	f109 0901 	add.w	r9, r9, #1
 8009f24:	e7ee      	b.n	8009f04 <_printf_float+0x27c>
 8009f26:	bf00      	nop
 8009f28:	ffffffff 	.word	0xffffffff
 8009f2c:	7fefffff 	.word	0x7fefffff
 8009f30:	0800ed24 	.word	0x0800ed24
 8009f34:	0800ed28 	.word	0x0800ed28
 8009f38:	0800ed2c 	.word	0x0800ed2c
 8009f3c:	0800ed30 	.word	0x0800ed30
 8009f40:	0800ed34 	.word	0x0800ed34
 8009f44:	9a08      	ldr	r2, [sp, #32]
 8009f46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	bfa8      	it	ge
 8009f4c:	461a      	movge	r2, r3
 8009f4e:	2a00      	cmp	r2, #0
 8009f50:	4691      	mov	r9, r2
 8009f52:	dc38      	bgt.n	8009fc6 <_printf_float+0x33e>
 8009f54:	2300      	movs	r3, #0
 8009f56:	9305      	str	r3, [sp, #20]
 8009f58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f5c:	f104 021a 	add.w	r2, r4, #26
 8009f60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f62:	9905      	ldr	r1, [sp, #20]
 8009f64:	9304      	str	r3, [sp, #16]
 8009f66:	eba3 0309 	sub.w	r3, r3, r9
 8009f6a:	428b      	cmp	r3, r1
 8009f6c:	dc33      	bgt.n	8009fd6 <_printf_float+0x34e>
 8009f6e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	db3c      	blt.n	8009ff0 <_printf_float+0x368>
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	07da      	lsls	r2, r3, #31
 8009f7a:	d439      	bmi.n	8009ff0 <_printf_float+0x368>
 8009f7c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009f80:	eba2 0903 	sub.w	r9, r2, r3
 8009f84:	9b04      	ldr	r3, [sp, #16]
 8009f86:	1ad2      	subs	r2, r2, r3
 8009f88:	4591      	cmp	r9, r2
 8009f8a:	bfa8      	it	ge
 8009f8c:	4691      	movge	r9, r2
 8009f8e:	f1b9 0f00 	cmp.w	r9, #0
 8009f92:	dc35      	bgt.n	800a000 <_printf_float+0x378>
 8009f94:	f04f 0800 	mov.w	r8, #0
 8009f98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f9c:	f104 0a1a 	add.w	sl, r4, #26
 8009fa0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009fa4:	1a9b      	subs	r3, r3, r2
 8009fa6:	eba3 0309 	sub.w	r3, r3, r9
 8009faa:	4543      	cmp	r3, r8
 8009fac:	f77f af77 	ble.w	8009e9e <_printf_float+0x216>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	4652      	mov	r2, sl
 8009fb4:	4631      	mov	r1, r6
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	47b8      	blx	r7
 8009fba:	3001      	adds	r0, #1
 8009fbc:	f43f aeb0 	beq.w	8009d20 <_printf_float+0x98>
 8009fc0:	f108 0801 	add.w	r8, r8, #1
 8009fc4:	e7ec      	b.n	8009fa0 <_printf_float+0x318>
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	4631      	mov	r1, r6
 8009fca:	4642      	mov	r2, r8
 8009fcc:	4628      	mov	r0, r5
 8009fce:	47b8      	blx	r7
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d1bf      	bne.n	8009f54 <_printf_float+0x2cc>
 8009fd4:	e6a4      	b.n	8009d20 <_printf_float+0x98>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	4631      	mov	r1, r6
 8009fda:	4628      	mov	r0, r5
 8009fdc:	9204      	str	r2, [sp, #16]
 8009fde:	47b8      	blx	r7
 8009fe0:	3001      	adds	r0, #1
 8009fe2:	f43f ae9d 	beq.w	8009d20 <_printf_float+0x98>
 8009fe6:	9b05      	ldr	r3, [sp, #20]
 8009fe8:	9a04      	ldr	r2, [sp, #16]
 8009fea:	3301      	adds	r3, #1
 8009fec:	9305      	str	r3, [sp, #20]
 8009fee:	e7b7      	b.n	8009f60 <_printf_float+0x2d8>
 8009ff0:	4653      	mov	r3, sl
 8009ff2:	465a      	mov	r2, fp
 8009ff4:	4631      	mov	r1, r6
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	47b8      	blx	r7
 8009ffa:	3001      	adds	r0, #1
 8009ffc:	d1be      	bne.n	8009f7c <_printf_float+0x2f4>
 8009ffe:	e68f      	b.n	8009d20 <_printf_float+0x98>
 800a000:	9a04      	ldr	r2, [sp, #16]
 800a002:	464b      	mov	r3, r9
 800a004:	4442      	add	r2, r8
 800a006:	4631      	mov	r1, r6
 800a008:	4628      	mov	r0, r5
 800a00a:	47b8      	blx	r7
 800a00c:	3001      	adds	r0, #1
 800a00e:	d1c1      	bne.n	8009f94 <_printf_float+0x30c>
 800a010:	e686      	b.n	8009d20 <_printf_float+0x98>
 800a012:	9a08      	ldr	r2, [sp, #32]
 800a014:	2a01      	cmp	r2, #1
 800a016:	dc01      	bgt.n	800a01c <_printf_float+0x394>
 800a018:	07db      	lsls	r3, r3, #31
 800a01a:	d537      	bpl.n	800a08c <_printf_float+0x404>
 800a01c:	2301      	movs	r3, #1
 800a01e:	4642      	mov	r2, r8
 800a020:	4631      	mov	r1, r6
 800a022:	4628      	mov	r0, r5
 800a024:	47b8      	blx	r7
 800a026:	3001      	adds	r0, #1
 800a028:	f43f ae7a 	beq.w	8009d20 <_printf_float+0x98>
 800a02c:	4653      	mov	r3, sl
 800a02e:	465a      	mov	r2, fp
 800a030:	4631      	mov	r1, r6
 800a032:	4628      	mov	r0, r5
 800a034:	47b8      	blx	r7
 800a036:	3001      	adds	r0, #1
 800a038:	f43f ae72 	beq.w	8009d20 <_printf_float+0x98>
 800a03c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a040:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a048:	9b08      	ldr	r3, [sp, #32]
 800a04a:	d01a      	beq.n	800a082 <_printf_float+0x3fa>
 800a04c:	3b01      	subs	r3, #1
 800a04e:	f108 0201 	add.w	r2, r8, #1
 800a052:	4631      	mov	r1, r6
 800a054:	4628      	mov	r0, r5
 800a056:	47b8      	blx	r7
 800a058:	3001      	adds	r0, #1
 800a05a:	d10e      	bne.n	800a07a <_printf_float+0x3f2>
 800a05c:	e660      	b.n	8009d20 <_printf_float+0x98>
 800a05e:	2301      	movs	r3, #1
 800a060:	464a      	mov	r2, r9
 800a062:	4631      	mov	r1, r6
 800a064:	4628      	mov	r0, r5
 800a066:	47b8      	blx	r7
 800a068:	3001      	adds	r0, #1
 800a06a:	f43f ae59 	beq.w	8009d20 <_printf_float+0x98>
 800a06e:	f108 0801 	add.w	r8, r8, #1
 800a072:	9b08      	ldr	r3, [sp, #32]
 800a074:	3b01      	subs	r3, #1
 800a076:	4543      	cmp	r3, r8
 800a078:	dcf1      	bgt.n	800a05e <_printf_float+0x3d6>
 800a07a:	9b04      	ldr	r3, [sp, #16]
 800a07c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a080:	e6dd      	b.n	8009e3e <_printf_float+0x1b6>
 800a082:	f04f 0800 	mov.w	r8, #0
 800a086:	f104 091a 	add.w	r9, r4, #26
 800a08a:	e7f2      	b.n	800a072 <_printf_float+0x3ea>
 800a08c:	2301      	movs	r3, #1
 800a08e:	4642      	mov	r2, r8
 800a090:	e7df      	b.n	800a052 <_printf_float+0x3ca>
 800a092:	2301      	movs	r3, #1
 800a094:	464a      	mov	r2, r9
 800a096:	4631      	mov	r1, r6
 800a098:	4628      	mov	r0, r5
 800a09a:	47b8      	blx	r7
 800a09c:	3001      	adds	r0, #1
 800a09e:	f43f ae3f 	beq.w	8009d20 <_printf_float+0x98>
 800a0a2:	f108 0801 	add.w	r8, r8, #1
 800a0a6:	68e3      	ldr	r3, [r4, #12]
 800a0a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0aa:	1a5b      	subs	r3, r3, r1
 800a0ac:	4543      	cmp	r3, r8
 800a0ae:	dcf0      	bgt.n	800a092 <_printf_float+0x40a>
 800a0b0:	e6f9      	b.n	8009ea6 <_printf_float+0x21e>
 800a0b2:	f04f 0800 	mov.w	r8, #0
 800a0b6:	f104 0919 	add.w	r9, r4, #25
 800a0ba:	e7f4      	b.n	800a0a6 <_printf_float+0x41e>

0800a0bc <malloc>:
 800a0bc:	4b02      	ldr	r3, [pc, #8]	; (800a0c8 <malloc+0xc>)
 800a0be:	4601      	mov	r1, r0
 800a0c0:	6818      	ldr	r0, [r3, #0]
 800a0c2:	f000 b82b 	b.w	800a11c <_malloc_r>
 800a0c6:	bf00      	nop
 800a0c8:	200000d4 	.word	0x200000d4

0800a0cc <free>:
 800a0cc:	4b02      	ldr	r3, [pc, #8]	; (800a0d8 <free+0xc>)
 800a0ce:	4601      	mov	r1, r0
 800a0d0:	6818      	ldr	r0, [r3, #0]
 800a0d2:	f001 b9e5 	b.w	800b4a0 <_free_r>
 800a0d6:	bf00      	nop
 800a0d8:	200000d4 	.word	0x200000d4

0800a0dc <sbrk_aligned>:
 800a0dc:	b570      	push	{r4, r5, r6, lr}
 800a0de:	4e0e      	ldr	r6, [pc, #56]	; (800a118 <sbrk_aligned+0x3c>)
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	6831      	ldr	r1, [r6, #0]
 800a0e4:	4605      	mov	r5, r0
 800a0e6:	b911      	cbnz	r1, 800a0ee <sbrk_aligned+0x12>
 800a0e8:	f000 fb7c 	bl	800a7e4 <_sbrk_r>
 800a0ec:	6030      	str	r0, [r6, #0]
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f000 fb77 	bl	800a7e4 <_sbrk_r>
 800a0f6:	1c43      	adds	r3, r0, #1
 800a0f8:	d00a      	beq.n	800a110 <sbrk_aligned+0x34>
 800a0fa:	1cc4      	adds	r4, r0, #3
 800a0fc:	f024 0403 	bic.w	r4, r4, #3
 800a100:	42a0      	cmp	r0, r4
 800a102:	d007      	beq.n	800a114 <sbrk_aligned+0x38>
 800a104:	1a21      	subs	r1, r4, r0
 800a106:	4628      	mov	r0, r5
 800a108:	f000 fb6c 	bl	800a7e4 <_sbrk_r>
 800a10c:	3001      	adds	r0, #1
 800a10e:	d101      	bne.n	800a114 <sbrk_aligned+0x38>
 800a110:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a114:	4620      	mov	r0, r4
 800a116:	bd70      	pop	{r4, r5, r6, pc}
 800a118:	200025e4 	.word	0x200025e4

0800a11c <_malloc_r>:
 800a11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a120:	1ccd      	adds	r5, r1, #3
 800a122:	f025 0503 	bic.w	r5, r5, #3
 800a126:	3508      	adds	r5, #8
 800a128:	2d0c      	cmp	r5, #12
 800a12a:	bf38      	it	cc
 800a12c:	250c      	movcc	r5, #12
 800a12e:	2d00      	cmp	r5, #0
 800a130:	4607      	mov	r7, r0
 800a132:	db01      	blt.n	800a138 <_malloc_r+0x1c>
 800a134:	42a9      	cmp	r1, r5
 800a136:	d905      	bls.n	800a144 <_malloc_r+0x28>
 800a138:	230c      	movs	r3, #12
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	2600      	movs	r6, #0
 800a13e:	4630      	mov	r0, r6
 800a140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a144:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a218 <_malloc_r+0xfc>
 800a148:	f000 f9f8 	bl	800a53c <__malloc_lock>
 800a14c:	f8d8 3000 	ldr.w	r3, [r8]
 800a150:	461c      	mov	r4, r3
 800a152:	bb5c      	cbnz	r4, 800a1ac <_malloc_r+0x90>
 800a154:	4629      	mov	r1, r5
 800a156:	4638      	mov	r0, r7
 800a158:	f7ff ffc0 	bl	800a0dc <sbrk_aligned>
 800a15c:	1c43      	adds	r3, r0, #1
 800a15e:	4604      	mov	r4, r0
 800a160:	d155      	bne.n	800a20e <_malloc_r+0xf2>
 800a162:	f8d8 4000 	ldr.w	r4, [r8]
 800a166:	4626      	mov	r6, r4
 800a168:	2e00      	cmp	r6, #0
 800a16a:	d145      	bne.n	800a1f8 <_malloc_r+0xdc>
 800a16c:	2c00      	cmp	r4, #0
 800a16e:	d048      	beq.n	800a202 <_malloc_r+0xe6>
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	4631      	mov	r1, r6
 800a174:	4638      	mov	r0, r7
 800a176:	eb04 0903 	add.w	r9, r4, r3
 800a17a:	f000 fb33 	bl	800a7e4 <_sbrk_r>
 800a17e:	4581      	cmp	r9, r0
 800a180:	d13f      	bne.n	800a202 <_malloc_r+0xe6>
 800a182:	6821      	ldr	r1, [r4, #0]
 800a184:	1a6d      	subs	r5, r5, r1
 800a186:	4629      	mov	r1, r5
 800a188:	4638      	mov	r0, r7
 800a18a:	f7ff ffa7 	bl	800a0dc <sbrk_aligned>
 800a18e:	3001      	adds	r0, #1
 800a190:	d037      	beq.n	800a202 <_malloc_r+0xe6>
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	442b      	add	r3, r5
 800a196:	6023      	str	r3, [r4, #0]
 800a198:	f8d8 3000 	ldr.w	r3, [r8]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d038      	beq.n	800a212 <_malloc_r+0xf6>
 800a1a0:	685a      	ldr	r2, [r3, #4]
 800a1a2:	42a2      	cmp	r2, r4
 800a1a4:	d12b      	bne.n	800a1fe <_malloc_r+0xe2>
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	605a      	str	r2, [r3, #4]
 800a1aa:	e00f      	b.n	800a1cc <_malloc_r+0xb0>
 800a1ac:	6822      	ldr	r2, [r4, #0]
 800a1ae:	1b52      	subs	r2, r2, r5
 800a1b0:	d41f      	bmi.n	800a1f2 <_malloc_r+0xd6>
 800a1b2:	2a0b      	cmp	r2, #11
 800a1b4:	d917      	bls.n	800a1e6 <_malloc_r+0xca>
 800a1b6:	1961      	adds	r1, r4, r5
 800a1b8:	42a3      	cmp	r3, r4
 800a1ba:	6025      	str	r5, [r4, #0]
 800a1bc:	bf18      	it	ne
 800a1be:	6059      	strne	r1, [r3, #4]
 800a1c0:	6863      	ldr	r3, [r4, #4]
 800a1c2:	bf08      	it	eq
 800a1c4:	f8c8 1000 	streq.w	r1, [r8]
 800a1c8:	5162      	str	r2, [r4, r5]
 800a1ca:	604b      	str	r3, [r1, #4]
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	f104 060b 	add.w	r6, r4, #11
 800a1d2:	f000 f9b9 	bl	800a548 <__malloc_unlock>
 800a1d6:	f026 0607 	bic.w	r6, r6, #7
 800a1da:	1d23      	adds	r3, r4, #4
 800a1dc:	1af2      	subs	r2, r6, r3
 800a1de:	d0ae      	beq.n	800a13e <_malloc_r+0x22>
 800a1e0:	1b9b      	subs	r3, r3, r6
 800a1e2:	50a3      	str	r3, [r4, r2]
 800a1e4:	e7ab      	b.n	800a13e <_malloc_r+0x22>
 800a1e6:	42a3      	cmp	r3, r4
 800a1e8:	6862      	ldr	r2, [r4, #4]
 800a1ea:	d1dd      	bne.n	800a1a8 <_malloc_r+0x8c>
 800a1ec:	f8c8 2000 	str.w	r2, [r8]
 800a1f0:	e7ec      	b.n	800a1cc <_malloc_r+0xb0>
 800a1f2:	4623      	mov	r3, r4
 800a1f4:	6864      	ldr	r4, [r4, #4]
 800a1f6:	e7ac      	b.n	800a152 <_malloc_r+0x36>
 800a1f8:	4634      	mov	r4, r6
 800a1fa:	6876      	ldr	r6, [r6, #4]
 800a1fc:	e7b4      	b.n	800a168 <_malloc_r+0x4c>
 800a1fe:	4613      	mov	r3, r2
 800a200:	e7cc      	b.n	800a19c <_malloc_r+0x80>
 800a202:	230c      	movs	r3, #12
 800a204:	603b      	str	r3, [r7, #0]
 800a206:	4638      	mov	r0, r7
 800a208:	f000 f99e 	bl	800a548 <__malloc_unlock>
 800a20c:	e797      	b.n	800a13e <_malloc_r+0x22>
 800a20e:	6025      	str	r5, [r4, #0]
 800a210:	e7dc      	b.n	800a1cc <_malloc_r+0xb0>
 800a212:	605b      	str	r3, [r3, #4]
 800a214:	deff      	udf	#255	; 0xff
 800a216:	bf00      	nop
 800a218:	200025e0 	.word	0x200025e0

0800a21c <_printf_common>:
 800a21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a220:	4616      	mov	r6, r2
 800a222:	4699      	mov	r9, r3
 800a224:	688a      	ldr	r2, [r1, #8]
 800a226:	690b      	ldr	r3, [r1, #16]
 800a228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a22c:	4293      	cmp	r3, r2
 800a22e:	bfb8      	it	lt
 800a230:	4613      	movlt	r3, r2
 800a232:	6033      	str	r3, [r6, #0]
 800a234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a238:	4607      	mov	r7, r0
 800a23a:	460c      	mov	r4, r1
 800a23c:	b10a      	cbz	r2, 800a242 <_printf_common+0x26>
 800a23e:	3301      	adds	r3, #1
 800a240:	6033      	str	r3, [r6, #0]
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	0699      	lsls	r1, r3, #26
 800a246:	bf42      	ittt	mi
 800a248:	6833      	ldrmi	r3, [r6, #0]
 800a24a:	3302      	addmi	r3, #2
 800a24c:	6033      	strmi	r3, [r6, #0]
 800a24e:	6825      	ldr	r5, [r4, #0]
 800a250:	f015 0506 	ands.w	r5, r5, #6
 800a254:	d106      	bne.n	800a264 <_printf_common+0x48>
 800a256:	f104 0a19 	add.w	sl, r4, #25
 800a25a:	68e3      	ldr	r3, [r4, #12]
 800a25c:	6832      	ldr	r2, [r6, #0]
 800a25e:	1a9b      	subs	r3, r3, r2
 800a260:	42ab      	cmp	r3, r5
 800a262:	dc26      	bgt.n	800a2b2 <_printf_common+0x96>
 800a264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a268:	1e13      	subs	r3, r2, #0
 800a26a:	6822      	ldr	r2, [r4, #0]
 800a26c:	bf18      	it	ne
 800a26e:	2301      	movne	r3, #1
 800a270:	0692      	lsls	r2, r2, #26
 800a272:	d42b      	bmi.n	800a2cc <_printf_common+0xb0>
 800a274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a278:	4649      	mov	r1, r9
 800a27a:	4638      	mov	r0, r7
 800a27c:	47c0      	blx	r8
 800a27e:	3001      	adds	r0, #1
 800a280:	d01e      	beq.n	800a2c0 <_printf_common+0xa4>
 800a282:	6823      	ldr	r3, [r4, #0]
 800a284:	6922      	ldr	r2, [r4, #16]
 800a286:	f003 0306 	and.w	r3, r3, #6
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	bf02      	ittt	eq
 800a28e:	68e5      	ldreq	r5, [r4, #12]
 800a290:	6833      	ldreq	r3, [r6, #0]
 800a292:	1aed      	subeq	r5, r5, r3
 800a294:	68a3      	ldr	r3, [r4, #8]
 800a296:	bf0c      	ite	eq
 800a298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a29c:	2500      	movne	r5, #0
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	bfc4      	itt	gt
 800a2a2:	1a9b      	subgt	r3, r3, r2
 800a2a4:	18ed      	addgt	r5, r5, r3
 800a2a6:	2600      	movs	r6, #0
 800a2a8:	341a      	adds	r4, #26
 800a2aa:	42b5      	cmp	r5, r6
 800a2ac:	d11a      	bne.n	800a2e4 <_printf_common+0xc8>
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	e008      	b.n	800a2c4 <_printf_common+0xa8>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	4652      	mov	r2, sl
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	47c0      	blx	r8
 800a2bc:	3001      	adds	r0, #1
 800a2be:	d103      	bne.n	800a2c8 <_printf_common+0xac>
 800a2c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2c8:	3501      	adds	r5, #1
 800a2ca:	e7c6      	b.n	800a25a <_printf_common+0x3e>
 800a2cc:	18e1      	adds	r1, r4, r3
 800a2ce:	1c5a      	adds	r2, r3, #1
 800a2d0:	2030      	movs	r0, #48	; 0x30
 800a2d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2d6:	4422      	add	r2, r4
 800a2d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2e0:	3302      	adds	r3, #2
 800a2e2:	e7c7      	b.n	800a274 <_printf_common+0x58>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	4622      	mov	r2, r4
 800a2e8:	4649      	mov	r1, r9
 800a2ea:	4638      	mov	r0, r7
 800a2ec:	47c0      	blx	r8
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	d0e6      	beq.n	800a2c0 <_printf_common+0xa4>
 800a2f2:	3601      	adds	r6, #1
 800a2f4:	e7d9      	b.n	800a2aa <_printf_common+0x8e>
	...

0800a2f8 <_printf_i>:
 800a2f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2fc:	7e0f      	ldrb	r7, [r1, #24]
 800a2fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a300:	2f78      	cmp	r7, #120	; 0x78
 800a302:	4691      	mov	r9, r2
 800a304:	4680      	mov	r8, r0
 800a306:	460c      	mov	r4, r1
 800a308:	469a      	mov	sl, r3
 800a30a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a30e:	d807      	bhi.n	800a320 <_printf_i+0x28>
 800a310:	2f62      	cmp	r7, #98	; 0x62
 800a312:	d80a      	bhi.n	800a32a <_printf_i+0x32>
 800a314:	2f00      	cmp	r7, #0
 800a316:	f000 80d4 	beq.w	800a4c2 <_printf_i+0x1ca>
 800a31a:	2f58      	cmp	r7, #88	; 0x58
 800a31c:	f000 80c0 	beq.w	800a4a0 <_printf_i+0x1a8>
 800a320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a328:	e03a      	b.n	800a3a0 <_printf_i+0xa8>
 800a32a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a32e:	2b15      	cmp	r3, #21
 800a330:	d8f6      	bhi.n	800a320 <_printf_i+0x28>
 800a332:	a101      	add	r1, pc, #4	; (adr r1, 800a338 <_printf_i+0x40>)
 800a334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a338:	0800a391 	.word	0x0800a391
 800a33c:	0800a3a5 	.word	0x0800a3a5
 800a340:	0800a321 	.word	0x0800a321
 800a344:	0800a321 	.word	0x0800a321
 800a348:	0800a321 	.word	0x0800a321
 800a34c:	0800a321 	.word	0x0800a321
 800a350:	0800a3a5 	.word	0x0800a3a5
 800a354:	0800a321 	.word	0x0800a321
 800a358:	0800a321 	.word	0x0800a321
 800a35c:	0800a321 	.word	0x0800a321
 800a360:	0800a321 	.word	0x0800a321
 800a364:	0800a4a9 	.word	0x0800a4a9
 800a368:	0800a3d1 	.word	0x0800a3d1
 800a36c:	0800a463 	.word	0x0800a463
 800a370:	0800a321 	.word	0x0800a321
 800a374:	0800a321 	.word	0x0800a321
 800a378:	0800a4cb 	.word	0x0800a4cb
 800a37c:	0800a321 	.word	0x0800a321
 800a380:	0800a3d1 	.word	0x0800a3d1
 800a384:	0800a321 	.word	0x0800a321
 800a388:	0800a321 	.word	0x0800a321
 800a38c:	0800a46b 	.word	0x0800a46b
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	1d1a      	adds	r2, r3, #4
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	602a      	str	r2, [r5, #0]
 800a398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a39c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e09f      	b.n	800a4e4 <_printf_i+0x1ec>
 800a3a4:	6820      	ldr	r0, [r4, #0]
 800a3a6:	682b      	ldr	r3, [r5, #0]
 800a3a8:	0607      	lsls	r7, r0, #24
 800a3aa:	f103 0104 	add.w	r1, r3, #4
 800a3ae:	6029      	str	r1, [r5, #0]
 800a3b0:	d501      	bpl.n	800a3b6 <_printf_i+0xbe>
 800a3b2:	681e      	ldr	r6, [r3, #0]
 800a3b4:	e003      	b.n	800a3be <_printf_i+0xc6>
 800a3b6:	0646      	lsls	r6, r0, #25
 800a3b8:	d5fb      	bpl.n	800a3b2 <_printf_i+0xba>
 800a3ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a3be:	2e00      	cmp	r6, #0
 800a3c0:	da03      	bge.n	800a3ca <_printf_i+0xd2>
 800a3c2:	232d      	movs	r3, #45	; 0x2d
 800a3c4:	4276      	negs	r6, r6
 800a3c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3ca:	485a      	ldr	r0, [pc, #360]	; (800a534 <_printf_i+0x23c>)
 800a3cc:	230a      	movs	r3, #10
 800a3ce:	e012      	b.n	800a3f6 <_printf_i+0xfe>
 800a3d0:	682b      	ldr	r3, [r5, #0]
 800a3d2:	6820      	ldr	r0, [r4, #0]
 800a3d4:	1d19      	adds	r1, r3, #4
 800a3d6:	6029      	str	r1, [r5, #0]
 800a3d8:	0605      	lsls	r5, r0, #24
 800a3da:	d501      	bpl.n	800a3e0 <_printf_i+0xe8>
 800a3dc:	681e      	ldr	r6, [r3, #0]
 800a3de:	e002      	b.n	800a3e6 <_printf_i+0xee>
 800a3e0:	0641      	lsls	r1, r0, #25
 800a3e2:	d5fb      	bpl.n	800a3dc <_printf_i+0xe4>
 800a3e4:	881e      	ldrh	r6, [r3, #0]
 800a3e6:	4853      	ldr	r0, [pc, #332]	; (800a534 <_printf_i+0x23c>)
 800a3e8:	2f6f      	cmp	r7, #111	; 0x6f
 800a3ea:	bf0c      	ite	eq
 800a3ec:	2308      	moveq	r3, #8
 800a3ee:	230a      	movne	r3, #10
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3f6:	6865      	ldr	r5, [r4, #4]
 800a3f8:	60a5      	str	r5, [r4, #8]
 800a3fa:	2d00      	cmp	r5, #0
 800a3fc:	bfa2      	ittt	ge
 800a3fe:	6821      	ldrge	r1, [r4, #0]
 800a400:	f021 0104 	bicge.w	r1, r1, #4
 800a404:	6021      	strge	r1, [r4, #0]
 800a406:	b90e      	cbnz	r6, 800a40c <_printf_i+0x114>
 800a408:	2d00      	cmp	r5, #0
 800a40a:	d04b      	beq.n	800a4a4 <_printf_i+0x1ac>
 800a40c:	4615      	mov	r5, r2
 800a40e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a412:	fb03 6711 	mls	r7, r3, r1, r6
 800a416:	5dc7      	ldrb	r7, [r0, r7]
 800a418:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a41c:	4637      	mov	r7, r6
 800a41e:	42bb      	cmp	r3, r7
 800a420:	460e      	mov	r6, r1
 800a422:	d9f4      	bls.n	800a40e <_printf_i+0x116>
 800a424:	2b08      	cmp	r3, #8
 800a426:	d10b      	bne.n	800a440 <_printf_i+0x148>
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	07de      	lsls	r6, r3, #31
 800a42c:	d508      	bpl.n	800a440 <_printf_i+0x148>
 800a42e:	6923      	ldr	r3, [r4, #16]
 800a430:	6861      	ldr	r1, [r4, #4]
 800a432:	4299      	cmp	r1, r3
 800a434:	bfde      	ittt	le
 800a436:	2330      	movle	r3, #48	; 0x30
 800a438:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a43c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a440:	1b52      	subs	r2, r2, r5
 800a442:	6122      	str	r2, [r4, #16]
 800a444:	f8cd a000 	str.w	sl, [sp]
 800a448:	464b      	mov	r3, r9
 800a44a:	aa03      	add	r2, sp, #12
 800a44c:	4621      	mov	r1, r4
 800a44e:	4640      	mov	r0, r8
 800a450:	f7ff fee4 	bl	800a21c <_printf_common>
 800a454:	3001      	adds	r0, #1
 800a456:	d14a      	bne.n	800a4ee <_printf_i+0x1f6>
 800a458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a45c:	b004      	add	sp, #16
 800a45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	f043 0320 	orr.w	r3, r3, #32
 800a468:	6023      	str	r3, [r4, #0]
 800a46a:	4833      	ldr	r0, [pc, #204]	; (800a538 <_printf_i+0x240>)
 800a46c:	2778      	movs	r7, #120	; 0x78
 800a46e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	6829      	ldr	r1, [r5, #0]
 800a476:	061f      	lsls	r7, r3, #24
 800a478:	f851 6b04 	ldr.w	r6, [r1], #4
 800a47c:	d402      	bmi.n	800a484 <_printf_i+0x18c>
 800a47e:	065f      	lsls	r7, r3, #25
 800a480:	bf48      	it	mi
 800a482:	b2b6      	uxthmi	r6, r6
 800a484:	07df      	lsls	r7, r3, #31
 800a486:	bf48      	it	mi
 800a488:	f043 0320 	orrmi.w	r3, r3, #32
 800a48c:	6029      	str	r1, [r5, #0]
 800a48e:	bf48      	it	mi
 800a490:	6023      	strmi	r3, [r4, #0]
 800a492:	b91e      	cbnz	r6, 800a49c <_printf_i+0x1a4>
 800a494:	6823      	ldr	r3, [r4, #0]
 800a496:	f023 0320 	bic.w	r3, r3, #32
 800a49a:	6023      	str	r3, [r4, #0]
 800a49c:	2310      	movs	r3, #16
 800a49e:	e7a7      	b.n	800a3f0 <_printf_i+0xf8>
 800a4a0:	4824      	ldr	r0, [pc, #144]	; (800a534 <_printf_i+0x23c>)
 800a4a2:	e7e4      	b.n	800a46e <_printf_i+0x176>
 800a4a4:	4615      	mov	r5, r2
 800a4a6:	e7bd      	b.n	800a424 <_printf_i+0x12c>
 800a4a8:	682b      	ldr	r3, [r5, #0]
 800a4aa:	6826      	ldr	r6, [r4, #0]
 800a4ac:	6961      	ldr	r1, [r4, #20]
 800a4ae:	1d18      	adds	r0, r3, #4
 800a4b0:	6028      	str	r0, [r5, #0]
 800a4b2:	0635      	lsls	r5, r6, #24
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	d501      	bpl.n	800a4bc <_printf_i+0x1c4>
 800a4b8:	6019      	str	r1, [r3, #0]
 800a4ba:	e002      	b.n	800a4c2 <_printf_i+0x1ca>
 800a4bc:	0670      	lsls	r0, r6, #25
 800a4be:	d5fb      	bpl.n	800a4b8 <_printf_i+0x1c0>
 800a4c0:	8019      	strh	r1, [r3, #0]
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	6123      	str	r3, [r4, #16]
 800a4c6:	4615      	mov	r5, r2
 800a4c8:	e7bc      	b.n	800a444 <_printf_i+0x14c>
 800a4ca:	682b      	ldr	r3, [r5, #0]
 800a4cc:	1d1a      	adds	r2, r3, #4
 800a4ce:	602a      	str	r2, [r5, #0]
 800a4d0:	681d      	ldr	r5, [r3, #0]
 800a4d2:	6862      	ldr	r2, [r4, #4]
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	f7f5 feb2 	bl	8000240 <memchr>
 800a4dc:	b108      	cbz	r0, 800a4e2 <_printf_i+0x1ea>
 800a4de:	1b40      	subs	r0, r0, r5
 800a4e0:	6060      	str	r0, [r4, #4]
 800a4e2:	6863      	ldr	r3, [r4, #4]
 800a4e4:	6123      	str	r3, [r4, #16]
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4ec:	e7aa      	b.n	800a444 <_printf_i+0x14c>
 800a4ee:	6923      	ldr	r3, [r4, #16]
 800a4f0:	462a      	mov	r2, r5
 800a4f2:	4649      	mov	r1, r9
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	47d0      	blx	sl
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	d0ad      	beq.n	800a458 <_printf_i+0x160>
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	079b      	lsls	r3, r3, #30
 800a500:	d413      	bmi.n	800a52a <_printf_i+0x232>
 800a502:	68e0      	ldr	r0, [r4, #12]
 800a504:	9b03      	ldr	r3, [sp, #12]
 800a506:	4298      	cmp	r0, r3
 800a508:	bfb8      	it	lt
 800a50a:	4618      	movlt	r0, r3
 800a50c:	e7a6      	b.n	800a45c <_printf_i+0x164>
 800a50e:	2301      	movs	r3, #1
 800a510:	4632      	mov	r2, r6
 800a512:	4649      	mov	r1, r9
 800a514:	4640      	mov	r0, r8
 800a516:	47d0      	blx	sl
 800a518:	3001      	adds	r0, #1
 800a51a:	d09d      	beq.n	800a458 <_printf_i+0x160>
 800a51c:	3501      	adds	r5, #1
 800a51e:	68e3      	ldr	r3, [r4, #12]
 800a520:	9903      	ldr	r1, [sp, #12]
 800a522:	1a5b      	subs	r3, r3, r1
 800a524:	42ab      	cmp	r3, r5
 800a526:	dcf2      	bgt.n	800a50e <_printf_i+0x216>
 800a528:	e7eb      	b.n	800a502 <_printf_i+0x20a>
 800a52a:	2500      	movs	r5, #0
 800a52c:	f104 0619 	add.w	r6, r4, #25
 800a530:	e7f5      	b.n	800a51e <_printf_i+0x226>
 800a532:	bf00      	nop
 800a534:	0800ed36 	.word	0x0800ed36
 800a538:	0800ed47 	.word	0x0800ed47

0800a53c <__malloc_lock>:
 800a53c:	4801      	ldr	r0, [pc, #4]	; (800a544 <__malloc_lock+0x8>)
 800a53e:	f000 b98b 	b.w	800a858 <__retarget_lock_acquire_recursive>
 800a542:	bf00      	nop
 800a544:	20002724 	.word	0x20002724

0800a548 <__malloc_unlock>:
 800a548:	4801      	ldr	r0, [pc, #4]	; (800a550 <__malloc_unlock+0x8>)
 800a54a:	f000 b986 	b.w	800a85a <__retarget_lock_release_recursive>
 800a54e:	bf00      	nop
 800a550:	20002724 	.word	0x20002724

0800a554 <siprintf>:
 800a554:	b40e      	push	{r1, r2, r3}
 800a556:	b500      	push	{lr}
 800a558:	b09c      	sub	sp, #112	; 0x70
 800a55a:	ab1d      	add	r3, sp, #116	; 0x74
 800a55c:	9002      	str	r0, [sp, #8]
 800a55e:	9006      	str	r0, [sp, #24]
 800a560:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a564:	4809      	ldr	r0, [pc, #36]	; (800a58c <siprintf+0x38>)
 800a566:	9107      	str	r1, [sp, #28]
 800a568:	9104      	str	r1, [sp, #16]
 800a56a:	4909      	ldr	r1, [pc, #36]	; (800a590 <siprintf+0x3c>)
 800a56c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a570:	9105      	str	r1, [sp, #20]
 800a572:	6800      	ldr	r0, [r0, #0]
 800a574:	9301      	str	r3, [sp, #4]
 800a576:	a902      	add	r1, sp, #8
 800a578:	f001 f838 	bl	800b5ec <_svfiprintf_r>
 800a57c:	9b02      	ldr	r3, [sp, #8]
 800a57e:	2200      	movs	r2, #0
 800a580:	701a      	strb	r2, [r3, #0]
 800a582:	b01c      	add	sp, #112	; 0x70
 800a584:	f85d eb04 	ldr.w	lr, [sp], #4
 800a588:	b003      	add	sp, #12
 800a58a:	4770      	bx	lr
 800a58c:	200000d4 	.word	0x200000d4
 800a590:	ffff0208 	.word	0xffff0208

0800a594 <srand>:
 800a594:	b538      	push	{r3, r4, r5, lr}
 800a596:	4b10      	ldr	r3, [pc, #64]	; (800a5d8 <srand+0x44>)
 800a598:	681d      	ldr	r5, [r3, #0]
 800a59a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a59c:	4604      	mov	r4, r0
 800a59e:	b9b3      	cbnz	r3, 800a5ce <srand+0x3a>
 800a5a0:	2018      	movs	r0, #24
 800a5a2:	f7ff fd8b 	bl	800a0bc <malloc>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	6328      	str	r0, [r5, #48]	; 0x30
 800a5aa:	b920      	cbnz	r0, 800a5b6 <srand+0x22>
 800a5ac:	4b0b      	ldr	r3, [pc, #44]	; (800a5dc <srand+0x48>)
 800a5ae:	480c      	ldr	r0, [pc, #48]	; (800a5e0 <srand+0x4c>)
 800a5b0:	2146      	movs	r1, #70	; 0x46
 800a5b2:	f000 f961 	bl	800a878 <__assert_func>
 800a5b6:	490b      	ldr	r1, [pc, #44]	; (800a5e4 <srand+0x50>)
 800a5b8:	4b0b      	ldr	r3, [pc, #44]	; (800a5e8 <srand+0x54>)
 800a5ba:	e9c0 1300 	strd	r1, r3, [r0]
 800a5be:	4b0b      	ldr	r3, [pc, #44]	; (800a5ec <srand+0x58>)
 800a5c0:	6083      	str	r3, [r0, #8]
 800a5c2:	230b      	movs	r3, #11
 800a5c4:	8183      	strh	r3, [r0, #12]
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	2001      	movs	r0, #1
 800a5ca:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a5ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	611c      	str	r4, [r3, #16]
 800a5d4:	615a      	str	r2, [r3, #20]
 800a5d6:	bd38      	pop	{r3, r4, r5, pc}
 800a5d8:	200000d4 	.word	0x200000d4
 800a5dc:	0800ed58 	.word	0x0800ed58
 800a5e0:	0800ed6f 	.word	0x0800ed6f
 800a5e4:	abcd330e 	.word	0xabcd330e
 800a5e8:	e66d1234 	.word	0xe66d1234
 800a5ec:	0005deec 	.word	0x0005deec

0800a5f0 <rand>:
 800a5f0:	4b16      	ldr	r3, [pc, #88]	; (800a64c <rand+0x5c>)
 800a5f2:	b510      	push	{r4, lr}
 800a5f4:	681c      	ldr	r4, [r3, #0]
 800a5f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a5f8:	b9b3      	cbnz	r3, 800a628 <rand+0x38>
 800a5fa:	2018      	movs	r0, #24
 800a5fc:	f7ff fd5e 	bl	800a0bc <malloc>
 800a600:	4602      	mov	r2, r0
 800a602:	6320      	str	r0, [r4, #48]	; 0x30
 800a604:	b920      	cbnz	r0, 800a610 <rand+0x20>
 800a606:	4b12      	ldr	r3, [pc, #72]	; (800a650 <rand+0x60>)
 800a608:	4812      	ldr	r0, [pc, #72]	; (800a654 <rand+0x64>)
 800a60a:	2152      	movs	r1, #82	; 0x52
 800a60c:	f000 f934 	bl	800a878 <__assert_func>
 800a610:	4911      	ldr	r1, [pc, #68]	; (800a658 <rand+0x68>)
 800a612:	4b12      	ldr	r3, [pc, #72]	; (800a65c <rand+0x6c>)
 800a614:	e9c0 1300 	strd	r1, r3, [r0]
 800a618:	4b11      	ldr	r3, [pc, #68]	; (800a660 <rand+0x70>)
 800a61a:	6083      	str	r3, [r0, #8]
 800a61c:	230b      	movs	r3, #11
 800a61e:	8183      	strh	r3, [r0, #12]
 800a620:	2100      	movs	r1, #0
 800a622:	2001      	movs	r0, #1
 800a624:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a628:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a62a:	480e      	ldr	r0, [pc, #56]	; (800a664 <rand+0x74>)
 800a62c:	690b      	ldr	r3, [r1, #16]
 800a62e:	694c      	ldr	r4, [r1, #20]
 800a630:	4a0d      	ldr	r2, [pc, #52]	; (800a668 <rand+0x78>)
 800a632:	4358      	muls	r0, r3
 800a634:	fb02 0004 	mla	r0, r2, r4, r0
 800a638:	fba3 3202 	umull	r3, r2, r3, r2
 800a63c:	3301      	adds	r3, #1
 800a63e:	eb40 0002 	adc.w	r0, r0, r2
 800a642:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800a646:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a64a:	bd10      	pop	{r4, pc}
 800a64c:	200000d4 	.word	0x200000d4
 800a650:	0800ed58 	.word	0x0800ed58
 800a654:	0800ed6f 	.word	0x0800ed6f
 800a658:	abcd330e 	.word	0xabcd330e
 800a65c:	e66d1234 	.word	0xe66d1234
 800a660:	0005deec 	.word	0x0005deec
 800a664:	5851f42d 	.word	0x5851f42d
 800a668:	4c957f2d 	.word	0x4c957f2d

0800a66c <std>:
 800a66c:	2300      	movs	r3, #0
 800a66e:	b510      	push	{r4, lr}
 800a670:	4604      	mov	r4, r0
 800a672:	e9c0 3300 	strd	r3, r3, [r0]
 800a676:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a67a:	6083      	str	r3, [r0, #8]
 800a67c:	8181      	strh	r1, [r0, #12]
 800a67e:	6643      	str	r3, [r0, #100]	; 0x64
 800a680:	81c2      	strh	r2, [r0, #14]
 800a682:	6183      	str	r3, [r0, #24]
 800a684:	4619      	mov	r1, r3
 800a686:	2208      	movs	r2, #8
 800a688:	305c      	adds	r0, #92	; 0x5c
 800a68a:	f000 f89f 	bl	800a7cc <memset>
 800a68e:	4b05      	ldr	r3, [pc, #20]	; (800a6a4 <std+0x38>)
 800a690:	6263      	str	r3, [r4, #36]	; 0x24
 800a692:	4b05      	ldr	r3, [pc, #20]	; (800a6a8 <std+0x3c>)
 800a694:	62a3      	str	r3, [r4, #40]	; 0x28
 800a696:	4b05      	ldr	r3, [pc, #20]	; (800a6ac <std+0x40>)
 800a698:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a69a:	4b05      	ldr	r3, [pc, #20]	; (800a6b0 <std+0x44>)
 800a69c:	6224      	str	r4, [r4, #32]
 800a69e:	6323      	str	r3, [r4, #48]	; 0x30
 800a6a0:	bd10      	pop	{r4, pc}
 800a6a2:	bf00      	nop
 800a6a4:	0800c03d 	.word	0x0800c03d
 800a6a8:	0800c05f 	.word	0x0800c05f
 800a6ac:	0800c097 	.word	0x0800c097
 800a6b0:	0800c0bb 	.word	0x0800c0bb

0800a6b4 <stdio_exit_handler>:
 800a6b4:	4a02      	ldr	r2, [pc, #8]	; (800a6c0 <stdio_exit_handler+0xc>)
 800a6b6:	4903      	ldr	r1, [pc, #12]	; (800a6c4 <stdio_exit_handler+0x10>)
 800a6b8:	4803      	ldr	r0, [pc, #12]	; (800a6c8 <stdio_exit_handler+0x14>)
 800a6ba:	f000 b869 	b.w	800a790 <_fwalk_sglue>
 800a6be:	bf00      	nop
 800a6c0:	2000007c 	.word	0x2000007c
 800a6c4:	0800b8f5 	.word	0x0800b8f5
 800a6c8:	20000088 	.word	0x20000088

0800a6cc <cleanup_stdio>:
 800a6cc:	6841      	ldr	r1, [r0, #4]
 800a6ce:	4b0c      	ldr	r3, [pc, #48]	; (800a700 <cleanup_stdio+0x34>)
 800a6d0:	4299      	cmp	r1, r3
 800a6d2:	b510      	push	{r4, lr}
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	d001      	beq.n	800a6dc <cleanup_stdio+0x10>
 800a6d8:	f001 f90c 	bl	800b8f4 <_fflush_r>
 800a6dc:	68a1      	ldr	r1, [r4, #8]
 800a6de:	4b09      	ldr	r3, [pc, #36]	; (800a704 <cleanup_stdio+0x38>)
 800a6e0:	4299      	cmp	r1, r3
 800a6e2:	d002      	beq.n	800a6ea <cleanup_stdio+0x1e>
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f001 f905 	bl	800b8f4 <_fflush_r>
 800a6ea:	68e1      	ldr	r1, [r4, #12]
 800a6ec:	4b06      	ldr	r3, [pc, #24]	; (800a708 <cleanup_stdio+0x3c>)
 800a6ee:	4299      	cmp	r1, r3
 800a6f0:	d004      	beq.n	800a6fc <cleanup_stdio+0x30>
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6f8:	f001 b8fc 	b.w	800b8f4 <_fflush_r>
 800a6fc:	bd10      	pop	{r4, pc}
 800a6fe:	bf00      	nop
 800a700:	200025e8 	.word	0x200025e8
 800a704:	20002650 	.word	0x20002650
 800a708:	200026b8 	.word	0x200026b8

0800a70c <global_stdio_init.part.0>:
 800a70c:	b510      	push	{r4, lr}
 800a70e:	4b0b      	ldr	r3, [pc, #44]	; (800a73c <global_stdio_init.part.0+0x30>)
 800a710:	4c0b      	ldr	r4, [pc, #44]	; (800a740 <global_stdio_init.part.0+0x34>)
 800a712:	4a0c      	ldr	r2, [pc, #48]	; (800a744 <global_stdio_init.part.0+0x38>)
 800a714:	601a      	str	r2, [r3, #0]
 800a716:	4620      	mov	r0, r4
 800a718:	2200      	movs	r2, #0
 800a71a:	2104      	movs	r1, #4
 800a71c:	f7ff ffa6 	bl	800a66c <std>
 800a720:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a724:	2201      	movs	r2, #1
 800a726:	2109      	movs	r1, #9
 800a728:	f7ff ffa0 	bl	800a66c <std>
 800a72c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a730:	2202      	movs	r2, #2
 800a732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a736:	2112      	movs	r1, #18
 800a738:	f7ff bf98 	b.w	800a66c <std>
 800a73c:	20002720 	.word	0x20002720
 800a740:	200025e8 	.word	0x200025e8
 800a744:	0800a6b5 	.word	0x0800a6b5

0800a748 <__sfp_lock_acquire>:
 800a748:	4801      	ldr	r0, [pc, #4]	; (800a750 <__sfp_lock_acquire+0x8>)
 800a74a:	f000 b885 	b.w	800a858 <__retarget_lock_acquire_recursive>
 800a74e:	bf00      	nop
 800a750:	20002725 	.word	0x20002725

0800a754 <__sfp_lock_release>:
 800a754:	4801      	ldr	r0, [pc, #4]	; (800a75c <__sfp_lock_release+0x8>)
 800a756:	f000 b880 	b.w	800a85a <__retarget_lock_release_recursive>
 800a75a:	bf00      	nop
 800a75c:	20002725 	.word	0x20002725

0800a760 <__sinit>:
 800a760:	b510      	push	{r4, lr}
 800a762:	4604      	mov	r4, r0
 800a764:	f7ff fff0 	bl	800a748 <__sfp_lock_acquire>
 800a768:	6a23      	ldr	r3, [r4, #32]
 800a76a:	b11b      	cbz	r3, 800a774 <__sinit+0x14>
 800a76c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a770:	f7ff bff0 	b.w	800a754 <__sfp_lock_release>
 800a774:	4b04      	ldr	r3, [pc, #16]	; (800a788 <__sinit+0x28>)
 800a776:	6223      	str	r3, [r4, #32]
 800a778:	4b04      	ldr	r3, [pc, #16]	; (800a78c <__sinit+0x2c>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1f5      	bne.n	800a76c <__sinit+0xc>
 800a780:	f7ff ffc4 	bl	800a70c <global_stdio_init.part.0>
 800a784:	e7f2      	b.n	800a76c <__sinit+0xc>
 800a786:	bf00      	nop
 800a788:	0800a6cd 	.word	0x0800a6cd
 800a78c:	20002720 	.word	0x20002720

0800a790 <_fwalk_sglue>:
 800a790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a794:	4607      	mov	r7, r0
 800a796:	4688      	mov	r8, r1
 800a798:	4614      	mov	r4, r2
 800a79a:	2600      	movs	r6, #0
 800a79c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7a0:	f1b9 0901 	subs.w	r9, r9, #1
 800a7a4:	d505      	bpl.n	800a7b2 <_fwalk_sglue+0x22>
 800a7a6:	6824      	ldr	r4, [r4, #0]
 800a7a8:	2c00      	cmp	r4, #0
 800a7aa:	d1f7      	bne.n	800a79c <_fwalk_sglue+0xc>
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7b2:	89ab      	ldrh	r3, [r5, #12]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d907      	bls.n	800a7c8 <_fwalk_sglue+0x38>
 800a7b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	d003      	beq.n	800a7c8 <_fwalk_sglue+0x38>
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	47c0      	blx	r8
 800a7c6:	4306      	orrs	r6, r0
 800a7c8:	3568      	adds	r5, #104	; 0x68
 800a7ca:	e7e9      	b.n	800a7a0 <_fwalk_sglue+0x10>

0800a7cc <memset>:
 800a7cc:	4402      	add	r2, r0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d100      	bne.n	800a7d6 <memset+0xa>
 800a7d4:	4770      	bx	lr
 800a7d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7da:	e7f9      	b.n	800a7d0 <memset+0x4>

0800a7dc <_localeconv_r>:
 800a7dc:	4800      	ldr	r0, [pc, #0]	; (800a7e0 <_localeconv_r+0x4>)
 800a7de:	4770      	bx	lr
 800a7e0:	200001c8 	.word	0x200001c8

0800a7e4 <_sbrk_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	4d06      	ldr	r5, [pc, #24]	; (800a800 <_sbrk_r+0x1c>)
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	4608      	mov	r0, r1
 800a7ee:	602b      	str	r3, [r5, #0]
 800a7f0:	f7f9 fffc 	bl	80047ec <_sbrk>
 800a7f4:	1c43      	adds	r3, r0, #1
 800a7f6:	d102      	bne.n	800a7fe <_sbrk_r+0x1a>
 800a7f8:	682b      	ldr	r3, [r5, #0]
 800a7fa:	b103      	cbz	r3, 800a7fe <_sbrk_r+0x1a>
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	bd38      	pop	{r3, r4, r5, pc}
 800a800:	20002728 	.word	0x20002728

0800a804 <__errno>:
 800a804:	4b01      	ldr	r3, [pc, #4]	; (800a80c <__errno+0x8>)
 800a806:	6818      	ldr	r0, [r3, #0]
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	200000d4 	.word	0x200000d4

0800a810 <__libc_init_array>:
 800a810:	b570      	push	{r4, r5, r6, lr}
 800a812:	4d0d      	ldr	r5, [pc, #52]	; (800a848 <__libc_init_array+0x38>)
 800a814:	4c0d      	ldr	r4, [pc, #52]	; (800a84c <__libc_init_array+0x3c>)
 800a816:	1b64      	subs	r4, r4, r5
 800a818:	10a4      	asrs	r4, r4, #2
 800a81a:	2600      	movs	r6, #0
 800a81c:	42a6      	cmp	r6, r4
 800a81e:	d109      	bne.n	800a834 <__libc_init_array+0x24>
 800a820:	4d0b      	ldr	r5, [pc, #44]	; (800a850 <__libc_init_array+0x40>)
 800a822:	4c0c      	ldr	r4, [pc, #48]	; (800a854 <__libc_init_array+0x44>)
 800a824:	f001 ffc0 	bl	800c7a8 <_init>
 800a828:	1b64      	subs	r4, r4, r5
 800a82a:	10a4      	asrs	r4, r4, #2
 800a82c:	2600      	movs	r6, #0
 800a82e:	42a6      	cmp	r6, r4
 800a830:	d105      	bne.n	800a83e <__libc_init_array+0x2e>
 800a832:	bd70      	pop	{r4, r5, r6, pc}
 800a834:	f855 3b04 	ldr.w	r3, [r5], #4
 800a838:	4798      	blx	r3
 800a83a:	3601      	adds	r6, #1
 800a83c:	e7ee      	b.n	800a81c <__libc_init_array+0xc>
 800a83e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a842:	4798      	blx	r3
 800a844:	3601      	adds	r6, #1
 800a846:	e7f2      	b.n	800a82e <__libc_init_array+0x1e>
 800a848:	0800f0f8 	.word	0x0800f0f8
 800a84c:	0800f0f8 	.word	0x0800f0f8
 800a850:	0800f0f8 	.word	0x0800f0f8
 800a854:	0800f0fc 	.word	0x0800f0fc

0800a858 <__retarget_lock_acquire_recursive>:
 800a858:	4770      	bx	lr

0800a85a <__retarget_lock_release_recursive>:
 800a85a:	4770      	bx	lr

0800a85c <memcpy>:
 800a85c:	440a      	add	r2, r1
 800a85e:	4291      	cmp	r1, r2
 800a860:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a864:	d100      	bne.n	800a868 <memcpy+0xc>
 800a866:	4770      	bx	lr
 800a868:	b510      	push	{r4, lr}
 800a86a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a86e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a872:	4291      	cmp	r1, r2
 800a874:	d1f9      	bne.n	800a86a <memcpy+0xe>
 800a876:	bd10      	pop	{r4, pc}

0800a878 <__assert_func>:
 800a878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a87a:	4614      	mov	r4, r2
 800a87c:	461a      	mov	r2, r3
 800a87e:	4b09      	ldr	r3, [pc, #36]	; (800a8a4 <__assert_func+0x2c>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4605      	mov	r5, r0
 800a884:	68d8      	ldr	r0, [r3, #12]
 800a886:	b14c      	cbz	r4, 800a89c <__assert_func+0x24>
 800a888:	4b07      	ldr	r3, [pc, #28]	; (800a8a8 <__assert_func+0x30>)
 800a88a:	9100      	str	r1, [sp, #0]
 800a88c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a890:	4906      	ldr	r1, [pc, #24]	; (800a8ac <__assert_func+0x34>)
 800a892:	462b      	mov	r3, r5
 800a894:	f001 fc16 	bl	800c0c4 <fiprintf>
 800a898:	f001 fcb6 	bl	800c208 <abort>
 800a89c:	4b04      	ldr	r3, [pc, #16]	; (800a8b0 <__assert_func+0x38>)
 800a89e:	461c      	mov	r4, r3
 800a8a0:	e7f3      	b.n	800a88a <__assert_func+0x12>
 800a8a2:	bf00      	nop
 800a8a4:	200000d4 	.word	0x200000d4
 800a8a8:	0800edc7 	.word	0x0800edc7
 800a8ac:	0800edd4 	.word	0x0800edd4
 800a8b0:	0800ee02 	.word	0x0800ee02

0800a8b4 <quorem>:
 800a8b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b8:	6903      	ldr	r3, [r0, #16]
 800a8ba:	690c      	ldr	r4, [r1, #16]
 800a8bc:	42a3      	cmp	r3, r4
 800a8be:	4607      	mov	r7, r0
 800a8c0:	db7e      	blt.n	800a9c0 <quorem+0x10c>
 800a8c2:	3c01      	subs	r4, #1
 800a8c4:	f101 0814 	add.w	r8, r1, #20
 800a8c8:	f100 0514 	add.w	r5, r0, #20
 800a8cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a8e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8e6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a8ea:	d331      	bcc.n	800a950 <quorem+0x9c>
 800a8ec:	f04f 0e00 	mov.w	lr, #0
 800a8f0:	4640      	mov	r0, r8
 800a8f2:	46ac      	mov	ip, r5
 800a8f4:	46f2      	mov	sl, lr
 800a8f6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a8fa:	b293      	uxth	r3, r2
 800a8fc:	fb06 e303 	mla	r3, r6, r3, lr
 800a900:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a904:	0c1a      	lsrs	r2, r3, #16
 800a906:	b29b      	uxth	r3, r3
 800a908:	ebaa 0303 	sub.w	r3, sl, r3
 800a90c:	f8dc a000 	ldr.w	sl, [ip]
 800a910:	fa13 f38a 	uxtah	r3, r3, sl
 800a914:	fb06 220e 	mla	r2, r6, lr, r2
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	9b00      	ldr	r3, [sp, #0]
 800a91c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a920:	b292      	uxth	r2, r2
 800a922:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a926:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a92a:	f8bd 3000 	ldrh.w	r3, [sp]
 800a92e:	4581      	cmp	r9, r0
 800a930:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a934:	f84c 3b04 	str.w	r3, [ip], #4
 800a938:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a93c:	d2db      	bcs.n	800a8f6 <quorem+0x42>
 800a93e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a942:	b92b      	cbnz	r3, 800a950 <quorem+0x9c>
 800a944:	9b01      	ldr	r3, [sp, #4]
 800a946:	3b04      	subs	r3, #4
 800a948:	429d      	cmp	r5, r3
 800a94a:	461a      	mov	r2, r3
 800a94c:	d32c      	bcc.n	800a9a8 <quorem+0xf4>
 800a94e:	613c      	str	r4, [r7, #16]
 800a950:	4638      	mov	r0, r7
 800a952:	f001 fa73 	bl	800be3c <__mcmp>
 800a956:	2800      	cmp	r0, #0
 800a958:	db22      	blt.n	800a9a0 <quorem+0xec>
 800a95a:	3601      	adds	r6, #1
 800a95c:	4629      	mov	r1, r5
 800a95e:	2000      	movs	r0, #0
 800a960:	f858 2b04 	ldr.w	r2, [r8], #4
 800a964:	f8d1 c000 	ldr.w	ip, [r1]
 800a968:	b293      	uxth	r3, r2
 800a96a:	1ac3      	subs	r3, r0, r3
 800a96c:	0c12      	lsrs	r2, r2, #16
 800a96e:	fa13 f38c 	uxtah	r3, r3, ip
 800a972:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a976:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a980:	45c1      	cmp	r9, r8
 800a982:	f841 3b04 	str.w	r3, [r1], #4
 800a986:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a98a:	d2e9      	bcs.n	800a960 <quorem+0xac>
 800a98c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a990:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a994:	b922      	cbnz	r2, 800a9a0 <quorem+0xec>
 800a996:	3b04      	subs	r3, #4
 800a998:	429d      	cmp	r5, r3
 800a99a:	461a      	mov	r2, r3
 800a99c:	d30a      	bcc.n	800a9b4 <quorem+0x100>
 800a99e:	613c      	str	r4, [r7, #16]
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	b003      	add	sp, #12
 800a9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a8:	6812      	ldr	r2, [r2, #0]
 800a9aa:	3b04      	subs	r3, #4
 800a9ac:	2a00      	cmp	r2, #0
 800a9ae:	d1ce      	bne.n	800a94e <quorem+0x9a>
 800a9b0:	3c01      	subs	r4, #1
 800a9b2:	e7c9      	b.n	800a948 <quorem+0x94>
 800a9b4:	6812      	ldr	r2, [r2, #0]
 800a9b6:	3b04      	subs	r3, #4
 800a9b8:	2a00      	cmp	r2, #0
 800a9ba:	d1f0      	bne.n	800a99e <quorem+0xea>
 800a9bc:	3c01      	subs	r4, #1
 800a9be:	e7eb      	b.n	800a998 <quorem+0xe4>
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	e7ee      	b.n	800a9a2 <quorem+0xee>
 800a9c4:	0000      	movs	r0, r0
	...

0800a9c8 <_dtoa_r>:
 800a9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9cc:	ed2d 8b02 	vpush	{d8}
 800a9d0:	69c5      	ldr	r5, [r0, #28]
 800a9d2:	b091      	sub	sp, #68	; 0x44
 800a9d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a9d8:	ec59 8b10 	vmov	r8, r9, d0
 800a9dc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a9de:	9106      	str	r1, [sp, #24]
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	9208      	str	r2, [sp, #32]
 800a9e4:	930c      	str	r3, [sp, #48]	; 0x30
 800a9e6:	b975      	cbnz	r5, 800aa06 <_dtoa_r+0x3e>
 800a9e8:	2010      	movs	r0, #16
 800a9ea:	f7ff fb67 	bl	800a0bc <malloc>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	61f0      	str	r0, [r6, #28]
 800a9f2:	b920      	cbnz	r0, 800a9fe <_dtoa_r+0x36>
 800a9f4:	4ba6      	ldr	r3, [pc, #664]	; (800ac90 <_dtoa_r+0x2c8>)
 800a9f6:	21ef      	movs	r1, #239	; 0xef
 800a9f8:	48a6      	ldr	r0, [pc, #664]	; (800ac94 <_dtoa_r+0x2cc>)
 800a9fa:	f7ff ff3d 	bl	800a878 <__assert_func>
 800a9fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa02:	6005      	str	r5, [r0, #0]
 800aa04:	60c5      	str	r5, [r0, #12]
 800aa06:	69f3      	ldr	r3, [r6, #28]
 800aa08:	6819      	ldr	r1, [r3, #0]
 800aa0a:	b151      	cbz	r1, 800aa22 <_dtoa_r+0x5a>
 800aa0c:	685a      	ldr	r2, [r3, #4]
 800aa0e:	604a      	str	r2, [r1, #4]
 800aa10:	2301      	movs	r3, #1
 800aa12:	4093      	lsls	r3, r2
 800aa14:	608b      	str	r3, [r1, #8]
 800aa16:	4630      	mov	r0, r6
 800aa18:	f000 ffd4 	bl	800b9c4 <_Bfree>
 800aa1c:	69f3      	ldr	r3, [r6, #28]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	601a      	str	r2, [r3, #0]
 800aa22:	f1b9 0300 	subs.w	r3, r9, #0
 800aa26:	bfbb      	ittet	lt
 800aa28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa2c:	9303      	strlt	r3, [sp, #12]
 800aa2e:	2300      	movge	r3, #0
 800aa30:	2201      	movlt	r2, #1
 800aa32:	bfac      	ite	ge
 800aa34:	6023      	strge	r3, [r4, #0]
 800aa36:	6022      	strlt	r2, [r4, #0]
 800aa38:	4b97      	ldr	r3, [pc, #604]	; (800ac98 <_dtoa_r+0x2d0>)
 800aa3a:	9c03      	ldr	r4, [sp, #12]
 800aa3c:	43a3      	bics	r3, r4
 800aa3e:	d11c      	bne.n	800aa7a <_dtoa_r+0xb2>
 800aa40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa42:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa46:	6013      	str	r3, [r2, #0]
 800aa48:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800aa4c:	ea53 0308 	orrs.w	r3, r3, r8
 800aa50:	f000 84fb 	beq.w	800b44a <_dtoa_r+0xa82>
 800aa54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa56:	b963      	cbnz	r3, 800aa72 <_dtoa_r+0xaa>
 800aa58:	4b90      	ldr	r3, [pc, #576]	; (800ac9c <_dtoa_r+0x2d4>)
 800aa5a:	e020      	b.n	800aa9e <_dtoa_r+0xd6>
 800aa5c:	4b90      	ldr	r3, [pc, #576]	; (800aca0 <_dtoa_r+0x2d8>)
 800aa5e:	9301      	str	r3, [sp, #4]
 800aa60:	3308      	adds	r3, #8
 800aa62:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800aa64:	6013      	str	r3, [r2, #0]
 800aa66:	9801      	ldr	r0, [sp, #4]
 800aa68:	b011      	add	sp, #68	; 0x44
 800aa6a:	ecbd 8b02 	vpop	{d8}
 800aa6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa72:	4b8a      	ldr	r3, [pc, #552]	; (800ac9c <_dtoa_r+0x2d4>)
 800aa74:	9301      	str	r3, [sp, #4]
 800aa76:	3303      	adds	r3, #3
 800aa78:	e7f3      	b.n	800aa62 <_dtoa_r+0x9a>
 800aa7a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800aa7e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aa82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa86:	d10c      	bne.n	800aaa2 <_dtoa_r+0xda>
 800aa88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	6013      	str	r3, [r2, #0]
 800aa8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 84d7 	beq.w	800b444 <_dtoa_r+0xa7c>
 800aa96:	4b83      	ldr	r3, [pc, #524]	; (800aca4 <_dtoa_r+0x2dc>)
 800aa98:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800aa9a:	6013      	str	r3, [r2, #0]
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	9301      	str	r3, [sp, #4]
 800aaa0:	e7e1      	b.n	800aa66 <_dtoa_r+0x9e>
 800aaa2:	aa0e      	add	r2, sp, #56	; 0x38
 800aaa4:	a90f      	add	r1, sp, #60	; 0x3c
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	eeb0 0b48 	vmov.f64	d0, d8
 800aaac:	f001 fa6c 	bl	800bf88 <__d2b>
 800aab0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800aab4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aab6:	4605      	mov	r5, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d046      	beq.n	800ab4a <_dtoa_r+0x182>
 800aabc:	eeb0 7b48 	vmov.f64	d7, d8
 800aac0:	ee18 1a90 	vmov	r1, s17
 800aac4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800aac8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800aacc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800aad0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aad4:	2000      	movs	r0, #0
 800aad6:	ee07 1a90 	vmov	s15, r1
 800aada:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800aade:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800ac78 <_dtoa_r+0x2b0>
 800aae2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aae6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800ac80 <_dtoa_r+0x2b8>
 800aaea:	eea7 6b05 	vfma.f64	d6, d7, d5
 800aaee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800ac88 <_dtoa_r+0x2c0>
 800aaf2:	ee07 3a90 	vmov	s15, r3
 800aaf6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800aafa:	eeb0 7b46 	vmov.f64	d7, d6
 800aafe:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ab02:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ab06:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ab0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab0e:	ee16 ba90 	vmov	fp, s13
 800ab12:	9009      	str	r0, [sp, #36]	; 0x24
 800ab14:	d508      	bpl.n	800ab28 <_dtoa_r+0x160>
 800ab16:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ab1a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ab1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab22:	bf18      	it	ne
 800ab24:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800ab28:	f1bb 0f16 	cmp.w	fp, #22
 800ab2c:	d82b      	bhi.n	800ab86 <_dtoa_r+0x1be>
 800ab2e:	495e      	ldr	r1, [pc, #376]	; (800aca8 <_dtoa_r+0x2e0>)
 800ab30:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800ab34:	ed91 7b00 	vldr	d7, [r1]
 800ab38:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ab3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab40:	d501      	bpl.n	800ab46 <_dtoa_r+0x17e>
 800ab42:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ab46:	2100      	movs	r1, #0
 800ab48:	e01e      	b.n	800ab88 <_dtoa_r+0x1c0>
 800ab4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab4c:	4413      	add	r3, r2
 800ab4e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800ab52:	2920      	cmp	r1, #32
 800ab54:	bfc1      	itttt	gt
 800ab56:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800ab5a:	408c      	lslgt	r4, r1
 800ab5c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800ab60:	fa28 f101 	lsrgt.w	r1, r8, r1
 800ab64:	bfd6      	itet	le
 800ab66:	f1c1 0120 	rsble	r1, r1, #32
 800ab6a:	4321      	orrgt	r1, r4
 800ab6c:	fa08 f101 	lslle.w	r1, r8, r1
 800ab70:	ee07 1a90 	vmov	s15, r1
 800ab74:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	ee17 1a90 	vmov	r1, s15
 800ab7e:	2001      	movs	r0, #1
 800ab80:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ab84:	e7a7      	b.n	800aad6 <_dtoa_r+0x10e>
 800ab86:	2101      	movs	r1, #1
 800ab88:	1ad2      	subs	r2, r2, r3
 800ab8a:	1e53      	subs	r3, r2, #1
 800ab8c:	9305      	str	r3, [sp, #20]
 800ab8e:	bf45      	ittet	mi
 800ab90:	f1c2 0301 	rsbmi	r3, r2, #1
 800ab94:	9304      	strmi	r3, [sp, #16]
 800ab96:	2300      	movpl	r3, #0
 800ab98:	2300      	movmi	r3, #0
 800ab9a:	bf4c      	ite	mi
 800ab9c:	9305      	strmi	r3, [sp, #20]
 800ab9e:	9304      	strpl	r3, [sp, #16]
 800aba0:	f1bb 0f00 	cmp.w	fp, #0
 800aba4:	910b      	str	r1, [sp, #44]	; 0x2c
 800aba6:	db18      	blt.n	800abda <_dtoa_r+0x212>
 800aba8:	9b05      	ldr	r3, [sp, #20]
 800abaa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800abae:	445b      	add	r3, fp
 800abb0:	9305      	str	r3, [sp, #20]
 800abb2:	2300      	movs	r3, #0
 800abb4:	9a06      	ldr	r2, [sp, #24]
 800abb6:	2a09      	cmp	r2, #9
 800abb8:	d848      	bhi.n	800ac4c <_dtoa_r+0x284>
 800abba:	2a05      	cmp	r2, #5
 800abbc:	bfc4      	itt	gt
 800abbe:	3a04      	subgt	r2, #4
 800abc0:	9206      	strgt	r2, [sp, #24]
 800abc2:	9a06      	ldr	r2, [sp, #24]
 800abc4:	f1a2 0202 	sub.w	r2, r2, #2
 800abc8:	bfcc      	ite	gt
 800abca:	2400      	movgt	r4, #0
 800abcc:	2401      	movle	r4, #1
 800abce:	2a03      	cmp	r2, #3
 800abd0:	d847      	bhi.n	800ac62 <_dtoa_r+0x29a>
 800abd2:	e8df f002 	tbb	[pc, r2]
 800abd6:	2d0b      	.short	0x2d0b
 800abd8:	392b      	.short	0x392b
 800abda:	9b04      	ldr	r3, [sp, #16]
 800abdc:	2200      	movs	r2, #0
 800abde:	eba3 030b 	sub.w	r3, r3, fp
 800abe2:	9304      	str	r3, [sp, #16]
 800abe4:	920a      	str	r2, [sp, #40]	; 0x28
 800abe6:	f1cb 0300 	rsb	r3, fp, #0
 800abea:	e7e3      	b.n	800abb4 <_dtoa_r+0x1ec>
 800abec:	2200      	movs	r2, #0
 800abee:	9207      	str	r2, [sp, #28]
 800abf0:	9a08      	ldr	r2, [sp, #32]
 800abf2:	2a00      	cmp	r2, #0
 800abf4:	dc38      	bgt.n	800ac68 <_dtoa_r+0x2a0>
 800abf6:	f04f 0a01 	mov.w	sl, #1
 800abfa:	46d1      	mov	r9, sl
 800abfc:	4652      	mov	r2, sl
 800abfe:	f8cd a020 	str.w	sl, [sp, #32]
 800ac02:	69f7      	ldr	r7, [r6, #28]
 800ac04:	2100      	movs	r1, #0
 800ac06:	2004      	movs	r0, #4
 800ac08:	f100 0c14 	add.w	ip, r0, #20
 800ac0c:	4594      	cmp	ip, r2
 800ac0e:	d930      	bls.n	800ac72 <_dtoa_r+0x2aa>
 800ac10:	6079      	str	r1, [r7, #4]
 800ac12:	4630      	mov	r0, r6
 800ac14:	930d      	str	r3, [sp, #52]	; 0x34
 800ac16:	f000 fe95 	bl	800b944 <_Balloc>
 800ac1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac1c:	9001      	str	r0, [sp, #4]
 800ac1e:	4602      	mov	r2, r0
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d145      	bne.n	800acb0 <_dtoa_r+0x2e8>
 800ac24:	4b21      	ldr	r3, [pc, #132]	; (800acac <_dtoa_r+0x2e4>)
 800ac26:	f240 11af 	movw	r1, #431	; 0x1af
 800ac2a:	e6e5      	b.n	800a9f8 <_dtoa_r+0x30>
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	e7de      	b.n	800abee <_dtoa_r+0x226>
 800ac30:	2200      	movs	r2, #0
 800ac32:	9207      	str	r2, [sp, #28]
 800ac34:	9a08      	ldr	r2, [sp, #32]
 800ac36:	eb0b 0a02 	add.w	sl, fp, r2
 800ac3a:	f10a 0901 	add.w	r9, sl, #1
 800ac3e:	464a      	mov	r2, r9
 800ac40:	2a01      	cmp	r2, #1
 800ac42:	bfb8      	it	lt
 800ac44:	2201      	movlt	r2, #1
 800ac46:	e7dc      	b.n	800ac02 <_dtoa_r+0x23a>
 800ac48:	2201      	movs	r2, #1
 800ac4a:	e7f2      	b.n	800ac32 <_dtoa_r+0x26a>
 800ac4c:	2401      	movs	r4, #1
 800ac4e:	2200      	movs	r2, #0
 800ac50:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800ac54:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ac58:	2100      	movs	r1, #0
 800ac5a:	46d1      	mov	r9, sl
 800ac5c:	2212      	movs	r2, #18
 800ac5e:	9108      	str	r1, [sp, #32]
 800ac60:	e7cf      	b.n	800ac02 <_dtoa_r+0x23a>
 800ac62:	2201      	movs	r2, #1
 800ac64:	9207      	str	r2, [sp, #28]
 800ac66:	e7f5      	b.n	800ac54 <_dtoa_r+0x28c>
 800ac68:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ac6c:	46d1      	mov	r9, sl
 800ac6e:	4652      	mov	r2, sl
 800ac70:	e7c7      	b.n	800ac02 <_dtoa_r+0x23a>
 800ac72:	3101      	adds	r1, #1
 800ac74:	0040      	lsls	r0, r0, #1
 800ac76:	e7c7      	b.n	800ac08 <_dtoa_r+0x240>
 800ac78:	636f4361 	.word	0x636f4361
 800ac7c:	3fd287a7 	.word	0x3fd287a7
 800ac80:	8b60c8b3 	.word	0x8b60c8b3
 800ac84:	3fc68a28 	.word	0x3fc68a28
 800ac88:	509f79fb 	.word	0x509f79fb
 800ac8c:	3fd34413 	.word	0x3fd34413
 800ac90:	0800ed58 	.word	0x0800ed58
 800ac94:	0800ee10 	.word	0x0800ee10
 800ac98:	7ff00000 	.word	0x7ff00000
 800ac9c:	0800ee0c 	.word	0x0800ee0c
 800aca0:	0800ee03 	.word	0x0800ee03
 800aca4:	0800ed35 	.word	0x0800ed35
 800aca8:	0800ef10 	.word	0x0800ef10
 800acac:	0800ee68 	.word	0x0800ee68
 800acb0:	69f2      	ldr	r2, [r6, #28]
 800acb2:	9901      	ldr	r1, [sp, #4]
 800acb4:	6011      	str	r1, [r2, #0]
 800acb6:	f1b9 0f0e 	cmp.w	r9, #14
 800acba:	d86c      	bhi.n	800ad96 <_dtoa_r+0x3ce>
 800acbc:	2c00      	cmp	r4, #0
 800acbe:	d06a      	beq.n	800ad96 <_dtoa_r+0x3ce>
 800acc0:	f1bb 0f00 	cmp.w	fp, #0
 800acc4:	f340 80a0 	ble.w	800ae08 <_dtoa_r+0x440>
 800acc8:	4ac1      	ldr	r2, [pc, #772]	; (800afd0 <_dtoa_r+0x608>)
 800acca:	f00b 010f 	and.w	r1, fp, #15
 800acce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800acd2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800acd6:	ed92 7b00 	vldr	d7, [r2]
 800acda:	ea4f 122b 	mov.w	r2, fp, asr #4
 800acde:	f000 8087 	beq.w	800adf0 <_dtoa_r+0x428>
 800ace2:	49bc      	ldr	r1, [pc, #752]	; (800afd4 <_dtoa_r+0x60c>)
 800ace4:	ed91 6b08 	vldr	d6, [r1, #32]
 800ace8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800acec:	ed8d 6b02 	vstr	d6, [sp, #8]
 800acf0:	f002 020f 	and.w	r2, r2, #15
 800acf4:	2103      	movs	r1, #3
 800acf6:	48b7      	ldr	r0, [pc, #732]	; (800afd4 <_dtoa_r+0x60c>)
 800acf8:	2a00      	cmp	r2, #0
 800acfa:	d17b      	bne.n	800adf4 <_dtoa_r+0x42c>
 800acfc:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ad00:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ad04:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad0e:	2a00      	cmp	r2, #0
 800ad10:	f000 80a0 	beq.w	800ae54 <_dtoa_r+0x48c>
 800ad14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ad18:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ad1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad20:	f140 8098 	bpl.w	800ae54 <_dtoa_r+0x48c>
 800ad24:	f1b9 0f00 	cmp.w	r9, #0
 800ad28:	f000 8094 	beq.w	800ae54 <_dtoa_r+0x48c>
 800ad2c:	f1ba 0f00 	cmp.w	sl, #0
 800ad30:	dd2f      	ble.n	800ad92 <_dtoa_r+0x3ca>
 800ad32:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ad36:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad3a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad3e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800ad42:	3101      	adds	r1, #1
 800ad44:	4654      	mov	r4, sl
 800ad46:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ad4a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ad4e:	ee07 1a90 	vmov	s15, r1
 800ad52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ad56:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ad5a:	ee15 7a90 	vmov	r7, s11
 800ad5e:	ec51 0b15 	vmov	r0, r1, d5
 800ad62:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800ad66:	2c00      	cmp	r4, #0
 800ad68:	d177      	bne.n	800ae5a <_dtoa_r+0x492>
 800ad6a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ad6e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ad72:	ec41 0b17 	vmov	d7, r0, r1
 800ad76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ad7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad7e:	f300 826a 	bgt.w	800b256 <_dtoa_r+0x88e>
 800ad82:	eeb1 7b47 	vneg.f64	d7, d7
 800ad86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ad8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad8e:	f100 8260 	bmi.w	800b252 <_dtoa_r+0x88a>
 800ad92:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ad96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad98:	2a00      	cmp	r2, #0
 800ad9a:	f2c0 811d 	blt.w	800afd8 <_dtoa_r+0x610>
 800ad9e:	f1bb 0f0e 	cmp.w	fp, #14
 800ada2:	f300 8119 	bgt.w	800afd8 <_dtoa_r+0x610>
 800ada6:	4b8a      	ldr	r3, [pc, #552]	; (800afd0 <_dtoa_r+0x608>)
 800ada8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800adac:	ed93 6b00 	vldr	d6, [r3]
 800adb0:	9b08      	ldr	r3, [sp, #32]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f280 80b7 	bge.w	800af26 <_dtoa_r+0x55e>
 800adb8:	f1b9 0f00 	cmp.w	r9, #0
 800adbc:	f300 80b3 	bgt.w	800af26 <_dtoa_r+0x55e>
 800adc0:	f040 8246 	bne.w	800b250 <_dtoa_r+0x888>
 800adc4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800adc8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800adcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800add0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800add4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800add8:	464c      	mov	r4, r9
 800adda:	464f      	mov	r7, r9
 800addc:	f280 821c 	bge.w	800b218 <_dtoa_r+0x850>
 800ade0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ade4:	2331      	movs	r3, #49	; 0x31
 800ade6:	f808 3b01 	strb.w	r3, [r8], #1
 800adea:	f10b 0b01 	add.w	fp, fp, #1
 800adee:	e218      	b.n	800b222 <_dtoa_r+0x85a>
 800adf0:	2102      	movs	r1, #2
 800adf2:	e780      	b.n	800acf6 <_dtoa_r+0x32e>
 800adf4:	07d4      	lsls	r4, r2, #31
 800adf6:	d504      	bpl.n	800ae02 <_dtoa_r+0x43a>
 800adf8:	ed90 6b00 	vldr	d6, [r0]
 800adfc:	3101      	adds	r1, #1
 800adfe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ae02:	1052      	asrs	r2, r2, #1
 800ae04:	3008      	adds	r0, #8
 800ae06:	e777      	b.n	800acf8 <_dtoa_r+0x330>
 800ae08:	d022      	beq.n	800ae50 <_dtoa_r+0x488>
 800ae0a:	f1cb 0200 	rsb	r2, fp, #0
 800ae0e:	4970      	ldr	r1, [pc, #448]	; (800afd0 <_dtoa_r+0x608>)
 800ae10:	f002 000f 	and.w	r0, r2, #15
 800ae14:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ae18:	ed91 7b00 	vldr	d7, [r1]
 800ae1c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ae20:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae24:	486b      	ldr	r0, [pc, #428]	; (800afd4 <_dtoa_r+0x60c>)
 800ae26:	1112      	asrs	r2, r2, #4
 800ae28:	2400      	movs	r4, #0
 800ae2a:	2102      	movs	r1, #2
 800ae2c:	b92a      	cbnz	r2, 800ae3a <_dtoa_r+0x472>
 800ae2e:	2c00      	cmp	r4, #0
 800ae30:	f43f af6a 	beq.w	800ad08 <_dtoa_r+0x340>
 800ae34:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae38:	e766      	b.n	800ad08 <_dtoa_r+0x340>
 800ae3a:	07d7      	lsls	r7, r2, #31
 800ae3c:	d505      	bpl.n	800ae4a <_dtoa_r+0x482>
 800ae3e:	ed90 6b00 	vldr	d6, [r0]
 800ae42:	3101      	adds	r1, #1
 800ae44:	2401      	movs	r4, #1
 800ae46:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ae4a:	1052      	asrs	r2, r2, #1
 800ae4c:	3008      	adds	r0, #8
 800ae4e:	e7ed      	b.n	800ae2c <_dtoa_r+0x464>
 800ae50:	2102      	movs	r1, #2
 800ae52:	e759      	b.n	800ad08 <_dtoa_r+0x340>
 800ae54:	465a      	mov	r2, fp
 800ae56:	464c      	mov	r4, r9
 800ae58:	e775      	b.n	800ad46 <_dtoa_r+0x37e>
 800ae5a:	ec41 0b17 	vmov	d7, r0, r1
 800ae5e:	495c      	ldr	r1, [pc, #368]	; (800afd0 <_dtoa_r+0x608>)
 800ae60:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800ae64:	ed11 4b02 	vldr	d4, [r1, #-8]
 800ae68:	9901      	ldr	r1, [sp, #4]
 800ae6a:	440c      	add	r4, r1
 800ae6c:	9907      	ldr	r1, [sp, #28]
 800ae6e:	b351      	cbz	r1, 800aec6 <_dtoa_r+0x4fe>
 800ae70:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ae74:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ae78:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ae7c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ae80:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ae84:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ae88:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ae8c:	ee14 1a90 	vmov	r1, s9
 800ae90:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ae94:	3130      	adds	r1, #48	; 0x30
 800ae96:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ae9a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ae9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aea2:	f808 1b01 	strb.w	r1, [r8], #1
 800aea6:	d439      	bmi.n	800af1c <_dtoa_r+0x554>
 800aea8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800aeac:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800aeb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb4:	d472      	bmi.n	800af9c <_dtoa_r+0x5d4>
 800aeb6:	45a0      	cmp	r8, r4
 800aeb8:	f43f af6b 	beq.w	800ad92 <_dtoa_r+0x3ca>
 800aebc:	ee27 7b03 	vmul.f64	d7, d7, d3
 800aec0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800aec4:	e7e0      	b.n	800ae88 <_dtoa_r+0x4c0>
 800aec6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aeca:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aece:	4620      	mov	r0, r4
 800aed0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800aed4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800aed8:	ee14 1a90 	vmov	r1, s9
 800aedc:	3130      	adds	r1, #48	; 0x30
 800aede:	f808 1b01 	strb.w	r1, [r8], #1
 800aee2:	45a0      	cmp	r8, r4
 800aee4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800aee8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800aeec:	d118      	bne.n	800af20 <_dtoa_r+0x558>
 800aeee:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800aef2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800aef6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800aefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aefe:	dc4d      	bgt.n	800af9c <_dtoa_r+0x5d4>
 800af00:	ee35 5b47 	vsub.f64	d5, d5, d7
 800af04:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800af08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af0c:	f57f af41 	bpl.w	800ad92 <_dtoa_r+0x3ca>
 800af10:	4680      	mov	r8, r0
 800af12:	3801      	subs	r0, #1
 800af14:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800af18:	2b30      	cmp	r3, #48	; 0x30
 800af1a:	d0f9      	beq.n	800af10 <_dtoa_r+0x548>
 800af1c:	4693      	mov	fp, r2
 800af1e:	e02a      	b.n	800af76 <_dtoa_r+0x5ae>
 800af20:	ee26 6b03 	vmul.f64	d6, d6, d3
 800af24:	e7d6      	b.n	800aed4 <_dtoa_r+0x50c>
 800af26:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af2a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800af2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800af32:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800af36:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800af3a:	ee15 3a10 	vmov	r3, s10
 800af3e:	3330      	adds	r3, #48	; 0x30
 800af40:	f808 3b01 	strb.w	r3, [r8], #1
 800af44:	9b01      	ldr	r3, [sp, #4]
 800af46:	eba8 0303 	sub.w	r3, r8, r3
 800af4a:	4599      	cmp	r9, r3
 800af4c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800af50:	eea3 7b46 	vfms.f64	d7, d3, d6
 800af54:	d133      	bne.n	800afbe <_dtoa_r+0x5f6>
 800af56:	ee37 7b07 	vadd.f64	d7, d7, d7
 800af5a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800af5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af62:	dc1a      	bgt.n	800af9a <_dtoa_r+0x5d2>
 800af64:	eeb4 7b46 	vcmp.f64	d7, d6
 800af68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af6c:	d103      	bne.n	800af76 <_dtoa_r+0x5ae>
 800af6e:	ee15 3a10 	vmov	r3, s10
 800af72:	07d9      	lsls	r1, r3, #31
 800af74:	d411      	bmi.n	800af9a <_dtoa_r+0x5d2>
 800af76:	4629      	mov	r1, r5
 800af78:	4630      	mov	r0, r6
 800af7a:	f000 fd23 	bl	800b9c4 <_Bfree>
 800af7e:	2300      	movs	r3, #0
 800af80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af82:	f888 3000 	strb.w	r3, [r8]
 800af86:	f10b 0301 	add.w	r3, fp, #1
 800af8a:	6013      	str	r3, [r2, #0]
 800af8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f43f ad69 	beq.w	800aa66 <_dtoa_r+0x9e>
 800af94:	f8c3 8000 	str.w	r8, [r3]
 800af98:	e565      	b.n	800aa66 <_dtoa_r+0x9e>
 800af9a:	465a      	mov	r2, fp
 800af9c:	4643      	mov	r3, r8
 800af9e:	4698      	mov	r8, r3
 800afa0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800afa4:	2939      	cmp	r1, #57	; 0x39
 800afa6:	d106      	bne.n	800afb6 <_dtoa_r+0x5ee>
 800afa8:	9901      	ldr	r1, [sp, #4]
 800afaa:	4299      	cmp	r1, r3
 800afac:	d1f7      	bne.n	800af9e <_dtoa_r+0x5d6>
 800afae:	9801      	ldr	r0, [sp, #4]
 800afb0:	2130      	movs	r1, #48	; 0x30
 800afb2:	3201      	adds	r2, #1
 800afb4:	7001      	strb	r1, [r0, #0]
 800afb6:	7819      	ldrb	r1, [r3, #0]
 800afb8:	3101      	adds	r1, #1
 800afba:	7019      	strb	r1, [r3, #0]
 800afbc:	e7ae      	b.n	800af1c <_dtoa_r+0x554>
 800afbe:	ee27 7b04 	vmul.f64	d7, d7, d4
 800afc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800afc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afca:	d1b2      	bne.n	800af32 <_dtoa_r+0x56a>
 800afcc:	e7d3      	b.n	800af76 <_dtoa_r+0x5ae>
 800afce:	bf00      	nop
 800afd0:	0800ef10 	.word	0x0800ef10
 800afd4:	0800eee8 	.word	0x0800eee8
 800afd8:	9907      	ldr	r1, [sp, #28]
 800afda:	2900      	cmp	r1, #0
 800afdc:	f000 80d0 	beq.w	800b180 <_dtoa_r+0x7b8>
 800afe0:	9906      	ldr	r1, [sp, #24]
 800afe2:	2901      	cmp	r1, #1
 800afe4:	f300 80b4 	bgt.w	800b150 <_dtoa_r+0x788>
 800afe8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800afea:	2900      	cmp	r1, #0
 800afec:	f000 80ac 	beq.w	800b148 <_dtoa_r+0x780>
 800aff0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aff4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aff8:	461c      	mov	r4, r3
 800affa:	9309      	str	r3, [sp, #36]	; 0x24
 800affc:	9b04      	ldr	r3, [sp, #16]
 800affe:	4413      	add	r3, r2
 800b000:	9304      	str	r3, [sp, #16]
 800b002:	9b05      	ldr	r3, [sp, #20]
 800b004:	2101      	movs	r1, #1
 800b006:	4413      	add	r3, r2
 800b008:	4630      	mov	r0, r6
 800b00a:	9305      	str	r3, [sp, #20]
 800b00c:	f000 fd90 	bl	800bb30 <__i2b>
 800b010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b012:	4607      	mov	r7, r0
 800b014:	f1b8 0f00 	cmp.w	r8, #0
 800b018:	d00d      	beq.n	800b036 <_dtoa_r+0x66e>
 800b01a:	9a05      	ldr	r2, [sp, #20]
 800b01c:	2a00      	cmp	r2, #0
 800b01e:	dd0a      	ble.n	800b036 <_dtoa_r+0x66e>
 800b020:	4542      	cmp	r2, r8
 800b022:	9904      	ldr	r1, [sp, #16]
 800b024:	bfa8      	it	ge
 800b026:	4642      	movge	r2, r8
 800b028:	1a89      	subs	r1, r1, r2
 800b02a:	9104      	str	r1, [sp, #16]
 800b02c:	9905      	ldr	r1, [sp, #20]
 800b02e:	eba8 0802 	sub.w	r8, r8, r2
 800b032:	1a8a      	subs	r2, r1, r2
 800b034:	9205      	str	r2, [sp, #20]
 800b036:	b303      	cbz	r3, 800b07a <_dtoa_r+0x6b2>
 800b038:	9a07      	ldr	r2, [sp, #28]
 800b03a:	2a00      	cmp	r2, #0
 800b03c:	f000 80a5 	beq.w	800b18a <_dtoa_r+0x7c2>
 800b040:	2c00      	cmp	r4, #0
 800b042:	dd13      	ble.n	800b06c <_dtoa_r+0x6a4>
 800b044:	4639      	mov	r1, r7
 800b046:	4622      	mov	r2, r4
 800b048:	4630      	mov	r0, r6
 800b04a:	930d      	str	r3, [sp, #52]	; 0x34
 800b04c:	f000 fe30 	bl	800bcb0 <__pow5mult>
 800b050:	462a      	mov	r2, r5
 800b052:	4601      	mov	r1, r0
 800b054:	4607      	mov	r7, r0
 800b056:	4630      	mov	r0, r6
 800b058:	f000 fd80 	bl	800bb5c <__multiply>
 800b05c:	4629      	mov	r1, r5
 800b05e:	9009      	str	r0, [sp, #36]	; 0x24
 800b060:	4630      	mov	r0, r6
 800b062:	f000 fcaf 	bl	800b9c4 <_Bfree>
 800b066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b06a:	4615      	mov	r5, r2
 800b06c:	1b1a      	subs	r2, r3, r4
 800b06e:	d004      	beq.n	800b07a <_dtoa_r+0x6b2>
 800b070:	4629      	mov	r1, r5
 800b072:	4630      	mov	r0, r6
 800b074:	f000 fe1c 	bl	800bcb0 <__pow5mult>
 800b078:	4605      	mov	r5, r0
 800b07a:	2101      	movs	r1, #1
 800b07c:	4630      	mov	r0, r6
 800b07e:	f000 fd57 	bl	800bb30 <__i2b>
 800b082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b084:	2b00      	cmp	r3, #0
 800b086:	4604      	mov	r4, r0
 800b088:	f340 8081 	ble.w	800b18e <_dtoa_r+0x7c6>
 800b08c:	461a      	mov	r2, r3
 800b08e:	4601      	mov	r1, r0
 800b090:	4630      	mov	r0, r6
 800b092:	f000 fe0d 	bl	800bcb0 <__pow5mult>
 800b096:	9b06      	ldr	r3, [sp, #24]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	4604      	mov	r4, r0
 800b09c:	dd7a      	ble.n	800b194 <_dtoa_r+0x7cc>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0a2:	6922      	ldr	r2, [r4, #16]
 800b0a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b0a8:	6910      	ldr	r0, [r2, #16]
 800b0aa:	f000 fcf3 	bl	800ba94 <__hi0bits>
 800b0ae:	f1c0 0020 	rsb	r0, r0, #32
 800b0b2:	9b05      	ldr	r3, [sp, #20]
 800b0b4:	4418      	add	r0, r3
 800b0b6:	f010 001f 	ands.w	r0, r0, #31
 800b0ba:	f000 8093 	beq.w	800b1e4 <_dtoa_r+0x81c>
 800b0be:	f1c0 0220 	rsb	r2, r0, #32
 800b0c2:	2a04      	cmp	r2, #4
 800b0c4:	f340 8085 	ble.w	800b1d2 <_dtoa_r+0x80a>
 800b0c8:	9b04      	ldr	r3, [sp, #16]
 800b0ca:	f1c0 001c 	rsb	r0, r0, #28
 800b0ce:	4403      	add	r3, r0
 800b0d0:	9304      	str	r3, [sp, #16]
 800b0d2:	9b05      	ldr	r3, [sp, #20]
 800b0d4:	4480      	add	r8, r0
 800b0d6:	4403      	add	r3, r0
 800b0d8:	9305      	str	r3, [sp, #20]
 800b0da:	9b04      	ldr	r3, [sp, #16]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	dd05      	ble.n	800b0ec <_dtoa_r+0x724>
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	f000 fe3d 	bl	800bd64 <__lshift>
 800b0ea:	4605      	mov	r5, r0
 800b0ec:	9b05      	ldr	r3, [sp, #20]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	dd05      	ble.n	800b0fe <_dtoa_r+0x736>
 800b0f2:	4621      	mov	r1, r4
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	4630      	mov	r0, r6
 800b0f8:	f000 fe34 	bl	800bd64 <__lshift>
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b100:	2b00      	cmp	r3, #0
 800b102:	d071      	beq.n	800b1e8 <_dtoa_r+0x820>
 800b104:	4621      	mov	r1, r4
 800b106:	4628      	mov	r0, r5
 800b108:	f000 fe98 	bl	800be3c <__mcmp>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	da6b      	bge.n	800b1e8 <_dtoa_r+0x820>
 800b110:	2300      	movs	r3, #0
 800b112:	4629      	mov	r1, r5
 800b114:	220a      	movs	r2, #10
 800b116:	4630      	mov	r0, r6
 800b118:	f000 fc76 	bl	800ba08 <__multadd>
 800b11c:	9b07      	ldr	r3, [sp, #28]
 800b11e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b122:	4605      	mov	r5, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	f000 8197 	beq.w	800b458 <_dtoa_r+0xa90>
 800b12a:	4639      	mov	r1, r7
 800b12c:	2300      	movs	r3, #0
 800b12e:	220a      	movs	r2, #10
 800b130:	4630      	mov	r0, r6
 800b132:	f000 fc69 	bl	800ba08 <__multadd>
 800b136:	f1ba 0f00 	cmp.w	sl, #0
 800b13a:	4607      	mov	r7, r0
 800b13c:	f300 8093 	bgt.w	800b266 <_dtoa_r+0x89e>
 800b140:	9b06      	ldr	r3, [sp, #24]
 800b142:	2b02      	cmp	r3, #2
 800b144:	dc57      	bgt.n	800b1f6 <_dtoa_r+0x82e>
 800b146:	e08e      	b.n	800b266 <_dtoa_r+0x89e>
 800b148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b14a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b14e:	e751      	b.n	800aff4 <_dtoa_r+0x62c>
 800b150:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800b154:	42a3      	cmp	r3, r4
 800b156:	bfbf      	itttt	lt
 800b158:	1ae2      	sublt	r2, r4, r3
 800b15a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b15c:	189b      	addlt	r3, r3, r2
 800b15e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b160:	bfae      	itee	ge
 800b162:	1b1c      	subge	r4, r3, r4
 800b164:	4623      	movlt	r3, r4
 800b166:	2400      	movlt	r4, #0
 800b168:	f1b9 0f00 	cmp.w	r9, #0
 800b16c:	bfb5      	itete	lt
 800b16e:	9a04      	ldrlt	r2, [sp, #16]
 800b170:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800b174:	eba2 0809 	sublt.w	r8, r2, r9
 800b178:	464a      	movge	r2, r9
 800b17a:	bfb8      	it	lt
 800b17c:	2200      	movlt	r2, #0
 800b17e:	e73c      	b.n	800affa <_dtoa_r+0x632>
 800b180:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b184:	9f07      	ldr	r7, [sp, #28]
 800b186:	461c      	mov	r4, r3
 800b188:	e744      	b.n	800b014 <_dtoa_r+0x64c>
 800b18a:	461a      	mov	r2, r3
 800b18c:	e770      	b.n	800b070 <_dtoa_r+0x6a8>
 800b18e:	9b06      	ldr	r3, [sp, #24]
 800b190:	2b01      	cmp	r3, #1
 800b192:	dc18      	bgt.n	800b1c6 <_dtoa_r+0x7fe>
 800b194:	9b02      	ldr	r3, [sp, #8]
 800b196:	b9b3      	cbnz	r3, 800b1c6 <_dtoa_r+0x7fe>
 800b198:	9b03      	ldr	r3, [sp, #12]
 800b19a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b19e:	b9a2      	cbnz	r2, 800b1ca <_dtoa_r+0x802>
 800b1a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b1a4:	0d12      	lsrs	r2, r2, #20
 800b1a6:	0512      	lsls	r2, r2, #20
 800b1a8:	b18a      	cbz	r2, 800b1ce <_dtoa_r+0x806>
 800b1aa:	9b04      	ldr	r3, [sp, #16]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	9304      	str	r3, [sp, #16]
 800b1b0:	9b05      	ldr	r3, [sp, #20]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	9305      	str	r3, [sp, #20]
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f47f af70 	bne.w	800b0a2 <_dtoa_r+0x6da>
 800b1c2:	2001      	movs	r0, #1
 800b1c4:	e775      	b.n	800b0b2 <_dtoa_r+0x6ea>
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	e7f6      	b.n	800b1b8 <_dtoa_r+0x7f0>
 800b1ca:	9b02      	ldr	r3, [sp, #8]
 800b1cc:	e7f4      	b.n	800b1b8 <_dtoa_r+0x7f0>
 800b1ce:	9209      	str	r2, [sp, #36]	; 0x24
 800b1d0:	e7f3      	b.n	800b1ba <_dtoa_r+0x7f2>
 800b1d2:	d082      	beq.n	800b0da <_dtoa_r+0x712>
 800b1d4:	9b04      	ldr	r3, [sp, #16]
 800b1d6:	321c      	adds	r2, #28
 800b1d8:	4413      	add	r3, r2
 800b1da:	9304      	str	r3, [sp, #16]
 800b1dc:	9b05      	ldr	r3, [sp, #20]
 800b1de:	4490      	add	r8, r2
 800b1e0:	4413      	add	r3, r2
 800b1e2:	e779      	b.n	800b0d8 <_dtoa_r+0x710>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	e7f5      	b.n	800b1d4 <_dtoa_r+0x80c>
 800b1e8:	f1b9 0f00 	cmp.w	r9, #0
 800b1ec:	dc36      	bgt.n	800b25c <_dtoa_r+0x894>
 800b1ee:	9b06      	ldr	r3, [sp, #24]
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	dd33      	ble.n	800b25c <_dtoa_r+0x894>
 800b1f4:	46ca      	mov	sl, r9
 800b1f6:	f1ba 0f00 	cmp.w	sl, #0
 800b1fa:	d10d      	bne.n	800b218 <_dtoa_r+0x850>
 800b1fc:	4621      	mov	r1, r4
 800b1fe:	4653      	mov	r3, sl
 800b200:	2205      	movs	r2, #5
 800b202:	4630      	mov	r0, r6
 800b204:	f000 fc00 	bl	800ba08 <__multadd>
 800b208:	4601      	mov	r1, r0
 800b20a:	4604      	mov	r4, r0
 800b20c:	4628      	mov	r0, r5
 800b20e:	f000 fe15 	bl	800be3c <__mcmp>
 800b212:	2800      	cmp	r0, #0
 800b214:	f73f ade4 	bgt.w	800ade0 <_dtoa_r+0x418>
 800b218:	9b08      	ldr	r3, [sp, #32]
 800b21a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b21e:	ea6f 0b03 	mvn.w	fp, r3
 800b222:	f04f 0900 	mov.w	r9, #0
 800b226:	4621      	mov	r1, r4
 800b228:	4630      	mov	r0, r6
 800b22a:	f000 fbcb 	bl	800b9c4 <_Bfree>
 800b22e:	2f00      	cmp	r7, #0
 800b230:	f43f aea1 	beq.w	800af76 <_dtoa_r+0x5ae>
 800b234:	f1b9 0f00 	cmp.w	r9, #0
 800b238:	d005      	beq.n	800b246 <_dtoa_r+0x87e>
 800b23a:	45b9      	cmp	r9, r7
 800b23c:	d003      	beq.n	800b246 <_dtoa_r+0x87e>
 800b23e:	4649      	mov	r1, r9
 800b240:	4630      	mov	r0, r6
 800b242:	f000 fbbf 	bl	800b9c4 <_Bfree>
 800b246:	4639      	mov	r1, r7
 800b248:	4630      	mov	r0, r6
 800b24a:	f000 fbbb 	bl	800b9c4 <_Bfree>
 800b24e:	e692      	b.n	800af76 <_dtoa_r+0x5ae>
 800b250:	2400      	movs	r4, #0
 800b252:	4627      	mov	r7, r4
 800b254:	e7e0      	b.n	800b218 <_dtoa_r+0x850>
 800b256:	4693      	mov	fp, r2
 800b258:	4627      	mov	r7, r4
 800b25a:	e5c1      	b.n	800ade0 <_dtoa_r+0x418>
 800b25c:	9b07      	ldr	r3, [sp, #28]
 800b25e:	46ca      	mov	sl, r9
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 8100 	beq.w	800b466 <_dtoa_r+0xa9e>
 800b266:	f1b8 0f00 	cmp.w	r8, #0
 800b26a:	dd05      	ble.n	800b278 <_dtoa_r+0x8b0>
 800b26c:	4639      	mov	r1, r7
 800b26e:	4642      	mov	r2, r8
 800b270:	4630      	mov	r0, r6
 800b272:	f000 fd77 	bl	800bd64 <__lshift>
 800b276:	4607      	mov	r7, r0
 800b278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d05d      	beq.n	800b33a <_dtoa_r+0x972>
 800b27e:	6879      	ldr	r1, [r7, #4]
 800b280:	4630      	mov	r0, r6
 800b282:	f000 fb5f 	bl	800b944 <_Balloc>
 800b286:	4680      	mov	r8, r0
 800b288:	b928      	cbnz	r0, 800b296 <_dtoa_r+0x8ce>
 800b28a:	4b82      	ldr	r3, [pc, #520]	; (800b494 <_dtoa_r+0xacc>)
 800b28c:	4602      	mov	r2, r0
 800b28e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b292:	f7ff bbb1 	b.w	800a9f8 <_dtoa_r+0x30>
 800b296:	693a      	ldr	r2, [r7, #16]
 800b298:	3202      	adds	r2, #2
 800b29a:	0092      	lsls	r2, r2, #2
 800b29c:	f107 010c 	add.w	r1, r7, #12
 800b2a0:	300c      	adds	r0, #12
 800b2a2:	f7ff fadb 	bl	800a85c <memcpy>
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	4641      	mov	r1, r8
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	f000 fd5a 	bl	800bd64 <__lshift>
 800b2b0:	9b01      	ldr	r3, [sp, #4]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	9304      	str	r3, [sp, #16]
 800b2b6:	9b01      	ldr	r3, [sp, #4]
 800b2b8:	4453      	add	r3, sl
 800b2ba:	9308      	str	r3, [sp, #32]
 800b2bc:	9b02      	ldr	r3, [sp, #8]
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	46b9      	mov	r9, r7
 800b2c4:	9307      	str	r3, [sp, #28]
 800b2c6:	4607      	mov	r7, r0
 800b2c8:	9b04      	ldr	r3, [sp, #16]
 800b2ca:	4621      	mov	r1, r4
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	9302      	str	r3, [sp, #8]
 800b2d2:	f7ff faef 	bl	800a8b4 <quorem>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	3330      	adds	r3, #48	; 0x30
 800b2da:	9005      	str	r0, [sp, #20]
 800b2dc:	4649      	mov	r1, r9
 800b2de:	4628      	mov	r0, r5
 800b2e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e2:	f000 fdab 	bl	800be3c <__mcmp>
 800b2e6:	463a      	mov	r2, r7
 800b2e8:	4682      	mov	sl, r0
 800b2ea:	4621      	mov	r1, r4
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	f000 fdc1 	bl	800be74 <__mdiff>
 800b2f2:	68c2      	ldr	r2, [r0, #12]
 800b2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f6:	4680      	mov	r8, r0
 800b2f8:	bb0a      	cbnz	r2, 800b33e <_dtoa_r+0x976>
 800b2fa:	4601      	mov	r1, r0
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	f000 fd9d 	bl	800be3c <__mcmp>
 800b302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b304:	4602      	mov	r2, r0
 800b306:	4641      	mov	r1, r8
 800b308:	4630      	mov	r0, r6
 800b30a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b30e:	f000 fb59 	bl	800b9c4 <_Bfree>
 800b312:	9b06      	ldr	r3, [sp, #24]
 800b314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b316:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b31a:	ea43 0102 	orr.w	r1, r3, r2
 800b31e:	9b07      	ldr	r3, [sp, #28]
 800b320:	4319      	orrs	r1, r3
 800b322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b324:	d10d      	bne.n	800b342 <_dtoa_r+0x97a>
 800b326:	2b39      	cmp	r3, #57	; 0x39
 800b328:	d029      	beq.n	800b37e <_dtoa_r+0x9b6>
 800b32a:	f1ba 0f00 	cmp.w	sl, #0
 800b32e:	dd01      	ble.n	800b334 <_dtoa_r+0x96c>
 800b330:	9b05      	ldr	r3, [sp, #20]
 800b332:	3331      	adds	r3, #49	; 0x31
 800b334:	9a02      	ldr	r2, [sp, #8]
 800b336:	7013      	strb	r3, [r2, #0]
 800b338:	e775      	b.n	800b226 <_dtoa_r+0x85e>
 800b33a:	4638      	mov	r0, r7
 800b33c:	e7b8      	b.n	800b2b0 <_dtoa_r+0x8e8>
 800b33e:	2201      	movs	r2, #1
 800b340:	e7e1      	b.n	800b306 <_dtoa_r+0x93e>
 800b342:	f1ba 0f00 	cmp.w	sl, #0
 800b346:	db06      	blt.n	800b356 <_dtoa_r+0x98e>
 800b348:	9906      	ldr	r1, [sp, #24]
 800b34a:	ea41 0a0a 	orr.w	sl, r1, sl
 800b34e:	9907      	ldr	r1, [sp, #28]
 800b350:	ea5a 0a01 	orrs.w	sl, sl, r1
 800b354:	d120      	bne.n	800b398 <_dtoa_r+0x9d0>
 800b356:	2a00      	cmp	r2, #0
 800b358:	ddec      	ble.n	800b334 <_dtoa_r+0x96c>
 800b35a:	4629      	mov	r1, r5
 800b35c:	2201      	movs	r2, #1
 800b35e:	4630      	mov	r0, r6
 800b360:	9304      	str	r3, [sp, #16]
 800b362:	f000 fcff 	bl	800bd64 <__lshift>
 800b366:	4621      	mov	r1, r4
 800b368:	4605      	mov	r5, r0
 800b36a:	f000 fd67 	bl	800be3c <__mcmp>
 800b36e:	2800      	cmp	r0, #0
 800b370:	9b04      	ldr	r3, [sp, #16]
 800b372:	dc02      	bgt.n	800b37a <_dtoa_r+0x9b2>
 800b374:	d1de      	bne.n	800b334 <_dtoa_r+0x96c>
 800b376:	07da      	lsls	r2, r3, #31
 800b378:	d5dc      	bpl.n	800b334 <_dtoa_r+0x96c>
 800b37a:	2b39      	cmp	r3, #57	; 0x39
 800b37c:	d1d8      	bne.n	800b330 <_dtoa_r+0x968>
 800b37e:	9a02      	ldr	r2, [sp, #8]
 800b380:	2339      	movs	r3, #57	; 0x39
 800b382:	7013      	strb	r3, [r2, #0]
 800b384:	4643      	mov	r3, r8
 800b386:	4698      	mov	r8, r3
 800b388:	3b01      	subs	r3, #1
 800b38a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b38e:	2a39      	cmp	r2, #57	; 0x39
 800b390:	d051      	beq.n	800b436 <_dtoa_r+0xa6e>
 800b392:	3201      	adds	r2, #1
 800b394:	701a      	strb	r2, [r3, #0]
 800b396:	e746      	b.n	800b226 <_dtoa_r+0x85e>
 800b398:	2a00      	cmp	r2, #0
 800b39a:	dd03      	ble.n	800b3a4 <_dtoa_r+0x9dc>
 800b39c:	2b39      	cmp	r3, #57	; 0x39
 800b39e:	d0ee      	beq.n	800b37e <_dtoa_r+0x9b6>
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	e7c7      	b.n	800b334 <_dtoa_r+0x96c>
 800b3a4:	9a04      	ldr	r2, [sp, #16]
 800b3a6:	9908      	ldr	r1, [sp, #32]
 800b3a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b3ac:	428a      	cmp	r2, r1
 800b3ae:	d02b      	beq.n	800b408 <_dtoa_r+0xa40>
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	220a      	movs	r2, #10
 800b3b6:	4630      	mov	r0, r6
 800b3b8:	f000 fb26 	bl	800ba08 <__multadd>
 800b3bc:	45b9      	cmp	r9, r7
 800b3be:	4605      	mov	r5, r0
 800b3c0:	f04f 0300 	mov.w	r3, #0
 800b3c4:	f04f 020a 	mov.w	r2, #10
 800b3c8:	4649      	mov	r1, r9
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	d107      	bne.n	800b3de <_dtoa_r+0xa16>
 800b3ce:	f000 fb1b 	bl	800ba08 <__multadd>
 800b3d2:	4681      	mov	r9, r0
 800b3d4:	4607      	mov	r7, r0
 800b3d6:	9b04      	ldr	r3, [sp, #16]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	9304      	str	r3, [sp, #16]
 800b3dc:	e774      	b.n	800b2c8 <_dtoa_r+0x900>
 800b3de:	f000 fb13 	bl	800ba08 <__multadd>
 800b3e2:	4639      	mov	r1, r7
 800b3e4:	4681      	mov	r9, r0
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	220a      	movs	r2, #10
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	f000 fb0c 	bl	800ba08 <__multadd>
 800b3f0:	4607      	mov	r7, r0
 800b3f2:	e7f0      	b.n	800b3d6 <_dtoa_r+0xa0e>
 800b3f4:	f1ba 0f00 	cmp.w	sl, #0
 800b3f8:	9a01      	ldr	r2, [sp, #4]
 800b3fa:	bfcc      	ite	gt
 800b3fc:	46d0      	movgt	r8, sl
 800b3fe:	f04f 0801 	movle.w	r8, #1
 800b402:	4490      	add	r8, r2
 800b404:	f04f 0900 	mov.w	r9, #0
 800b408:	4629      	mov	r1, r5
 800b40a:	2201      	movs	r2, #1
 800b40c:	4630      	mov	r0, r6
 800b40e:	9302      	str	r3, [sp, #8]
 800b410:	f000 fca8 	bl	800bd64 <__lshift>
 800b414:	4621      	mov	r1, r4
 800b416:	4605      	mov	r5, r0
 800b418:	f000 fd10 	bl	800be3c <__mcmp>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	dcb1      	bgt.n	800b384 <_dtoa_r+0x9bc>
 800b420:	d102      	bne.n	800b428 <_dtoa_r+0xa60>
 800b422:	9b02      	ldr	r3, [sp, #8]
 800b424:	07db      	lsls	r3, r3, #31
 800b426:	d4ad      	bmi.n	800b384 <_dtoa_r+0x9bc>
 800b428:	4643      	mov	r3, r8
 800b42a:	4698      	mov	r8, r3
 800b42c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b430:	2a30      	cmp	r2, #48	; 0x30
 800b432:	d0fa      	beq.n	800b42a <_dtoa_r+0xa62>
 800b434:	e6f7      	b.n	800b226 <_dtoa_r+0x85e>
 800b436:	9a01      	ldr	r2, [sp, #4]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d1a4      	bne.n	800b386 <_dtoa_r+0x9be>
 800b43c:	f10b 0b01 	add.w	fp, fp, #1
 800b440:	2331      	movs	r3, #49	; 0x31
 800b442:	e778      	b.n	800b336 <_dtoa_r+0x96e>
 800b444:	4b14      	ldr	r3, [pc, #80]	; (800b498 <_dtoa_r+0xad0>)
 800b446:	f7ff bb2a 	b.w	800aa9e <_dtoa_r+0xd6>
 800b44a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f47f ab05 	bne.w	800aa5c <_dtoa_r+0x94>
 800b452:	4b12      	ldr	r3, [pc, #72]	; (800b49c <_dtoa_r+0xad4>)
 800b454:	f7ff bb23 	b.w	800aa9e <_dtoa_r+0xd6>
 800b458:	f1ba 0f00 	cmp.w	sl, #0
 800b45c:	dc03      	bgt.n	800b466 <_dtoa_r+0xa9e>
 800b45e:	9b06      	ldr	r3, [sp, #24]
 800b460:	2b02      	cmp	r3, #2
 800b462:	f73f aec8 	bgt.w	800b1f6 <_dtoa_r+0x82e>
 800b466:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b46a:	4621      	mov	r1, r4
 800b46c:	4628      	mov	r0, r5
 800b46e:	f7ff fa21 	bl	800a8b4 <quorem>
 800b472:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b476:	f808 3b01 	strb.w	r3, [r8], #1
 800b47a:	9a01      	ldr	r2, [sp, #4]
 800b47c:	eba8 0202 	sub.w	r2, r8, r2
 800b480:	4592      	cmp	sl, r2
 800b482:	ddb7      	ble.n	800b3f4 <_dtoa_r+0xa2c>
 800b484:	4629      	mov	r1, r5
 800b486:	2300      	movs	r3, #0
 800b488:	220a      	movs	r2, #10
 800b48a:	4630      	mov	r0, r6
 800b48c:	f000 fabc 	bl	800ba08 <__multadd>
 800b490:	4605      	mov	r5, r0
 800b492:	e7ea      	b.n	800b46a <_dtoa_r+0xaa2>
 800b494:	0800ee68 	.word	0x0800ee68
 800b498:	0800ed34 	.word	0x0800ed34
 800b49c:	0800ee03 	.word	0x0800ee03

0800b4a0 <_free_r>:
 800b4a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4a2:	2900      	cmp	r1, #0
 800b4a4:	d044      	beq.n	800b530 <_free_r+0x90>
 800b4a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4aa:	9001      	str	r0, [sp, #4]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f1a1 0404 	sub.w	r4, r1, #4
 800b4b2:	bfb8      	it	lt
 800b4b4:	18e4      	addlt	r4, r4, r3
 800b4b6:	f7ff f841 	bl	800a53c <__malloc_lock>
 800b4ba:	4a1e      	ldr	r2, [pc, #120]	; (800b534 <_free_r+0x94>)
 800b4bc:	9801      	ldr	r0, [sp, #4]
 800b4be:	6813      	ldr	r3, [r2, #0]
 800b4c0:	b933      	cbnz	r3, 800b4d0 <_free_r+0x30>
 800b4c2:	6063      	str	r3, [r4, #4]
 800b4c4:	6014      	str	r4, [r2, #0]
 800b4c6:	b003      	add	sp, #12
 800b4c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4cc:	f7ff b83c 	b.w	800a548 <__malloc_unlock>
 800b4d0:	42a3      	cmp	r3, r4
 800b4d2:	d908      	bls.n	800b4e6 <_free_r+0x46>
 800b4d4:	6825      	ldr	r5, [r4, #0]
 800b4d6:	1961      	adds	r1, r4, r5
 800b4d8:	428b      	cmp	r3, r1
 800b4da:	bf01      	itttt	eq
 800b4dc:	6819      	ldreq	r1, [r3, #0]
 800b4de:	685b      	ldreq	r3, [r3, #4]
 800b4e0:	1949      	addeq	r1, r1, r5
 800b4e2:	6021      	streq	r1, [r4, #0]
 800b4e4:	e7ed      	b.n	800b4c2 <_free_r+0x22>
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	b10b      	cbz	r3, 800b4f0 <_free_r+0x50>
 800b4ec:	42a3      	cmp	r3, r4
 800b4ee:	d9fa      	bls.n	800b4e6 <_free_r+0x46>
 800b4f0:	6811      	ldr	r1, [r2, #0]
 800b4f2:	1855      	adds	r5, r2, r1
 800b4f4:	42a5      	cmp	r5, r4
 800b4f6:	d10b      	bne.n	800b510 <_free_r+0x70>
 800b4f8:	6824      	ldr	r4, [r4, #0]
 800b4fa:	4421      	add	r1, r4
 800b4fc:	1854      	adds	r4, r2, r1
 800b4fe:	42a3      	cmp	r3, r4
 800b500:	6011      	str	r1, [r2, #0]
 800b502:	d1e0      	bne.n	800b4c6 <_free_r+0x26>
 800b504:	681c      	ldr	r4, [r3, #0]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	6053      	str	r3, [r2, #4]
 800b50a:	440c      	add	r4, r1
 800b50c:	6014      	str	r4, [r2, #0]
 800b50e:	e7da      	b.n	800b4c6 <_free_r+0x26>
 800b510:	d902      	bls.n	800b518 <_free_r+0x78>
 800b512:	230c      	movs	r3, #12
 800b514:	6003      	str	r3, [r0, #0]
 800b516:	e7d6      	b.n	800b4c6 <_free_r+0x26>
 800b518:	6825      	ldr	r5, [r4, #0]
 800b51a:	1961      	adds	r1, r4, r5
 800b51c:	428b      	cmp	r3, r1
 800b51e:	bf04      	itt	eq
 800b520:	6819      	ldreq	r1, [r3, #0]
 800b522:	685b      	ldreq	r3, [r3, #4]
 800b524:	6063      	str	r3, [r4, #4]
 800b526:	bf04      	itt	eq
 800b528:	1949      	addeq	r1, r1, r5
 800b52a:	6021      	streq	r1, [r4, #0]
 800b52c:	6054      	str	r4, [r2, #4]
 800b52e:	e7ca      	b.n	800b4c6 <_free_r+0x26>
 800b530:	b003      	add	sp, #12
 800b532:	bd30      	pop	{r4, r5, pc}
 800b534:	200025e0 	.word	0x200025e0

0800b538 <__ssputs_r>:
 800b538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b53c:	688e      	ldr	r6, [r1, #8]
 800b53e:	461f      	mov	r7, r3
 800b540:	42be      	cmp	r6, r7
 800b542:	680b      	ldr	r3, [r1, #0]
 800b544:	4682      	mov	sl, r0
 800b546:	460c      	mov	r4, r1
 800b548:	4690      	mov	r8, r2
 800b54a:	d82c      	bhi.n	800b5a6 <__ssputs_r+0x6e>
 800b54c:	898a      	ldrh	r2, [r1, #12]
 800b54e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b552:	d026      	beq.n	800b5a2 <__ssputs_r+0x6a>
 800b554:	6965      	ldr	r5, [r4, #20]
 800b556:	6909      	ldr	r1, [r1, #16]
 800b558:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b55c:	eba3 0901 	sub.w	r9, r3, r1
 800b560:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b564:	1c7b      	adds	r3, r7, #1
 800b566:	444b      	add	r3, r9
 800b568:	106d      	asrs	r5, r5, #1
 800b56a:	429d      	cmp	r5, r3
 800b56c:	bf38      	it	cc
 800b56e:	461d      	movcc	r5, r3
 800b570:	0553      	lsls	r3, r2, #21
 800b572:	d527      	bpl.n	800b5c4 <__ssputs_r+0x8c>
 800b574:	4629      	mov	r1, r5
 800b576:	f7fe fdd1 	bl	800a11c <_malloc_r>
 800b57a:	4606      	mov	r6, r0
 800b57c:	b360      	cbz	r0, 800b5d8 <__ssputs_r+0xa0>
 800b57e:	6921      	ldr	r1, [r4, #16]
 800b580:	464a      	mov	r2, r9
 800b582:	f7ff f96b 	bl	800a85c <memcpy>
 800b586:	89a3      	ldrh	r3, [r4, #12]
 800b588:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b58c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b590:	81a3      	strh	r3, [r4, #12]
 800b592:	6126      	str	r6, [r4, #16]
 800b594:	6165      	str	r5, [r4, #20]
 800b596:	444e      	add	r6, r9
 800b598:	eba5 0509 	sub.w	r5, r5, r9
 800b59c:	6026      	str	r6, [r4, #0]
 800b59e:	60a5      	str	r5, [r4, #8]
 800b5a0:	463e      	mov	r6, r7
 800b5a2:	42be      	cmp	r6, r7
 800b5a4:	d900      	bls.n	800b5a8 <__ssputs_r+0x70>
 800b5a6:	463e      	mov	r6, r7
 800b5a8:	6820      	ldr	r0, [r4, #0]
 800b5aa:	4632      	mov	r2, r6
 800b5ac:	4641      	mov	r1, r8
 800b5ae:	f000 fdca 	bl	800c146 <memmove>
 800b5b2:	68a3      	ldr	r3, [r4, #8]
 800b5b4:	1b9b      	subs	r3, r3, r6
 800b5b6:	60a3      	str	r3, [r4, #8]
 800b5b8:	6823      	ldr	r3, [r4, #0]
 800b5ba:	4433      	add	r3, r6
 800b5bc:	6023      	str	r3, [r4, #0]
 800b5be:	2000      	movs	r0, #0
 800b5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c4:	462a      	mov	r2, r5
 800b5c6:	f000 fd8f 	bl	800c0e8 <_realloc_r>
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d1e0      	bne.n	800b592 <__ssputs_r+0x5a>
 800b5d0:	6921      	ldr	r1, [r4, #16]
 800b5d2:	4650      	mov	r0, sl
 800b5d4:	f7ff ff64 	bl	800b4a0 <_free_r>
 800b5d8:	230c      	movs	r3, #12
 800b5da:	f8ca 3000 	str.w	r3, [sl]
 800b5de:	89a3      	ldrh	r3, [r4, #12]
 800b5e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5e4:	81a3      	strh	r3, [r4, #12]
 800b5e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5ea:	e7e9      	b.n	800b5c0 <__ssputs_r+0x88>

0800b5ec <_svfiprintf_r>:
 800b5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f0:	4698      	mov	r8, r3
 800b5f2:	898b      	ldrh	r3, [r1, #12]
 800b5f4:	061b      	lsls	r3, r3, #24
 800b5f6:	b09d      	sub	sp, #116	; 0x74
 800b5f8:	4607      	mov	r7, r0
 800b5fa:	460d      	mov	r5, r1
 800b5fc:	4614      	mov	r4, r2
 800b5fe:	d50e      	bpl.n	800b61e <_svfiprintf_r+0x32>
 800b600:	690b      	ldr	r3, [r1, #16]
 800b602:	b963      	cbnz	r3, 800b61e <_svfiprintf_r+0x32>
 800b604:	2140      	movs	r1, #64	; 0x40
 800b606:	f7fe fd89 	bl	800a11c <_malloc_r>
 800b60a:	6028      	str	r0, [r5, #0]
 800b60c:	6128      	str	r0, [r5, #16]
 800b60e:	b920      	cbnz	r0, 800b61a <_svfiprintf_r+0x2e>
 800b610:	230c      	movs	r3, #12
 800b612:	603b      	str	r3, [r7, #0]
 800b614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b618:	e0d0      	b.n	800b7bc <_svfiprintf_r+0x1d0>
 800b61a:	2340      	movs	r3, #64	; 0x40
 800b61c:	616b      	str	r3, [r5, #20]
 800b61e:	2300      	movs	r3, #0
 800b620:	9309      	str	r3, [sp, #36]	; 0x24
 800b622:	2320      	movs	r3, #32
 800b624:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b628:	f8cd 800c 	str.w	r8, [sp, #12]
 800b62c:	2330      	movs	r3, #48	; 0x30
 800b62e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b7d4 <_svfiprintf_r+0x1e8>
 800b632:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b636:	f04f 0901 	mov.w	r9, #1
 800b63a:	4623      	mov	r3, r4
 800b63c:	469a      	mov	sl, r3
 800b63e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b642:	b10a      	cbz	r2, 800b648 <_svfiprintf_r+0x5c>
 800b644:	2a25      	cmp	r2, #37	; 0x25
 800b646:	d1f9      	bne.n	800b63c <_svfiprintf_r+0x50>
 800b648:	ebba 0b04 	subs.w	fp, sl, r4
 800b64c:	d00b      	beq.n	800b666 <_svfiprintf_r+0x7a>
 800b64e:	465b      	mov	r3, fp
 800b650:	4622      	mov	r2, r4
 800b652:	4629      	mov	r1, r5
 800b654:	4638      	mov	r0, r7
 800b656:	f7ff ff6f 	bl	800b538 <__ssputs_r>
 800b65a:	3001      	adds	r0, #1
 800b65c:	f000 80a9 	beq.w	800b7b2 <_svfiprintf_r+0x1c6>
 800b660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b662:	445a      	add	r2, fp
 800b664:	9209      	str	r2, [sp, #36]	; 0x24
 800b666:	f89a 3000 	ldrb.w	r3, [sl]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	f000 80a1 	beq.w	800b7b2 <_svfiprintf_r+0x1c6>
 800b670:	2300      	movs	r3, #0
 800b672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b67a:	f10a 0a01 	add.w	sl, sl, #1
 800b67e:	9304      	str	r3, [sp, #16]
 800b680:	9307      	str	r3, [sp, #28]
 800b682:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b686:	931a      	str	r3, [sp, #104]	; 0x68
 800b688:	4654      	mov	r4, sl
 800b68a:	2205      	movs	r2, #5
 800b68c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b690:	4850      	ldr	r0, [pc, #320]	; (800b7d4 <_svfiprintf_r+0x1e8>)
 800b692:	f7f4 fdd5 	bl	8000240 <memchr>
 800b696:	9a04      	ldr	r2, [sp, #16]
 800b698:	b9d8      	cbnz	r0, 800b6d2 <_svfiprintf_r+0xe6>
 800b69a:	06d0      	lsls	r0, r2, #27
 800b69c:	bf44      	itt	mi
 800b69e:	2320      	movmi	r3, #32
 800b6a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6a4:	0711      	lsls	r1, r2, #28
 800b6a6:	bf44      	itt	mi
 800b6a8:	232b      	movmi	r3, #43	; 0x2b
 800b6aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b6b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b6b4:	d015      	beq.n	800b6e2 <_svfiprintf_r+0xf6>
 800b6b6:	9a07      	ldr	r2, [sp, #28]
 800b6b8:	4654      	mov	r4, sl
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	f04f 0c0a 	mov.w	ip, #10
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6c6:	3b30      	subs	r3, #48	; 0x30
 800b6c8:	2b09      	cmp	r3, #9
 800b6ca:	d94d      	bls.n	800b768 <_svfiprintf_r+0x17c>
 800b6cc:	b1b0      	cbz	r0, 800b6fc <_svfiprintf_r+0x110>
 800b6ce:	9207      	str	r2, [sp, #28]
 800b6d0:	e014      	b.n	800b6fc <_svfiprintf_r+0x110>
 800b6d2:	eba0 0308 	sub.w	r3, r0, r8
 800b6d6:	fa09 f303 	lsl.w	r3, r9, r3
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	9304      	str	r3, [sp, #16]
 800b6de:	46a2      	mov	sl, r4
 800b6e0:	e7d2      	b.n	800b688 <_svfiprintf_r+0x9c>
 800b6e2:	9b03      	ldr	r3, [sp, #12]
 800b6e4:	1d19      	adds	r1, r3, #4
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	9103      	str	r1, [sp, #12]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	bfbb      	ittet	lt
 800b6ee:	425b      	neglt	r3, r3
 800b6f0:	f042 0202 	orrlt.w	r2, r2, #2
 800b6f4:	9307      	strge	r3, [sp, #28]
 800b6f6:	9307      	strlt	r3, [sp, #28]
 800b6f8:	bfb8      	it	lt
 800b6fa:	9204      	strlt	r2, [sp, #16]
 800b6fc:	7823      	ldrb	r3, [r4, #0]
 800b6fe:	2b2e      	cmp	r3, #46	; 0x2e
 800b700:	d10c      	bne.n	800b71c <_svfiprintf_r+0x130>
 800b702:	7863      	ldrb	r3, [r4, #1]
 800b704:	2b2a      	cmp	r3, #42	; 0x2a
 800b706:	d134      	bne.n	800b772 <_svfiprintf_r+0x186>
 800b708:	9b03      	ldr	r3, [sp, #12]
 800b70a:	1d1a      	adds	r2, r3, #4
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	9203      	str	r2, [sp, #12]
 800b710:	2b00      	cmp	r3, #0
 800b712:	bfb8      	it	lt
 800b714:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b718:	3402      	adds	r4, #2
 800b71a:	9305      	str	r3, [sp, #20]
 800b71c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b7e4 <_svfiprintf_r+0x1f8>
 800b720:	7821      	ldrb	r1, [r4, #0]
 800b722:	2203      	movs	r2, #3
 800b724:	4650      	mov	r0, sl
 800b726:	f7f4 fd8b 	bl	8000240 <memchr>
 800b72a:	b138      	cbz	r0, 800b73c <_svfiprintf_r+0x150>
 800b72c:	9b04      	ldr	r3, [sp, #16]
 800b72e:	eba0 000a 	sub.w	r0, r0, sl
 800b732:	2240      	movs	r2, #64	; 0x40
 800b734:	4082      	lsls	r2, r0
 800b736:	4313      	orrs	r3, r2
 800b738:	3401      	adds	r4, #1
 800b73a:	9304      	str	r3, [sp, #16]
 800b73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b740:	4825      	ldr	r0, [pc, #148]	; (800b7d8 <_svfiprintf_r+0x1ec>)
 800b742:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b746:	2206      	movs	r2, #6
 800b748:	f7f4 fd7a 	bl	8000240 <memchr>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d038      	beq.n	800b7c2 <_svfiprintf_r+0x1d6>
 800b750:	4b22      	ldr	r3, [pc, #136]	; (800b7dc <_svfiprintf_r+0x1f0>)
 800b752:	bb1b      	cbnz	r3, 800b79c <_svfiprintf_r+0x1b0>
 800b754:	9b03      	ldr	r3, [sp, #12]
 800b756:	3307      	adds	r3, #7
 800b758:	f023 0307 	bic.w	r3, r3, #7
 800b75c:	3308      	adds	r3, #8
 800b75e:	9303      	str	r3, [sp, #12]
 800b760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b762:	4433      	add	r3, r6
 800b764:	9309      	str	r3, [sp, #36]	; 0x24
 800b766:	e768      	b.n	800b63a <_svfiprintf_r+0x4e>
 800b768:	fb0c 3202 	mla	r2, ip, r2, r3
 800b76c:	460c      	mov	r4, r1
 800b76e:	2001      	movs	r0, #1
 800b770:	e7a6      	b.n	800b6c0 <_svfiprintf_r+0xd4>
 800b772:	2300      	movs	r3, #0
 800b774:	3401      	adds	r4, #1
 800b776:	9305      	str	r3, [sp, #20]
 800b778:	4619      	mov	r1, r3
 800b77a:	f04f 0c0a 	mov.w	ip, #10
 800b77e:	4620      	mov	r0, r4
 800b780:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b784:	3a30      	subs	r2, #48	; 0x30
 800b786:	2a09      	cmp	r2, #9
 800b788:	d903      	bls.n	800b792 <_svfiprintf_r+0x1a6>
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d0c6      	beq.n	800b71c <_svfiprintf_r+0x130>
 800b78e:	9105      	str	r1, [sp, #20]
 800b790:	e7c4      	b.n	800b71c <_svfiprintf_r+0x130>
 800b792:	fb0c 2101 	mla	r1, ip, r1, r2
 800b796:	4604      	mov	r4, r0
 800b798:	2301      	movs	r3, #1
 800b79a:	e7f0      	b.n	800b77e <_svfiprintf_r+0x192>
 800b79c:	ab03      	add	r3, sp, #12
 800b79e:	9300      	str	r3, [sp, #0]
 800b7a0:	462a      	mov	r2, r5
 800b7a2:	4b0f      	ldr	r3, [pc, #60]	; (800b7e0 <_svfiprintf_r+0x1f4>)
 800b7a4:	a904      	add	r1, sp, #16
 800b7a6:	4638      	mov	r0, r7
 800b7a8:	f7fe fa6e 	bl	8009c88 <_printf_float>
 800b7ac:	1c42      	adds	r2, r0, #1
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	d1d6      	bne.n	800b760 <_svfiprintf_r+0x174>
 800b7b2:	89ab      	ldrh	r3, [r5, #12]
 800b7b4:	065b      	lsls	r3, r3, #25
 800b7b6:	f53f af2d 	bmi.w	800b614 <_svfiprintf_r+0x28>
 800b7ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7bc:	b01d      	add	sp, #116	; 0x74
 800b7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c2:	ab03      	add	r3, sp, #12
 800b7c4:	9300      	str	r3, [sp, #0]
 800b7c6:	462a      	mov	r2, r5
 800b7c8:	4b05      	ldr	r3, [pc, #20]	; (800b7e0 <_svfiprintf_r+0x1f4>)
 800b7ca:	a904      	add	r1, sp, #16
 800b7cc:	4638      	mov	r0, r7
 800b7ce:	f7fe fd93 	bl	800a2f8 <_printf_i>
 800b7d2:	e7eb      	b.n	800b7ac <_svfiprintf_r+0x1c0>
 800b7d4:	0800ee79 	.word	0x0800ee79
 800b7d8:	0800ee83 	.word	0x0800ee83
 800b7dc:	08009c89 	.word	0x08009c89
 800b7e0:	0800b539 	.word	0x0800b539
 800b7e4:	0800ee7f 	.word	0x0800ee7f

0800b7e8 <__sflush_r>:
 800b7e8:	898a      	ldrh	r2, [r1, #12]
 800b7ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ee:	4605      	mov	r5, r0
 800b7f0:	0710      	lsls	r0, r2, #28
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	d458      	bmi.n	800b8a8 <__sflush_r+0xc0>
 800b7f6:	684b      	ldr	r3, [r1, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	dc05      	bgt.n	800b808 <__sflush_r+0x20>
 800b7fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	dc02      	bgt.n	800b808 <__sflush_r+0x20>
 800b802:	2000      	movs	r0, #0
 800b804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b80a:	2e00      	cmp	r6, #0
 800b80c:	d0f9      	beq.n	800b802 <__sflush_r+0x1a>
 800b80e:	2300      	movs	r3, #0
 800b810:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b814:	682f      	ldr	r7, [r5, #0]
 800b816:	6a21      	ldr	r1, [r4, #32]
 800b818:	602b      	str	r3, [r5, #0]
 800b81a:	d032      	beq.n	800b882 <__sflush_r+0x9a>
 800b81c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b81e:	89a3      	ldrh	r3, [r4, #12]
 800b820:	075a      	lsls	r2, r3, #29
 800b822:	d505      	bpl.n	800b830 <__sflush_r+0x48>
 800b824:	6863      	ldr	r3, [r4, #4]
 800b826:	1ac0      	subs	r0, r0, r3
 800b828:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b82a:	b10b      	cbz	r3, 800b830 <__sflush_r+0x48>
 800b82c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b82e:	1ac0      	subs	r0, r0, r3
 800b830:	2300      	movs	r3, #0
 800b832:	4602      	mov	r2, r0
 800b834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b836:	6a21      	ldr	r1, [r4, #32]
 800b838:	4628      	mov	r0, r5
 800b83a:	47b0      	blx	r6
 800b83c:	1c43      	adds	r3, r0, #1
 800b83e:	89a3      	ldrh	r3, [r4, #12]
 800b840:	d106      	bne.n	800b850 <__sflush_r+0x68>
 800b842:	6829      	ldr	r1, [r5, #0]
 800b844:	291d      	cmp	r1, #29
 800b846:	d82b      	bhi.n	800b8a0 <__sflush_r+0xb8>
 800b848:	4a29      	ldr	r2, [pc, #164]	; (800b8f0 <__sflush_r+0x108>)
 800b84a:	410a      	asrs	r2, r1
 800b84c:	07d6      	lsls	r6, r2, #31
 800b84e:	d427      	bmi.n	800b8a0 <__sflush_r+0xb8>
 800b850:	2200      	movs	r2, #0
 800b852:	6062      	str	r2, [r4, #4]
 800b854:	04d9      	lsls	r1, r3, #19
 800b856:	6922      	ldr	r2, [r4, #16]
 800b858:	6022      	str	r2, [r4, #0]
 800b85a:	d504      	bpl.n	800b866 <__sflush_r+0x7e>
 800b85c:	1c42      	adds	r2, r0, #1
 800b85e:	d101      	bne.n	800b864 <__sflush_r+0x7c>
 800b860:	682b      	ldr	r3, [r5, #0]
 800b862:	b903      	cbnz	r3, 800b866 <__sflush_r+0x7e>
 800b864:	6560      	str	r0, [r4, #84]	; 0x54
 800b866:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b868:	602f      	str	r7, [r5, #0]
 800b86a:	2900      	cmp	r1, #0
 800b86c:	d0c9      	beq.n	800b802 <__sflush_r+0x1a>
 800b86e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b872:	4299      	cmp	r1, r3
 800b874:	d002      	beq.n	800b87c <__sflush_r+0x94>
 800b876:	4628      	mov	r0, r5
 800b878:	f7ff fe12 	bl	800b4a0 <_free_r>
 800b87c:	2000      	movs	r0, #0
 800b87e:	6360      	str	r0, [r4, #52]	; 0x34
 800b880:	e7c0      	b.n	800b804 <__sflush_r+0x1c>
 800b882:	2301      	movs	r3, #1
 800b884:	4628      	mov	r0, r5
 800b886:	47b0      	blx	r6
 800b888:	1c41      	adds	r1, r0, #1
 800b88a:	d1c8      	bne.n	800b81e <__sflush_r+0x36>
 800b88c:	682b      	ldr	r3, [r5, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d0c5      	beq.n	800b81e <__sflush_r+0x36>
 800b892:	2b1d      	cmp	r3, #29
 800b894:	d001      	beq.n	800b89a <__sflush_r+0xb2>
 800b896:	2b16      	cmp	r3, #22
 800b898:	d101      	bne.n	800b89e <__sflush_r+0xb6>
 800b89a:	602f      	str	r7, [r5, #0]
 800b89c:	e7b1      	b.n	800b802 <__sflush_r+0x1a>
 800b89e:	89a3      	ldrh	r3, [r4, #12]
 800b8a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8a4:	81a3      	strh	r3, [r4, #12]
 800b8a6:	e7ad      	b.n	800b804 <__sflush_r+0x1c>
 800b8a8:	690f      	ldr	r7, [r1, #16]
 800b8aa:	2f00      	cmp	r7, #0
 800b8ac:	d0a9      	beq.n	800b802 <__sflush_r+0x1a>
 800b8ae:	0793      	lsls	r3, r2, #30
 800b8b0:	680e      	ldr	r6, [r1, #0]
 800b8b2:	bf08      	it	eq
 800b8b4:	694b      	ldreq	r3, [r1, #20]
 800b8b6:	600f      	str	r7, [r1, #0]
 800b8b8:	bf18      	it	ne
 800b8ba:	2300      	movne	r3, #0
 800b8bc:	eba6 0807 	sub.w	r8, r6, r7
 800b8c0:	608b      	str	r3, [r1, #8]
 800b8c2:	f1b8 0f00 	cmp.w	r8, #0
 800b8c6:	dd9c      	ble.n	800b802 <__sflush_r+0x1a>
 800b8c8:	6a21      	ldr	r1, [r4, #32]
 800b8ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b8cc:	4643      	mov	r3, r8
 800b8ce:	463a      	mov	r2, r7
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	47b0      	blx	r6
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	dc06      	bgt.n	800b8e6 <__sflush_r+0xfe>
 800b8d8:	89a3      	ldrh	r3, [r4, #12]
 800b8da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8de:	81a3      	strh	r3, [r4, #12]
 800b8e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8e4:	e78e      	b.n	800b804 <__sflush_r+0x1c>
 800b8e6:	4407      	add	r7, r0
 800b8e8:	eba8 0800 	sub.w	r8, r8, r0
 800b8ec:	e7e9      	b.n	800b8c2 <__sflush_r+0xda>
 800b8ee:	bf00      	nop
 800b8f0:	dfbffffe 	.word	0xdfbffffe

0800b8f4 <_fflush_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	690b      	ldr	r3, [r1, #16]
 800b8f8:	4605      	mov	r5, r0
 800b8fa:	460c      	mov	r4, r1
 800b8fc:	b913      	cbnz	r3, 800b904 <_fflush_r+0x10>
 800b8fe:	2500      	movs	r5, #0
 800b900:	4628      	mov	r0, r5
 800b902:	bd38      	pop	{r3, r4, r5, pc}
 800b904:	b118      	cbz	r0, 800b90e <_fflush_r+0x1a>
 800b906:	6a03      	ldr	r3, [r0, #32]
 800b908:	b90b      	cbnz	r3, 800b90e <_fflush_r+0x1a>
 800b90a:	f7fe ff29 	bl	800a760 <__sinit>
 800b90e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d0f3      	beq.n	800b8fe <_fflush_r+0xa>
 800b916:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b918:	07d0      	lsls	r0, r2, #31
 800b91a:	d404      	bmi.n	800b926 <_fflush_r+0x32>
 800b91c:	0599      	lsls	r1, r3, #22
 800b91e:	d402      	bmi.n	800b926 <_fflush_r+0x32>
 800b920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b922:	f7fe ff99 	bl	800a858 <__retarget_lock_acquire_recursive>
 800b926:	4628      	mov	r0, r5
 800b928:	4621      	mov	r1, r4
 800b92a:	f7ff ff5d 	bl	800b7e8 <__sflush_r>
 800b92e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b930:	07da      	lsls	r2, r3, #31
 800b932:	4605      	mov	r5, r0
 800b934:	d4e4      	bmi.n	800b900 <_fflush_r+0xc>
 800b936:	89a3      	ldrh	r3, [r4, #12]
 800b938:	059b      	lsls	r3, r3, #22
 800b93a:	d4e1      	bmi.n	800b900 <_fflush_r+0xc>
 800b93c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b93e:	f7fe ff8c 	bl	800a85a <__retarget_lock_release_recursive>
 800b942:	e7dd      	b.n	800b900 <_fflush_r+0xc>

0800b944 <_Balloc>:
 800b944:	b570      	push	{r4, r5, r6, lr}
 800b946:	69c6      	ldr	r6, [r0, #28]
 800b948:	4604      	mov	r4, r0
 800b94a:	460d      	mov	r5, r1
 800b94c:	b976      	cbnz	r6, 800b96c <_Balloc+0x28>
 800b94e:	2010      	movs	r0, #16
 800b950:	f7fe fbb4 	bl	800a0bc <malloc>
 800b954:	4602      	mov	r2, r0
 800b956:	61e0      	str	r0, [r4, #28]
 800b958:	b920      	cbnz	r0, 800b964 <_Balloc+0x20>
 800b95a:	4b18      	ldr	r3, [pc, #96]	; (800b9bc <_Balloc+0x78>)
 800b95c:	4818      	ldr	r0, [pc, #96]	; (800b9c0 <_Balloc+0x7c>)
 800b95e:	216b      	movs	r1, #107	; 0x6b
 800b960:	f7fe ff8a 	bl	800a878 <__assert_func>
 800b964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b968:	6006      	str	r6, [r0, #0]
 800b96a:	60c6      	str	r6, [r0, #12]
 800b96c:	69e6      	ldr	r6, [r4, #28]
 800b96e:	68f3      	ldr	r3, [r6, #12]
 800b970:	b183      	cbz	r3, 800b994 <_Balloc+0x50>
 800b972:	69e3      	ldr	r3, [r4, #28]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b97a:	b9b8      	cbnz	r0, 800b9ac <_Balloc+0x68>
 800b97c:	2101      	movs	r1, #1
 800b97e:	fa01 f605 	lsl.w	r6, r1, r5
 800b982:	1d72      	adds	r2, r6, #5
 800b984:	0092      	lsls	r2, r2, #2
 800b986:	4620      	mov	r0, r4
 800b988:	f7fe f8d6 	bl	8009b38 <_calloc_r>
 800b98c:	b160      	cbz	r0, 800b9a8 <_Balloc+0x64>
 800b98e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b992:	e00e      	b.n	800b9b2 <_Balloc+0x6e>
 800b994:	2221      	movs	r2, #33	; 0x21
 800b996:	2104      	movs	r1, #4
 800b998:	4620      	mov	r0, r4
 800b99a:	f7fe f8cd 	bl	8009b38 <_calloc_r>
 800b99e:	69e3      	ldr	r3, [r4, #28]
 800b9a0:	60f0      	str	r0, [r6, #12]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d1e4      	bne.n	800b972 <_Balloc+0x2e>
 800b9a8:	2000      	movs	r0, #0
 800b9aa:	bd70      	pop	{r4, r5, r6, pc}
 800b9ac:	6802      	ldr	r2, [r0, #0]
 800b9ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b9b8:	e7f7      	b.n	800b9aa <_Balloc+0x66>
 800b9ba:	bf00      	nop
 800b9bc:	0800ed58 	.word	0x0800ed58
 800b9c0:	0800ee8a 	.word	0x0800ee8a

0800b9c4 <_Bfree>:
 800b9c4:	b570      	push	{r4, r5, r6, lr}
 800b9c6:	69c6      	ldr	r6, [r0, #28]
 800b9c8:	4605      	mov	r5, r0
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	b976      	cbnz	r6, 800b9ec <_Bfree+0x28>
 800b9ce:	2010      	movs	r0, #16
 800b9d0:	f7fe fb74 	bl	800a0bc <malloc>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	61e8      	str	r0, [r5, #28]
 800b9d8:	b920      	cbnz	r0, 800b9e4 <_Bfree+0x20>
 800b9da:	4b09      	ldr	r3, [pc, #36]	; (800ba00 <_Bfree+0x3c>)
 800b9dc:	4809      	ldr	r0, [pc, #36]	; (800ba04 <_Bfree+0x40>)
 800b9de:	218f      	movs	r1, #143	; 0x8f
 800b9e0:	f7fe ff4a 	bl	800a878 <__assert_func>
 800b9e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9e8:	6006      	str	r6, [r0, #0]
 800b9ea:	60c6      	str	r6, [r0, #12]
 800b9ec:	b13c      	cbz	r4, 800b9fe <_Bfree+0x3a>
 800b9ee:	69eb      	ldr	r3, [r5, #28]
 800b9f0:	6862      	ldr	r2, [r4, #4]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9f8:	6021      	str	r1, [r4, #0]
 800b9fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ba00:	0800ed58 	.word	0x0800ed58
 800ba04:	0800ee8a 	.word	0x0800ee8a

0800ba08 <__multadd>:
 800ba08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba0c:	690d      	ldr	r5, [r1, #16]
 800ba0e:	4607      	mov	r7, r0
 800ba10:	460c      	mov	r4, r1
 800ba12:	461e      	mov	r6, r3
 800ba14:	f101 0c14 	add.w	ip, r1, #20
 800ba18:	2000      	movs	r0, #0
 800ba1a:	f8dc 3000 	ldr.w	r3, [ip]
 800ba1e:	b299      	uxth	r1, r3
 800ba20:	fb02 6101 	mla	r1, r2, r1, r6
 800ba24:	0c1e      	lsrs	r6, r3, #16
 800ba26:	0c0b      	lsrs	r3, r1, #16
 800ba28:	fb02 3306 	mla	r3, r2, r6, r3
 800ba2c:	b289      	uxth	r1, r1
 800ba2e:	3001      	adds	r0, #1
 800ba30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ba34:	4285      	cmp	r5, r0
 800ba36:	f84c 1b04 	str.w	r1, [ip], #4
 800ba3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ba3e:	dcec      	bgt.n	800ba1a <__multadd+0x12>
 800ba40:	b30e      	cbz	r6, 800ba86 <__multadd+0x7e>
 800ba42:	68a3      	ldr	r3, [r4, #8]
 800ba44:	42ab      	cmp	r3, r5
 800ba46:	dc19      	bgt.n	800ba7c <__multadd+0x74>
 800ba48:	6861      	ldr	r1, [r4, #4]
 800ba4a:	4638      	mov	r0, r7
 800ba4c:	3101      	adds	r1, #1
 800ba4e:	f7ff ff79 	bl	800b944 <_Balloc>
 800ba52:	4680      	mov	r8, r0
 800ba54:	b928      	cbnz	r0, 800ba62 <__multadd+0x5a>
 800ba56:	4602      	mov	r2, r0
 800ba58:	4b0c      	ldr	r3, [pc, #48]	; (800ba8c <__multadd+0x84>)
 800ba5a:	480d      	ldr	r0, [pc, #52]	; (800ba90 <__multadd+0x88>)
 800ba5c:	21ba      	movs	r1, #186	; 0xba
 800ba5e:	f7fe ff0b 	bl	800a878 <__assert_func>
 800ba62:	6922      	ldr	r2, [r4, #16]
 800ba64:	3202      	adds	r2, #2
 800ba66:	f104 010c 	add.w	r1, r4, #12
 800ba6a:	0092      	lsls	r2, r2, #2
 800ba6c:	300c      	adds	r0, #12
 800ba6e:	f7fe fef5 	bl	800a85c <memcpy>
 800ba72:	4621      	mov	r1, r4
 800ba74:	4638      	mov	r0, r7
 800ba76:	f7ff ffa5 	bl	800b9c4 <_Bfree>
 800ba7a:	4644      	mov	r4, r8
 800ba7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba80:	3501      	adds	r5, #1
 800ba82:	615e      	str	r6, [r3, #20]
 800ba84:	6125      	str	r5, [r4, #16]
 800ba86:	4620      	mov	r0, r4
 800ba88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba8c:	0800ee68 	.word	0x0800ee68
 800ba90:	0800ee8a 	.word	0x0800ee8a

0800ba94 <__hi0bits>:
 800ba94:	0c03      	lsrs	r3, r0, #16
 800ba96:	041b      	lsls	r3, r3, #16
 800ba98:	b9d3      	cbnz	r3, 800bad0 <__hi0bits+0x3c>
 800ba9a:	0400      	lsls	r0, r0, #16
 800ba9c:	2310      	movs	r3, #16
 800ba9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800baa2:	bf04      	itt	eq
 800baa4:	0200      	lsleq	r0, r0, #8
 800baa6:	3308      	addeq	r3, #8
 800baa8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800baac:	bf04      	itt	eq
 800baae:	0100      	lsleq	r0, r0, #4
 800bab0:	3304      	addeq	r3, #4
 800bab2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bab6:	bf04      	itt	eq
 800bab8:	0080      	lsleq	r0, r0, #2
 800baba:	3302      	addeq	r3, #2
 800babc:	2800      	cmp	r0, #0
 800babe:	db05      	blt.n	800bacc <__hi0bits+0x38>
 800bac0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bac4:	f103 0301 	add.w	r3, r3, #1
 800bac8:	bf08      	it	eq
 800baca:	2320      	moveq	r3, #32
 800bacc:	4618      	mov	r0, r3
 800bace:	4770      	bx	lr
 800bad0:	2300      	movs	r3, #0
 800bad2:	e7e4      	b.n	800ba9e <__hi0bits+0xa>

0800bad4 <__lo0bits>:
 800bad4:	6803      	ldr	r3, [r0, #0]
 800bad6:	f013 0207 	ands.w	r2, r3, #7
 800bada:	d00c      	beq.n	800baf6 <__lo0bits+0x22>
 800badc:	07d9      	lsls	r1, r3, #31
 800bade:	d422      	bmi.n	800bb26 <__lo0bits+0x52>
 800bae0:	079a      	lsls	r2, r3, #30
 800bae2:	bf49      	itett	mi
 800bae4:	085b      	lsrmi	r3, r3, #1
 800bae6:	089b      	lsrpl	r3, r3, #2
 800bae8:	6003      	strmi	r3, [r0, #0]
 800baea:	2201      	movmi	r2, #1
 800baec:	bf5c      	itt	pl
 800baee:	6003      	strpl	r3, [r0, #0]
 800baf0:	2202      	movpl	r2, #2
 800baf2:	4610      	mov	r0, r2
 800baf4:	4770      	bx	lr
 800baf6:	b299      	uxth	r1, r3
 800baf8:	b909      	cbnz	r1, 800bafe <__lo0bits+0x2a>
 800bafa:	0c1b      	lsrs	r3, r3, #16
 800bafc:	2210      	movs	r2, #16
 800bafe:	b2d9      	uxtb	r1, r3
 800bb00:	b909      	cbnz	r1, 800bb06 <__lo0bits+0x32>
 800bb02:	3208      	adds	r2, #8
 800bb04:	0a1b      	lsrs	r3, r3, #8
 800bb06:	0719      	lsls	r1, r3, #28
 800bb08:	bf04      	itt	eq
 800bb0a:	091b      	lsreq	r3, r3, #4
 800bb0c:	3204      	addeq	r2, #4
 800bb0e:	0799      	lsls	r1, r3, #30
 800bb10:	bf04      	itt	eq
 800bb12:	089b      	lsreq	r3, r3, #2
 800bb14:	3202      	addeq	r2, #2
 800bb16:	07d9      	lsls	r1, r3, #31
 800bb18:	d403      	bmi.n	800bb22 <__lo0bits+0x4e>
 800bb1a:	085b      	lsrs	r3, r3, #1
 800bb1c:	f102 0201 	add.w	r2, r2, #1
 800bb20:	d003      	beq.n	800bb2a <__lo0bits+0x56>
 800bb22:	6003      	str	r3, [r0, #0]
 800bb24:	e7e5      	b.n	800baf2 <__lo0bits+0x1e>
 800bb26:	2200      	movs	r2, #0
 800bb28:	e7e3      	b.n	800baf2 <__lo0bits+0x1e>
 800bb2a:	2220      	movs	r2, #32
 800bb2c:	e7e1      	b.n	800baf2 <__lo0bits+0x1e>
	...

0800bb30 <__i2b>:
 800bb30:	b510      	push	{r4, lr}
 800bb32:	460c      	mov	r4, r1
 800bb34:	2101      	movs	r1, #1
 800bb36:	f7ff ff05 	bl	800b944 <_Balloc>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	b928      	cbnz	r0, 800bb4a <__i2b+0x1a>
 800bb3e:	4b05      	ldr	r3, [pc, #20]	; (800bb54 <__i2b+0x24>)
 800bb40:	4805      	ldr	r0, [pc, #20]	; (800bb58 <__i2b+0x28>)
 800bb42:	f240 1145 	movw	r1, #325	; 0x145
 800bb46:	f7fe fe97 	bl	800a878 <__assert_func>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	6144      	str	r4, [r0, #20]
 800bb4e:	6103      	str	r3, [r0, #16]
 800bb50:	bd10      	pop	{r4, pc}
 800bb52:	bf00      	nop
 800bb54:	0800ee68 	.word	0x0800ee68
 800bb58:	0800ee8a 	.word	0x0800ee8a

0800bb5c <__multiply>:
 800bb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb60:	4691      	mov	r9, r2
 800bb62:	690a      	ldr	r2, [r1, #16]
 800bb64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	bfb8      	it	lt
 800bb6c:	460b      	movlt	r3, r1
 800bb6e:	460c      	mov	r4, r1
 800bb70:	bfbc      	itt	lt
 800bb72:	464c      	movlt	r4, r9
 800bb74:	4699      	movlt	r9, r3
 800bb76:	6927      	ldr	r7, [r4, #16]
 800bb78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bb7c:	68a3      	ldr	r3, [r4, #8]
 800bb7e:	6861      	ldr	r1, [r4, #4]
 800bb80:	eb07 060a 	add.w	r6, r7, sl
 800bb84:	42b3      	cmp	r3, r6
 800bb86:	b085      	sub	sp, #20
 800bb88:	bfb8      	it	lt
 800bb8a:	3101      	addlt	r1, #1
 800bb8c:	f7ff feda 	bl	800b944 <_Balloc>
 800bb90:	b930      	cbnz	r0, 800bba0 <__multiply+0x44>
 800bb92:	4602      	mov	r2, r0
 800bb94:	4b44      	ldr	r3, [pc, #272]	; (800bca8 <__multiply+0x14c>)
 800bb96:	4845      	ldr	r0, [pc, #276]	; (800bcac <__multiply+0x150>)
 800bb98:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bb9c:	f7fe fe6c 	bl	800a878 <__assert_func>
 800bba0:	f100 0514 	add.w	r5, r0, #20
 800bba4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bba8:	462b      	mov	r3, r5
 800bbaa:	2200      	movs	r2, #0
 800bbac:	4543      	cmp	r3, r8
 800bbae:	d321      	bcc.n	800bbf4 <__multiply+0x98>
 800bbb0:	f104 0314 	add.w	r3, r4, #20
 800bbb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bbb8:	f109 0314 	add.w	r3, r9, #20
 800bbbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bbc0:	9202      	str	r2, [sp, #8]
 800bbc2:	1b3a      	subs	r2, r7, r4
 800bbc4:	3a15      	subs	r2, #21
 800bbc6:	f022 0203 	bic.w	r2, r2, #3
 800bbca:	3204      	adds	r2, #4
 800bbcc:	f104 0115 	add.w	r1, r4, #21
 800bbd0:	428f      	cmp	r7, r1
 800bbd2:	bf38      	it	cc
 800bbd4:	2204      	movcc	r2, #4
 800bbd6:	9201      	str	r2, [sp, #4]
 800bbd8:	9a02      	ldr	r2, [sp, #8]
 800bbda:	9303      	str	r3, [sp, #12]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d80c      	bhi.n	800bbfa <__multiply+0x9e>
 800bbe0:	2e00      	cmp	r6, #0
 800bbe2:	dd03      	ble.n	800bbec <__multiply+0x90>
 800bbe4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d05b      	beq.n	800bca4 <__multiply+0x148>
 800bbec:	6106      	str	r6, [r0, #16]
 800bbee:	b005      	add	sp, #20
 800bbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf4:	f843 2b04 	str.w	r2, [r3], #4
 800bbf8:	e7d8      	b.n	800bbac <__multiply+0x50>
 800bbfa:	f8b3 a000 	ldrh.w	sl, [r3]
 800bbfe:	f1ba 0f00 	cmp.w	sl, #0
 800bc02:	d024      	beq.n	800bc4e <__multiply+0xf2>
 800bc04:	f104 0e14 	add.w	lr, r4, #20
 800bc08:	46a9      	mov	r9, r5
 800bc0a:	f04f 0c00 	mov.w	ip, #0
 800bc0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bc12:	f8d9 1000 	ldr.w	r1, [r9]
 800bc16:	fa1f fb82 	uxth.w	fp, r2
 800bc1a:	b289      	uxth	r1, r1
 800bc1c:	fb0a 110b 	mla	r1, sl, fp, r1
 800bc20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bc24:	f8d9 2000 	ldr.w	r2, [r9]
 800bc28:	4461      	add	r1, ip
 800bc2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc2e:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc36:	b289      	uxth	r1, r1
 800bc38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc3c:	4577      	cmp	r7, lr
 800bc3e:	f849 1b04 	str.w	r1, [r9], #4
 800bc42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc46:	d8e2      	bhi.n	800bc0e <__multiply+0xb2>
 800bc48:	9a01      	ldr	r2, [sp, #4]
 800bc4a:	f845 c002 	str.w	ip, [r5, r2]
 800bc4e:	9a03      	ldr	r2, [sp, #12]
 800bc50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc54:	3304      	adds	r3, #4
 800bc56:	f1b9 0f00 	cmp.w	r9, #0
 800bc5a:	d021      	beq.n	800bca0 <__multiply+0x144>
 800bc5c:	6829      	ldr	r1, [r5, #0]
 800bc5e:	f104 0c14 	add.w	ip, r4, #20
 800bc62:	46ae      	mov	lr, r5
 800bc64:	f04f 0a00 	mov.w	sl, #0
 800bc68:	f8bc b000 	ldrh.w	fp, [ip]
 800bc6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bc70:	fb09 220b 	mla	r2, r9, fp, r2
 800bc74:	4452      	add	r2, sl
 800bc76:	b289      	uxth	r1, r1
 800bc78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc7c:	f84e 1b04 	str.w	r1, [lr], #4
 800bc80:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bc84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc88:	f8be 1000 	ldrh.w	r1, [lr]
 800bc8c:	fb09 110a 	mla	r1, r9, sl, r1
 800bc90:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bc94:	4567      	cmp	r7, ip
 800bc96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc9a:	d8e5      	bhi.n	800bc68 <__multiply+0x10c>
 800bc9c:	9a01      	ldr	r2, [sp, #4]
 800bc9e:	50a9      	str	r1, [r5, r2]
 800bca0:	3504      	adds	r5, #4
 800bca2:	e799      	b.n	800bbd8 <__multiply+0x7c>
 800bca4:	3e01      	subs	r6, #1
 800bca6:	e79b      	b.n	800bbe0 <__multiply+0x84>
 800bca8:	0800ee68 	.word	0x0800ee68
 800bcac:	0800ee8a 	.word	0x0800ee8a

0800bcb0 <__pow5mult>:
 800bcb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcb4:	4615      	mov	r5, r2
 800bcb6:	f012 0203 	ands.w	r2, r2, #3
 800bcba:	4606      	mov	r6, r0
 800bcbc:	460f      	mov	r7, r1
 800bcbe:	d007      	beq.n	800bcd0 <__pow5mult+0x20>
 800bcc0:	4c25      	ldr	r4, [pc, #148]	; (800bd58 <__pow5mult+0xa8>)
 800bcc2:	3a01      	subs	r2, #1
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bcca:	f7ff fe9d 	bl	800ba08 <__multadd>
 800bcce:	4607      	mov	r7, r0
 800bcd0:	10ad      	asrs	r5, r5, #2
 800bcd2:	d03d      	beq.n	800bd50 <__pow5mult+0xa0>
 800bcd4:	69f4      	ldr	r4, [r6, #28]
 800bcd6:	b97c      	cbnz	r4, 800bcf8 <__pow5mult+0x48>
 800bcd8:	2010      	movs	r0, #16
 800bcda:	f7fe f9ef 	bl	800a0bc <malloc>
 800bcde:	4602      	mov	r2, r0
 800bce0:	61f0      	str	r0, [r6, #28]
 800bce2:	b928      	cbnz	r0, 800bcf0 <__pow5mult+0x40>
 800bce4:	4b1d      	ldr	r3, [pc, #116]	; (800bd5c <__pow5mult+0xac>)
 800bce6:	481e      	ldr	r0, [pc, #120]	; (800bd60 <__pow5mult+0xb0>)
 800bce8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bcec:	f7fe fdc4 	bl	800a878 <__assert_func>
 800bcf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcf4:	6004      	str	r4, [r0, #0]
 800bcf6:	60c4      	str	r4, [r0, #12]
 800bcf8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bcfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd00:	b94c      	cbnz	r4, 800bd16 <__pow5mult+0x66>
 800bd02:	f240 2171 	movw	r1, #625	; 0x271
 800bd06:	4630      	mov	r0, r6
 800bd08:	f7ff ff12 	bl	800bb30 <__i2b>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd12:	4604      	mov	r4, r0
 800bd14:	6003      	str	r3, [r0, #0]
 800bd16:	f04f 0900 	mov.w	r9, #0
 800bd1a:	07eb      	lsls	r3, r5, #31
 800bd1c:	d50a      	bpl.n	800bd34 <__pow5mult+0x84>
 800bd1e:	4639      	mov	r1, r7
 800bd20:	4622      	mov	r2, r4
 800bd22:	4630      	mov	r0, r6
 800bd24:	f7ff ff1a 	bl	800bb5c <__multiply>
 800bd28:	4639      	mov	r1, r7
 800bd2a:	4680      	mov	r8, r0
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	f7ff fe49 	bl	800b9c4 <_Bfree>
 800bd32:	4647      	mov	r7, r8
 800bd34:	106d      	asrs	r5, r5, #1
 800bd36:	d00b      	beq.n	800bd50 <__pow5mult+0xa0>
 800bd38:	6820      	ldr	r0, [r4, #0]
 800bd3a:	b938      	cbnz	r0, 800bd4c <__pow5mult+0x9c>
 800bd3c:	4622      	mov	r2, r4
 800bd3e:	4621      	mov	r1, r4
 800bd40:	4630      	mov	r0, r6
 800bd42:	f7ff ff0b 	bl	800bb5c <__multiply>
 800bd46:	6020      	str	r0, [r4, #0]
 800bd48:	f8c0 9000 	str.w	r9, [r0]
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	e7e4      	b.n	800bd1a <__pow5mult+0x6a>
 800bd50:	4638      	mov	r0, r7
 800bd52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd56:	bf00      	nop
 800bd58:	0800efd8 	.word	0x0800efd8
 800bd5c:	0800ed58 	.word	0x0800ed58
 800bd60:	0800ee8a 	.word	0x0800ee8a

0800bd64 <__lshift>:
 800bd64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd68:	460c      	mov	r4, r1
 800bd6a:	6849      	ldr	r1, [r1, #4]
 800bd6c:	6923      	ldr	r3, [r4, #16]
 800bd6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd72:	68a3      	ldr	r3, [r4, #8]
 800bd74:	4607      	mov	r7, r0
 800bd76:	4691      	mov	r9, r2
 800bd78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd7c:	f108 0601 	add.w	r6, r8, #1
 800bd80:	42b3      	cmp	r3, r6
 800bd82:	db0b      	blt.n	800bd9c <__lshift+0x38>
 800bd84:	4638      	mov	r0, r7
 800bd86:	f7ff fddd 	bl	800b944 <_Balloc>
 800bd8a:	4605      	mov	r5, r0
 800bd8c:	b948      	cbnz	r0, 800bda2 <__lshift+0x3e>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	4b28      	ldr	r3, [pc, #160]	; (800be34 <__lshift+0xd0>)
 800bd92:	4829      	ldr	r0, [pc, #164]	; (800be38 <__lshift+0xd4>)
 800bd94:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bd98:	f7fe fd6e 	bl	800a878 <__assert_func>
 800bd9c:	3101      	adds	r1, #1
 800bd9e:	005b      	lsls	r3, r3, #1
 800bda0:	e7ee      	b.n	800bd80 <__lshift+0x1c>
 800bda2:	2300      	movs	r3, #0
 800bda4:	f100 0114 	add.w	r1, r0, #20
 800bda8:	f100 0210 	add.w	r2, r0, #16
 800bdac:	4618      	mov	r0, r3
 800bdae:	4553      	cmp	r3, sl
 800bdb0:	db33      	blt.n	800be1a <__lshift+0xb6>
 800bdb2:	6920      	ldr	r0, [r4, #16]
 800bdb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bdb8:	f104 0314 	add.w	r3, r4, #20
 800bdbc:	f019 091f 	ands.w	r9, r9, #31
 800bdc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bdc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bdc8:	d02b      	beq.n	800be22 <__lshift+0xbe>
 800bdca:	f1c9 0e20 	rsb	lr, r9, #32
 800bdce:	468a      	mov	sl, r1
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	6818      	ldr	r0, [r3, #0]
 800bdd4:	fa00 f009 	lsl.w	r0, r0, r9
 800bdd8:	4310      	orrs	r0, r2
 800bdda:	f84a 0b04 	str.w	r0, [sl], #4
 800bdde:	f853 2b04 	ldr.w	r2, [r3], #4
 800bde2:	459c      	cmp	ip, r3
 800bde4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bde8:	d8f3      	bhi.n	800bdd2 <__lshift+0x6e>
 800bdea:	ebac 0304 	sub.w	r3, ip, r4
 800bdee:	3b15      	subs	r3, #21
 800bdf0:	f023 0303 	bic.w	r3, r3, #3
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	f104 0015 	add.w	r0, r4, #21
 800bdfa:	4584      	cmp	ip, r0
 800bdfc:	bf38      	it	cc
 800bdfe:	2304      	movcc	r3, #4
 800be00:	50ca      	str	r2, [r1, r3]
 800be02:	b10a      	cbz	r2, 800be08 <__lshift+0xa4>
 800be04:	f108 0602 	add.w	r6, r8, #2
 800be08:	3e01      	subs	r6, #1
 800be0a:	4638      	mov	r0, r7
 800be0c:	612e      	str	r6, [r5, #16]
 800be0e:	4621      	mov	r1, r4
 800be10:	f7ff fdd8 	bl	800b9c4 <_Bfree>
 800be14:	4628      	mov	r0, r5
 800be16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800be1e:	3301      	adds	r3, #1
 800be20:	e7c5      	b.n	800bdae <__lshift+0x4a>
 800be22:	3904      	subs	r1, #4
 800be24:	f853 2b04 	ldr.w	r2, [r3], #4
 800be28:	f841 2f04 	str.w	r2, [r1, #4]!
 800be2c:	459c      	cmp	ip, r3
 800be2e:	d8f9      	bhi.n	800be24 <__lshift+0xc0>
 800be30:	e7ea      	b.n	800be08 <__lshift+0xa4>
 800be32:	bf00      	nop
 800be34:	0800ee68 	.word	0x0800ee68
 800be38:	0800ee8a 	.word	0x0800ee8a

0800be3c <__mcmp>:
 800be3c:	b530      	push	{r4, r5, lr}
 800be3e:	6902      	ldr	r2, [r0, #16]
 800be40:	690c      	ldr	r4, [r1, #16]
 800be42:	1b12      	subs	r2, r2, r4
 800be44:	d10e      	bne.n	800be64 <__mcmp+0x28>
 800be46:	f100 0314 	add.w	r3, r0, #20
 800be4a:	3114      	adds	r1, #20
 800be4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800be5c:	42a5      	cmp	r5, r4
 800be5e:	d003      	beq.n	800be68 <__mcmp+0x2c>
 800be60:	d305      	bcc.n	800be6e <__mcmp+0x32>
 800be62:	2201      	movs	r2, #1
 800be64:	4610      	mov	r0, r2
 800be66:	bd30      	pop	{r4, r5, pc}
 800be68:	4283      	cmp	r3, r0
 800be6a:	d3f3      	bcc.n	800be54 <__mcmp+0x18>
 800be6c:	e7fa      	b.n	800be64 <__mcmp+0x28>
 800be6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be72:	e7f7      	b.n	800be64 <__mcmp+0x28>

0800be74 <__mdiff>:
 800be74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be78:	460c      	mov	r4, r1
 800be7a:	4606      	mov	r6, r0
 800be7c:	4611      	mov	r1, r2
 800be7e:	4620      	mov	r0, r4
 800be80:	4690      	mov	r8, r2
 800be82:	f7ff ffdb 	bl	800be3c <__mcmp>
 800be86:	1e05      	subs	r5, r0, #0
 800be88:	d110      	bne.n	800beac <__mdiff+0x38>
 800be8a:	4629      	mov	r1, r5
 800be8c:	4630      	mov	r0, r6
 800be8e:	f7ff fd59 	bl	800b944 <_Balloc>
 800be92:	b930      	cbnz	r0, 800bea2 <__mdiff+0x2e>
 800be94:	4b3a      	ldr	r3, [pc, #232]	; (800bf80 <__mdiff+0x10c>)
 800be96:	4602      	mov	r2, r0
 800be98:	f240 2137 	movw	r1, #567	; 0x237
 800be9c:	4839      	ldr	r0, [pc, #228]	; (800bf84 <__mdiff+0x110>)
 800be9e:	f7fe fceb 	bl	800a878 <__assert_func>
 800bea2:	2301      	movs	r3, #1
 800bea4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bea8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beac:	bfa4      	itt	ge
 800beae:	4643      	movge	r3, r8
 800beb0:	46a0      	movge	r8, r4
 800beb2:	4630      	mov	r0, r6
 800beb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800beb8:	bfa6      	itte	ge
 800beba:	461c      	movge	r4, r3
 800bebc:	2500      	movge	r5, #0
 800bebe:	2501      	movlt	r5, #1
 800bec0:	f7ff fd40 	bl	800b944 <_Balloc>
 800bec4:	b920      	cbnz	r0, 800bed0 <__mdiff+0x5c>
 800bec6:	4b2e      	ldr	r3, [pc, #184]	; (800bf80 <__mdiff+0x10c>)
 800bec8:	4602      	mov	r2, r0
 800beca:	f240 2145 	movw	r1, #581	; 0x245
 800bece:	e7e5      	b.n	800be9c <__mdiff+0x28>
 800bed0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bed4:	6926      	ldr	r6, [r4, #16]
 800bed6:	60c5      	str	r5, [r0, #12]
 800bed8:	f104 0914 	add.w	r9, r4, #20
 800bedc:	f108 0514 	add.w	r5, r8, #20
 800bee0:	f100 0e14 	add.w	lr, r0, #20
 800bee4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bee8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800beec:	f108 0210 	add.w	r2, r8, #16
 800bef0:	46f2      	mov	sl, lr
 800bef2:	2100      	movs	r1, #0
 800bef4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bef8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800befc:	fa11 f88b 	uxtah	r8, r1, fp
 800bf00:	b299      	uxth	r1, r3
 800bf02:	0c1b      	lsrs	r3, r3, #16
 800bf04:	eba8 0801 	sub.w	r8, r8, r1
 800bf08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf0c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf10:	fa1f f888 	uxth.w	r8, r8
 800bf14:	1419      	asrs	r1, r3, #16
 800bf16:	454e      	cmp	r6, r9
 800bf18:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf1c:	f84a 3b04 	str.w	r3, [sl], #4
 800bf20:	d8e8      	bhi.n	800bef4 <__mdiff+0x80>
 800bf22:	1b33      	subs	r3, r6, r4
 800bf24:	3b15      	subs	r3, #21
 800bf26:	f023 0303 	bic.w	r3, r3, #3
 800bf2a:	3304      	adds	r3, #4
 800bf2c:	3415      	adds	r4, #21
 800bf2e:	42a6      	cmp	r6, r4
 800bf30:	bf38      	it	cc
 800bf32:	2304      	movcc	r3, #4
 800bf34:	441d      	add	r5, r3
 800bf36:	4473      	add	r3, lr
 800bf38:	469e      	mov	lr, r3
 800bf3a:	462e      	mov	r6, r5
 800bf3c:	4566      	cmp	r6, ip
 800bf3e:	d30e      	bcc.n	800bf5e <__mdiff+0xea>
 800bf40:	f10c 0203 	add.w	r2, ip, #3
 800bf44:	1b52      	subs	r2, r2, r5
 800bf46:	f022 0203 	bic.w	r2, r2, #3
 800bf4a:	3d03      	subs	r5, #3
 800bf4c:	45ac      	cmp	ip, r5
 800bf4e:	bf38      	it	cc
 800bf50:	2200      	movcc	r2, #0
 800bf52:	4413      	add	r3, r2
 800bf54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bf58:	b17a      	cbz	r2, 800bf7a <__mdiff+0x106>
 800bf5a:	6107      	str	r7, [r0, #16]
 800bf5c:	e7a4      	b.n	800bea8 <__mdiff+0x34>
 800bf5e:	f856 8b04 	ldr.w	r8, [r6], #4
 800bf62:	fa11 f288 	uxtah	r2, r1, r8
 800bf66:	1414      	asrs	r4, r2, #16
 800bf68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bf6c:	b292      	uxth	r2, r2
 800bf6e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bf72:	f84e 2b04 	str.w	r2, [lr], #4
 800bf76:	1421      	asrs	r1, r4, #16
 800bf78:	e7e0      	b.n	800bf3c <__mdiff+0xc8>
 800bf7a:	3f01      	subs	r7, #1
 800bf7c:	e7ea      	b.n	800bf54 <__mdiff+0xe0>
 800bf7e:	bf00      	nop
 800bf80:	0800ee68 	.word	0x0800ee68
 800bf84:	0800ee8a 	.word	0x0800ee8a

0800bf88 <__d2b>:
 800bf88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf8c:	460f      	mov	r7, r1
 800bf8e:	2101      	movs	r1, #1
 800bf90:	ec59 8b10 	vmov	r8, r9, d0
 800bf94:	4616      	mov	r6, r2
 800bf96:	f7ff fcd5 	bl	800b944 <_Balloc>
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	b930      	cbnz	r0, 800bfac <__d2b+0x24>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	4b24      	ldr	r3, [pc, #144]	; (800c034 <__d2b+0xac>)
 800bfa2:	4825      	ldr	r0, [pc, #148]	; (800c038 <__d2b+0xb0>)
 800bfa4:	f240 310f 	movw	r1, #783	; 0x30f
 800bfa8:	f7fe fc66 	bl	800a878 <__assert_func>
 800bfac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bfb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfb4:	bb2d      	cbnz	r5, 800c002 <__d2b+0x7a>
 800bfb6:	9301      	str	r3, [sp, #4]
 800bfb8:	f1b8 0300 	subs.w	r3, r8, #0
 800bfbc:	d026      	beq.n	800c00c <__d2b+0x84>
 800bfbe:	4668      	mov	r0, sp
 800bfc0:	9300      	str	r3, [sp, #0]
 800bfc2:	f7ff fd87 	bl	800bad4 <__lo0bits>
 800bfc6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bfca:	b1e8      	cbz	r0, 800c008 <__d2b+0x80>
 800bfcc:	f1c0 0320 	rsb	r3, r0, #32
 800bfd0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd4:	430b      	orrs	r3, r1
 800bfd6:	40c2      	lsrs	r2, r0
 800bfd8:	6163      	str	r3, [r4, #20]
 800bfda:	9201      	str	r2, [sp, #4]
 800bfdc:	9b01      	ldr	r3, [sp, #4]
 800bfde:	61a3      	str	r3, [r4, #24]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	bf14      	ite	ne
 800bfe4:	2202      	movne	r2, #2
 800bfe6:	2201      	moveq	r2, #1
 800bfe8:	6122      	str	r2, [r4, #16]
 800bfea:	b1bd      	cbz	r5, 800c01c <__d2b+0x94>
 800bfec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bff0:	4405      	add	r5, r0
 800bff2:	603d      	str	r5, [r7, #0]
 800bff4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bff8:	6030      	str	r0, [r6, #0]
 800bffa:	4620      	mov	r0, r4
 800bffc:	b003      	add	sp, #12
 800bffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c006:	e7d6      	b.n	800bfb6 <__d2b+0x2e>
 800c008:	6161      	str	r1, [r4, #20]
 800c00a:	e7e7      	b.n	800bfdc <__d2b+0x54>
 800c00c:	a801      	add	r0, sp, #4
 800c00e:	f7ff fd61 	bl	800bad4 <__lo0bits>
 800c012:	9b01      	ldr	r3, [sp, #4]
 800c014:	6163      	str	r3, [r4, #20]
 800c016:	3020      	adds	r0, #32
 800c018:	2201      	movs	r2, #1
 800c01a:	e7e5      	b.n	800bfe8 <__d2b+0x60>
 800c01c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c020:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c024:	6038      	str	r0, [r7, #0]
 800c026:	6918      	ldr	r0, [r3, #16]
 800c028:	f7ff fd34 	bl	800ba94 <__hi0bits>
 800c02c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c030:	e7e2      	b.n	800bff8 <__d2b+0x70>
 800c032:	bf00      	nop
 800c034:	0800ee68 	.word	0x0800ee68
 800c038:	0800ee8a 	.word	0x0800ee8a

0800c03c <__sread>:
 800c03c:	b510      	push	{r4, lr}
 800c03e:	460c      	mov	r4, r1
 800c040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c044:	f000 f8bc 	bl	800c1c0 <_read_r>
 800c048:	2800      	cmp	r0, #0
 800c04a:	bfab      	itete	ge
 800c04c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c04e:	89a3      	ldrhlt	r3, [r4, #12]
 800c050:	181b      	addge	r3, r3, r0
 800c052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c056:	bfac      	ite	ge
 800c058:	6563      	strge	r3, [r4, #84]	; 0x54
 800c05a:	81a3      	strhlt	r3, [r4, #12]
 800c05c:	bd10      	pop	{r4, pc}

0800c05e <__swrite>:
 800c05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c062:	461f      	mov	r7, r3
 800c064:	898b      	ldrh	r3, [r1, #12]
 800c066:	05db      	lsls	r3, r3, #23
 800c068:	4605      	mov	r5, r0
 800c06a:	460c      	mov	r4, r1
 800c06c:	4616      	mov	r6, r2
 800c06e:	d505      	bpl.n	800c07c <__swrite+0x1e>
 800c070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c074:	2302      	movs	r3, #2
 800c076:	2200      	movs	r2, #0
 800c078:	f000 f890 	bl	800c19c <_lseek_r>
 800c07c:	89a3      	ldrh	r3, [r4, #12]
 800c07e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c086:	81a3      	strh	r3, [r4, #12]
 800c088:	4632      	mov	r2, r6
 800c08a:	463b      	mov	r3, r7
 800c08c:	4628      	mov	r0, r5
 800c08e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c092:	f000 b8a7 	b.w	800c1e4 <_write_r>

0800c096 <__sseek>:
 800c096:	b510      	push	{r4, lr}
 800c098:	460c      	mov	r4, r1
 800c09a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c09e:	f000 f87d 	bl	800c19c <_lseek_r>
 800c0a2:	1c43      	adds	r3, r0, #1
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	bf15      	itete	ne
 800c0a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0b2:	81a3      	strheq	r3, [r4, #12]
 800c0b4:	bf18      	it	ne
 800c0b6:	81a3      	strhne	r3, [r4, #12]
 800c0b8:	bd10      	pop	{r4, pc}

0800c0ba <__sclose>:
 800c0ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0be:	f000 b85d 	b.w	800c17c <_close_r>
	...

0800c0c4 <fiprintf>:
 800c0c4:	b40e      	push	{r1, r2, r3}
 800c0c6:	b503      	push	{r0, r1, lr}
 800c0c8:	4601      	mov	r1, r0
 800c0ca:	ab03      	add	r3, sp, #12
 800c0cc:	4805      	ldr	r0, [pc, #20]	; (800c0e4 <fiprintf+0x20>)
 800c0ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0d2:	6800      	ldr	r0, [r0, #0]
 800c0d4:	9301      	str	r3, [sp, #4]
 800c0d6:	f000 f8c7 	bl	800c268 <_vfiprintf_r>
 800c0da:	b002      	add	sp, #8
 800c0dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0e0:	b003      	add	sp, #12
 800c0e2:	4770      	bx	lr
 800c0e4:	200000d4 	.word	0x200000d4

0800c0e8 <_realloc_r>:
 800c0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ec:	4680      	mov	r8, r0
 800c0ee:	4614      	mov	r4, r2
 800c0f0:	460e      	mov	r6, r1
 800c0f2:	b921      	cbnz	r1, 800c0fe <_realloc_r+0x16>
 800c0f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	f7fe b80f 	b.w	800a11c <_malloc_r>
 800c0fe:	b92a      	cbnz	r2, 800c10c <_realloc_r+0x24>
 800c100:	f7ff f9ce 	bl	800b4a0 <_free_r>
 800c104:	4625      	mov	r5, r4
 800c106:	4628      	mov	r0, r5
 800c108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c10c:	f000 f9d8 	bl	800c4c0 <_malloc_usable_size_r>
 800c110:	4284      	cmp	r4, r0
 800c112:	4607      	mov	r7, r0
 800c114:	d802      	bhi.n	800c11c <_realloc_r+0x34>
 800c116:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c11a:	d812      	bhi.n	800c142 <_realloc_r+0x5a>
 800c11c:	4621      	mov	r1, r4
 800c11e:	4640      	mov	r0, r8
 800c120:	f7fd fffc 	bl	800a11c <_malloc_r>
 800c124:	4605      	mov	r5, r0
 800c126:	2800      	cmp	r0, #0
 800c128:	d0ed      	beq.n	800c106 <_realloc_r+0x1e>
 800c12a:	42bc      	cmp	r4, r7
 800c12c:	4622      	mov	r2, r4
 800c12e:	4631      	mov	r1, r6
 800c130:	bf28      	it	cs
 800c132:	463a      	movcs	r2, r7
 800c134:	f7fe fb92 	bl	800a85c <memcpy>
 800c138:	4631      	mov	r1, r6
 800c13a:	4640      	mov	r0, r8
 800c13c:	f7ff f9b0 	bl	800b4a0 <_free_r>
 800c140:	e7e1      	b.n	800c106 <_realloc_r+0x1e>
 800c142:	4635      	mov	r5, r6
 800c144:	e7df      	b.n	800c106 <_realloc_r+0x1e>

0800c146 <memmove>:
 800c146:	4288      	cmp	r0, r1
 800c148:	b510      	push	{r4, lr}
 800c14a:	eb01 0402 	add.w	r4, r1, r2
 800c14e:	d902      	bls.n	800c156 <memmove+0x10>
 800c150:	4284      	cmp	r4, r0
 800c152:	4623      	mov	r3, r4
 800c154:	d807      	bhi.n	800c166 <memmove+0x20>
 800c156:	1e43      	subs	r3, r0, #1
 800c158:	42a1      	cmp	r1, r4
 800c15a:	d008      	beq.n	800c16e <memmove+0x28>
 800c15c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c160:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c164:	e7f8      	b.n	800c158 <memmove+0x12>
 800c166:	4402      	add	r2, r0
 800c168:	4601      	mov	r1, r0
 800c16a:	428a      	cmp	r2, r1
 800c16c:	d100      	bne.n	800c170 <memmove+0x2a>
 800c16e:	bd10      	pop	{r4, pc}
 800c170:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c174:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c178:	e7f7      	b.n	800c16a <memmove+0x24>
	...

0800c17c <_close_r>:
 800c17c:	b538      	push	{r3, r4, r5, lr}
 800c17e:	4d06      	ldr	r5, [pc, #24]	; (800c198 <_close_r+0x1c>)
 800c180:	2300      	movs	r3, #0
 800c182:	4604      	mov	r4, r0
 800c184:	4608      	mov	r0, r1
 800c186:	602b      	str	r3, [r5, #0]
 800c188:	f7f8 fafb 	bl	8004782 <_close>
 800c18c:	1c43      	adds	r3, r0, #1
 800c18e:	d102      	bne.n	800c196 <_close_r+0x1a>
 800c190:	682b      	ldr	r3, [r5, #0]
 800c192:	b103      	cbz	r3, 800c196 <_close_r+0x1a>
 800c194:	6023      	str	r3, [r4, #0]
 800c196:	bd38      	pop	{r3, r4, r5, pc}
 800c198:	20002728 	.word	0x20002728

0800c19c <_lseek_r>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	4d07      	ldr	r5, [pc, #28]	; (800c1bc <_lseek_r+0x20>)
 800c1a0:	4604      	mov	r4, r0
 800c1a2:	4608      	mov	r0, r1
 800c1a4:	4611      	mov	r1, r2
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	602a      	str	r2, [r5, #0]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	f7f8 fb10 	bl	80047d0 <_lseek>
 800c1b0:	1c43      	adds	r3, r0, #1
 800c1b2:	d102      	bne.n	800c1ba <_lseek_r+0x1e>
 800c1b4:	682b      	ldr	r3, [r5, #0]
 800c1b6:	b103      	cbz	r3, 800c1ba <_lseek_r+0x1e>
 800c1b8:	6023      	str	r3, [r4, #0]
 800c1ba:	bd38      	pop	{r3, r4, r5, pc}
 800c1bc:	20002728 	.word	0x20002728

0800c1c0 <_read_r>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	4d07      	ldr	r5, [pc, #28]	; (800c1e0 <_read_r+0x20>)
 800c1c4:	4604      	mov	r4, r0
 800c1c6:	4608      	mov	r0, r1
 800c1c8:	4611      	mov	r1, r2
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	602a      	str	r2, [r5, #0]
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	f7f8 fa9e 	bl	8004710 <_read>
 800c1d4:	1c43      	adds	r3, r0, #1
 800c1d6:	d102      	bne.n	800c1de <_read_r+0x1e>
 800c1d8:	682b      	ldr	r3, [r5, #0]
 800c1da:	b103      	cbz	r3, 800c1de <_read_r+0x1e>
 800c1dc:	6023      	str	r3, [r4, #0]
 800c1de:	bd38      	pop	{r3, r4, r5, pc}
 800c1e0:	20002728 	.word	0x20002728

0800c1e4 <_write_r>:
 800c1e4:	b538      	push	{r3, r4, r5, lr}
 800c1e6:	4d07      	ldr	r5, [pc, #28]	; (800c204 <_write_r+0x20>)
 800c1e8:	4604      	mov	r4, r0
 800c1ea:	4608      	mov	r0, r1
 800c1ec:	4611      	mov	r1, r2
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	602a      	str	r2, [r5, #0]
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	f7f8 faa9 	bl	800474a <_write>
 800c1f8:	1c43      	adds	r3, r0, #1
 800c1fa:	d102      	bne.n	800c202 <_write_r+0x1e>
 800c1fc:	682b      	ldr	r3, [r5, #0]
 800c1fe:	b103      	cbz	r3, 800c202 <_write_r+0x1e>
 800c200:	6023      	str	r3, [r4, #0]
 800c202:	bd38      	pop	{r3, r4, r5, pc}
 800c204:	20002728 	.word	0x20002728

0800c208 <abort>:
 800c208:	b508      	push	{r3, lr}
 800c20a:	2006      	movs	r0, #6
 800c20c:	f000 fab0 	bl	800c770 <raise>
 800c210:	2001      	movs	r0, #1
 800c212:	f7f8 fa73 	bl	80046fc <_exit>

0800c216 <__sfputc_r>:
 800c216:	6893      	ldr	r3, [r2, #8]
 800c218:	3b01      	subs	r3, #1
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	b410      	push	{r4}
 800c21e:	6093      	str	r3, [r2, #8]
 800c220:	da08      	bge.n	800c234 <__sfputc_r+0x1e>
 800c222:	6994      	ldr	r4, [r2, #24]
 800c224:	42a3      	cmp	r3, r4
 800c226:	db01      	blt.n	800c22c <__sfputc_r+0x16>
 800c228:	290a      	cmp	r1, #10
 800c22a:	d103      	bne.n	800c234 <__sfputc_r+0x1e>
 800c22c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c230:	f000 b94e 	b.w	800c4d0 <__swbuf_r>
 800c234:	6813      	ldr	r3, [r2, #0]
 800c236:	1c58      	adds	r0, r3, #1
 800c238:	6010      	str	r0, [r2, #0]
 800c23a:	7019      	strb	r1, [r3, #0]
 800c23c:	4608      	mov	r0, r1
 800c23e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <__sfputs_r>:
 800c244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c246:	4606      	mov	r6, r0
 800c248:	460f      	mov	r7, r1
 800c24a:	4614      	mov	r4, r2
 800c24c:	18d5      	adds	r5, r2, r3
 800c24e:	42ac      	cmp	r4, r5
 800c250:	d101      	bne.n	800c256 <__sfputs_r+0x12>
 800c252:	2000      	movs	r0, #0
 800c254:	e007      	b.n	800c266 <__sfputs_r+0x22>
 800c256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c25a:	463a      	mov	r2, r7
 800c25c:	4630      	mov	r0, r6
 800c25e:	f7ff ffda 	bl	800c216 <__sfputc_r>
 800c262:	1c43      	adds	r3, r0, #1
 800c264:	d1f3      	bne.n	800c24e <__sfputs_r+0xa>
 800c266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c268 <_vfiprintf_r>:
 800c268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c26c:	460d      	mov	r5, r1
 800c26e:	b09d      	sub	sp, #116	; 0x74
 800c270:	4614      	mov	r4, r2
 800c272:	4698      	mov	r8, r3
 800c274:	4606      	mov	r6, r0
 800c276:	b118      	cbz	r0, 800c280 <_vfiprintf_r+0x18>
 800c278:	6a03      	ldr	r3, [r0, #32]
 800c27a:	b90b      	cbnz	r3, 800c280 <_vfiprintf_r+0x18>
 800c27c:	f7fe fa70 	bl	800a760 <__sinit>
 800c280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c282:	07d9      	lsls	r1, r3, #31
 800c284:	d405      	bmi.n	800c292 <_vfiprintf_r+0x2a>
 800c286:	89ab      	ldrh	r3, [r5, #12]
 800c288:	059a      	lsls	r2, r3, #22
 800c28a:	d402      	bmi.n	800c292 <_vfiprintf_r+0x2a>
 800c28c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c28e:	f7fe fae3 	bl	800a858 <__retarget_lock_acquire_recursive>
 800c292:	89ab      	ldrh	r3, [r5, #12]
 800c294:	071b      	lsls	r3, r3, #28
 800c296:	d501      	bpl.n	800c29c <_vfiprintf_r+0x34>
 800c298:	692b      	ldr	r3, [r5, #16]
 800c29a:	b99b      	cbnz	r3, 800c2c4 <_vfiprintf_r+0x5c>
 800c29c:	4629      	mov	r1, r5
 800c29e:	4630      	mov	r0, r6
 800c2a0:	f000 f954 	bl	800c54c <__swsetup_r>
 800c2a4:	b170      	cbz	r0, 800c2c4 <_vfiprintf_r+0x5c>
 800c2a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2a8:	07dc      	lsls	r4, r3, #31
 800c2aa:	d504      	bpl.n	800c2b6 <_vfiprintf_r+0x4e>
 800c2ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2b0:	b01d      	add	sp, #116	; 0x74
 800c2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b6:	89ab      	ldrh	r3, [r5, #12]
 800c2b8:	0598      	lsls	r0, r3, #22
 800c2ba:	d4f7      	bmi.n	800c2ac <_vfiprintf_r+0x44>
 800c2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2be:	f7fe facc 	bl	800a85a <__retarget_lock_release_recursive>
 800c2c2:	e7f3      	b.n	800c2ac <_vfiprintf_r+0x44>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c2c8:	2320      	movs	r3, #32
 800c2ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2d2:	2330      	movs	r3, #48	; 0x30
 800c2d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c488 <_vfiprintf_r+0x220>
 800c2d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2dc:	f04f 0901 	mov.w	r9, #1
 800c2e0:	4623      	mov	r3, r4
 800c2e2:	469a      	mov	sl, r3
 800c2e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2e8:	b10a      	cbz	r2, 800c2ee <_vfiprintf_r+0x86>
 800c2ea:	2a25      	cmp	r2, #37	; 0x25
 800c2ec:	d1f9      	bne.n	800c2e2 <_vfiprintf_r+0x7a>
 800c2ee:	ebba 0b04 	subs.w	fp, sl, r4
 800c2f2:	d00b      	beq.n	800c30c <_vfiprintf_r+0xa4>
 800c2f4:	465b      	mov	r3, fp
 800c2f6:	4622      	mov	r2, r4
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	f7ff ffa2 	bl	800c244 <__sfputs_r>
 800c300:	3001      	adds	r0, #1
 800c302:	f000 80a9 	beq.w	800c458 <_vfiprintf_r+0x1f0>
 800c306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c308:	445a      	add	r2, fp
 800c30a:	9209      	str	r2, [sp, #36]	; 0x24
 800c30c:	f89a 3000 	ldrb.w	r3, [sl]
 800c310:	2b00      	cmp	r3, #0
 800c312:	f000 80a1 	beq.w	800c458 <_vfiprintf_r+0x1f0>
 800c316:	2300      	movs	r3, #0
 800c318:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c31c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c320:	f10a 0a01 	add.w	sl, sl, #1
 800c324:	9304      	str	r3, [sp, #16]
 800c326:	9307      	str	r3, [sp, #28]
 800c328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c32c:	931a      	str	r3, [sp, #104]	; 0x68
 800c32e:	4654      	mov	r4, sl
 800c330:	2205      	movs	r2, #5
 800c332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c336:	4854      	ldr	r0, [pc, #336]	; (800c488 <_vfiprintf_r+0x220>)
 800c338:	f7f3 ff82 	bl	8000240 <memchr>
 800c33c:	9a04      	ldr	r2, [sp, #16]
 800c33e:	b9d8      	cbnz	r0, 800c378 <_vfiprintf_r+0x110>
 800c340:	06d1      	lsls	r1, r2, #27
 800c342:	bf44      	itt	mi
 800c344:	2320      	movmi	r3, #32
 800c346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c34a:	0713      	lsls	r3, r2, #28
 800c34c:	bf44      	itt	mi
 800c34e:	232b      	movmi	r3, #43	; 0x2b
 800c350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c354:	f89a 3000 	ldrb.w	r3, [sl]
 800c358:	2b2a      	cmp	r3, #42	; 0x2a
 800c35a:	d015      	beq.n	800c388 <_vfiprintf_r+0x120>
 800c35c:	9a07      	ldr	r2, [sp, #28]
 800c35e:	4654      	mov	r4, sl
 800c360:	2000      	movs	r0, #0
 800c362:	f04f 0c0a 	mov.w	ip, #10
 800c366:	4621      	mov	r1, r4
 800c368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c36c:	3b30      	subs	r3, #48	; 0x30
 800c36e:	2b09      	cmp	r3, #9
 800c370:	d94d      	bls.n	800c40e <_vfiprintf_r+0x1a6>
 800c372:	b1b0      	cbz	r0, 800c3a2 <_vfiprintf_r+0x13a>
 800c374:	9207      	str	r2, [sp, #28]
 800c376:	e014      	b.n	800c3a2 <_vfiprintf_r+0x13a>
 800c378:	eba0 0308 	sub.w	r3, r0, r8
 800c37c:	fa09 f303 	lsl.w	r3, r9, r3
 800c380:	4313      	orrs	r3, r2
 800c382:	9304      	str	r3, [sp, #16]
 800c384:	46a2      	mov	sl, r4
 800c386:	e7d2      	b.n	800c32e <_vfiprintf_r+0xc6>
 800c388:	9b03      	ldr	r3, [sp, #12]
 800c38a:	1d19      	adds	r1, r3, #4
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	9103      	str	r1, [sp, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	bfbb      	ittet	lt
 800c394:	425b      	neglt	r3, r3
 800c396:	f042 0202 	orrlt.w	r2, r2, #2
 800c39a:	9307      	strge	r3, [sp, #28]
 800c39c:	9307      	strlt	r3, [sp, #28]
 800c39e:	bfb8      	it	lt
 800c3a0:	9204      	strlt	r2, [sp, #16]
 800c3a2:	7823      	ldrb	r3, [r4, #0]
 800c3a4:	2b2e      	cmp	r3, #46	; 0x2e
 800c3a6:	d10c      	bne.n	800c3c2 <_vfiprintf_r+0x15a>
 800c3a8:	7863      	ldrb	r3, [r4, #1]
 800c3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c3ac:	d134      	bne.n	800c418 <_vfiprintf_r+0x1b0>
 800c3ae:	9b03      	ldr	r3, [sp, #12]
 800c3b0:	1d1a      	adds	r2, r3, #4
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	9203      	str	r2, [sp, #12]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	bfb8      	it	lt
 800c3ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c3be:	3402      	adds	r4, #2
 800c3c0:	9305      	str	r3, [sp, #20]
 800c3c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c498 <_vfiprintf_r+0x230>
 800c3c6:	7821      	ldrb	r1, [r4, #0]
 800c3c8:	2203      	movs	r2, #3
 800c3ca:	4650      	mov	r0, sl
 800c3cc:	f7f3 ff38 	bl	8000240 <memchr>
 800c3d0:	b138      	cbz	r0, 800c3e2 <_vfiprintf_r+0x17a>
 800c3d2:	9b04      	ldr	r3, [sp, #16]
 800c3d4:	eba0 000a 	sub.w	r0, r0, sl
 800c3d8:	2240      	movs	r2, #64	; 0x40
 800c3da:	4082      	lsls	r2, r0
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	3401      	adds	r4, #1
 800c3e0:	9304      	str	r3, [sp, #16]
 800c3e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e6:	4829      	ldr	r0, [pc, #164]	; (800c48c <_vfiprintf_r+0x224>)
 800c3e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3ec:	2206      	movs	r2, #6
 800c3ee:	f7f3 ff27 	bl	8000240 <memchr>
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d03f      	beq.n	800c476 <_vfiprintf_r+0x20e>
 800c3f6:	4b26      	ldr	r3, [pc, #152]	; (800c490 <_vfiprintf_r+0x228>)
 800c3f8:	bb1b      	cbnz	r3, 800c442 <_vfiprintf_r+0x1da>
 800c3fa:	9b03      	ldr	r3, [sp, #12]
 800c3fc:	3307      	adds	r3, #7
 800c3fe:	f023 0307 	bic.w	r3, r3, #7
 800c402:	3308      	adds	r3, #8
 800c404:	9303      	str	r3, [sp, #12]
 800c406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c408:	443b      	add	r3, r7
 800c40a:	9309      	str	r3, [sp, #36]	; 0x24
 800c40c:	e768      	b.n	800c2e0 <_vfiprintf_r+0x78>
 800c40e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c412:	460c      	mov	r4, r1
 800c414:	2001      	movs	r0, #1
 800c416:	e7a6      	b.n	800c366 <_vfiprintf_r+0xfe>
 800c418:	2300      	movs	r3, #0
 800c41a:	3401      	adds	r4, #1
 800c41c:	9305      	str	r3, [sp, #20]
 800c41e:	4619      	mov	r1, r3
 800c420:	f04f 0c0a 	mov.w	ip, #10
 800c424:	4620      	mov	r0, r4
 800c426:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c42a:	3a30      	subs	r2, #48	; 0x30
 800c42c:	2a09      	cmp	r2, #9
 800c42e:	d903      	bls.n	800c438 <_vfiprintf_r+0x1d0>
 800c430:	2b00      	cmp	r3, #0
 800c432:	d0c6      	beq.n	800c3c2 <_vfiprintf_r+0x15a>
 800c434:	9105      	str	r1, [sp, #20]
 800c436:	e7c4      	b.n	800c3c2 <_vfiprintf_r+0x15a>
 800c438:	fb0c 2101 	mla	r1, ip, r1, r2
 800c43c:	4604      	mov	r4, r0
 800c43e:	2301      	movs	r3, #1
 800c440:	e7f0      	b.n	800c424 <_vfiprintf_r+0x1bc>
 800c442:	ab03      	add	r3, sp, #12
 800c444:	9300      	str	r3, [sp, #0]
 800c446:	462a      	mov	r2, r5
 800c448:	4b12      	ldr	r3, [pc, #72]	; (800c494 <_vfiprintf_r+0x22c>)
 800c44a:	a904      	add	r1, sp, #16
 800c44c:	4630      	mov	r0, r6
 800c44e:	f7fd fc1b 	bl	8009c88 <_printf_float>
 800c452:	4607      	mov	r7, r0
 800c454:	1c78      	adds	r0, r7, #1
 800c456:	d1d6      	bne.n	800c406 <_vfiprintf_r+0x19e>
 800c458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c45a:	07d9      	lsls	r1, r3, #31
 800c45c:	d405      	bmi.n	800c46a <_vfiprintf_r+0x202>
 800c45e:	89ab      	ldrh	r3, [r5, #12]
 800c460:	059a      	lsls	r2, r3, #22
 800c462:	d402      	bmi.n	800c46a <_vfiprintf_r+0x202>
 800c464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c466:	f7fe f9f8 	bl	800a85a <__retarget_lock_release_recursive>
 800c46a:	89ab      	ldrh	r3, [r5, #12]
 800c46c:	065b      	lsls	r3, r3, #25
 800c46e:	f53f af1d 	bmi.w	800c2ac <_vfiprintf_r+0x44>
 800c472:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c474:	e71c      	b.n	800c2b0 <_vfiprintf_r+0x48>
 800c476:	ab03      	add	r3, sp, #12
 800c478:	9300      	str	r3, [sp, #0]
 800c47a:	462a      	mov	r2, r5
 800c47c:	4b05      	ldr	r3, [pc, #20]	; (800c494 <_vfiprintf_r+0x22c>)
 800c47e:	a904      	add	r1, sp, #16
 800c480:	4630      	mov	r0, r6
 800c482:	f7fd ff39 	bl	800a2f8 <_printf_i>
 800c486:	e7e4      	b.n	800c452 <_vfiprintf_r+0x1ea>
 800c488:	0800ee79 	.word	0x0800ee79
 800c48c:	0800ee83 	.word	0x0800ee83
 800c490:	08009c89 	.word	0x08009c89
 800c494:	0800c245 	.word	0x0800c245
 800c498:	0800ee7f 	.word	0x0800ee7f

0800c49c <__ascii_mbtowc>:
 800c49c:	b082      	sub	sp, #8
 800c49e:	b901      	cbnz	r1, 800c4a2 <__ascii_mbtowc+0x6>
 800c4a0:	a901      	add	r1, sp, #4
 800c4a2:	b142      	cbz	r2, 800c4b6 <__ascii_mbtowc+0x1a>
 800c4a4:	b14b      	cbz	r3, 800c4ba <__ascii_mbtowc+0x1e>
 800c4a6:	7813      	ldrb	r3, [r2, #0]
 800c4a8:	600b      	str	r3, [r1, #0]
 800c4aa:	7812      	ldrb	r2, [r2, #0]
 800c4ac:	1e10      	subs	r0, r2, #0
 800c4ae:	bf18      	it	ne
 800c4b0:	2001      	movne	r0, #1
 800c4b2:	b002      	add	sp, #8
 800c4b4:	4770      	bx	lr
 800c4b6:	4610      	mov	r0, r2
 800c4b8:	e7fb      	b.n	800c4b2 <__ascii_mbtowc+0x16>
 800c4ba:	f06f 0001 	mvn.w	r0, #1
 800c4be:	e7f8      	b.n	800c4b2 <__ascii_mbtowc+0x16>

0800c4c0 <_malloc_usable_size_r>:
 800c4c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4c4:	1f18      	subs	r0, r3, #4
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	bfbc      	itt	lt
 800c4ca:	580b      	ldrlt	r3, [r1, r0]
 800c4cc:	18c0      	addlt	r0, r0, r3
 800c4ce:	4770      	bx	lr

0800c4d0 <__swbuf_r>:
 800c4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d2:	460e      	mov	r6, r1
 800c4d4:	4614      	mov	r4, r2
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	b118      	cbz	r0, 800c4e2 <__swbuf_r+0x12>
 800c4da:	6a03      	ldr	r3, [r0, #32]
 800c4dc:	b90b      	cbnz	r3, 800c4e2 <__swbuf_r+0x12>
 800c4de:	f7fe f93f 	bl	800a760 <__sinit>
 800c4e2:	69a3      	ldr	r3, [r4, #24]
 800c4e4:	60a3      	str	r3, [r4, #8]
 800c4e6:	89a3      	ldrh	r3, [r4, #12]
 800c4e8:	071a      	lsls	r2, r3, #28
 800c4ea:	d525      	bpl.n	800c538 <__swbuf_r+0x68>
 800c4ec:	6923      	ldr	r3, [r4, #16]
 800c4ee:	b31b      	cbz	r3, 800c538 <__swbuf_r+0x68>
 800c4f0:	6823      	ldr	r3, [r4, #0]
 800c4f2:	6922      	ldr	r2, [r4, #16]
 800c4f4:	1a98      	subs	r0, r3, r2
 800c4f6:	6963      	ldr	r3, [r4, #20]
 800c4f8:	b2f6      	uxtb	r6, r6
 800c4fa:	4283      	cmp	r3, r0
 800c4fc:	4637      	mov	r7, r6
 800c4fe:	dc04      	bgt.n	800c50a <__swbuf_r+0x3a>
 800c500:	4621      	mov	r1, r4
 800c502:	4628      	mov	r0, r5
 800c504:	f7ff f9f6 	bl	800b8f4 <_fflush_r>
 800c508:	b9e0      	cbnz	r0, 800c544 <__swbuf_r+0x74>
 800c50a:	68a3      	ldr	r3, [r4, #8]
 800c50c:	3b01      	subs	r3, #1
 800c50e:	60a3      	str	r3, [r4, #8]
 800c510:	6823      	ldr	r3, [r4, #0]
 800c512:	1c5a      	adds	r2, r3, #1
 800c514:	6022      	str	r2, [r4, #0]
 800c516:	701e      	strb	r6, [r3, #0]
 800c518:	6962      	ldr	r2, [r4, #20]
 800c51a:	1c43      	adds	r3, r0, #1
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d004      	beq.n	800c52a <__swbuf_r+0x5a>
 800c520:	89a3      	ldrh	r3, [r4, #12]
 800c522:	07db      	lsls	r3, r3, #31
 800c524:	d506      	bpl.n	800c534 <__swbuf_r+0x64>
 800c526:	2e0a      	cmp	r6, #10
 800c528:	d104      	bne.n	800c534 <__swbuf_r+0x64>
 800c52a:	4621      	mov	r1, r4
 800c52c:	4628      	mov	r0, r5
 800c52e:	f7ff f9e1 	bl	800b8f4 <_fflush_r>
 800c532:	b938      	cbnz	r0, 800c544 <__swbuf_r+0x74>
 800c534:	4638      	mov	r0, r7
 800c536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c538:	4621      	mov	r1, r4
 800c53a:	4628      	mov	r0, r5
 800c53c:	f000 f806 	bl	800c54c <__swsetup_r>
 800c540:	2800      	cmp	r0, #0
 800c542:	d0d5      	beq.n	800c4f0 <__swbuf_r+0x20>
 800c544:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c548:	e7f4      	b.n	800c534 <__swbuf_r+0x64>
	...

0800c54c <__swsetup_r>:
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	4b2a      	ldr	r3, [pc, #168]	; (800c5f8 <__swsetup_r+0xac>)
 800c550:	4605      	mov	r5, r0
 800c552:	6818      	ldr	r0, [r3, #0]
 800c554:	460c      	mov	r4, r1
 800c556:	b118      	cbz	r0, 800c560 <__swsetup_r+0x14>
 800c558:	6a03      	ldr	r3, [r0, #32]
 800c55a:	b90b      	cbnz	r3, 800c560 <__swsetup_r+0x14>
 800c55c:	f7fe f900 	bl	800a760 <__sinit>
 800c560:	89a3      	ldrh	r3, [r4, #12]
 800c562:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c566:	0718      	lsls	r0, r3, #28
 800c568:	d422      	bmi.n	800c5b0 <__swsetup_r+0x64>
 800c56a:	06d9      	lsls	r1, r3, #27
 800c56c:	d407      	bmi.n	800c57e <__swsetup_r+0x32>
 800c56e:	2309      	movs	r3, #9
 800c570:	602b      	str	r3, [r5, #0]
 800c572:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c576:	81a3      	strh	r3, [r4, #12]
 800c578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c57c:	e034      	b.n	800c5e8 <__swsetup_r+0x9c>
 800c57e:	0758      	lsls	r0, r3, #29
 800c580:	d512      	bpl.n	800c5a8 <__swsetup_r+0x5c>
 800c582:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c584:	b141      	cbz	r1, 800c598 <__swsetup_r+0x4c>
 800c586:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c58a:	4299      	cmp	r1, r3
 800c58c:	d002      	beq.n	800c594 <__swsetup_r+0x48>
 800c58e:	4628      	mov	r0, r5
 800c590:	f7fe ff86 	bl	800b4a0 <_free_r>
 800c594:	2300      	movs	r3, #0
 800c596:	6363      	str	r3, [r4, #52]	; 0x34
 800c598:	89a3      	ldrh	r3, [r4, #12]
 800c59a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c59e:	81a3      	strh	r3, [r4, #12]
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	6063      	str	r3, [r4, #4]
 800c5a4:	6923      	ldr	r3, [r4, #16]
 800c5a6:	6023      	str	r3, [r4, #0]
 800c5a8:	89a3      	ldrh	r3, [r4, #12]
 800c5aa:	f043 0308 	orr.w	r3, r3, #8
 800c5ae:	81a3      	strh	r3, [r4, #12]
 800c5b0:	6923      	ldr	r3, [r4, #16]
 800c5b2:	b94b      	cbnz	r3, 800c5c8 <__swsetup_r+0x7c>
 800c5b4:	89a3      	ldrh	r3, [r4, #12]
 800c5b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c5ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5be:	d003      	beq.n	800c5c8 <__swsetup_r+0x7c>
 800c5c0:	4621      	mov	r1, r4
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	f000 f84d 	bl	800c662 <__smakebuf_r>
 800c5c8:	89a0      	ldrh	r0, [r4, #12]
 800c5ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5ce:	f010 0301 	ands.w	r3, r0, #1
 800c5d2:	d00a      	beq.n	800c5ea <__swsetup_r+0x9e>
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	60a3      	str	r3, [r4, #8]
 800c5d8:	6963      	ldr	r3, [r4, #20]
 800c5da:	425b      	negs	r3, r3
 800c5dc:	61a3      	str	r3, [r4, #24]
 800c5de:	6923      	ldr	r3, [r4, #16]
 800c5e0:	b943      	cbnz	r3, 800c5f4 <__swsetup_r+0xa8>
 800c5e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c5e6:	d1c4      	bne.n	800c572 <__swsetup_r+0x26>
 800c5e8:	bd38      	pop	{r3, r4, r5, pc}
 800c5ea:	0781      	lsls	r1, r0, #30
 800c5ec:	bf58      	it	pl
 800c5ee:	6963      	ldrpl	r3, [r4, #20]
 800c5f0:	60a3      	str	r3, [r4, #8]
 800c5f2:	e7f4      	b.n	800c5de <__swsetup_r+0x92>
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	e7f7      	b.n	800c5e8 <__swsetup_r+0x9c>
 800c5f8:	200000d4 	.word	0x200000d4

0800c5fc <__ascii_wctomb>:
 800c5fc:	b149      	cbz	r1, 800c612 <__ascii_wctomb+0x16>
 800c5fe:	2aff      	cmp	r2, #255	; 0xff
 800c600:	bf85      	ittet	hi
 800c602:	238a      	movhi	r3, #138	; 0x8a
 800c604:	6003      	strhi	r3, [r0, #0]
 800c606:	700a      	strbls	r2, [r1, #0]
 800c608:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c60c:	bf98      	it	ls
 800c60e:	2001      	movls	r0, #1
 800c610:	4770      	bx	lr
 800c612:	4608      	mov	r0, r1
 800c614:	4770      	bx	lr

0800c616 <__swhatbuf_r>:
 800c616:	b570      	push	{r4, r5, r6, lr}
 800c618:	460c      	mov	r4, r1
 800c61a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c61e:	2900      	cmp	r1, #0
 800c620:	b096      	sub	sp, #88	; 0x58
 800c622:	4615      	mov	r5, r2
 800c624:	461e      	mov	r6, r3
 800c626:	da0d      	bge.n	800c644 <__swhatbuf_r+0x2e>
 800c628:	89a3      	ldrh	r3, [r4, #12]
 800c62a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c62e:	f04f 0100 	mov.w	r1, #0
 800c632:	bf0c      	ite	eq
 800c634:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c638:	2340      	movne	r3, #64	; 0x40
 800c63a:	2000      	movs	r0, #0
 800c63c:	6031      	str	r1, [r6, #0]
 800c63e:	602b      	str	r3, [r5, #0]
 800c640:	b016      	add	sp, #88	; 0x58
 800c642:	bd70      	pop	{r4, r5, r6, pc}
 800c644:	466a      	mov	r2, sp
 800c646:	f000 f849 	bl	800c6dc <_fstat_r>
 800c64a:	2800      	cmp	r0, #0
 800c64c:	dbec      	blt.n	800c628 <__swhatbuf_r+0x12>
 800c64e:	9901      	ldr	r1, [sp, #4]
 800c650:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c654:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c658:	4259      	negs	r1, r3
 800c65a:	4159      	adcs	r1, r3
 800c65c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c660:	e7eb      	b.n	800c63a <__swhatbuf_r+0x24>

0800c662 <__smakebuf_r>:
 800c662:	898b      	ldrh	r3, [r1, #12]
 800c664:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c666:	079d      	lsls	r5, r3, #30
 800c668:	4606      	mov	r6, r0
 800c66a:	460c      	mov	r4, r1
 800c66c:	d507      	bpl.n	800c67e <__smakebuf_r+0x1c>
 800c66e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c672:	6023      	str	r3, [r4, #0]
 800c674:	6123      	str	r3, [r4, #16]
 800c676:	2301      	movs	r3, #1
 800c678:	6163      	str	r3, [r4, #20]
 800c67a:	b002      	add	sp, #8
 800c67c:	bd70      	pop	{r4, r5, r6, pc}
 800c67e:	ab01      	add	r3, sp, #4
 800c680:	466a      	mov	r2, sp
 800c682:	f7ff ffc8 	bl	800c616 <__swhatbuf_r>
 800c686:	9900      	ldr	r1, [sp, #0]
 800c688:	4605      	mov	r5, r0
 800c68a:	4630      	mov	r0, r6
 800c68c:	f7fd fd46 	bl	800a11c <_malloc_r>
 800c690:	b948      	cbnz	r0, 800c6a6 <__smakebuf_r+0x44>
 800c692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c696:	059a      	lsls	r2, r3, #22
 800c698:	d4ef      	bmi.n	800c67a <__smakebuf_r+0x18>
 800c69a:	f023 0303 	bic.w	r3, r3, #3
 800c69e:	f043 0302 	orr.w	r3, r3, #2
 800c6a2:	81a3      	strh	r3, [r4, #12]
 800c6a4:	e7e3      	b.n	800c66e <__smakebuf_r+0xc>
 800c6a6:	89a3      	ldrh	r3, [r4, #12]
 800c6a8:	6020      	str	r0, [r4, #0]
 800c6aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6ae:	81a3      	strh	r3, [r4, #12]
 800c6b0:	9b00      	ldr	r3, [sp, #0]
 800c6b2:	6163      	str	r3, [r4, #20]
 800c6b4:	9b01      	ldr	r3, [sp, #4]
 800c6b6:	6120      	str	r0, [r4, #16]
 800c6b8:	b15b      	cbz	r3, 800c6d2 <__smakebuf_r+0x70>
 800c6ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6be:	4630      	mov	r0, r6
 800c6c0:	f000 f81e 	bl	800c700 <_isatty_r>
 800c6c4:	b128      	cbz	r0, 800c6d2 <__smakebuf_r+0x70>
 800c6c6:	89a3      	ldrh	r3, [r4, #12]
 800c6c8:	f023 0303 	bic.w	r3, r3, #3
 800c6cc:	f043 0301 	orr.w	r3, r3, #1
 800c6d0:	81a3      	strh	r3, [r4, #12]
 800c6d2:	89a3      	ldrh	r3, [r4, #12]
 800c6d4:	431d      	orrs	r5, r3
 800c6d6:	81a5      	strh	r5, [r4, #12]
 800c6d8:	e7cf      	b.n	800c67a <__smakebuf_r+0x18>
	...

0800c6dc <_fstat_r>:
 800c6dc:	b538      	push	{r3, r4, r5, lr}
 800c6de:	4d07      	ldr	r5, [pc, #28]	; (800c6fc <_fstat_r+0x20>)
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	4608      	mov	r0, r1
 800c6e6:	4611      	mov	r1, r2
 800c6e8:	602b      	str	r3, [r5, #0]
 800c6ea:	f7f8 f856 	bl	800479a <_fstat>
 800c6ee:	1c43      	adds	r3, r0, #1
 800c6f0:	d102      	bne.n	800c6f8 <_fstat_r+0x1c>
 800c6f2:	682b      	ldr	r3, [r5, #0]
 800c6f4:	b103      	cbz	r3, 800c6f8 <_fstat_r+0x1c>
 800c6f6:	6023      	str	r3, [r4, #0]
 800c6f8:	bd38      	pop	{r3, r4, r5, pc}
 800c6fa:	bf00      	nop
 800c6fc:	20002728 	.word	0x20002728

0800c700 <_isatty_r>:
 800c700:	b538      	push	{r3, r4, r5, lr}
 800c702:	4d06      	ldr	r5, [pc, #24]	; (800c71c <_isatty_r+0x1c>)
 800c704:	2300      	movs	r3, #0
 800c706:	4604      	mov	r4, r0
 800c708:	4608      	mov	r0, r1
 800c70a:	602b      	str	r3, [r5, #0]
 800c70c:	f7f8 f855 	bl	80047ba <_isatty>
 800c710:	1c43      	adds	r3, r0, #1
 800c712:	d102      	bne.n	800c71a <_isatty_r+0x1a>
 800c714:	682b      	ldr	r3, [r5, #0]
 800c716:	b103      	cbz	r3, 800c71a <_isatty_r+0x1a>
 800c718:	6023      	str	r3, [r4, #0]
 800c71a:	bd38      	pop	{r3, r4, r5, pc}
 800c71c:	20002728 	.word	0x20002728

0800c720 <_raise_r>:
 800c720:	291f      	cmp	r1, #31
 800c722:	b538      	push	{r3, r4, r5, lr}
 800c724:	4604      	mov	r4, r0
 800c726:	460d      	mov	r5, r1
 800c728:	d904      	bls.n	800c734 <_raise_r+0x14>
 800c72a:	2316      	movs	r3, #22
 800c72c:	6003      	str	r3, [r0, #0]
 800c72e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c732:	bd38      	pop	{r3, r4, r5, pc}
 800c734:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c736:	b112      	cbz	r2, 800c73e <_raise_r+0x1e>
 800c738:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c73c:	b94b      	cbnz	r3, 800c752 <_raise_r+0x32>
 800c73e:	4620      	mov	r0, r4
 800c740:	f000 f830 	bl	800c7a4 <_getpid_r>
 800c744:	462a      	mov	r2, r5
 800c746:	4601      	mov	r1, r0
 800c748:	4620      	mov	r0, r4
 800c74a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c74e:	f000 b817 	b.w	800c780 <_kill_r>
 800c752:	2b01      	cmp	r3, #1
 800c754:	d00a      	beq.n	800c76c <_raise_r+0x4c>
 800c756:	1c59      	adds	r1, r3, #1
 800c758:	d103      	bne.n	800c762 <_raise_r+0x42>
 800c75a:	2316      	movs	r3, #22
 800c75c:	6003      	str	r3, [r0, #0]
 800c75e:	2001      	movs	r0, #1
 800c760:	e7e7      	b.n	800c732 <_raise_r+0x12>
 800c762:	2400      	movs	r4, #0
 800c764:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c768:	4628      	mov	r0, r5
 800c76a:	4798      	blx	r3
 800c76c:	2000      	movs	r0, #0
 800c76e:	e7e0      	b.n	800c732 <_raise_r+0x12>

0800c770 <raise>:
 800c770:	4b02      	ldr	r3, [pc, #8]	; (800c77c <raise+0xc>)
 800c772:	4601      	mov	r1, r0
 800c774:	6818      	ldr	r0, [r3, #0]
 800c776:	f7ff bfd3 	b.w	800c720 <_raise_r>
 800c77a:	bf00      	nop
 800c77c:	200000d4 	.word	0x200000d4

0800c780 <_kill_r>:
 800c780:	b538      	push	{r3, r4, r5, lr}
 800c782:	4d07      	ldr	r5, [pc, #28]	; (800c7a0 <_kill_r+0x20>)
 800c784:	2300      	movs	r3, #0
 800c786:	4604      	mov	r4, r0
 800c788:	4608      	mov	r0, r1
 800c78a:	4611      	mov	r1, r2
 800c78c:	602b      	str	r3, [r5, #0]
 800c78e:	f7f7 ffa5 	bl	80046dc <_kill>
 800c792:	1c43      	adds	r3, r0, #1
 800c794:	d102      	bne.n	800c79c <_kill_r+0x1c>
 800c796:	682b      	ldr	r3, [r5, #0]
 800c798:	b103      	cbz	r3, 800c79c <_kill_r+0x1c>
 800c79a:	6023      	str	r3, [r4, #0]
 800c79c:	bd38      	pop	{r3, r4, r5, pc}
 800c79e:	bf00      	nop
 800c7a0:	20002728 	.word	0x20002728

0800c7a4 <_getpid_r>:
 800c7a4:	f7f7 bf92 	b.w	80046cc <_getpid>

0800c7a8 <_init>:
 800c7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7aa:	bf00      	nop
 800c7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ae:	bc08      	pop	{r3}
 800c7b0:	469e      	mov	lr, r3
 800c7b2:	4770      	bx	lr

0800c7b4 <_fini>:
 800c7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7b6:	bf00      	nop
 800c7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ba:	bc08      	pop	{r3}
 800c7bc:	469e      	mov	lr, r3
 800c7be:	4770      	bx	lr
