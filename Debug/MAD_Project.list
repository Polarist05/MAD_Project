
MAD_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebd0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00081228  0800edd0  0800edd0  0001edd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0808fff8  0808fff8  000b0b54  2**0
                  CONTENTS
  4 .ARM          00000008  0808fff8  0808fff8  0009fff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08090000  08090000  000b0b54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08090000  08090000  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08090004  08090004  000a0004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b54  20000000  08090008  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002548  20000b54  08090b5c  000b0b54  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000309c  08090b5c  000b309c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000b0b54  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000b0b82  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001df48  00000000  00000000  000b0bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000476b  00000000  00000000  000ceb0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a0  00000000  00000000  000d3278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001236  00000000  00000000  000d4a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cb8b  00000000  00000000  000d5c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020912  00000000  00000000  001027d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001076f8  00000000  00000000  001230eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000070ac  00000000  00000000  0022a7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00231890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000b54 	.word	0x20000b54
 800021c:	00000000 	.word	0x00000000
 8000220:	0800edb8 	.word	0x0800edb8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000b58 	.word	0x20000b58
 800023c:	0800edb8 	.word	0x0800edb8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000600:	4a36      	ldr	r2, [pc, #216]	; (80006dc <MX_ADC1_Init+0xf0>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000604:	4b34      	ldr	r3, [pc, #208]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000606:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <MX_ADC1_Init+0xec>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000612:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000614:	2201      	movs	r2, #1
 8000616:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000618:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <MX_ADC1_Init+0xec>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <MX_ADC1_Init+0xec>)
 800062e:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <MX_ADC1_Init+0xf4>)
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <MX_ADC1_Init+0xec>)
 800063a:	2204      	movs	r2, #4
 800063c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000640:	2201      	movs	r2, #1
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000646:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <MX_ADC1_Init+0xec>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064c:	4822      	ldr	r0, [pc, #136]	; (80006d8 <MX_ADC1_Init+0xec>)
 800064e:	f007 fbc7 	bl	8007de0 <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000658:	f005 febe 	bl	80063d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800065c:	2303      	movs	r3, #3
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	481a      	ldr	r0, [pc, #104]	; (80006d8 <MX_ADC1_Init+0xec>)
 800066e:	f007 fd09 	bl	8008084 <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000678:	f005 feae 	bl	80063d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800067c:	230a      	movs	r3, #10
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000680:	2302      	movs	r3, #2
 8000682:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	4813      	ldr	r0, [pc, #76]	; (80006d8 <MX_ADC1_Init+0xec>)
 800068a:	f007 fcfb 	bl	8008084 <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000694:	f005 fea0 	bl	80063d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000698:	2309      	movs	r3, #9
 800069a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800069c:	2303      	movs	r3, #3
 800069e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <MX_ADC1_Init+0xec>)
 80006a6:	f007 fced 	bl	8008084 <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006b0:	f005 fe92 	bl	80063d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006b4:	230c      	movs	r3, #12
 80006b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_ADC1_Init+0xec>)
 80006c2:	f007 fcdf 	bl	8008084 <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80006cc:	f005 fe84 	bl	80063d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000b70 	.word	0x20000b70
 80006dc:	40012000 	.word	0x40012000
 80006e0:	0f000001 	.word	0x0f000001

080006e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a49      	ldr	r2, [pc, #292]	; (8000828 <HAL_ADC_MspInit+0x144>)
 8000702:	4293      	cmp	r3, r2
 8000704:	f040 808c 	bne.w	8000820 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000708:	4b48      	ldr	r3, [pc, #288]	; (800082c <HAL_ADC_MspInit+0x148>)
 800070a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070c:	4a47      	ldr	r2, [pc, #284]	; (800082c <HAL_ADC_MspInit+0x148>)
 800070e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000712:	6453      	str	r3, [r2, #68]	; 0x44
 8000714:	4b45      	ldr	r3, [pc, #276]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000720:	4b42      	ldr	r3, [pc, #264]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000724:	4a41      	ldr	r2, [pc, #260]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	6313      	str	r3, [r2, #48]	; 0x30
 800072c:	4b3f      	ldr	r3, [pc, #252]	; (800082c <HAL_ADC_MspInit+0x148>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000730:	f003 0304 	and.w	r3, r3, #4
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b3c      	ldr	r3, [pc, #240]	; (800082c <HAL_ADC_MspInit+0x148>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	4a3b      	ldr	r2, [pc, #236]	; (800082c <HAL_ADC_MspInit+0x148>)
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	6313      	str	r3, [r2, #48]	; 0x30
 8000744:	4b39      	ldr	r3, [pc, #228]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000750:	4b36      	ldr	r3, [pc, #216]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	4a35      	ldr	r2, [pc, #212]	; (800082c <HAL_ADC_MspInit+0x148>)
 8000756:	f043 0302 	orr.w	r3, r3, #2
 800075a:	6313      	str	r3, [r2, #48]	; 0x30
 800075c:	4b33      	ldr	r3, [pc, #204]	; (800082c <HAL_ADC_MspInit+0x148>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	f003 0302 	and.w	r3, r3, #2
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000768:	2305      	movs	r3, #5
 800076a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076c:	2303      	movs	r3, #3
 800076e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	482d      	ldr	r0, [pc, #180]	; (8000830 <HAL_ADC_MspInit+0x14c>)
 800077c:	f008 fbde 	bl	8008f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000780:	2308      	movs	r3, #8
 8000782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000784:	2303      	movs	r3, #3
 8000786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	4619      	mov	r1, r3
 8000792:	4828      	ldr	r0, [pc, #160]	; (8000834 <HAL_ADC_MspInit+0x150>)
 8000794:	f008 fbd2 	bl	8008f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000798:	2302      	movs	r3, #2
 800079a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800079c:	2303      	movs	r3, #3
 800079e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4823      	ldr	r0, [pc, #140]	; (8000838 <HAL_ADC_MspInit+0x154>)
 80007ac:	f008 fbc6 	bl	8008f3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007b2:	4a23      	ldr	r2, [pc, #140]	; (8000840 <HAL_ADC_MspInit+0x15c>)
 80007b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007f4:	2203      	movs	r2, #3
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <HAL_ADC_MspInit+0x158>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_ADC_MspInit+0x158>)
 8000800:	2200      	movs	r2, #0
 8000802:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <HAL_ADC_MspInit+0x158>)
 8000806:	f008 f821 	bl	800884c <HAL_DMA_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8000810:	f005 fde2 	bl	80063d8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a09      	ldr	r2, [pc, #36]	; (800083c <HAL_ADC_MspInit+0x158>)
 8000818:	639a      	str	r2, [r3, #56]	; 0x38
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_ADC_MspInit+0x158>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000820:	bf00      	nop
 8000822:	3730      	adds	r7, #48	; 0x30
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40012000 	.word	0x40012000
 800082c:	40023800 	.word	0x40023800
 8000830:	40020800 	.word	0x40020800
 8000834:	40020000 	.word	0x40020000
 8000838:	40020400 	.word	0x40020400
 800083c:	20000bb8 	.word	0x20000bb8
 8000840:	40026410 	.word	0x40026410

08000844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_DMA_Init+0x38>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a0b      	ldr	r2, [pc, #44]	; (800087c <MX_DMA_Init+0x38>)
 8000850:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_DMA_Init+0x38>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	2038      	movs	r0, #56	; 0x38
 8000868:	f007 ffb9 	bl	80087de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800086c:	2038      	movs	r0, #56	; 0x38
 800086e:	f007 ffd2 	bl	8008816 <HAL_NVIC_EnableIRQ>

}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <Vector2_init>:
printVector(Vector2 v){
	char str[40];
	sprintf(str,"vector x: %d y: %d\n",v.x,v.y);
	printOut(str);
}
Vector2 Vector2_init(int x,int y){
 8000880:	b480      	push	{r7}
 8000882:	b087      	sub	sp, #28
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
	Vector2 v = {x,y};
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	617b      	str	r3, [r7, #20]
	return v;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	461a      	mov	r2, r3
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008a0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80008a4:	68f8      	ldr	r0, [r7, #12]
 80008a6:	371c      	adds	r7, #28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <Add>:
Vector2 Add(Vector2 v1,Vector2 v2){
 80008b0:	b082      	sub	sp, #8
 80008b2:	b480      	push	{r7}
 80008b4:	b085      	sub	sp, #20
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	1d38      	adds	r0, r7, #4
 80008bc:	e880 0006 	stmia.w	r0, {r1, r2}
 80008c0:	61fb      	str	r3, [r7, #28]
	v1.x+=v2.x;
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	4413      	add	r3, r2
 80008c8:	607b      	str	r3, [r7, #4]
	v1.y+=v2.y;
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	6a3b      	ldr	r3, [r7, #32]
 80008ce:	4413      	add	r3, r2
 80008d0:	60bb      	str	r3, [r7, #8]
	return v1;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	461a      	mov	r2, r3
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008dc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	b002      	add	sp, #8
 80008ec:	4770      	bx	lr

080008ee <Sub>:
Vector2 Sub(Vector2 v1,Vector2 v2){
 80008ee:	b082      	sub	sp, #8
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	1d38      	adds	r0, r7, #4
 80008fa:	e880 0006 	stmia.w	r0, {r1, r2}
 80008fe:	61fb      	str	r3, [r7, #28]
	v1.x-=v2.x;
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	607b      	str	r3, [r7, #4]
	v1.y-=v2.y;
 8000908:	68ba      	ldr	r2, [r7, #8]
 800090a:	6a3b      	ldr	r3, [r7, #32]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	60bb      	str	r3, [r7, #8]
	return v1;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	461a      	mov	r2, r3
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	e893 0003 	ldmia.w	r3, {r0, r1}
 800091a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800091e:	68f8      	ldr	r0, [r7, #12]
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	b002      	add	sp, #8
 800092a:	4770      	bx	lr

0800092c <Multiply_vector>:
Vector2 Multiply_int(Vector2 v1,int m){
	v1.x*=m;
	v1.y*=m;
	return v1;
}
Vector2 Multiply_vector(Vector2 v1,Vector2 v2){
 800092c:	b082      	sub	sp, #8
 800092e:	b480      	push	{r7}
 8000930:	b085      	sub	sp, #20
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	1d38      	adds	r0, r7, #4
 8000938:	e880 0006 	stmia.w	r0, {r1, r2}
 800093c:	61fb      	str	r3, [r7, #28]
	v1.x*=v2.x;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	69fa      	ldr	r2, [r7, #28]
 8000942:	fb02 f303 	mul.w	r3, r2, r3
 8000946:	607b      	str	r3, [r7, #4]
	v1.y*=v2.y;
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	6a3a      	ldr	r2, [r7, #32]
 800094c:	fb02 f303 	mul.w	r3, r2, r3
 8000950:	60bb      	str	r3, [r7, #8]
	return v1;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	461a      	mov	r2, r3
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	e893 0003 	ldmia.w	r3, {r0, r1}
 800095c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	b002      	add	sp, #8
 800096c:	4770      	bx	lr

0800096e <Divide_int>:
Vector2 Divide_int(Vector2 v1,int d){
 800096e:	b480      	push	{r7}
 8000970:	b085      	sub	sp, #20
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	1d38      	adds	r0, r7, #4
 8000978:	e880 0006 	stmia.w	r0, {r1, r2}
 800097c:	603b      	str	r3, [r7, #0]
	v1.x/=d;
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	fb92 f3f3 	sdiv	r3, r2, r3
 8000986:	607b      	str	r3, [r7, #4]
	v1.y/=d;
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000990:	60bb      	str	r3, [r7, #8]
	return v1;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	461a      	mov	r2, r3
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	e893 0003 	ldmia.w	r3, {r0, r1}
 800099c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <Divide_vector>:
Vector2 Divide_vector(Vector2 v1,Vector2 v2){
 80009ac:	b082      	sub	sp, #8
 80009ae:	b480      	push	{r7}
 80009b0:	b085      	sub	sp, #20
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	60f8      	str	r0, [r7, #12]
 80009b6:	1d38      	adds	r0, r7, #4
 80009b8:	e880 0006 	stmia.w	r0, {r1, r2}
 80009bc:	61fb      	str	r3, [r7, #28]
	v1.x/=v2.x;
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80009c6:	607b      	str	r3, [r7, #4]
	v1.y/=v2.y;
 80009c8:	68ba      	ldr	r2, [r7, #8]
 80009ca:	6a3b      	ldr	r3, [r7, #32]
 80009cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80009d0:	60bb      	str	r3, [r7, #8]
	return v1;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	461a      	mov	r2, r3
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009dc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	b002      	add	sp, #8
 80009ec:	4770      	bx	lr

080009ee <Equal>:
bool Equal(Vector2 v1,Vector2 v2){
 80009ee:	b490      	push	{r4, r7}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	f107 0408 	add.w	r4, r7, #8
 80009f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80009fc:	4639      	mov	r1, r7
 80009fe:	e881 000c 	stmia.w	r1, {r2, r3}
	return (v1.x == v2.x)&&(v1.y==v2.y);
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d105      	bne.n	8000a16 <Equal+0x28>
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d101      	bne.n	8000a16 <Equal+0x28>
 8000a12:	2301      	movs	r3, #1
 8000a14:	e000      	b.n	8000a18 <Equal+0x2a>
 8000a16:	2300      	movs	r3, #0
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	b2db      	uxtb	r3, r3
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc90      	pop	{r4, r7}
 8000a26:	4770      	bx	lr

08000a28 <getOffsetOrigin>:
Vector2 getOffsetOrigin(){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	6078      	str	r0, [r7, #4]
	return Sub(offset,Divide_int(cellSize,2)) ;
 8000a30:	f107 0008 	add.w	r0, r7, #8
 8000a34:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <getOffsetOrigin+0x30>)
 8000a36:	2302      	movs	r3, #2
 8000a38:	ca06      	ldmia	r2, {r1, r2}
 8000a3a:	f7ff ff98 	bl	800096e <Divide_int>
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <getOffsetOrigin+0x34>)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	ca06      	ldmia	r2, {r1, r2}
 8000a4a:	f7ff ff50 	bl	80008ee <Sub>
}
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000134 	.word	0x20000134
 8000a5c:	20000124 	.word	0x20000124

08000a60 <toIndex>:
Vector2 toIndex(Vector2 position){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af02      	add	r7, sp, #8
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	e883 0006 	stmia.w	r3, {r1, r2}
	return Divide_vector(Sub(position,getOffsetOrigin()),cellSize);
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ffd8 	bl	8000a28 <getOffsetOrigin>
 8000a78:	f107 0018 	add.w	r0, r7, #24
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	1d3a      	adds	r2, r7, #4
 8000a84:	ca06      	ldmia	r2, {r1, r2}
 8000a86:	f7ff ff32 	bl	80008ee <Sub>
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <toIndex+0x48>)
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	9200      	str	r2, [sp, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f107 0218 	add.w	r2, r7, #24
 8000a98:	ca06      	ldmia	r2, {r1, r2}
 8000a9a:	f7ff ff87 	bl	80009ac <Divide_vector>
}
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	3720      	adds	r7, #32
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000134 	.word	0x20000134

08000aac <toPosition>:
Vector2 toPosition(Vector2 index){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af02      	add	r7, sp, #8
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	e883 0006 	stmia.w	r3, {r1, r2}
	return Add(offset,Multiply_vector(cellSize,index));
 8000aba:	f107 0010 	add.w	r0, r7, #16
 8000abe:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <toPosition+0x38>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	ca06      	ldmia	r2, {r1, r2}
 8000ac8:	f7ff ff30 	bl	800092c <Multiply_vector>
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <toPosition+0x3c>)
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	ca06      	ldmia	r2, {r1, r2}
 8000ad8:	f7ff feea 	bl	80008b0 <Add>
}
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000134 	.word	0x20000134
 8000ae8:	20000124 	.word	0x20000124

08000aec <Transform_init>:
//Vector End

//Transform Start
Transform Transform_init(Vector2 position,Vector2 size,PivotType type){
 8000aec:	b082      	sub	sp, #8
 8000aee:	b4b0      	push	{r4, r5, r7}
 8000af0:	b08b      	sub	sp, #44	; 0x2c
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	1d38      	adds	r0, r7, #4
 8000af8:	e880 0006 	stmia.w	r0, {r1, r2}
 8000afc:	63fb      	str	r3, [r7, #60]	; 0x3c
	Transform trans;
	trans.position = position;
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	1d3a      	adds	r2, r7, #4
 8000b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b08:	e883 0003 	stmia.w	r3, {r0, r1}
	trans.size = size;
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b18:	e883 0003 	stmia.w	r3, {r0, r1}
	trans.pivot = type;
 8000b1c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000b20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	return trans;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	461d      	mov	r5, r3
 8000b28:	f107 0414 	add.w	r4, r7, #20
 8000b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b30:	6823      	ldr	r3, [r4, #0]
 8000b32:	602b      	str	r3, [r5, #0]
}
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	372c      	adds	r7, #44	; 0x2c
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bcb0      	pop	{r4, r5, r7}
 8000b3c:	b002      	add	sp, #8
 8000b3e:	4770      	bx	lr

08000b40 <getLeft>:
int getLeft(Transform* trans){
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	switch(trans->pivot%3){
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	7c1a      	ldrb	r2, [r3, #16]
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <getLeft+0x64>)
 8000b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b52:	0859      	lsrs	r1, r3, #1
 8000b54:	460b      	mov	r3, r1
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	440b      	add	r3, r1
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d014      	beq.n	8000b8c <getLeft+0x4c>
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	dc18      	bgt.n	8000b98 <getLeft+0x58>
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <getLeft+0x30>
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d003      	beq.n	8000b76 <getLeft+0x36>
 8000b6e:	e013      	b.n	8000b98 <getLeft+0x58>
	case 0 :
		return trans->position.x;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	e010      	b.n	8000b98 <getLeft+0x58>
		break;
	case 1 :
		return trans->position.x - trans->size.x/2;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	da00      	bge.n	8000b84 <getLeft+0x44>
 8000b82:	3301      	adds	r3, #1
 8000b84:	105b      	asrs	r3, r3, #1
 8000b86:	425b      	negs	r3, r3
 8000b88:	4413      	add	r3, r2
 8000b8a:	e005      	b.n	8000b98 <getLeft+0x58>
		break;
	case 2 :
		return trans->position.x - trans->size.x;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	e7ff      	b.n	8000b98 <getLeft+0x58>
		break;
	}
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	aaaaaaab 	.word	0xaaaaaaab

08000ba8 <getRight>:
int getRight(Transform* trans){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	return getLeft(trans)+trans->size.x;
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ffc5 	bl	8000b40 <getLeft>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	4413      	add	r3, r2
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <getTop>:
int getTop(Transform* trans){
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	switch(trans->pivot/3){
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7c1b      	ldrb	r3, [r3, #16]
 8000bd4:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <getTop+0x5c>)
 8000bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bda:	085b      	lsrs	r3, r3, #1
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d014      	beq.n	8000c0c <getTop+0x44>
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	dc18      	bgt.n	8000c18 <getTop+0x50>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <getTop+0x28>
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d003      	beq.n	8000bf6 <getTop+0x2e>
 8000bee:	e013      	b.n	8000c18 <getTop+0x50>
		case 0 :
			return trans->position.y;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	e010      	b.n	8000c18 <getTop+0x50>
			break;
		case 1 :
			return trans->position.y - trans->size.y/2;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	da00      	bge.n	8000c04 <getTop+0x3c>
 8000c02:	3301      	adds	r3, #1
 8000c04:	105b      	asrs	r3, r3, #1
 8000c06:	425b      	negs	r3, r3
 8000c08:	4413      	add	r3, r2
 8000c0a:	e005      	b.n	8000c18 <getTop+0x50>
			break;
		case 2 :
			return trans->position.y - trans->size.y;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	e7ff      	b.n	8000c18 <getTop+0x50>
			break;
		}
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	aaaaaaab 	.word	0xaaaaaaab

08000c28 <getBottom>:
int getBottom(Transform* trans){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	return getTop(trans)+trans->size.y;
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ffc9 	bl	8000bc8 <getTop>
 8000c36:	4602      	mov	r2, r0
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	4413      	add	r3, r2
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <getTransformOrigin>:
Vector2 getTransformOrigin(Transform* transform){
 8000c46:	b590      	push	{r4, r7, lr}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
	return Vector2_init(getLeft(transform),getTop(transform));
 8000c50:	6838      	ldr	r0, [r7, #0]
 8000c52:	f7ff ff75 	bl	8000b40 <getLeft>
 8000c56:	4604      	mov	r4, r0
 8000c58:	6838      	ldr	r0, [r7, #0]
 8000c5a:	f7ff ffb5 	bl	8000bc8 <getTop>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4621      	mov	r1, r4
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fe0b 	bl	8000880 <Vector2_init>
}
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd90      	pop	{r4, r7, pc}

08000c72 <Draw>:

void Draw(Transform* trans,uint16_t color){
 8000c72:	b590      	push	{r4, r7, lr}
 8000c74:	b089      	sub	sp, #36	; 0x24
 8000c76:	af02      	add	r7, sp, #8
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	807b      	strh	r3, [r7, #2]
	Vector2 origin = getTransformOrigin(trans);
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ffde 	bl	8000c46 <getTransformOrigin>
	Vector2 endPos = Add(origin,trans->size) ;
 8000c8a:	f107 0008 	add.w	r0, r7, #8
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68da      	ldr	r2, [r3, #12]
 8000c92:	9200      	str	r2, [sp, #0]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	f107 0210 	add.w	r2, r7, #16
 8000c9a:	ca06      	ldmia	r2, {r1, r2}
 8000c9c:	f7ff fe08 	bl	80008b0 <Add>
	ILI9341_Draw_Filled_Rectangle_Coord(origin.x,origin.y,endPos.x,endPos.y,color);
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	b298      	uxth	r0, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	b299      	uxth	r1, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	b29c      	uxth	r4, r3
 8000cb0:	887b      	ldrh	r3, [r7, #2]
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	4623      	mov	r3, r4
 8000cb6:	f006 f8ed 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8000cba:	bf00      	nop
 8000cbc:	371c      	adds	r7, #28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd90      	pop	{r4, r7, pc}
	...

08000cc4 <DrawImage>:
void DrawImage(Transform* transform,uint8_t* arr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8000cca:	af02      	add	r7, sp, #8
 8000ccc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000cd0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000cd4:	6018      	str	r0, [r3, #0]
 8000cd6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000cda:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000cde:	6019      	str	r1, [r3, #0]
    Vector2 origin = getTransformOrigin(transform);
 8000ce0:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8000ce4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000ce8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000cec:	6819      	ldr	r1, [r3, #0]
 8000cee:	4610      	mov	r0, r2
 8000cf0:	f7ff ffa9 	bl	8000c46 <getTransformOrigin>
    Vector2 endPoint = Add(origin,transform->size);
 8000cf4:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 8000cf8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000cfc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	9200      	str	r2, [sp, #0]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8000d0c:	ca06      	ldmia	r2, {r1, r2}
 8000d0e:	f7ff fdcf 	bl	80008b0 <Add>

    ILI9341_Set_Address(origin.x, origin.y, endPoint.x-1, endPoint.y-1);
 8000d12:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000d16:	b298      	uxth	r0, r3
 8000d18:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000d1c:	b299      	uxth	r1, r3
 8000d1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	3b01      	subs	r3, #1
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	f006 fa3d 	bl	80071b0 <ILI9341_Set_Address>

    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3c:	4834      	ldr	r0, [pc, #208]	; (8000e10 <DrawImage+0x14c>)
 8000d3e:	f008 fac1 	bl	80092c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d48:	4831      	ldr	r0, [pc, #196]	; (8000e10 <DrawImage+0x14c>)
 8000d4a:	f008 fabb 	bl	80092c4 <HAL_GPIO_WritePin>

    unsigned char Temp_small_buffer[BURST_MAX_SIZE];
    uint32_t counter = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    for (uint32_t i = 0; i < transform->size.x * transform->size.y * 2 / BURST_MAX_SIZE; i++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000d5a:	e035      	b.n	8000dc8 <DrawImage+0x104>
    {
        for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000d62:	e019      	b.n	8000d98 <DrawImage+0xd4>
        {
            Temp_small_buffer[k] = arr[counter + k];
 8000d64:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000d68:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d6c:	4413      	add	r3, r2
 8000d6e:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000d72:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8000d76:	6812      	ldr	r2, [r2, #0]
 8000d78:	4413      	add	r3, r2
 8000d7a:	7819      	ldrb	r1, [r3, #0]
 8000d7c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000d80:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8000d84:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d88:	4413      	add	r3, r2
 8000d8a:	460a      	mov	r2, r1
 8000d8c:	701a      	strb	r2, [r3, #0]
        for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8000d8e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d92:	3301      	adds	r3, #1
 8000d94:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8000d98:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000da0:	d3e0      	bcc.n	8000d64 <DrawImage+0xa0>
        }
        HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8000da2:	f107 0108 	add.w	r1, r7, #8
 8000da6:	230a      	movs	r3, #10
 8000da8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000dac:	4819      	ldr	r0, [pc, #100]	; (8000e14 <DrawImage+0x150>)
 8000dae:	f009 fcec 	bl	800a78a <HAL_SPI_Transmit>
        counter += BURST_MAX_SIZE;
 8000db2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000db6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000dba:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    for (uint32_t i = 0; i < transform->size.x * transform->size.y * 2 / BURST_MAX_SIZE; i++)
 8000dbe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8000dc8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000dcc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000dd8:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8000ddc:	6812      	ldr	r2, [r2, #0]
 8000dde:	68d2      	ldr	r2, [r2, #12]
 8000de0:	fb02 f303 	mul.w	r3, r2, r3
 8000de4:	4a0c      	ldr	r2, [pc, #48]	; (8000e18 <DrawImage+0x154>)
 8000de6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dea:	1112      	asrs	r2, r2, #4
 8000dec:	17db      	asrs	r3, r3, #31
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	461a      	mov	r2, r3
 8000df2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d3b0      	bcc.n	8000d5c <DrawImage+0x98>
    }
    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <DrawImage+0x14c>)
 8000e02:	f008 fa5f 	bl	80092c4 <HAL_GPIO_WritePin>
}
 8000e06:	bf00      	nop
 8000e08:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40020800 	.word	0x40020800
 8000e14:	20002dc4 	.word	0x20002dc4
 8000e18:	10624dd3 	.word	0x10624dd3

08000e1c <isCollision>:
bool isCollision(Transform *trans1,Transform *trans2,Vector2 *vectorOutput){
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b095      	sub	sp, #84	; 0x54
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6178      	str	r0, [r7, #20]
 8000e24:	6139      	str	r1, [r7, #16]
 8000e26:	60fa      	str	r2, [r7, #12]
	if(trans1==NULL||trans2==NULL)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <isCollision+0x18>
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d101      	bne.n	8000e38 <isCollision+0x1c>
		return false;
 8000e34:	2300      	movs	r3, #0
 8000e36:	e0b6      	b.n	8000fa6 <isCollision+0x18a>
	int r1 = getRight(trans1),r2=getRight(trans2),l1=getLeft(trans1),l2=getLeft(trans2);
 8000e38:	6978      	ldr	r0, [r7, #20]
 8000e3a:	f7ff feb5 	bl	8000ba8 <getRight>
 8000e3e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8000e40:	6938      	ldr	r0, [r7, #16]
 8000e42:	f7ff feb1 	bl	8000ba8 <getRight>
 8000e46:	64b8      	str	r0, [r7, #72]	; 0x48
 8000e48:	6978      	ldr	r0, [r7, #20]
 8000e4a:	f7ff fe79 	bl	8000b40 <getLeft>
 8000e4e:	6478      	str	r0, [r7, #68]	; 0x44
 8000e50:	6938      	ldr	r0, [r7, #16]
 8000e52:	f7ff fe75 	bl	8000b40 <getLeft>
 8000e56:	6438      	str	r0, [r7, #64]	; 0x40
	int t1 = getTop(trans1),t2=getTop(trans2),b1=getBottom(trans1),b2=getBottom(trans2);
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	f7ff feb5 	bl	8000bc8 <getTop>
 8000e5e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000e60:	6938      	ldr	r0, [r7, #16]
 8000e62:	f7ff feb1 	bl	8000bc8 <getTop>
 8000e66:	63b8      	str	r0, [r7, #56]	; 0x38
 8000e68:	6978      	ldr	r0, [r7, #20]
 8000e6a:	f7ff fedd 	bl	8000c28 <getBottom>
 8000e6e:	6378      	str	r0, [r7, #52]	; 0x34
 8000e70:	6938      	ldr	r0, [r7, #16]
 8000e72:	f7ff fed9 	bl	8000c28 <getBottom>
 8000e76:	6338      	str	r0, [r7, #48]	; 0x30
	Vector2 v = {0,0};
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
	if((inBetween(l2+1,r1,r2)||inBetween(l2,l1,r2-1)||inBetween(l1,l2,r1-1))&&
 8000e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e82:	3301      	adds	r3, #1
 8000e84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e86:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f005 fe8a 	bl	8006ba2 <inBetween>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d113      	bne.n	8000ebc <isCollision+0xa0>
 8000e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e96:	3b01      	subs	r3, #1
 8000e98:	461a      	mov	r2, r3
 8000e9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000e9c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000e9e:	f005 fe80 	bl	8006ba2 <inBetween>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d109      	bne.n	8000ebc <isCollision+0xa0>
 8000ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	461a      	mov	r2, r3
 8000eae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000eb0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000eb2:	f005 fe76 	bl	8006ba2 <inBetween>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d073      	beq.n	8000fa4 <isCollision+0x188>
			(inBetween(t2+1,b1,b2)||inBetween(t2,t1,b2-1)||inBetween(t1,t2,b1-1))){
 8000ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ec2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f005 fe6c 	bl	8006ba2 <inBetween>
 8000eca:	4603      	mov	r3, r0
	if((inBetween(l2+1,r1,r2)||inBetween(l2,l1,r2-1)||inBetween(l1,l2,r1-1))&&
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d113      	bne.n	8000ef8 <isCollision+0xdc>
			(inBetween(t2+1,b1,b2)||inBetween(t2,t1,b2-1)||inBetween(t1,t2,b1-1))){
 8000ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000ed8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000eda:	f005 fe62 	bl	8006ba2 <inBetween>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d109      	bne.n	8000ef8 <isCollision+0xdc>
 8000ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	461a      	mov	r2, r3
 8000eea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000eec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000eee:	f005 fe58 	bl	8006ba2 <inBetween>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d055      	beq.n	8000fa4 <isCollision+0x188>
		int dst1=l2-r1,dst2=r2-l1;
 8000ef8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
		int dstX = abs(dst1)<abs(dst2)?dst1:dst2;
 8000f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f0e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bfb8      	it	lt
 8000f18:	425b      	neglt	r3, r3
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	da01      	bge.n	8000f22 <isCollision+0x106>
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	e000      	b.n	8000f24 <isCollision+0x108>
 8000f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
		dst1=t2-b1,dst2=b2-t1;
 8000f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
		int dstY = abs(dst1)<abs(dst2)?dst1:dst2;
 8000f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f38:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f3c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bfb8      	it	lt
 8000f46:	425b      	neglt	r3, r3
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	da01      	bge.n	8000f50 <isCollision+0x134>
 8000f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4e:	e000      	b.n	8000f52 <isCollision+0x136>
 8000f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f52:	623b      	str	r3, [r7, #32]
		*vectorOutput = abs(dstX)<abs(dstY)?Vector2_init(dstX,0) :Vector2_init(0,dstY);
 8000f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f56:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f5a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	bfb8      	it	lt
 8000f64:	425b      	neglt	r3, r3
 8000f66:	429a      	cmp	r2, r3
 8000f68:	da0d      	bge.n	8000f86 <isCollision+0x16a>
 8000f6a:	68fc      	ldr	r4, [r7, #12]
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fc84 	bl	8000880 <Vector2_init>
 8000f78:	4622      	mov	r2, r4
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f80:	e882 0003 	stmia.w	r2, {r0, r1}
 8000f84:	e00c      	b.n	8000fa0 <isCollision+0x184>
 8000f86:	68fc      	ldr	r4, [r7, #12]
 8000f88:	463b      	mov	r3, r7
 8000f8a:	6a3a      	ldr	r2, [r7, #32]
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fc76 	bl	8000880 <Vector2_init>
 8000f94:	4622      	mov	r2, r4
 8000f96:	463b      	mov	r3, r7
 8000f98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f9c:	e882 0003 	stmia.w	r2, {r0, r1}
		return true;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <isCollision+0x18a>
	}
	return false;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3754      	adds	r7, #84	; 0x54
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd90      	pop	{r4, r7, pc}
	...

08000fb0 <Move>:
void Move(Player* player,Vector2 moveDst){
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b0b3      	sub	sp, #204	; 0xcc
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	6178      	str	r0, [r7, #20]
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	e883 0006 	stmia.w	r3, {r1, r2}
	Vector2 dst;
	player->transform.position = Add(player->transform.position,moveDst);
 8000fc0:	697c      	ldr	r4, [r7, #20]
 8000fc2:	4638      	mov	r0, r7
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	ca06      	ldmia	r2, {r1, r2}
 8000fce:	f7ff fc6f 	bl	80008b0 <Add>
 8000fd2:	4622      	mov	r2, r4
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fda:	e882 0003 	stmia.w	r2, {r0, r1}
	Vector2 index = getPlayerIndex(player);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	6979      	ldr	r1, [r7, #20]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 ff79 	bl	8001edc <getPlayerIndex>
	if(index.x>0)
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	dd18      	ble.n	8001022 <Move+0x72>
		CheckPlayerCollisionAt(player,Add(index,Vector2_init(-1,0)));
 8000ff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fc40 	bl	8000880 <Vector2_init>
 8001000:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100a:	f107 021c 	add.w	r2, r7, #28
 800100e:	ca06      	ldmia	r2, {r1, r2}
 8001010:	f7ff fc4e 	bl	80008b0 <Add>
 8001014:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001018:	e893 0006 	ldmia.w	r3, {r1, r2}
 800101c:	6978      	ldr	r0, [r7, #20]
 800101e:	f000 f9cd 	bl	80013bc <CheckPlayerCollisionAt>
	if(index.y>0)
 8001022:	6a3b      	ldr	r3, [r7, #32]
 8001024:	2b00      	cmp	r3, #0
 8001026:	dd18      	ble.n	800105a <Move+0xaa>
		CheckPlayerCollisionAt(player,Add(index,Vector2_init(0,-1)));
 8001028:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800102c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fc24 	bl	8000880 <Vector2_init>
 8001038:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800103c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001042:	f107 021c 	add.w	r2, r7, #28
 8001046:	ca06      	ldmia	r2, {r1, r2}
 8001048:	f7ff fc32 	bl	80008b0 <Add>
 800104c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001050:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001054:	6978      	ldr	r0, [r7, #20]
 8001056:	f000 f9b1 	bl	80013bc <CheckPlayerCollisionAt>
	if(index.x<MAP_WIDTH-1)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	2b0b      	cmp	r3, #11
 800105e:	dc17      	bgt.n	8001090 <Move+0xe0>
			CheckPlayerCollisionAt(player,Add(index,Vector2_init(1,0)));
 8001060:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001064:	2200      	movs	r2, #0
 8001066:	2101      	movs	r1, #1
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fc09 	bl	8000880 <Vector2_init>
 800106e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001078:	f107 021c 	add.w	r2, r7, #28
 800107c:	ca06      	ldmia	r2, {r1, r2}
 800107e:	f7ff fc17 	bl	80008b0 <Add>
 8001082:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001086:	e893 0006 	ldmia.w	r3, {r1, r2}
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f000 f996 	bl	80013bc <CheckPlayerCollisionAt>
	if(index.y<MAP_HEIGHT-1)
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	2b0b      	cmp	r3, #11
 8001094:	dc17      	bgt.n	80010c6 <Move+0x116>
		CheckPlayerCollisionAt(player,Add(index,Vector2_init(0,1)));
 8001096:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800109a:	2201      	movs	r2, #1
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fbee 	bl	8000880 <Vector2_init>
 80010a4:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80010a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ae:	f107 021c 	add.w	r2, r7, #28
 80010b2:	ca06      	ldmia	r2, {r1, r2}
 80010b4:	f7ff fbfc 	bl	80008b0 <Add>
 80010b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010bc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80010c0:	6978      	ldr	r0, [r7, #20]
 80010c2:	f000 f97b 	bl	80013bc <CheckPlayerCollisionAt>
	if(index.x>0){
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	dd39      	ble.n	8001140 <Move+0x190>
		if(index.y>0){
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	dd19      	ble.n	8001106 <Move+0x156>
			CheckPlayerCollisionAt(player,Add(index,Vector2_init(-1,-1)));
 80010d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fbce 	bl	8000880 <Vector2_init>
 80010e4:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80010e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010ee:	f107 021c 	add.w	r2, r7, #28
 80010f2:	ca06      	ldmia	r2, {r1, r2}
 80010f4:	f7ff fbdc 	bl	80008b0 <Add>
 80010f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010fc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001100:	6978      	ldr	r0, [r7, #20]
 8001102:	f000 f95b 	bl	80013bc <CheckPlayerCollisionAt>
		}
		if(index.y<MAP_HEIGHT-1){
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	2b0b      	cmp	r3, #11
 800110a:	dc19      	bgt.n	8001140 <Move+0x190>
			CheckPlayerCollisionAt(player,Add(index,Vector2_init(-1,1)));
 800110c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001110:	2201      	movs	r2, #1
 8001112:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fbb2 	bl	8000880 <Vector2_init>
 800111c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001120:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001128:	f107 021c 	add.w	r2, r7, #28
 800112c:	ca06      	ldmia	r2, {r1, r2}
 800112e:	f7ff fbbf 	bl	80008b0 <Add>
 8001132:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001136:	e893 0006 	ldmia.w	r3, {r1, r2}
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f000 f93e 	bl	80013bc <CheckPlayerCollisionAt>
		}
	}
	if(index.x<MAP_WIDTH-1){
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b0b      	cmp	r3, #11
 8001144:	dc3a      	bgt.n	80011bc <Move+0x20c>
		if(index.y>0){
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	2b00      	cmp	r3, #0
 800114a:	dd1a      	ble.n	8001182 <Move+0x1d2>
			CheckPlayerCollisionAt(player,Add(index,Vector2_init(1,-1)));
 800114c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001154:	2101      	movs	r1, #1
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fb92 	bl	8000880 <Vector2_init>
 800115c:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8001160:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800116a:	f107 021c 	add.w	r2, r7, #28
 800116e:	ca06      	ldmia	r2, {r1, r2}
 8001170:	f7ff fb9e 	bl	80008b0 <Add>
 8001174:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001178:	e893 0006 	ldmia.w	r3, {r1, r2}
 800117c:	6978      	ldr	r0, [r7, #20]
 800117e:	f000 f91d 	bl	80013bc <CheckPlayerCollisionAt>
		}
		if(index.y<MAP_HEIGHT-1){
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	2b0b      	cmp	r3, #11
 8001186:	dc19      	bgt.n	80011bc <Move+0x20c>
			CheckPlayerCollisionAt(player,Add(index,Vector2_init(1,1)));
 8001188:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800118c:	2201      	movs	r2, #1
 800118e:	2101      	movs	r1, #1
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fb75 	bl	8000880 <Vector2_init>
 8001196:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800119a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011a4:	f107 021c 	add.w	r2, r7, #28
 80011a8:	ca06      	ldmia	r2, {r1, r2}
 80011aa:	f7ff fb81 	bl	80008b0 <Add>
 80011ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011b2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f000 f900 	bl	80013bc <CheckPlayerCollisionAt>
		}
	}
	for(int i=0;i<4;i++){
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80011c2:	e024      	b.n	800120e <Move+0x25e>
		if(isCollision(&player->transform,&walls[i],&dst)){
 80011c4:	6978      	ldr	r0, [r7, #20]
 80011c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4a76      	ldr	r2, [pc, #472]	; (80013ac <Move+0x3fc>)
 80011d4:	4413      	add	r3, r2
 80011d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fe1e 	bl	8000e1c <isCollision>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00e      	beq.n	8001204 <Move+0x254>
			player->transform.position = Add(player->transform.position,dst);
 80011e6:	697c      	ldr	r4, [r7, #20]
 80011e8:	4638      	mov	r0, r7
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	ca06      	ldmia	r2, {r1, r2}
 80011f4:	f7ff fb5c 	bl	80008b0 <Add>
 80011f8:	4622      	mov	r2, r4
 80011fa:	463b      	mov	r3, r7
 80011fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001200:	e882 0003 	stmia.w	r2, {r0, r1}
	for(int i=0;i<4;i++){
 8001204:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001208:	3301      	adds	r3, #1
 800120a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800120e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001212:	2b03      	cmp	r3, #3
 8001214:	ddd6      	ble.n	80011c4 <Move+0x214>
		}
	}
	for(int i=0;i<playerCount;i++){
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800121c:	e03a      	b.n	8001294 <Move+0x2e4>
		if(player!=&players[i]&&isCollision(&player->transform,&getCell(getPlayerIndex(&players[i]))->floor,&dst)){
 800121e:	4b64      	ldr	r3, [pc, #400]	; (80013b0 <Move+0x400>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001226:	019b      	lsls	r3, r3, #6
 8001228:	4413      	add	r3, r2
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	429a      	cmp	r2, r3
 800122e:	d02c      	beq.n	800128a <Move+0x2da>
 8001230:	697c      	ldr	r4, [r7, #20]
 8001232:	4b5f      	ldr	r3, [pc, #380]	; (80013b0 <Move+0x400>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800123a:	019b      	lsls	r3, r3, #6
 800123c:	441a      	add	r2, r3
 800123e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fe49 	bl	8001edc <getPlayerIndex>
 800124a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800124e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001252:	f000 fd09 	bl	8001c68 <getCell>
 8001256:	4603      	mov	r3, r0
 8001258:	4619      	mov	r1, r3
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	461a      	mov	r2, r3
 8001260:	4620      	mov	r0, r4
 8001262:	f7ff fddb 	bl	8000e1c <isCollision>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00e      	beq.n	800128a <Move+0x2da>
			player->transform.position = Add(player->transform.position,dst);
 800126c:	697c      	ldr	r4, [r7, #20]
 800126e:	4638      	mov	r0, r7
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	ca06      	ldmia	r2, {r1, r2}
 800127a:	f7ff fb19 	bl	80008b0 <Add>
 800127e:	4622      	mov	r2, r4
 8001280:	463b      	mov	r3, r7
 8001282:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001286:	e882 0003 	stmia.w	r2, {r0, r1}
	for(int i=0;i<playerCount;i++){
 800128a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800128e:	3301      	adds	r3, #1
 8001290:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001294:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <Move+0x404>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800129c:	429a      	cmp	r2, r3
 800129e:	dbbe      	blt.n	800121e <Move+0x26e>
		}
	}
	ObjectType type = getCell(index)->objType;
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012a8:	f000 fcde 	bl	8001c68 <getCell>
 80012ac:	4603      	mov	r3, r0
 80012ae:	7e1b      	ldrb	r3, [r3, #24]
 80012b0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	switch(type){
 80012b4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80012b8:	3b04      	subs	r3, #4
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d86e      	bhi.n	800139c <Move+0x3ec>
 80012be:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <Move+0x314>)
 80012c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c4:	08001361 	.word	0x08001361
 80012c8:	080012d9 	.word	0x080012d9
 80012cc:	080012fb 	.word	0x080012fb
 80012d0:	0800131d 	.word	0x0800131d
 80012d4:	0800133f 	.word	0x0800133f
		case SpeedItem :
			if(player->speed<5)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	dc04      	bgt.n	80012ea <Move+0x33a>
				player->speed++;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	619a      	str	r2, [r3, #24]
			clearObject(index,false);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012f4:	f000 fbd0 	bl	8001a98 <clearObject>
			break;
 80012f8:	e053      	b.n	80013a2 <Move+0x3f2>
		case BombAmountItem:
			if(player->maxBombCount<5)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	2b04      	cmp	r3, #4
 8001300:	dc04      	bgt.n	800130c <Move+0x35c>
				player->maxBombCount++;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	61da      	str	r2, [r3, #28]
			clearObject(index,false);
 800130c:	2200      	movs	r2, #0
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001316:	f000 fbbf 	bl	8001a98 <clearObject>
			break;
 800131a:	e042      	b.n	80013a2 <Move+0x3f2>
		case BombRangeItem:
			if(player->bombRange<5)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	2b04      	cmp	r3, #4
 8001322:	dc04      	bgt.n	800132e <Move+0x37e>
				player->bombRange++;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	621a      	str	r2, [r3, #32]
			clearObject(index,false);
 800132e:	2200      	movs	r2, #0
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001338:	f000 fbae 	bl	8001a98 <clearObject>
			break;
 800133c:	e031      	b.n	80013a2 <Move+0x3f2>
		case HealthItem:
			if(player->health<5)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	2b04      	cmp	r3, #4
 8001344:	dc04      	bgt.n	8001350 <Move+0x3a0>
				player->health++;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	615a      	str	r2, [r3, #20]
			clearObject(index,false);
 8001350:	2200      	movs	r2, #0
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	e893 0003 	ldmia.w	r3, {r0, r1}
 800135a:	f000 fb9d 	bl	8001a98 <clearObject>
			break;
 800135e:	e020      	b.n	80013a2 <Move+0x3f2>
		case DetonateEffectObject:
			if(!player->immortalFlag){
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001366:	f083 0301 	eor.w	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d017      	beq.n	80013a0 <Move+0x3f0>
				player->health--;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	1e5a      	subs	r2, r3, #1
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	615a      	str	r2, [r3, #20]
				player->immortalFlag = true;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				player->initialImmortalTime = TimeTotal;
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <Move+0x408>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	62da      	str	r2, [r3, #44]	; 0x2c
				if(player->health<=0)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	2b00      	cmp	r3, #0
 8001390:	dc06      	bgt.n	80013a0 <Move+0x3f0>
					player->deadFlag = true;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
			break;
 800139a:	e001      	b.n	80013a0 <Move+0x3f0>
		default:break;
 800139c:	bf00      	nop
 800139e:	e000      	b.n	80013a2 <Move+0x3f2>
			break;
 80013a0:	bf00      	nop
	}

}
 80013a2:	bf00      	nop
 80013a4:	37c4      	adds	r7, #196	; 0xc4
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd90      	pop	{r4, r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2000013c 	.word	0x2000013c
 80013b0:	20002d84 	.word	0x20002d84
 80013b4:	2000018c 	.word	0x2000018c
 80013b8:	20002d80 	.word	0x20002d80

080013bc <CheckPlayerCollisionAt>:
bool CheckPlayerCollisionAt(Player* player,Vector2 index){
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b08b      	sub	sp, #44	; 0x2c
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	6178      	str	r0, [r7, #20]
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	e883 0006 	stmia.w	r3, {r1, r2}
	Vector2 dst;
	if((
		getCell(index)->objType == BombObject||
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013d4:	f000 fc48 	bl	8001c68 <getCell>
 80013d8:	4603      	mov	r3, r0
 80013da:	7e1b      	ldrb	r3, [r3, #24]
	if((
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d013      	beq.n	8001408 <CheckPlayerCollisionAt+0x4c>
		getCell(index)->objType == BreakableWall||
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013e8:	f000 fc3e 	bl	8001c68 <getCell>
 80013ec:	4603      	mov	r3, r0
 80013ee:	7e1b      	ldrb	r3, [r3, #24]
		getCell(index)->objType == BombObject||
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d009      	beq.n	8001408 <CheckPlayerCollisionAt+0x4c>
		getCell(index)->objType == UnbreakableWall)&&
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013fc:	f000 fc34 	bl	8001c68 <getCell>
 8001400:	4603      	mov	r3, r0
 8001402:	7e1b      	ldrb	r3, [r3, #24]
		getCell(index)->objType == BreakableWall||
 8001404:	2b01      	cmp	r3, #1
 8001406:	d11f      	bne.n	8001448 <CheckPlayerCollisionAt+0x8c>
		isCollision(&player->transform,getCell(index),&dst)
 8001408:	697c      	ldr	r4, [r7, #20]
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001412:	f000 fc29 	bl	8001c68 <getCell>
 8001416:	4601      	mov	r1, r0
 8001418:	f107 0318 	add.w	r3, r7, #24
 800141c:	461a      	mov	r2, r3
 800141e:	4620      	mov	r0, r4
 8001420:	f7ff fcfc 	bl	8000e1c <isCollision>
 8001424:	4603      	mov	r3, r0
		getCell(index)->objType == UnbreakableWall)&&
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00e      	beq.n	8001448 <CheckPlayerCollisionAt+0x8c>
	){
		player->transform.position = Add(player->transform.position,dst);
 800142a:	697c      	ldr	r4, [r7, #20]
 800142c:	4638      	mov	r0, r7
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	ca06      	ldmia	r2, {r1, r2}
 8001438:	f7ff fa3a 	bl	80008b0 <Add>
 800143c:	4622      	mov	r2, r4
 800143e:	463b      	mov	r3, r7
 8001440:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001444:	e882 0003 	stmia.w	r2, {r0, r1}
	}
}
 8001448:	bf00      	nop
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd90      	pop	{r4, r7, pc}
	...

08001454 <drawPlayers>:
void drawPlayers(Player* players,int count){
 8001454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001458:	b097      	sub	sp, #92	; 0x5c
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	466b      	mov	r3, sp
 8001462:	461e      	mov	r6, r3
	Vector2 playerIndexs[count];
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	1e4b      	subs	r3, r1, #1
 8001468:	647b      	str	r3, [r7, #68]	; 0x44
 800146a:	460a      	mov	r2, r1
 800146c:	2300      	movs	r3, #0
 800146e:	4690      	mov	r8, r2
 8001470:	4699      	mov	r9, r3
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800147e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001482:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001486:	460a      	mov	r2, r1
 8001488:	2300      	movs	r3, #0
 800148a:	4614      	mov	r4, r2
 800148c:	461d      	mov	r5, r3
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	01ab      	lsls	r3, r5, #6
 8001498:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800149c:	01a2      	lsls	r2, r4, #6
 800149e:	460b      	mov	r3, r1
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	3307      	adds	r3, #7
 80014a4:	08db      	lsrs	r3, r3, #3
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	ebad 0d03 	sub.w	sp, sp, r3
 80014ac:	466b      	mov	r3, sp
 80014ae:	3303      	adds	r3, #3
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	643b      	str	r3, [r7, #64]	; 0x40
	for(int i=0;i<count;i++){
 80014b6:	2300      	movs	r3, #0
 80014b8:	657b      	str	r3, [r7, #84]	; 0x54
 80014ba:	e014      	b.n	80014e6 <drawPlayers+0x92>
		playerIndexs[i]=getPlayerIndex(&players[i]);
 80014bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014be:	019b      	lsls	r3, r3, #6
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	441a      	add	r2, r3
 80014c4:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80014c6:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 80014c8:	463b      	mov	r3, r7
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fd05 	bl	8001edc <getPlayerIndex>
 80014d2:	00eb      	lsls	r3, r5, #3
 80014d4:	4423      	add	r3, r4
 80014d6:	463a      	mov	r2, r7
 80014d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014dc:	e883 0003 	stmia.w	r3, {r0, r1}
	for(int i=0;i<count;i++){
 80014e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014e2:	3301      	adds	r3, #1
 80014e4:	657b      	str	r3, [r7, #84]	; 0x54
 80014e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	dbe6      	blt.n	80014bc <drawPlayers+0x68>
	}
	for(int i=0;i<count;i++){
 80014ee:	2300      	movs	r3, #0
 80014f0:	653b      	str	r3, [r7, #80]	; 0x50
 80014f2:	e0c3      	b.n	800167c <drawPlayers+0x228>
		Player* player = &players[i];
 80014f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014f6:	019b      	lsls	r3, r3, #6
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(!player->deadFlag){
 80014fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001500:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001504:	f083 0301 	eor.w	r3, r3, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 80b3 	beq.w	8001676 <drawPlayers+0x222>
			int delta = (TimeTotal-player->initialImmortalTime)%BLINK_PERIOD;
 8001510:	4b60      	ldr	r3, [pc, #384]	; (8001694 <drawPlayers+0x240>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	4a5f      	ldr	r2, [pc, #380]	; (8001698 <drawPlayers+0x244>)
 800151c:	fb82 1203 	smull	r1, r2, r2, r3
 8001520:	1211      	asrs	r1, r2, #8
 8001522:	17da      	asrs	r2, r3, #31
 8001524:	1a8a      	subs	r2, r1, r2
 8001526:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800152a:	fb01 f202 	mul.w	r2, r1, r2
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	63bb      	str	r3, [r7, #56]	; 0x38
			Vector2 playerIndex = playerIndexs[i];
 8001532:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001536:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	440b      	add	r3, r1
 800153e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001542:	e882 0003 	stmia.w	r2, {r0, r1}
			Vector2 minIndex = Vector2_init(playerIndex.x>0?playerIndex.x-1:0,playerIndex.y>0?playerIndex.y-1:playerIndex.y);
 8001546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001548:	2b01      	cmp	r3, #1
 800154a:	bfb8      	it	lt
 800154c:	2301      	movlt	r3, #1
 800154e:	1e59      	subs	r1, r3, #1
 8001550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001552:	2b00      	cmp	r3, #0
 8001554:	dd02      	ble.n	800155c <drawPlayers+0x108>
 8001556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001558:	3b01      	subs	r3, #1
 800155a:	e000      	b.n	800155e <drawPlayers+0x10a>
 800155c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001562:	461a      	mov	r2, r3
 8001564:	f7ff f98c 	bl	8000880 <Vector2_init>
			Vector2 maxIndex = Vector2_init(playerIndex.x<MAP_WIDTH-1?playerIndex.x+1:playerIndex.x,playerIndex.y<MAP_HEIGHT-1?playerIndex.y+1:playerIndex.y);
 8001568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156a:	2b0b      	cmp	r3, #11
 800156c:	dc02      	bgt.n	8001574 <drawPlayers+0x120>
 800156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001570:	3301      	adds	r3, #1
 8001572:	e000      	b.n	8001576 <drawPlayers+0x122>
 8001574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001578:	2a0b      	cmp	r2, #11
 800157a:	dc02      	bgt.n	8001582 <drawPlayers+0x12e>
 800157c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800157e:	3201      	adds	r2, #1
 8001580:	e000      	b.n	8001584 <drawPlayers+0x130>
 8001582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001584:	f107 001c 	add.w	r0, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff f979 	bl	8000880 <Vector2_init>
				for(Vector2 index = minIndex;index.y<=maxIndex.y;index.y++,index.x=minIndex.x){
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001596:	e892 0003 	ldmia.w	r2, {r0, r1}
 800159a:	e883 0003 	stmia.w	r3, {r0, r1}
 800159e:	e035      	b.n	800160c <drawPlayers+0x1b8>
					for(;index.x<=maxIndex.x;index.x++){
						bool flag = false;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for(int j=0;j<count;j++){
 80015a6:	2300      	movs	r3, #0
 80015a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80015aa:	e012      	b.n	80015d2 <drawPlayers+0x17e>
							if(Equal(playerIndexs[j],index)){
 80015ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80015ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	cb0c      	ldmia	r3, {r2, r3}
 80015b6:	00c9      	lsls	r1, r1, #3
 80015b8:	4401      	add	r1, r0
 80015ba:	c903      	ldmia	r1, {r0, r1}
 80015bc:	f7ff fa17 	bl	80009ee <Equal>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <drawPlayers+0x178>
								flag =true;
 80015c6:	2301      	movs	r3, #1
 80015c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for(int j=0;j<count;j++){
 80015cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ce:	3301      	adds	r3, #1
 80015d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80015d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbe8      	blt.n	80015ac <drawPlayers+0x158>
							}
						}
					if(!flag){
 80015da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015de:	f083 0301 	eor.w	r3, r3, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <drawPlayers+0x1a0>
						drawCell(index);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015f0:	f000 f854 	bl	800169c <drawCell>
					for(;index.x<=maxIndex.x;index.x++){
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3301      	adds	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	429a      	cmp	r2, r3
 8001600:	ddce      	ble.n	80015a0 <drawPlayers+0x14c>
				for(Vector2 index = minIndex;index.y<=maxIndex.y;index.y++,index.x=minIndex.x){
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	3301      	adds	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	429a      	cmp	r2, r3
 8001612:	ddf2      	ble.n	80015fa <drawPlayers+0x1a6>
					}

				}
			}
			if(!player->immortalFlag||delta>BLINK_PERIOD/2){
 8001614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800161a:	f083 0301 	eor.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d103      	bne.n	800162c <drawPlayers+0x1d8>
 8001624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001626:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800162a:	dd1c      	ble.n	8001666 <drawPlayers+0x212>

				MapCell* cell= getCell(playerIndexs[i]);
 800162c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800162e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4413      	add	r3, r2
 8001634:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001638:	f000 fb16 	bl	8001c68 <getCell>
 800163c:	6378      	str	r0, [r7, #52]	; 0x34
				if(cell->objType == BombObject)
 800163e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001640:	7e1b      	ldrb	r3, [r3, #24]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d107      	bne.n	8001656 <drawPlayers+0x202>
					DrawImage(&cell->floor,player->imgPtr2);
 8001646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800164a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164c:	4619      	mov	r1, r3
 800164e:	4610      	mov	r0, r2
 8001650:	f7ff fb38 	bl	8000cc4 <DrawImage>
			if(!player->immortalFlag||delta>BLINK_PERIOD/2){
 8001654:	e00f      	b.n	8001676 <drawPlayers+0x222>
				else
					DrawImage(&cell->floor,player->imgPtr1);
 8001656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800165a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165c:	4619      	mov	r1, r3
 800165e:	4610      	mov	r0, r2
 8001660:	f7ff fb30 	bl	8000cc4 <DrawImage>
			if(!player->immortalFlag||delta>BLINK_PERIOD/2){
 8001664:	e007      	b.n	8001676 <drawPlayers+0x222>
			}
			else{
				drawCell(playerIndexs[i]);
 8001666:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	4413      	add	r3, r2
 800166e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001672:	f000 f813 	bl	800169c <drawCell>
	for(int i=0;i<count;i++){
 8001676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001678:	3301      	adds	r3, #1
 800167a:	653b      	str	r3, [r7, #80]	; 0x50
 800167c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	429a      	cmp	r2, r3
 8001682:	f6ff af37 	blt.w	80014f4 <drawPlayers+0xa0>
 8001686:	46b5      	mov	sp, r6
			}
		}
	}
	/**/
}
 8001688:	bf00      	nop
 800168a:	375c      	adds	r7, #92	; 0x5c
 800168c:	46bd      	mov	sp, r7
 800168e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001692:	bf00      	nop
 8001694:	20002d80 	.word	0x20002d80
 8001698:	5d9f7391 	.word	0x5d9f7391

0800169c <drawCell>:
//Transform End

//Map Cell Start
void drawCell(Vector2 index){
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	463b      	mov	r3, r7
 80016a4:	e883 0003 	stmia.w	r3, {r0, r1}
	MapCell* cell = getCell(index);
 80016a8:	463b      	mov	r3, r7
 80016aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016ae:	f000 fadb 	bl	8001c68 <getCell>
 80016b2:	60f8      	str	r0, [r7, #12]
	switch(cell->objType){
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	7e1b      	ldrb	r3, [r3, #24]
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d854      	bhi.n	8001766 <drawCell+0xca>
 80016bc:	a201      	add	r2, pc, #4	; (adr r2, 80016c4 <drawCell+0x28>)
 80016be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c2:	bf00      	nop
 80016c4:	080016e9 	.word	0x080016e9
 80016c8:	08001713 	.word	0x08001713
 80016cc:	08001721 	.word	0x08001721
 80016d0:	080016f5 	.word	0x080016f5
 80016d4:	08001703 	.word	0x08001703
 80016d8:	08001759 	.word	0x08001759
 80016dc:	0800173d 	.word	0x0800173d
 80016e0:	0800174b 	.word	0x0800174b
 80016e4:	0800172f 	.word	0x0800172f
		case None:
			DrawImage(&cell->floor,&grassImage);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4921      	ldr	r1, [pc, #132]	; (8001770 <drawCell+0xd4>)
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fae9 	bl	8000cc4 <DrawImage>
			break;
 80016f2:	e038      	b.n	8001766 <drawCell+0xca>
		case BombObject:
			DrawImage(cell->objTrans,&bombImage);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	491e      	ldr	r1, [pc, #120]	; (8001774 <drawCell+0xd8>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fae2 	bl	8000cc4 <DrawImage>
			break;
 8001700:	e031      	b.n	8001766 <drawCell+0xca>
		case DetonateEffectObject:
			Draw(cell->objTrans,ORANGE);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f64f 5120 	movw	r1, #64800	; 0xfd20
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fab1 	bl	8000c72 <Draw>
			break;
 8001710:	e029      	b.n	8001766 <drawCell+0xca>
		case UnbreakableWall:
			DrawImage(cell->objTrans,&wallImage1);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	4918      	ldr	r1, [pc, #96]	; (8001778 <drawCell+0xdc>)
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fad3 	bl	8000cc4 <DrawImage>
			break;
 800171e:	e022      	b.n	8001766 <drawCell+0xca>
		case BreakableWall:
			DrawImage(cell->objTrans,&wallImage2);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	4915      	ldr	r1, [pc, #84]	; (800177c <drawCell+0xe0>)
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff facc 	bl	8000cc4 <DrawImage>
			break;
 800172c:	e01b      	b.n	8001766 <drawCell+0xca>
		case HealthItem:
			DrawImage(cell->objTrans,&heartImage);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	4913      	ldr	r1, [pc, #76]	; (8001780 <drawCell+0xe4>)
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fac5 	bl	8000cc4 <DrawImage>
			break;
 800173a:	e014      	b.n	8001766 <drawCell+0xca>
		case BombAmountItem:
			DrawImage(cell->objTrans,&addBombImage);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	4910      	ldr	r1, [pc, #64]	; (8001784 <drawCell+0xe8>)
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fabe 	bl	8000cc4 <DrawImage>
			break;
 8001748:	e00d      	b.n	8001766 <drawCell+0xca>
		case BombRangeItem:
			DrawImage(cell->objTrans,&potionImage);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	490e      	ldr	r1, [pc, #56]	; (8001788 <drawCell+0xec>)
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fab7 	bl	8000cc4 <DrawImage>
			break;
 8001756:	e006      	b.n	8001766 <drawCell+0xca>
		case SpeedItem:
			DrawImage(cell->objTrans,&shoeImage);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	490b      	ldr	r1, [pc, #44]	; (800178c <drawCell+0xf0>)
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fab0 	bl	8000cc4 <DrawImage>
			break;
 8001764:	bf00      	nop
	}
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	0803c28c 	.word	0x0803c28c
 8001774:	0803b68c 	.word	0x0803b68c
 8001778:	0803be8c 	.word	0x0803be8c
 800177c:	0803c08c 	.word	0x0803c08c
 8001780:	0803ba8c 	.word	0x0803ba8c
 8001784:	0803c48c 	.word	0x0803c48c
 8001788:	0803bc8c 	.word	0x0803bc8c
 800178c:	0803b88c 	.word	0x0803b88c

08001790 <setMap>:
void setMap(int num){
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	int *mapArr;
	if(num==1){
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d102      	bne.n	80017a4 <setMap+0x14>
		mapArr = map1;
 800179e:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <setMap+0xb8>)
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	e00a      	b.n	80017ba <setMap+0x2a>
	}
	else if(num == 2){
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d102      	bne.n	80017b0 <setMap+0x20>
		mapArr = map2;
 80017aa:	4b28      	ldr	r3, [pc, #160]	; (800184c <setMap+0xbc>)
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	e004      	b.n	80017ba <setMap+0x2a>
	}
	else if(num == 3){
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d101      	bne.n	80017ba <setMap+0x2a>
		mapArr = map3;
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <setMap+0xc0>)
 80017b8:	61fb      	str	r3, [r7, #28]
	}
	for(int i = 0;i<MAP_HEIGHT;i++){
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	e03a      	b.n	8001836 <setMap+0xa6>
		for(int j=0;j<MAP_WIDTH;j++){
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	e031      	b.n	800182a <setMap+0x9a>
			Vector2 index = Vector2_init(j,i);
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	6979      	ldr	r1, [r7, #20]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff f856 	bl	8000880 <Vector2_init>
			if(mapArr[i*MAP_WIDTH+j]){
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	441a      	add	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	4413      	add	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	4413      	add	r3, r2
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d013      	beq.n	8001818 <setMap+0x88>
				setObject(index,(ObjectType)mapArr[i*MAP_WIDTH+j],NULL);
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	441a      	add	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	4413      	add	r3, r2
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	2300      	movs	r3, #0
 800180c:	f107 010c 	add.w	r1, r7, #12
 8001810:	c903      	ldmia	r1, {r0, r1}
 8001812:	f000 f81f 	bl	8001854 <setObject>
 8001816:	e005      	b.n	8001824 <setMap+0x94>
			}
			else{
				drawCell(index);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001820:	f7ff ff3c 	bl	800169c <drawCell>
		for(int j=0;j<MAP_WIDTH;j++){
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3301      	adds	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2b0c      	cmp	r3, #12
 800182e:	ddca      	ble.n	80017c6 <setMap+0x36>
	for(int i = 0;i<MAP_HEIGHT;i++){
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	3301      	adds	r3, #1
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b0c      	cmp	r3, #12
 800183a:	ddc1      	ble.n	80017c0 <setMap+0x30>
			}
		}
	}
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000190 	.word	0x20000190
 800184c:	20000434 	.word	0x20000434
 8001850:	200006d8 	.word	0x200006d8

08001854 <setObject>:
void setObject(Vector2 index,ObjectType type,Player* player){
 8001854:	b5b0      	push	{r4, r5, r7, lr}
 8001856:	b09a      	sub	sp, #104	; 0x68
 8001858:	af02      	add	r7, sp, #8
 800185a:	f107 0420 	add.w	r4, r7, #32
 800185e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001862:	61bb      	str	r3, [r7, #24]
 8001864:	4613      	mov	r3, r2
 8001866:	77fb      	strb	r3, [r7, #31]
	clearObject(index,false);
 8001868:	2200      	movs	r2, #0
 800186a:	f107 0320 	add.w	r3, r7, #32
 800186e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001872:	f000 f911 	bl	8001a98 <clearObject>
	MapCell *cell =&map[index.y][index.x];
 8001876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001878:	6a39      	ldr	r1, [r7, #32]
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	440b      	add	r3, r1
 8001886:	015b      	lsls	r3, r3, #5
 8001888:	4a7e      	ldr	r2, [pc, #504]	; (8001a84 <setObject+0x230>)
 800188a:	4413      	add	r3, r2
 800188c:	65fb      	str	r3, [r7, #92]	; 0x5c
	switch(type){
 800188e:	7ffb      	ldrb	r3, [r7, #31]
 8001890:	2b08      	cmp	r3, #8
 8001892:	f200 80ea 	bhi.w	8001a6a <setObject+0x216>
 8001896:	a201      	add	r2, pc, #4	; (adr r2, 800189c <setObject+0x48>)
 8001898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189c:	08001a6b 	.word	0x08001a6b
 80018a0:	080019db 	.word	0x080019db
 80018a4:	080019db 	.word	0x080019db
 80018a8:	080018c1 	.word	0x080018c1
 80018ac:	08001957 	.word	0x08001957
 80018b0:	08001a23 	.word	0x08001a23
 80018b4:	08001a23 	.word	0x08001a23
 80018b8:	08001a23 	.word	0x08001a23
 80018bc:	08001a23 	.word	0x08001a23
		case None: break;
		case BombObject:
			player->currentUseBomb++;
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
			Bomb* bomb = malloc(sizeof(Bomb));
 80018ca:	2014      	movs	r0, #20
 80018cc:	f00a fefe 	bl	800c6cc <malloc>
 80018d0:	4603      	mov	r3, r0
 80018d2:	653b      	str	r3, [r7, #80]	; 0x50
			bomb->index = index;
 80018d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018d6:	461a      	mov	r2, r3
 80018d8:	f107 0320 	add.w	r3, r7, #32
 80018dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018e0:	e882 0003 	stmia.w	r2, {r0, r1}
			bomb->range = player->bombRange;
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	6a1a      	ldr	r2, [r3, #32]
 80018e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018ea:	60da      	str	r2, [r3, #12]
			bomb->detonateTime = TimeTotal+BOMB_DELAY;
 80018ec:	4b66      	ldr	r3, [pc, #408]	; (8001a88 <setObject+0x234>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f603 32b8 	addw	r2, r3, #3000	; 0xbb8
 80018f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018f6:	609a      	str	r2, [r3, #8]
			bomb->player = player;
 80018f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	611a      	str	r2, [r3, #16]
			QueueElement* element1 = enqueue(&bombs,(void*)bomb);
 80018fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001900:	4862      	ldr	r0, [pc, #392]	; (8001a8c <setObject+0x238>)
 8001902:	f005 f9d7 	bl	8006cb4 <enqueue>
 8001906:	64f8      	str	r0, [r7, #76]	; 0x4c
			cell->objPtr = (void*)element1;
 8001908:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800190a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800190c:	61da      	str	r2, [r3, #28]
			cell->objTrans = malloc(sizeof(Transform));
 800190e:	2014      	movs	r0, #20
 8001910:	f00a fedc 	bl	800c6cc <malloc>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800191a:	615a      	str	r2, [r3, #20]
			*cell->objTrans = Transform_init(toPosition(index),cellSize,MiddleCenter);
 800191c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001920:	f107 0320 	add.w	r3, r7, #32
 8001924:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001928:	f7ff f8c0 	bl	8000aac <toPosition>
 800192c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800192e:	695c      	ldr	r4, [r3, #20]
 8001930:	4638      	mov	r0, r7
 8001932:	4b57      	ldr	r3, [pc, #348]	; (8001a90 <setObject+0x23c>)
 8001934:	2204      	movs	r2, #4
 8001936:	9201      	str	r2, [sp, #4]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	9200      	str	r2, [sp, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001942:	ca06      	ldmia	r2, {r1, r2}
 8001944:	f7ff f8d2 	bl	8000aec <Transform_init>
 8001948:	4625      	mov	r5, r4
 800194a:	463c      	mov	r4, r7
 800194c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800194e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	602b      	str	r3, [r5, #0]
			break;
 8001954:	e089      	b.n	8001a6a <setObject+0x216>
		case DetonateEffectObject:
			DetonateEffect* detonateEffect = malloc(sizeof(DetonateEffect));
 8001956:	2010      	movs	r0, #16
 8001958:	f00a feb8 	bl	800c6cc <malloc>
 800195c:	4603      	mov	r3, r0
 800195e:	65bb      	str	r3, [r7, #88]	; 0x58
			detonateEffect->index = index;
 8001960:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001962:	461a      	mov	r2, r3
 8001964:	f107 0320 	add.w	r3, r7, #32
 8001968:	e893 0003 	ldmia.w	r3, {r0, r1}
 800196c:	e882 0003 	stmia.w	r2, {r0, r1}
			detonateEffect->deconstructTime = TimeTotal+DETONATE_DURATION;
 8001970:	4b45      	ldr	r3, [pc, #276]	; (8001a88 <setObject+0x234>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8001978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800197a:	609a      	str	r2, [r3, #8]
			detonateEffect->drop = cell->objType;
 800197c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800197e:	7e1a      	ldrb	r2, [r3, #24]
 8001980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001982:	731a      	strb	r2, [r3, #12]
			QueueElement* element2 = enqueue(&detonateEffects,(void*)detonateEffect);
 8001984:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001986:	4843      	ldr	r0, [pc, #268]	; (8001a94 <setObject+0x240>)
 8001988:	f005 f994 	bl	8006cb4 <enqueue>
 800198c:	6578      	str	r0, [r7, #84]	; 0x54
			cell->objPtr = (void*)element2;
 800198e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001990:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001992:	61da      	str	r2, [r3, #28]
			cell->objTrans = malloc(sizeof(Transform));
 8001994:	2014      	movs	r0, #20
 8001996:	f00a fe99 	bl	800c6cc <malloc>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019a0:	615a      	str	r2, [r3, #20]
			*cell->objTrans = Transform_init(toPosition(index),cellSize,MiddleCenter);
 80019a2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80019a6:	f107 0320 	add.w	r3, r7, #32
 80019aa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80019ae:	f7ff f87d 	bl	8000aac <toPosition>
 80019b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b4:	695c      	ldr	r4, [r3, #20]
 80019b6:	4638      	mov	r0, r7
 80019b8:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <setObject+0x23c>)
 80019ba:	2204      	movs	r2, #4
 80019bc:	9201      	str	r2, [sp, #4]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	9200      	str	r2, [sp, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80019c8:	ca06      	ldmia	r2, {r1, r2}
 80019ca:	f7ff f88f 	bl	8000aec <Transform_init>
 80019ce:	4625      	mov	r5, r4
 80019d0:	463c      	mov	r4, r7
 80019d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	602b      	str	r3, [r5, #0]
		case UnbreakableWall:
		case BreakableWall :
			cell->objTrans = malloc(sizeof(Transform));
 80019da:	2014      	movs	r0, #20
 80019dc:	f00a fe76 	bl	800c6cc <malloc>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019e6:	615a      	str	r2, [r3, #20]
			*cell->objTrans = Transform_init(toPosition(index),cellSize,MiddleCenter);
 80019e8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80019ec:	f107 0320 	add.w	r3, r7, #32
 80019f0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80019f4:	f7ff f85a 	bl	8000aac <toPosition>
 80019f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019fa:	695c      	ldr	r4, [r3, #20]
 80019fc:	4638      	mov	r0, r7
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <setObject+0x23c>)
 8001a00:	2204      	movs	r2, #4
 8001a02:	9201      	str	r2, [sp, #4]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	9200      	str	r2, [sp, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a0e:	ca06      	ldmia	r2, {r1, r2}
 8001a10:	f7ff f86c 	bl	8000aec <Transform_init>
 8001a14:	4625      	mov	r5, r4
 8001a16:	463c      	mov	r4, r7
 8001a18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	602b      	str	r3, [r5, #0]
			break;
 8001a20:	e023      	b.n	8001a6a <setObject+0x216>
		case SpeedItem:
		case BombAmountItem:
		case BombRangeItem:
		case HealthItem :
			cell->objTrans = malloc(sizeof(Transform));
 8001a22:	2014      	movs	r0, #20
 8001a24:	f00a fe52 	bl	800c6cc <malloc>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a2e:	615a      	str	r2, [r3, #20]
			*cell->objTrans = Transform_init(toPosition(index),cellSize,MiddleCenter);
 8001a30:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001a34:	f107 0320 	add.w	r3, r7, #32
 8001a38:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001a3c:	f7ff f836 	bl	8000aac <toPosition>
 8001a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a42:	695c      	ldr	r4, [r3, #20]
 8001a44:	4638      	mov	r0, r7
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <setObject+0x23c>)
 8001a48:	2204      	movs	r2, #4
 8001a4a:	9201      	str	r2, [sp, #4]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	9200      	str	r2, [sp, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001a56:	ca06      	ldmia	r2, {r1, r2}
 8001a58:	f7ff f848 	bl	8000aec <Transform_init>
 8001a5c:	4625      	mov	r5, r4
 8001a5e:	463c      	mov	r4, r7
 8001a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	602b      	str	r3, [r5, #0]
			break;
 8001a68:	bf00      	nop
	}
	cell->objType = type;
 8001a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a6c:	7ffa      	ldrb	r2, [r7, #31]
 8001a6e:	761a      	strb	r2, [r3, #24]
	drawCell(index);
 8001a70:	f107 0320 	add.w	r3, r7, #32
 8001a74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a78:	f7ff fe10 	bl	800169c <drawCell>
}
 8001a7c:	bf00      	nop
 8001a7e:	3760      	adds	r7, #96	; 0x60
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bdb0      	pop	{r4, r5, r7, pc}
 8001a84:	2000185c 	.word	0x2000185c
 8001a88:	20002d80 	.word	0x20002d80
 8001a8c:	20002d8c 	.word	0x20002d8c
 8001a90:	20000134 	.word	0x20000134
 8001a94:	20002d98 	.word	0x20002d98

08001a98 <clearObject>:
void clearObject(Vector2 index,bool redrawFlag){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b090      	sub	sp, #64	; 0x40
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	e883 0003 	stmia.w	r3, {r0, r1}
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	71fb      	strb	r3, [r7, #7]
	MapCell *cell =&map[index.y][index.x];
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	015b      	lsls	r3, r3, #5
 8001abc:	4a4d      	ldr	r2, [pc, #308]	; (8001bf4 <clearObject+0x15c>)
 8001abe:	4413      	add	r3, r2
 8001ac0:	637b      	str	r3, [r7, #52]	; 0x34
	if(cell->objType != None){
 8001ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac4:	7e1b      	ldrb	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 808f 	beq.w	8001bea <clearObject+0x152>
		Transform* objTrans = cell->objTrans;
 8001acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	633b      	str	r3, [r7, #48]	; 0x30
		void* objPtr = cell->objPtr;
 8001ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
		ObjectType objType = cell->objType;
 8001ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ada:	7e1b      	ldrb	r3, [r3, #24]
 8001adc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		cell->objTrans = NULL;
 8001ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	615a      	str	r2, [r3, #20]
		cell->objPtr = NULL;
 8001ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae8:	2200      	movs	r2, #0
 8001aea:	61da      	str	r2, [r3, #28]
		cell->objType = None;
 8001aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aee:	2200      	movs	r2, #0
 8001af0:	761a      	strb	r2, [r3, #24]
		switch(objType){
 8001af2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d012      	beq.n	8001b20 <clearObject+0x88>
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	dc5f      	bgt.n	8001bbe <clearObject+0x126>
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d020      	beq.n	8001b44 <clearObject+0xac>
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d15b      	bne.n	8001bbe <clearObject+0x126>
			case BombObject:
				QueueElement* element=(QueueElement*)objPtr;
 8001b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
				((Bomb*)element->value)->player->currentUseBomb--;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b12:	3a01      	subs	r2, #1
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24
				DeleteQueueElement(&bombs,element);
 8001b16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b18:	4837      	ldr	r0, [pc, #220]	; (8001bf8 <clearObject+0x160>)
 8001b1a:	f005 f892 	bl	8006c42 <DeleteQueueElement>
				break;
 8001b1e:	e058      	b.n	8001bd2 <clearObject+0x13a>
			case DetonateEffectObject:
				ObjectType drop = ((DetonateEffect*)((QueueElement*)objPtr)->value)->drop;
 8001b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	7b1b      	ldrb	r3, [r3, #12]
 8001b26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				DeleteQueueElement(&detonateEffects,(QueueElement*)objPtr);
 8001b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b2c:	4833      	ldr	r0, [pc, #204]	; (8001bfc <clearObject+0x164>)
 8001b2e:	f005 f888 	bl	8006c42 <DeleteQueueElement>
				setObject(index,drop,NULL);
 8001b32:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001b36:	2300      	movs	r3, #0
 8001b38:	f107 0108 	add.w	r1, r7, #8
 8001b3c:	c903      	ldmia	r1, {r0, r1}
 8001b3e:	f7ff fe89 	bl	8001854 <setObject>
				break;
 8001b42:	e046      	b.n	8001bd2 <clearObject+0x13a>
			case BreakableWall:
				int random = (int)rand()%100;
 8001b44:	f00b f85c 	bl	800cc00 <rand>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4a2d      	ldr	r2, [pc, #180]	; (8001c00 <clearObject+0x168>)
 8001b4c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b50:	1151      	asrs	r1, r2, #5
 8001b52:	17da      	asrs	r2, r3, #31
 8001b54:	1a8a      	subs	r2, r1, r2
 8001b56:	2164      	movs	r1, #100	; 0x64
 8001b58:	fb01 f202 	mul.w	r2, r1, r2
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	623b      	str	r3, [r7, #32]
				if(random<=ITEM_DROP_CHANCE){
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	2b3c      	cmp	r3, #60	; 0x3c
 8001b64:	dc32      	bgt.n	8001bcc <clearObject+0x134>
					int dropItemCount = 4;
 8001b66:	2304      	movs	r3, #4
 8001b68:	61fb      	str	r3, [r7, #28]
					int range=ITEM_DROP_CHANCE/dropItemCount, mxRange=range;
 8001b6a:	223c      	movs	r2, #60	; 0x3c
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	63fb      	str	r3, [r7, #60]	; 0x3c
					ObjectType itemDropTypes[]={
 8001b78:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <clearObject+0x16c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	617b      	str	r3, [r7, #20]
							SpeedItem,
							BombAmountItem,
							BombRangeItem,
							HealthItem,
					};
					for(int i=0;i<dropItemCount;i++,mxRange+=range){
 8001b7e:	2300      	movs	r3, #0
 8001b80:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b82:	e017      	b.n	8001bb4 <clearObject+0x11c>
						if(random<=mxRange){
 8001b84:	6a3a      	ldr	r2, [r7, #32]
 8001b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	dc0c      	bgt.n	8001ba6 <clearObject+0x10e>
							setObject(index,itemDropTypes[i],NULL);
 8001b8c:	f107 0214 	add.w	r2, r7, #20
 8001b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b92:	4413      	add	r3, r2
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	2300      	movs	r3, #0
 8001b98:	f107 0108 	add.w	r1, r7, #8
 8001b9c:	c903      	ldmia	r1, {r0, r1}
 8001b9e:	f7ff fe59 	bl	8001854 <setObject>
							break;
 8001ba2:	bf00      	nop
						}
					}
				}
				break;
 8001ba4:	e012      	b.n	8001bcc <clearObject+0x134>
					for(int i=0;i<dropItemCount;i++,mxRange+=range){
 8001ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba8:	3301      	adds	r3, #1
 8001baa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dbe3      	blt.n	8001b84 <clearObject+0xec>
				break;
 8001bbc:	e006      	b.n	8001bcc <clearObject+0x134>
			default:
				if(objPtr != NULL)
 8001bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <clearObject+0x138>
					free(objPtr);
 8001bc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bc6:	f00a fd89 	bl	800c6dc <free>
				break;
 8001bca:	e001      	b.n	8001bd0 <clearObject+0x138>
				break;
 8001bcc:	bf00      	nop
 8001bce:	e000      	b.n	8001bd2 <clearObject+0x13a>
				break;
 8001bd0:	bf00      	nop
		}
		free(objTrans);
 8001bd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bd4:	f00a fd82 	bl	800c6dc <free>

		if(redrawFlag)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <clearObject+0x152>
			drawCell(index);
 8001bde:	f107 0308 	add.w	r3, r7, #8
 8001be2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001be6:	f7ff fd59 	bl	800169c <drawCell>
	}
}
 8001bea:	bf00      	nop
 8001bec:	3740      	adds	r7, #64	; 0x40
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000185c 	.word	0x2000185c
 8001bf8:	20002d8c 	.word	0x20002d8c
 8001bfc:	20002d98 	.word	0x20002d98
 8001c00:	51eb851f 	.word	0x51eb851f
 8001c04:	0800ede4 	.word	0x0800ede4

08001c08 <placeBomb>:
placeBomb(Player* player){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	if(player!= NULL && getCell(getPlayerIndex(player))->objType != BombObject&&player->currentUseBomb<player->maxBombCount){
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d022      	beq.n	8001c5c <placeBomb+0x54>
 8001c16:	f107 0308 	add.w	r3, r7, #8
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 f95d 	bl	8001edc <getPlayerIndex>
 8001c22:	f107 0308 	add.w	r3, r7, #8
 8001c26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c2a:	f000 f81d 	bl	8001c68 <getCell>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	7e1b      	ldrb	r3, [r3, #24]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d012      	beq.n	8001c5c <placeBomb+0x54>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	da0c      	bge.n	8001c5c <placeBomb+0x54>
		setObject(getPlayerIndex(player),BombObject,player);
 8001c42:	f107 0310 	add.w	r3, r7, #16
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 f947 	bl	8001edc <getPlayerIndex>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2203      	movs	r2, #3
 8001c52:	f107 0110 	add.w	r1, r7, #16
 8001c56:	c903      	ldmia	r1, {r0, r1}
 8001c58:	f7ff fdfc 	bl	8001854 <setObject>
	}
}
 8001c5c:	bf00      	nop
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <getCell>:
MapCell* getCell(Vector2 index){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	463b      	mov	r3, r7
 8001c70:	e883 0003 	stmia.w	r3, {r0, r1}
	if(inBetween(0,index.x,mapSize.x-1)&&inBetween(0,index.y,mapSize.y-1)){
 8001c74:	6839      	ldr	r1, [r7, #0]
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <getCell+0x5c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f004 ff8f 	bl	8006ba2 <inBetween>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d016      	beq.n	8001cb8 <getCell+0x50>
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <getCell+0x5c>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	461a      	mov	r2, r3
 8001c94:	2000      	movs	r0, #0
 8001c96:	f004 ff84 	bl	8006ba2 <inBetween>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00b      	beq.n	8001cb8 <getCell+0x50>
		return &map[index.y][index.x];
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6839      	ldr	r1, [r7, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	015b      	lsls	r3, r3, #5
 8001cb2:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <getCell+0x60>)
 8001cb4:	4413      	add	r3, r2
 8001cb6:	e000      	b.n	8001cba <getCell+0x52>
	}
	else{
		return NULL;
 8001cb8:	2300      	movs	r3, #0
	}
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2000012c 	.word	0x2000012c
 8001cc8:	2000185c 	.word	0x2000185c

08001ccc <detonate>:
detonate(Bomb* bomb){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b090      	sub	sp, #64	; 0x40
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	60f8      	str	r0, [r7, #12]
	if(bomb == NULL)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 80a9 	beq.w	8001e2e <detonate+0x162>
		return;
	int range = bomb->range;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
	Vector2 startIndex = bomb->index;
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cec:	e883 0003 	stmia.w	r3, {r0, r1}
	Vector2 index = startIndex;
 8001cf0:	f107 0318 	add.w	r3, r7, #24
 8001cf4:	f107 0220 	add.w	r2, r7, #32
 8001cf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cfc:	e883 0003 	stmia.w	r3, {r0, r1}
	setObject(startIndex,DetonateEffectObject,NULL);
 8001d00:	2300      	movs	r3, #0
 8001d02:	2204      	movs	r2, #4
 8001d04:	f107 0120 	add.w	r1, r7, #32
 8001d08:	c903      	ldmia	r1, {r0, r1}
 8001d0a:	f7ff fda3 	bl	8001854 <setObject>
	for(int i=0;i<4;i++){
 8001d0e:	2300      	movs	r3, #0
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
 8001d12:	e087      	b.n	8001e24 <detonate+0x158>
		index = startIndex;
 8001d14:	f107 0318 	add.w	r3, r7, #24
 8001d18:	f107 0220 	add.w	r2, r7, #32
 8001d1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d20:	e883 0003 	stmia.w	r3, {r0, r1}
		Vector2 increment = Vector2_init(i&0b10?(i&0b1?1:-1):0,i&0b10?0:(i&0b1?1:-1));
 8001d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <detonate+0x76>
 8001d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <detonate+0x70>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e003      	b.n	8001d44 <detonate+0x78>
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d40:	e000      	b.n	8001d44 <detonate+0x78>
 8001d42:	2300      	movs	r3, #0
 8001d44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d46:	f002 0202 	and.w	r2, r2, #2
 8001d4a:	2a00      	cmp	r2, #0
 8001d4c:	d109      	bne.n	8001d62 <detonate+0x96>
 8001d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d50:	f002 0201 	and.w	r2, r2, #1
 8001d54:	2a00      	cmp	r2, #0
 8001d56:	d001      	beq.n	8001d5c <detonate+0x90>
 8001d58:	2201      	movs	r2, #1
 8001d5a:	e003      	b.n	8001d64 <detonate+0x98>
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d60:	e000      	b.n	8001d64 <detonate+0x98>
 8001d62:	2200      	movs	r2, #0
 8001d64:	f107 0010 	add.w	r0, r7, #16
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe fd89 	bl	8000880 <Vector2_init>
		index = Add(index,increment);
 8001d6e:	f107 0018 	add.w	r0, r7, #24
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	f107 0218 	add.w	r2, r7, #24
 8001d7c:	ca06      	ldmia	r2, {r1, r2}
 8001d7e:	f7fe fd97 	bl	80008b0 <Add>
		MapCell* cell = getCell(index);
 8001d82:	f107 0318 	add.w	r3, r7, #24
 8001d86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d8a:	f7ff ff6d 	bl	8001c68 <getCell>
 8001d8e:	6338      	str	r0, [r7, #48]	; 0x30
		for(int j=0;j<range&&cell!=NULL;j++,index=Add(index,increment),cell = getCell(index)){
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d94:	e03c      	b.n	8001e10 <detonate+0x144>
			switch(cell->objType){
 8001d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d98:	7e1b      	ldrb	r3, [r3, #24]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d00f      	beq.n	8001dbe <detonate+0xf2>
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	dc14      	bgt.n	8001dcc <detonate+0x100>
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d008      	beq.n	8001db8 <detonate+0xec>
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d110      	bne.n	8001dcc <detonate+0x100>
				case BreakableWall:
					setObject(index ,DetonateEffectObject,NULL);
 8001daa:	2300      	movs	r3, #0
 8001dac:	2204      	movs	r2, #4
 8001dae:	f107 0118 	add.w	r1, r7, #24
 8001db2:	c903      	ldmia	r1, {r0, r1}
 8001db4:	f7ff fd4e 	bl	8001854 <setObject>
				case UnbreakableWall:
					j=range;
 8001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
					break;
 8001dbc:	e00e      	b.n	8001ddc <detonate+0x110>
				case BombObject:
					detonate((Bomb*)((QueueElement*)cell->objPtr)->value);
 8001dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff81 	bl	8001ccc <detonate>
					break;
 8001dca:	e007      	b.n	8001ddc <detonate+0x110>
				default:
					setObject(index ,DetonateEffectObject,NULL);
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2204      	movs	r2, #4
 8001dd0:	f107 0118 	add.w	r1, r7, #24
 8001dd4:	c903      	ldmia	r1, {r0, r1}
 8001dd6:	f7ff fd3d 	bl	8001854 <setObject>
					break;
 8001dda:	bf00      	nop
		for(int j=0;j<range&&cell!=NULL;j++,index=Add(index,increment),cell = getCell(index)){
 8001ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dde:	3301      	adds	r3, #1
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001de2:	4638      	mov	r0, r7
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	f107 0218 	add.w	r2, r7, #24
 8001dee:	ca06      	ldmia	r2, {r1, r2}
 8001df0:	f7fe fd5e 	bl	80008b0 <Add>
 8001df4:	f107 0318 	add.w	r3, r7, #24
 8001df8:	463a      	mov	r2, r7
 8001dfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dfe:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e02:	f107 0318 	add.w	r3, r7, #24
 8001e06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e0a:	f7ff ff2d 	bl	8001c68 <getCell>
 8001e0e:	6338      	str	r0, [r7, #48]	; 0x30
 8001e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e14:	429a      	cmp	r2, r3
 8001e16:	da02      	bge.n	8001e1e <detonate+0x152>
 8001e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1bb      	bne.n	8001d96 <detonate+0xca>
	for(int i=0;i<4;i++){
 8001e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e20:	3301      	adds	r3, #1
 8001e22:	637b      	str	r3, [r7, #52]	; 0x34
 8001e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	f77f af74 	ble.w	8001d14 <detonate+0x48>
 8001e2c:	e000      	b.n	8001e30 <detonate+0x164>
		return;
 8001e2e:	bf00      	nop
			}
		}
	}
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3738      	adds	r7, #56	; 0x38
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <Player_init>:
//Map Cell End

//Player Start
Player Player_init(Vector2 index,char* imgPtr1,char* imgPtr2,bool botFlag){
 8001e38:	b5b0      	push	{r4, r5, r7, lr}
 8001e3a:	b0a0      	sub	sp, #128	; 0x80
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	6278      	str	r0, [r7, #36]	; 0x24
 8001e40:	f107 001c 	add.w	r0, r7, #28
 8001e44:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e48:	61bb      	str	r3, [r7, #24]

	Player player;
	player.transform = Transform_init(toPosition(index),Vector2_init(PLAYER_WIDTH,PLAYER_HEIGHT) ,MiddleCenter);
 8001e4a:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001e56:	f7fe fe29 	bl	8000aac <toPosition>
 8001e5a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e5e:	220a      	movs	r2, #10
 8001e60:	210a      	movs	r1, #10
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fd0c 	bl	8000880 <Vector2_init>
 8001e68:	4638      	mov	r0, r7
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e74:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001e78:	ca06      	ldmia	r2, {r1, r2}
 8001e7a:	f7fe fe37 	bl	8000aec <Transform_init>
 8001e7e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001e82:	463d      	mov	r5, r7
 8001e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e88:	682b      	ldr	r3, [r5, #0]
 8001e8a:	6023      	str	r3, [r4, #0]
	player.health = 2;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	player.speed =1;
 8001e90:	2301      	movs	r3, #1
 8001e92:	643b      	str	r3, [r7, #64]	; 0x40
	player.maxBombCount = 1;
 8001e94:	2301      	movs	r3, #1
 8001e96:	647b      	str	r3, [r7, #68]	; 0x44
	player.bombRange =1;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	64bb      	str	r3, [r7, #72]	; 0x48
	player.currentUseBomb =0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
	player.deadFlag = false;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	player.imgPtr1 = imgPtr1;
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
	player.imgPtr2 = imgPtr2;
 8001eaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001eae:	663b      	str	r3, [r7, #96]	; 0x60
	player.botFlag = botFlag;
 8001eb0:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001eb4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	return player;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	461d      	mov	r5, r3
 8001ebc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ecc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ed0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001ed4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ed6:	3778      	adds	r7, #120	; 0x78
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bdb0      	pop	{r4, r5, r7, pc}

08001edc <getPlayerIndex>:
Vector2 getPlayerIndex(Player* player){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
	return toIndex(player->transform.position);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001eee:	f7fe fdb7 	bl	8000a60 <toIndex>
}
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <getIndexAtDirection>:
bool walkMap[MAP_HEIGHT][MAP_WIDTH];
int bombRangeMap[MAP_HEIGHT][MAP_WIDTH][4];
typedef enum DirectionEnum{
	Up,Down,Left,Right
}Direction;
Vector2 getIndexAtDirection(Vector2 index,Direction direction){
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b08a      	sub	sp, #40	; 0x28
 8001efe:	af02      	add	r7, sp, #8
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	1d38      	adds	r0, r7, #4
 8001f04:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f08:	70fb      	strb	r3, [r7, #3]
	if(direction&0b10)
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d017      	beq.n	8001f44 <getIndexAtDirection+0x4a>
		return Add(index,Vector2_init(direction&0b1?1:-1,0));
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <getIndexAtDirection+0x28>
 8001f1e:	2101      	movs	r1, #1
 8001f20:	e001      	b.n	8001f26 <getIndexAtDirection+0x2c>
 8001f22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f26:	f107 0310 	add.w	r3, r7, #16
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fca7 	bl	8000880 <Vector2_init>
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1d3a      	adds	r2, r7, #4
 8001f3c:	ca06      	ldmia	r2, {r1, r2}
 8001f3e:	f7fe fcb7 	bl	80008b0 <Add>
 8001f42:	e016      	b.n	8001f72 <getIndexAtDirection+0x78>
	else
		return Add(index,Vector2_init(0,direction&0b1?1:-1));
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <getIndexAtDirection+0x58>
 8001f4e:	2201      	movs	r2, #1
 8001f50:	e001      	b.n	8001f56 <getIndexAtDirection+0x5c>
 8001f52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f56:	f107 0318 	add.w	r3, r7, #24
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fc8f 	bl	8000880 <Vector2_init>
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	1d3a      	adds	r2, r7, #4
 8001f6c:	ca06      	ldmia	r2, {r1, r2}
 8001f6e:	f7fe fc9f 	bl	80008b0 <Add>
}
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <updateMap>:
void updateMap(){
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b09f      	sub	sp, #124	; 0x7c
 8001f80:	af00      	add	r7, sp, #0
	for(Vector2 index = Vector2_init(0,0);index.y<MAP_HEIGHT;index.y++){
 8001f82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fc78 	bl	8000880 <Vector2_init>
 8001f90:	e089      	b.n	80020a6 <updateMap+0x12a>
		for(index.x=0;index.x<MAP_WIDTH;index.x++){
 8001f92:	2300      	movs	r3, #0
 8001f94:	653b      	str	r3, [r7, #80]	; 0x50
 8001f96:	e07f      	b.n	8002098 <updateMap+0x11c>
			bombRangeMap[index.y][index.x][Up]=0;
 8001f98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001f9c:	48a5      	ldr	r0, [pc, #660]	; (8002234 <updateMap+0x2b8>)
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	4403      	add	r3, r0
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
			bombRangeMap[index.y][index.x][Down]=0;
 8001fb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fb4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001fb6:	489f      	ldr	r0, [pc, #636]	; (8002234 <updateMap+0x2b8>)
 8001fb8:	4613      	mov	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	4403      	add	r3, r0
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
			bombRangeMap[index.y][index.x][Left]=0;
 8001fce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fd0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001fd2:	4898      	ldr	r0, [pc, #608]	; (8002234 <updateMap+0x2b8>)
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	4403      	add	r3, r0
 8001fe4:	3308      	adds	r3, #8
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
			bombRangeMap[index.y][index.x][Right]=0;
 8001fea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001fee:	4891      	ldr	r0, [pc, #580]	; (8002234 <updateMap+0x2b8>)
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	4403      	add	r3, r0
 8002000:	330c      	adds	r3, #12
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
			dangerMap[index.y][index.x] = false;
 8002006:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002008:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800200a:	488b      	ldr	r0, [pc, #556]	; (8002238 <updateMap+0x2bc>)
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	4403      	add	r3, r0
 8002018:	440b      	add	r3, r1
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
			ObjectType type=getCell(index)->objType;
 800201e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002022:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002026:	f7ff fe1f 	bl	8001c68 <getCell>
 800202a:	4603      	mov	r3, r0
 800202c:	7e1b      	ldrb	r3, [r3, #24]
 800202e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			switch(type){
 8002032:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8002036:	2b03      	cmp	r3, #3
 8002038:	dc02      	bgt.n	8002040 <updateMap+0xc4>
 800203a:	2b00      	cmp	r3, #0
 800203c:	dc03      	bgt.n	8002046 <updateMap+0xca>
 800203e:	e01b      	b.n	8002078 <updateMap+0xfc>
 8002040:	2b04      	cmp	r3, #4
 8002042:	d00d      	beq.n	8002060 <updateMap+0xe4>
 8002044:	e018      	b.n	8002078 <updateMap+0xfc>
				case BreakableWall:
				case UnbreakableWall:
				case BombObject:
					walkMap[index.y][index.x]=true;
 8002046:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002048:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800204a:	487c      	ldr	r0, [pc, #496]	; (800223c <updateMap+0x2c0>)
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	4403      	add	r3, r0
 8002058:	440b      	add	r3, r1
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
					break;
 800205e:	e018      	b.n	8002092 <updateMap+0x116>
				case DetonateEffectObject:
					dangerMap[index.y][index.x]=true;
 8002060:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002062:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002064:	4874      	ldr	r0, [pc, #464]	; (8002238 <updateMap+0x2bc>)
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	4403      	add	r3, r0
 8002072:	440b      	add	r3, r1
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
				default:
					walkMap[index.y][index.x]=false;
 8002078:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800207a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800207c:	486f      	ldr	r0, [pc, #444]	; (800223c <updateMap+0x2c0>)
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	4403      	add	r3, r0
 800208a:	440b      	add	r3, r1
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
					break;
 8002090:	bf00      	nop
		for(index.x=0;index.x<MAP_WIDTH;index.x++){
 8002092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002094:	3301      	adds	r3, #1
 8002096:	653b      	str	r3, [r7, #80]	; 0x50
 8002098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800209a:	2b0c      	cmp	r3, #12
 800209c:	f77f af7c 	ble.w	8001f98 <updateMap+0x1c>
	for(Vector2 index = Vector2_init(0,0);index.y<MAP_HEIGHT;index.y++){
 80020a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a2:	3301      	adds	r3, #1
 80020a4:	657b      	str	r3, [r7, #84]	; 0x54
 80020a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a8:	2b0c      	cmp	r3, #12
 80020aa:	f77f af72 	ble.w	8001f92 <updateMap+0x16>
			}
		}
	}
	for(Vector2 index = Vector2_init(0,0);index.y+1<MAP_HEIGHT;index.y++){
 80020ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fbe2 	bl	8000880 <Vector2_init>
 80020bc:	e08f      	b.n	80021de <updateMap+0x262>
		for(index.x=0;index.x+1<MAP_WIDTH;index.x++){
 80020be:	2300      	movs	r3, #0
 80020c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80020c2:	e085      	b.n	80021d0 <updateMap+0x254>
			ObjectType type =getCell(index)->objType;
 80020c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020cc:	f7ff fdcc 	bl	8001c68 <getCell>
 80020d0:	4603      	mov	r3, r0
 80020d2:	7e1b      	ldrb	r3, [r3, #24]
 80020d4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			if(type == BreakableWall){
 80020d8:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d11d      	bne.n	800211c <updateMap+0x1a0>
				bombRangeMap[index.y][index.x+1][Left]=1;
 80020e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e4:	1c59      	adds	r1, r3, #1
 80020e6:	4853      	ldr	r0, [pc, #332]	; (8002234 <updateMap+0x2b8>)
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	440b      	add	r3, r1
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	4403      	add	r3, r0
 80020f8:	3308      	adds	r3, #8
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
				bombRangeMap[index.y+1][index.x][Up]=1;
 80020fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002104:	484b      	ldr	r0, [pc, #300]	; (8002234 <updateMap+0x2b8>)
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	440b      	add	r3, r1
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	4403      	add	r3, r0
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e056      	b.n	80021ca <updateMap+0x24e>
			}
			else if(type != UnbreakableWall){
 800211c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8002120:	2b01      	cmp	r3, #1
 8002122:	d052      	beq.n	80021ca <updateMap+0x24e>
				if(bombRangeMap[index.y][index.x][Left]>0){
 8002124:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002126:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002128:	4842      	ldr	r0, [pc, #264]	; (8002234 <updateMap+0x2b8>)
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	440b      	add	r3, r1
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	4403      	add	r3, r0
 800213a:	3308      	adds	r3, #8
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	dd1b      	ble.n	800217a <updateMap+0x1fe>
					bombRangeMap[index.y][index.x+1][Left]=bombRangeMap[index.y][index.x][Left]+1;
 8002142:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002144:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002146:	483b      	ldr	r0, [pc, #236]	; (8002234 <updateMap+0x2b8>)
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	440b      	add	r3, r1
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	4403      	add	r3, r0
 8002158:	3308      	adds	r3, #8
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800215e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002160:	1c48      	adds	r0, r1, #1
 8002162:	1c59      	adds	r1, r3, #1
 8002164:	4c33      	ldr	r4, [pc, #204]	; (8002234 <updateMap+0x2b8>)
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	4403      	add	r3, r0
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	4423      	add	r3, r4
 8002176:	3308      	adds	r3, #8
 8002178:	6019      	str	r1, [r3, #0]
				}
				if(bombRangeMap[index.y][index.x][Up]>0){
 800217a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800217c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800217e:	482d      	ldr	r0, [pc, #180]	; (8002234 <updateMap+0x2b8>)
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	440b      	add	r3, r1
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	4403      	add	r3, r0
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	dd19      	ble.n	80021ca <updateMap+0x24e>
					bombRangeMap[index.y+1][index.x][Up]=bombRangeMap[index.y][index.x][Up]+1;
 8002196:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002198:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800219a:	4826      	ldr	r0, [pc, #152]	; (8002234 <updateMap+0x2b8>)
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	440b      	add	r3, r1
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	4403      	add	r3, r0
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021b0:	3201      	adds	r2, #1
 80021b2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80021b4:	1c59      	adds	r1, r3, #1
 80021b6:	4c1f      	ldr	r4, [pc, #124]	; (8002234 <updateMap+0x2b8>)
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	4403      	add	r3, r0
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	4423      	add	r3, r4
 80021c8:	6019      	str	r1, [r3, #0]
		for(index.x=0;index.x+1<MAP_WIDTH;index.x++){
 80021ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021cc:	3301      	adds	r3, #1
 80021ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80021d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d2:	2b0b      	cmp	r3, #11
 80021d4:	f77f af76 	ble.w	80020c4 <updateMap+0x148>
	for(Vector2 index = Vector2_init(0,0);index.y+1<MAP_HEIGHT;index.y++){
 80021d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021da:	3301      	adds	r3, #1
 80021dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021e0:	2b0b      	cmp	r3, #11
 80021e2:	f77f af6c 	ble.w	80020be <updateMap+0x142>
				}
			}
		}
	}
	for(Vector2 index = Vector2_init(0,MAP_HEIGHT-1);index.x+1<MAP_WIDTH;index.x++){
 80021e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021ea:	220c      	movs	r2, #12
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fb46 	bl	8000880 <Vector2_init>
 80021f4:	e056      	b.n	80022a4 <updateMap+0x328>
		ObjectType type =getCell(index)->objType;
 80021f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021fe:	f7ff fd33 	bl	8001c68 <getCell>
 8002202:	4603      	mov	r3, r0
 8002204:	7e1b      	ldrb	r3, [r3, #24]
 8002206:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		if(type == BreakableWall){
 800220a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800220e:	2b02      	cmp	r3, #2
 8002210:	d116      	bne.n	8002240 <updateMap+0x2c4>
			bombRangeMap[index.y][index.x+1][Left]=1;
 8002212:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002216:	1c59      	adds	r1, r3, #1
 8002218:	4806      	ldr	r0, [pc, #24]	; (8002234 <updateMap+0x2b8>)
 800221a:	4613      	mov	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	440b      	add	r3, r1
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	4403      	add	r3, r0
 800222a:	3308      	adds	r3, #8
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	e035      	b.n	800229e <updateMap+0x322>
 8002232:	bf00      	nop
 8002234:	20000d70 	.word	0x20000d70
 8002238:	20000c18 	.word	0x20000c18
 800223c:	20000cc4 	.word	0x20000cc4
		}
		else if(type != UnbreakableWall&&bombRangeMap[index.y][index.x][Left]){
 8002240:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002244:	2b01      	cmp	r3, #1
 8002246:	d02a      	beq.n	800229e <updateMap+0x322>
 8002248:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800224a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800224c:	48a5      	ldr	r0, [pc, #660]	; (80024e4 <updateMap+0x568>)
 800224e:	4613      	mov	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	440b      	add	r3, r1
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	4403      	add	r3, r0
 800225e:	3308      	adds	r3, #8
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d01b      	beq.n	800229e <updateMap+0x322>
			bombRangeMap[index.y][index.x+1][Left]=bombRangeMap[index.y][index.x][Left]+1;
 8002266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002268:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800226a:	489e      	ldr	r0, [pc, #632]	; (80024e4 <updateMap+0x568>)
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	440b      	add	r3, r1
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	4403      	add	r3, r0
 800227c:	3308      	adds	r3, #8
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002282:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002284:	1c48      	adds	r0, r1, #1
 8002286:	1c59      	adds	r1, r3, #1
 8002288:	4c96      	ldr	r4, [pc, #600]	; (80024e4 <updateMap+0x568>)
 800228a:	4613      	mov	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	4403      	add	r3, r0
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	4423      	add	r3, r4
 800229a:	3308      	adds	r3, #8
 800229c:	6019      	str	r1, [r3, #0]
	for(Vector2 index = Vector2_init(0,MAP_HEIGHT-1);index.x+1<MAP_WIDTH;index.x++){
 800229e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a0:	3301      	adds	r3, #1
 80022a2:	643b      	str	r3, [r7, #64]	; 0x40
 80022a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a6:	2b0b      	cmp	r3, #11
 80022a8:	dda5      	ble.n	80021f6 <updateMap+0x27a>
		}
	}
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,0);index.y+1<MAP_HEIGHT;index.y++){
 80022aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022ae:	2200      	movs	r2, #0
 80022b0:	210c      	movs	r1, #12
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fae4 	bl	8000880 <Vector2_init>
 80022b8:	e04b      	b.n	8002352 <updateMap+0x3d6>
		ObjectType type =getCell(index)->objType;
 80022ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022c2:	f7ff fcd1 	bl	8001c68 <getCell>
 80022c6:	4603      	mov	r3, r0
 80022c8:	7e1b      	ldrb	r3, [r3, #24]
 80022ca:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		if(type == BreakableWall){
 80022ce:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d10e      	bne.n	80022f4 <updateMap+0x378>
			bombRangeMap[index.y+1][index.x][Up]=1;
 80022d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022dc:	4881      	ldr	r0, [pc, #516]	; (80024e4 <updateMap+0x568>)
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	440b      	add	r3, r1
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	4403      	add	r3, r0
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e02b      	b.n	800234c <updateMap+0x3d0>
		}
		else if(type != UnbreakableWall&&bombRangeMap[index.y][index.x][Up]){
 80022f4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d027      	beq.n	800234c <updateMap+0x3d0>
 80022fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002300:	4878      	ldr	r0, [pc, #480]	; (80024e4 <updateMap+0x568>)
 8002302:	4613      	mov	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	440b      	add	r3, r1
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	4403      	add	r3, r0
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d019      	beq.n	800234c <updateMap+0x3d0>
			bombRangeMap[index.y+1][index.x][Up]=bombRangeMap[index.y][index.x][Up]+1;
 8002318:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800231a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800231c:	4871      	ldr	r0, [pc, #452]	; (80024e4 <updateMap+0x568>)
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	440b      	add	r3, r1
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	4403      	add	r3, r0
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002332:	3201      	adds	r2, #1
 8002334:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002336:	1c59      	adds	r1, r3, #1
 8002338:	4c6a      	ldr	r4, [pc, #424]	; (80024e4 <updateMap+0x568>)
 800233a:	4613      	mov	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	4403      	add	r3, r0
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	4423      	add	r3, r4
 800234a:	6019      	str	r1, [r3, #0]
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,0);index.y+1<MAP_HEIGHT;index.y++){
 800234c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234e:	3301      	adds	r3, #1
 8002350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002354:	2b0b      	cmp	r3, #11
 8002356:	ddb0      	ble.n	80022ba <updateMap+0x33e>
		}
	}
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,MAP_HEIGHT-1);index.y>0;index.y--){
 8002358:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800235c:	220c      	movs	r2, #12
 800235e:	210c      	movs	r1, #12
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe fa8d 	bl	8000880 <Vector2_init>
 8002366:	e093      	b.n	8002490 <updateMap+0x514>
			for(index.x=MAP_WIDTH-1;index.x>0;index.x--){
 8002368:	230c      	movs	r3, #12
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
 800236c:	e089      	b.n	8002482 <updateMap+0x506>
				ObjectType type =getCell(index)->objType;
 800236e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002372:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002376:	f7ff fc77 	bl	8001c68 <getCell>
 800237a:	4603      	mov	r3, r0
 800237c:	7e1b      	ldrb	r3, [r3, #24]
 800237e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
				if(type == BreakableWall){
 8002382:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002386:	2b02      	cmp	r3, #2
 8002388:	d11e      	bne.n	80023c8 <updateMap+0x44c>
					bombRangeMap[index.y][index.x-1][Right]=1;
 800238a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238e:	1e59      	subs	r1, r3, #1
 8002390:	4854      	ldr	r0, [pc, #336]	; (80024e4 <updateMap+0x568>)
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	440b      	add	r3, r1
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	4403      	add	r3, r0
 80023a2:	330c      	adds	r3, #12
 80023a4:	2201      	movs	r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
					bombRangeMap[index.y-1][index.x][Down]=1;
 80023a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023aa:	1e5a      	subs	r2, r3, #1
 80023ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023ae:	484d      	ldr	r0, [pc, #308]	; (80024e4 <updateMap+0x568>)
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	440b      	add	r3, r1
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	4403      	add	r3, r0
 80023c0:	3304      	adds	r3, #4
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e059      	b.n	800247c <updateMap+0x500>
				}
				else if(type != UnbreakableWall){
 80023c8:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d055      	beq.n	800247c <updateMap+0x500>
					if(bombRangeMap[index.y][index.x][Right]){
 80023d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023d4:	4843      	ldr	r0, [pc, #268]	; (80024e4 <updateMap+0x568>)
 80023d6:	4613      	mov	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	440b      	add	r3, r1
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	4403      	add	r3, r0
 80023e6:	330c      	adds	r3, #12
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d01b      	beq.n	8002426 <updateMap+0x4aa>
						bombRangeMap[index.y][index.x-1][Right]=bombRangeMap[index.y][index.x][Right]+1;
 80023ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023f2:	483c      	ldr	r0, [pc, #240]	; (80024e4 <updateMap+0x568>)
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	440b      	add	r3, r1
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	4403      	add	r3, r0
 8002404:	330c      	adds	r3, #12
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800240a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800240c:	1e48      	subs	r0, r1, #1
 800240e:	1c59      	adds	r1, r3, #1
 8002410:	4c34      	ldr	r4, [pc, #208]	; (80024e4 <updateMap+0x568>)
 8002412:	4613      	mov	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	4403      	add	r3, r0
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	4423      	add	r3, r4
 8002422:	330c      	adds	r3, #12
 8002424:	6019      	str	r1, [r3, #0]
					}
					if(bombRangeMap[index.y][index.x][Down]){
 8002426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800242a:	482e      	ldr	r0, [pc, #184]	; (80024e4 <updateMap+0x568>)
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	440b      	add	r3, r1
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	4403      	add	r3, r0
 800243c:	3304      	adds	r3, #4
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d01b      	beq.n	800247c <updateMap+0x500>
						bombRangeMap[index.y-1][index.x][Down]=bombRangeMap[index.y][index.x][Down]+1;
 8002444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002446:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002448:	4826      	ldr	r0, [pc, #152]	; (80024e4 <updateMap+0x568>)
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	440b      	add	r3, r1
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	4403      	add	r3, r0
 800245a:	3304      	adds	r3, #4
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002460:	3a01      	subs	r2, #1
 8002462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002464:	1c59      	adds	r1, r3, #1
 8002466:	4c1f      	ldr	r4, [pc, #124]	; (80024e4 <updateMap+0x568>)
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	4403      	add	r3, r0
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	4423      	add	r3, r4
 8002478:	3304      	adds	r3, #4
 800247a:	6019      	str	r1, [r3, #0]
			for(index.x=MAP_WIDTH-1;index.x>0;index.x--){
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	3b01      	subs	r3, #1
 8002480:	633b      	str	r3, [r7, #48]	; 0x30
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	2b00      	cmp	r3, #0
 8002486:	f73f af72 	bgt.w	800236e <updateMap+0x3f2>
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,MAP_HEIGHT-1);index.y>0;index.y--){
 800248a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248c:	3b01      	subs	r3, #1
 800248e:	637b      	str	r3, [r7, #52]	; 0x34
 8002490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002492:	2b00      	cmp	r3, #0
 8002494:	f73f af68 	bgt.w	8002368 <updateMap+0x3ec>
					}
				}
			}
		}
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,0);index.x>0;index.x--){
 8002498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800249c:	2200      	movs	r2, #0
 800249e:	210c      	movs	r1, #12
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe f9ed 	bl	8000880 <Vector2_init>
 80024a6:	e051      	b.n	800254c <updateMap+0x5d0>
			ObjectType type =getCell(index)->objType;
 80024a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024b0:	f7ff fbda 	bl	8001c68 <getCell>
 80024b4:	4603      	mov	r3, r0
 80024b6:	7e1b      	ldrb	r3, [r3, #24]
 80024b8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			if(type == BreakableWall){
 80024bc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d111      	bne.n	80024e8 <updateMap+0x56c>
				bombRangeMap[index.y][index.x-1][Right]=1;
 80024c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c8:	1e59      	subs	r1, r3, #1
 80024ca:	4806      	ldr	r0, [pc, #24]	; (80024e4 <updateMap+0x568>)
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	440b      	add	r3, r1
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	4403      	add	r3, r0
 80024dc:	330c      	adds	r3, #12
 80024de:	2201      	movs	r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e030      	b.n	8002546 <updateMap+0x5ca>
 80024e4:	20000d70 	.word	0x20000d70
			}
			else if(type != UnbreakableWall&&bombRangeMap[index.y][index.x][Right]){
 80024e8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d02a      	beq.n	8002546 <updateMap+0x5ca>
 80024f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024f4:	4896      	ldr	r0, [pc, #600]	; (8002750 <updateMap+0x7d4>)
 80024f6:	4613      	mov	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	440b      	add	r3, r1
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	4403      	add	r3, r0
 8002506:	330c      	adds	r3, #12
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d01b      	beq.n	8002546 <updateMap+0x5ca>
				bombRangeMap[index.y][index.x-1][Right]=bombRangeMap[index.y][index.x][Right]+1;
 800250e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002512:	488f      	ldr	r0, [pc, #572]	; (8002750 <updateMap+0x7d4>)
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	440b      	add	r3, r1
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	4403      	add	r3, r0
 8002524:	330c      	adds	r3, #12
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800252a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800252c:	1e48      	subs	r0, r1, #1
 800252e:	1c59      	adds	r1, r3, #1
 8002530:	4c87      	ldr	r4, [pc, #540]	; (8002750 <updateMap+0x7d4>)
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	4403      	add	r3, r0
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	4423      	add	r3, r4
 8002542:	330c      	adds	r3, #12
 8002544:	6019      	str	r1, [r3, #0]
	for(Vector2 index = Vector2_init(MAP_WIDTH-1,0);index.x>0;index.x--){
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	3b01      	subs	r3, #1
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	2b00      	cmp	r3, #0
 8002550:	dcaa      	bgt.n	80024a8 <updateMap+0x52c>
			}
		}
		for(Vector2 index = Vector2_init(0,MAP_HEIGHT-1);index.y>0;index.y--){
 8002552:	f107 0320 	add.w	r3, r7, #32
 8002556:	220c      	movs	r2, #12
 8002558:	2100      	movs	r1, #0
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe f990 	bl	8000880 <Vector2_init>
 8002560:	e04f      	b.n	8002602 <updateMap+0x686>
			ObjectType type =getCell(index)->objType;
 8002562:	f107 0320 	add.w	r3, r7, #32
 8002566:	e893 0003 	ldmia.w	r3, {r0, r1}
 800256a:	f7ff fb7d 	bl	8001c68 <getCell>
 800256e:	4603      	mov	r3, r0
 8002570:	7e1b      	ldrb	r3, [r3, #24]
 8002572:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if(type == BreakableWall){
 8002576:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800257a:	2b02      	cmp	r3, #2
 800257c:	d10f      	bne.n	800259e <updateMap+0x622>
				bombRangeMap[index.y-1][index.x][Down]=1;
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	1e5a      	subs	r2, r3, #1
 8002582:	6a39      	ldr	r1, [r7, #32]
 8002584:	4872      	ldr	r0, [pc, #456]	; (8002750 <updateMap+0x7d4>)
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	440b      	add	r3, r1
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	4403      	add	r3, r0
 8002596:	3304      	adds	r3, #4
 8002598:	2201      	movs	r2, #1
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e02e      	b.n	80025fc <updateMap+0x680>
			}
			else if(type != UnbreakableWall&&bombRangeMap[index.y][index.x][Down]){
 800259e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d02a      	beq.n	80025fc <updateMap+0x680>
 80025a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a8:	6a39      	ldr	r1, [r7, #32]
 80025aa:	4869      	ldr	r0, [pc, #420]	; (8002750 <updateMap+0x7d4>)
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	440b      	add	r3, r1
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	4403      	add	r3, r0
 80025bc:	3304      	adds	r3, #4
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01b      	beq.n	80025fc <updateMap+0x680>
				bombRangeMap[index.y-1][index.x][Down]=bombRangeMap[index.y][index.x][Down]+1;
 80025c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c6:	6a39      	ldr	r1, [r7, #32]
 80025c8:	4861      	ldr	r0, [pc, #388]	; (8002750 <updateMap+0x7d4>)
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	440b      	add	r3, r1
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	4403      	add	r3, r0
 80025da:	3304      	adds	r3, #4
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e0:	3a01      	subs	r2, #1
 80025e2:	6a38      	ldr	r0, [r7, #32]
 80025e4:	1c59      	adds	r1, r3, #1
 80025e6:	4c5a      	ldr	r4, [pc, #360]	; (8002750 <updateMap+0x7d4>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	4403      	add	r3, r0
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	4423      	add	r3, r4
 80025f8:	3304      	adds	r3, #4
 80025fa:	6019      	str	r1, [r3, #0]
		for(Vector2 index = Vector2_init(0,MAP_HEIGHT-1);index.y>0;index.y--){
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	3b01      	subs	r3, #1
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	2b00      	cmp	r3, #0
 8002606:	dcac      	bgt.n	8002562 <updateMap+0x5e6>
			}
		}
	QueueElement* element = bombs.front;
 8002608:	4b52      	ldr	r3, [pc, #328]	; (8002754 <updateMap+0x7d8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	677b      	str	r3, [r7, #116]	; 0x74
	while(element != NULL){
 800260e:	e074      	b.n	80026fa <updateMap+0x77e>
		Bomb* bomb = (Bomb*)element->value;
 8002610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	667b      	str	r3, [r7, #100]	; 0x64
		Vector2 startIndex = bomb->index,index;
 8002616:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002618:	f107 0318 	add.w	r3, r7, #24
 800261c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002620:	e883 0003 	stmia.w	r3, {r0, r1}
		int range = bomb->range;
 8002624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	663b      	str	r3, [r7, #96]	; 0x60
		element =element->next;
 800262a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	677b      	str	r3, [r7, #116]	; 0x74
		dangerMap[startIndex.y][startIndex.x]=true;
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	69b9      	ldr	r1, [r7, #24]
 8002634:	4848      	ldr	r0, [pc, #288]	; (8002758 <updateMap+0x7dc>)
 8002636:	4613      	mov	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	4403      	add	r3, r0
 8002642:	440b      	add	r3, r1
 8002644:	2201      	movs	r2, #1
 8002646:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<4;i++){
 8002648:	2300      	movs	r3, #0
 800264a:	673b      	str	r3, [r7, #112]	; 0x70
 800264c:	e052      	b.n	80026f4 <updateMap+0x778>
			index = getIndexAtDirection(startIndex,(Direction)i);
 800264e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f107 0010 	add.w	r0, r7, #16
 8002656:	f107 0218 	add.w	r2, r7, #24
 800265a:	ca06      	ldmia	r2, {r1, r2}
 800265c:	f7ff fc4d 	bl	8001efa <getIndexAtDirection>
			for(int j=0;j<range&&inBetween(0,index.x,MAP_WIDTH-1)&&inBetween(0,index.y,MAP_HEIGHT-1)&&!walkMap[index.y][index.x];j++,index=getIndexAtDirection(index,(Direction)i)){
 8002660:	2300      	movs	r3, #0
 8002662:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002664:	e01d      	b.n	80026a2 <updateMap+0x726>
				dangerMap[index.y][index.x]=true;
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	6939      	ldr	r1, [r7, #16]
 800266a:	483b      	ldr	r0, [pc, #236]	; (8002758 <updateMap+0x7dc>)
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	4403      	add	r3, r0
 8002678:	440b      	add	r3, r1
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<range&&inBetween(0,index.x,MAP_WIDTH-1)&&inBetween(0,index.y,MAP_HEIGHT-1)&&!walkMap[index.y][index.x];j++,index=getIndexAtDirection(index,(Direction)i)){
 800267e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002680:	3301      	adds	r3, #1
 8002682:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002684:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002686:	b2db      	uxtb	r3, r3
 8002688:	4638      	mov	r0, r7
 800268a:	f107 0210 	add.w	r2, r7, #16
 800268e:	ca06      	ldmia	r2, {r1, r2}
 8002690:	f7ff fc33 	bl	8001efa <getIndexAtDirection>
 8002694:	f107 0310 	add.w	r3, r7, #16
 8002698:	463a      	mov	r2, r7
 800269a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800269e:	e883 0003 	stmia.w	r3, {r0, r1}
 80026a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026a6:	429a      	cmp	r2, r3
 80026a8:	da21      	bge.n	80026ee <updateMap+0x772>
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	220c      	movs	r2, #12
 80026ae:	4619      	mov	r1, r3
 80026b0:	2000      	movs	r0, #0
 80026b2:	f004 fa76 	bl	8006ba2 <inBetween>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d018      	beq.n	80026ee <updateMap+0x772>
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	220c      	movs	r2, #12
 80026c0:	4619      	mov	r1, r3
 80026c2:	2000      	movs	r0, #0
 80026c4:	f004 fa6d 	bl	8006ba2 <inBetween>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00f      	beq.n	80026ee <updateMap+0x772>
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	6939      	ldr	r1, [r7, #16]
 80026d2:	4822      	ldr	r0, [pc, #136]	; (800275c <updateMap+0x7e0>)
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	4403      	add	r3, r0
 80026e0:	440b      	add	r3, r1
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	f083 0301 	eor.w	r3, r3, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1bb      	bne.n	8002666 <updateMap+0x6ea>
		for(int i=0;i<4;i++){
 80026ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026f0:	3301      	adds	r3, #1
 80026f2:	673b      	str	r3, [r7, #112]	; 0x70
 80026f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	dda9      	ble.n	800264e <updateMap+0x6d2>
	while(element != NULL){
 80026fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d187      	bne.n	8002610 <updateMap+0x694>
			}
		}
	}
	for(int i=0;i<playerCount;i++){
 8002700:	2300      	movs	r3, #0
 8002702:	66bb      	str	r3, [r7, #104]	; 0x68
 8002704:	e019      	b.n	800273a <updateMap+0x7be>
		Vector2 index=getPlayerIndex(&players[i]);
 8002706:	4b16      	ldr	r3, [pc, #88]	; (8002760 <updateMap+0x7e4>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800270c:	019b      	lsls	r3, r3, #6
 800270e:	441a      	add	r2, r3
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	4611      	mov	r1, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fbe0 	bl	8001edc <getPlayerIndex>
		walkMap[index.y][index.x]=true;
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	480e      	ldr	r0, [pc, #56]	; (800275c <updateMap+0x7e0>)
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	4403      	add	r3, r0
 800272e:	440b      	add	r3, r1
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<playerCount;i++){
 8002734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002736:	3301      	adds	r3, #1
 8002738:	66bb      	str	r3, [r7, #104]	; 0x68
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <updateMap+0x7e8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002740:	429a      	cmp	r2, r3
 8002742:	dbe0      	blt.n	8002706 <updateMap+0x78a>
	}

}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	377c      	adds	r7, #124	; 0x7c
 800274a:	46bd      	mov	sp, r7
 800274c:	bd90      	pop	{r4, r7, pc}
 800274e:	bf00      	nop
 8002750:	20000d70 	.word	0x20000d70
 8002754:	20002d8c 	.word	0x20002d8c
 8002758:	20000c18 	.word	0x20000c18
 800275c:	20000cc4 	.word	0x20000cc4
 8002760:	20002d84 	.word	0x20002d84
 8002764:	2000018c 	.word	0x2000018c

08002768 <BFSValue_init>:
typedef struct BFSValueStruct{
	Vector2 index;
	int weight;
	Direction startDirection;
}BFSValue;
BFSValue* BFSValue_init(Vector2 index,int weight,Direction startDirection){
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	f107 0408 	add.w	r4, r7, #8
 8002772:	e884 0003 	stmia.w	r4, {r0, r1}
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	70fb      	strb	r3, [r7, #3]
	BFSValue* val=(BFSValue*)malloc(sizeof(BFSValue ));
 800277a:	2010      	movs	r0, #16
 800277c:	f009 ffa6 	bl	800c6cc <malloc>
 8002780:	4603      	mov	r3, r0
 8002782:	617b      	str	r3, [r7, #20]
	val->index = index;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	461a      	mov	r2, r3
 8002788:	f107 0308 	add.w	r3, r7, #8
 800278c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002790:	e882 0003 	stmia.w	r2, {r0, r1}
	val->weight = weight;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	609a      	str	r2, [r3, #8]
	val->startDirection = startDirection;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	731a      	strb	r2, [r3, #12]
	return val;
 80027a0:	697b      	ldr	r3, [r7, #20]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd90      	pop	{r4, r7, pc}
	...

080027ac <findNextIndex>:
Vector2 findNextIndex(Player* player){
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80027b8:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80027bc:	6018      	str	r0, [r3, #0]
 80027be:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80027c2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80027c6:	6019      	str	r1, [r3, #0]
	Vector2 startIndex = getPlayerIndex(player);
 80027c8:	f507 7266 	add.w	r2, r7, #920	; 0x398
 80027cc:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80027d0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80027d4:	6819      	ldr	r1, [r3, #0]
 80027d6:	4610      	mov	r0, r2
 80027d8:	f7ff fb80 	bl	8001edc <getPlayerIndex>
	bool havePasts[MAP_HEIGHT][MAP_WIDTH];
	for(int i=0;i<MAP_HEIGHT;i++){
 80027dc:	2300      	movs	r3, #0
 80027de:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 80027e2:	e022      	b.n	800282a <findNextIndex+0x7e>
		for(int j=0;j<MAP_WIDTH;j++){
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 80027ea:	e015      	b.n	8002818 <findNextIndex+0x6c>
			havePasts[i][j]=false;
 80027ec:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80027f0:	f5a3 7182 	sub.w	r1, r3, #260	; 0x104
 80027f4:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	18ca      	adds	r2, r1, r3
 8002804:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8002808:	4413      	add	r3, r2
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
		for(int j=0;j<MAP_WIDTH;j++){
 800280e:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8002812:	3301      	adds	r3, #1
 8002814:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8002818:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 800281c:	2b0c      	cmp	r3, #12
 800281e:	dde5      	ble.n	80027ec <findNextIndex+0x40>
	for(int i=0;i<MAP_HEIGHT;i++){
 8002820:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002824:	3301      	adds	r3, #1
 8002826:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800282a:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800282e:	2b0c      	cmp	r3, #12
 8002830:	ddd8      	ble.n	80027e4 <findNextIndex+0x38>
		}
	}
	havePasts[startIndex.y][startIndex.x]=true;
 8002832:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 8002836:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 800283a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800283e:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	4403      	add	r3, r0
 800284e:	440b      	add	r3, r1
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
	if(dangerMap[startIndex.y][startIndex.x]){
 8002854:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 8002858:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 800285c:	48cd      	ldr	r0, [pc, #820]	; (8002b94 <findNextIndex+0x3e8>)
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	4403      	add	r3, r0
 800286a:	440b      	add	r3, r1
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 8201 	beq.w	8002c76 <findNextIndex+0x4ca>
		Queue q = {NULL,NULL,0};
 8002874:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002878:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002884:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002888:	2200      	movs	r2, #0
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002890:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
		Vector2 index;
		for(int i=0;i<4;i++){
 8002898:	2300      	movs	r3, #0
 800289a:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 800289e:	e0d3      	b.n	8002a48 <findNextIndex+0x29c>
			index = getIndexAtDirection(startIndex,(Direction)i);
 80028a0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 80028aa:	f5a2 708c 	sub.w	r0, r2, #280	; 0x118
 80028ae:	f507 7266 	add.w	r2, r7, #920	; 0x398
 80028b2:	ca06      	ldmia	r2, {r1, r2}
 80028b4:	f7ff fb21 	bl	8001efa <getIndexAtDirection>
			if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 80028b8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80028bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	220c      	movs	r2, #12
 80028c4:	4619      	mov	r1, r3
 80028c6:	2000      	movs	r0, #0
 80028c8:	f004 f96b 	bl	8006ba2 <inBetween>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 80b5 	beq.w	8002a3e <findNextIndex+0x292>
 80028d4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80028d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	220c      	movs	r2, #12
 80028e0:	4619      	mov	r1, r3
 80028e2:	2000      	movs	r0, #0
 80028e4:	f004 f95d 	bl	8006ba2 <inBetween>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80a7 	beq.w	8002a3e <findNextIndex+0x292>
					!walkMap[index.y][index.x]&&!havePasts[index.y][index.x]&&
 80028f0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80028f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80028fe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002902:	6819      	ldr	r1, [r3, #0]
 8002904:	48a4      	ldr	r0, [pc, #656]	; (8002b98 <findNextIndex+0x3ec>)
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	4403      	add	r3, r0
 8002912:	440b      	add	r3, r1
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	f083 0301 	eor.w	r3, r3, #1
 800291a:	b2db      	uxtb	r3, r3
			if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 808e 	beq.w	8002a3e <findNextIndex+0x292>
					!walkMap[index.y][index.x]&&!havePasts[index.y][index.x]&&
 8002922:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002926:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002930:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800293a:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	4403      	add	r3, r0
 800294a:	440b      	add	r3, r1
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	f083 0301 	eor.w	r3, r3, #1
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d072      	beq.n	8002a3e <findNextIndex+0x292>
					(getCell(index)->objType!=DetonateEffectObject||player->immortalFlag)){
 8002958:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800295c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002960:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002964:	f7ff f980 	bl	8001c68 <getCell>
 8002968:	4603      	mov	r3, r0
 800296a:	7e1b      	ldrb	r3, [r3, #24]
					!walkMap[index.y][index.x]&&!havePasts[index.y][index.x]&&
 800296c:	2b04      	cmp	r3, #4
 800296e:	d108      	bne.n	8002982 <findNextIndex+0x1d6>
					(getCell(index)->objType!=DetonateEffectObject||player->immortalFlag)){
 8002970:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002974:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800297e:	2b00      	cmp	r3, #0
 8002980:	d05d      	beq.n	8002a3e <findNextIndex+0x292>
				if(!dangerMap[index.y][index.x]){
 8002982:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002986:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002990:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002994:	6819      	ldr	r1, [r3, #0]
 8002996:	487f      	ldr	r0, [pc, #508]	; (8002b94 <findNextIndex+0x3e8>)
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	4403      	add	r3, r0
 80029a4:	440b      	add	r3, r1
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	f083 0301 	eor.w	r3, r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01c      	beq.n	80029ec <findNextIndex+0x240>
					while(q.size!=0)
 80029b2:	e004      	b.n	80029be <findNextIndex+0x212>
						dequeue(&q);
 80029b4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f004 f9af 	bl	8006d1c <dequeue>
					while(q.size!=0)
 80029be:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80029c2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f3      	bne.n	80029b4 <findNextIndex+0x208>
					return index;
 80029cc:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80029d0:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80029d4:	6819      	ldr	r1, [r3, #0]
 80029d6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80029da:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 80029de:	460b      	mov	r3, r1
 80029e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80029e8:	f000 bd9d 	b.w	8003526 <findNextIndex+0xd7a>
				}
				else{
					havePasts[index.y][index.x]=true;
 80029ec:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80029f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80029fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029fe:	6819      	ldr	r1, [r3, #0]
 8002a00:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a04:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8002a08:	4613      	mov	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	4403      	add	r3, r0
 8002a14:	440b      	add	r3, r1
 8002a16:	2201      	movs	r2, #1
 8002a18:	701a      	strb	r2, [r3, #0]
					enqueue(&q,BFSValue_init(index,1,(Direction)i));
 8002a1a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002a24:	f5a2 718c 	sub.w	r1, r2, #280	; 0x118
 8002a28:	2201      	movs	r2, #1
 8002a2a:	c903      	ldmia	r1, {r0, r1}
 8002a2c:	f7ff fe9c 	bl	8002768 <BFSValue_init>
 8002a30:	4602      	mov	r2, r0
 8002a32:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f004 f93b 	bl	8006cb4 <enqueue>
		for(int i=0;i<4;i++){
 8002a3e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002a42:	3301      	adds	r3, #1
 8002a44:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8002a48:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	f77f af27 	ble.w	80028a0 <findNextIndex+0xf4>
				}
			}
		}
		while(q.size!=0){
 8002a52:	e0fa      	b.n	8002c4a <findNextIndex+0x49e>
			BFSValue* val = (BFSValue*)q.front->value;
 8002a54:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
			for(int i=0;i<4;i++){
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8002a6a:	e0e4      	b.n	8002c36 <findNextIndex+0x48a>
				index = getIndexAtDirection(val->index,(Direction)i);
 8002a6c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002a76:	f5a2 748c 	sub.w	r4, r2, #280	; 0x118
 8002a7a:	4638      	mov	r0, r7
 8002a7c:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 8002a80:	ca06      	ldmia	r2, {r1, r2}
 8002a82:	f7ff fa3a 	bl	8001efa <getIndexAtDirection>
 8002a86:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a8a:	f5a3 727c 	sub.w	r2, r3, #1008	; 0x3f0
 8002a8e:	4623      	mov	r3, r4
 8002a90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a94:	e883 0003 	stmia.w	r3, {r0, r1}
				if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)
 8002a98:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002a9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f004 f87b 	bl	8006ba2 <inBetween>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 80bc 	beq.w	8002c2c <findNextIndex+0x480>
 8002ab4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002ab8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	220c      	movs	r2, #12
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f004 f86d 	bl	8006ba2 <inBetween>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80ae 	beq.w	8002c2c <findNextIndex+0x480>
						&&!walkMap[index.y][index.x]&&!havePasts[index.y][index.x]&&
 8002ad0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002ad4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002ade:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ae2:	6819      	ldr	r1, [r3, #0]
 8002ae4:	482c      	ldr	r0, [pc, #176]	; (8002b98 <findNextIndex+0x3ec>)
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	4403      	add	r3, r0
 8002af2:	440b      	add	r3, r1
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	f083 0301 	eor.w	r3, r3, #1
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8095 	beq.w	8002c2c <findNextIndex+0x480>
 8002b02:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b06:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b10:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b14:	6819      	ldr	r1, [r3, #0]
 8002b16:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b1a:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8002b1e:	4613      	mov	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	4403      	add	r3, r0
 8002b2a:	440b      	add	r3, r1
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	f083 0301 	eor.w	r3, r3, #1
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d079      	beq.n	8002c2c <findNextIndex+0x480>
						(getCell(index)->objType!=DetonateEffectObject||player->immortalFlag)){
 8002b38:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b44:	f7ff f890 	bl	8001c68 <getCell>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	7e1b      	ldrb	r3, [r3, #24]
						&&!walkMap[index.y][index.x]&&!havePasts[index.y][index.x]&&
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d108      	bne.n	8002b62 <findNextIndex+0x3b6>
						(getCell(index)->objType!=DetonateEffectObject||player->immortalFlag)){
 8002b50:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b54:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d064      	beq.n	8002c2c <findNextIndex+0x480>
					if(!dangerMap[index.y][index.x]){
 8002b62:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b66:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002b70:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b74:	6819      	ldr	r1, [r3, #0]
 8002b76:	4807      	ldr	r0, [pc, #28]	; (8002b94 <findNextIndex+0x3e8>)
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	4403      	add	r3, r0
 8002b84:	440b      	add	r3, r1
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	f083 0301 	eor.w	r3, r3, #1
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d020      	beq.n	8002bd4 <findNextIndex+0x428>
						while(q.size!=0)
 8002b92:	e008      	b.n	8002ba6 <findNextIndex+0x3fa>
 8002b94:	20000c18 	.word	0x20000c18
 8002b98:	20000cc4 	.word	0x20000cc4
							dequeue(&q);
 8002b9c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f004 f8bb 	bl	8006d1c <dequeue>
						while(q.size!=0)
 8002ba6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002baa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f3      	bne.n	8002b9c <findNextIndex+0x3f0>
						return getIndexAtDirection(startIndex,val->startDirection);
 8002bb4:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002bb8:	7b1a      	ldrb	r2, [r3, #12]
 8002bba:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002bbe:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8002bca:	ca06      	ldmia	r2, {r1, r2}
 8002bcc:	f7ff f995 	bl	8001efa <getIndexAtDirection>
 8002bd0:	f000 bca9 	b.w	8003526 <findNextIndex+0xd7a>
					}
					else{
						havePasts[index.y][index.x]=true;
 8002bd4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002bd8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002be2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002be6:	6819      	ldr	r1, [r3, #0]
 8002be8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002bec:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	4403      	add	r3, r0
 8002bfc:	440b      	add	r3, r1
 8002bfe:	2201      	movs	r2, #1
 8002c00:	701a      	strb	r2, [r3, #0]
						enqueue(&q,BFSValue_init(index,val->weight+1,val->startDirection));
 8002c02:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8002c0e:	7b1b      	ldrb	r3, [r3, #12]
 8002c10:	f507 717c 	add.w	r1, r7, #1008	; 0x3f0
 8002c14:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8002c18:	c903      	ldmia	r1, {r0, r1}
 8002c1a:	f7ff fda5 	bl	8002768 <BFSValue_init>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f004 f844 	bl	8006cb4 <enqueue>
			for(int i=0;i<4;i++){
 8002c2c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8002c30:	3301      	adds	r3, #1
 8002c32:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8002c36:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	f77f af16 	ble.w	8002a6c <findNextIndex+0x2c0>
					}
				}
			}
			dequeue(&q);
 8002c40:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f004 f869 	bl	8006d1c <dequeue>
		while(q.size!=0){
 8002c4a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c4e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f47f aefd 	bne.w	8002a54 <findNextIndex+0x2a8>
		}
		return startIndex;
 8002c5a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c5e:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002c6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c6e:	e882 0003 	stmia.w	r2, {r0, r1}
 8002c72:	f000 bc58 	b.w	8003526 <findNextIndex+0xd7a>
	}
	else{
		int scoreMap[MAP_HEIGHT][MAP_WIDTH];
		for(int i=0;i<MAP_HEIGHT;i++){
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8002c7c:	e0e3      	b.n	8002e46 <findNextIndex+0x69a>
			for(int j=0;j<MAP_WIDTH;j++){
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8002c84:	e0d5      	b.n	8002e32 <findNextIndex+0x686>
				scoreMap[i][j]=0;
 8002c86:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002c8a:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002c8e:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002ca0:	4413      	add	r3, r2
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int k=0;k<4;k++){
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8002cae:	e051      	b.n	8002d54 <findNextIndex+0x5a8>
					if(bombRangeMap[i][j][k]&&player->bombRange>=bombRangeMap[i][j][k]){
 8002cb0:	4980      	ldr	r1, [pc, #512]	; (8002eb4 <findNextIndex+0x708>)
 8002cb2:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009a      	lsls	r2, r3, #2
 8002cc8:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002ccc:	4413      	add	r3, r2
 8002cce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d039      	beq.n	8002d4a <findNextIndex+0x59e>
 8002cd6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002cda:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6a19      	ldr	r1, [r3, #32]
 8002ce2:	4874      	ldr	r0, [pc, #464]	; (8002eb4 <findNextIndex+0x708>)
 8002ce4:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002ce8:	4613      	mov	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009a      	lsls	r2, r3, #2
 8002cfa:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002cfe:	4413      	add	r3, r2
 8002d00:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002d04:	4299      	cmp	r1, r3
 8002d06:	db20      	blt.n	8002d4a <findNextIndex+0x59e>
						scoreMap[i][j]+=5;
 8002d08:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002d0c:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002d10:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002d22:	4413      	add	r3, r2
 8002d24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d28:	1d58      	adds	r0, r3, #5
 8002d2a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002d2e:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002d32:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002d36:	4613      	mov	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002d44:	4413      	add	r3, r2
 8002d46:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				for(int k=0;k<4;k++){
 8002d4a:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8002d54:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	dda9      	ble.n	8002cb0 <findNextIndex+0x504>
					}
				}
				if(map[i][j].objType==SpeedItem||
 8002d5c:	4956      	ldr	r1, [pc, #344]	; (8002eb8 <findNextIndex+0x70c>)
 8002d5e:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002d62:	4613      	mov	r3, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002d70:	4413      	add	r3, r2
 8002d72:	015b      	lsls	r3, r3, #5
 8002d74:	440b      	add	r3, r1
 8002d76:	3318      	adds	r3, #24
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	d032      	beq.n	8002de4 <findNextIndex+0x638>
					map[i][j].objType==BombAmountItem||
 8002d7e:	494e      	ldr	r1, [pc, #312]	; (8002eb8 <findNextIndex+0x70c>)
 8002d80:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002d84:	4613      	mov	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002d92:	4413      	add	r3, r2
 8002d94:	015b      	lsls	r3, r3, #5
 8002d96:	440b      	add	r3, r1
 8002d98:	3318      	adds	r3, #24
 8002d9a:	781b      	ldrb	r3, [r3, #0]
				if(map[i][j].objType==SpeedItem||
 8002d9c:	2b06      	cmp	r3, #6
 8002d9e:	d021      	beq.n	8002de4 <findNextIndex+0x638>
					map[i][j].objType==BombRangeItem||
 8002da0:	4945      	ldr	r1, [pc, #276]	; (8002eb8 <findNextIndex+0x70c>)
 8002da2:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002db4:	4413      	add	r3, r2
 8002db6:	015b      	lsls	r3, r3, #5
 8002db8:	440b      	add	r3, r1
 8002dba:	3318      	adds	r3, #24
 8002dbc:	781b      	ldrb	r3, [r3, #0]
					map[i][j].objType==BombAmountItem||
 8002dbe:	2b07      	cmp	r3, #7
 8002dc0:	d010      	beq.n	8002de4 <findNextIndex+0x638>
					map[i][j].objType==HealthItem){
 8002dc2:	493d      	ldr	r1, [pc, #244]	; (8002eb8 <findNextIndex+0x70c>)
 8002dc4:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002dc8:	4613      	mov	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002dd6:	4413      	add	r3, r2
 8002dd8:	015b      	lsls	r3, r3, #5
 8002dda:	440b      	add	r3, r1
 8002ddc:	3318      	adds	r3, #24
 8002dde:	781b      	ldrb	r3, [r3, #0]
					map[i][j].objType==BombRangeItem||
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d121      	bne.n	8002e28 <findNextIndex+0x67c>
					scoreMap[i][j]+=15;
 8002de4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002de8:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002dec:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002dfe:	4413      	add	r3, r2
 8002e00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e04:	f103 000f 	add.w	r0, r3, #15
 8002e08:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002e0c:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002e10:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8002e22:	4413      	add	r3, r2
 8002e24:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
			for(int j=0;j<MAP_WIDTH;j++){
 8002e28:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8002e32:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	f77f af25 	ble.w	8002c86 <findNextIndex+0x4da>
		for(int i=0;i<MAP_HEIGHT;i++){
 8002e3c:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002e40:	3301      	adds	r3, #1
 8002e42:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8002e46:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002e4a:	2b0c      	cmp	r3, #12
 8002e4c:	f77f af17 	ble.w	8002c7e <findNextIndex+0x4d2>
				}

			}
		}
		for(int i=0;i<playerCount;i++){
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8002e56:	e0dc      	b.n	8003012 <findNextIndex+0x866>
			if((&players[i])!=player){
 8002e58:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <findNextIndex+0x710>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8002e60:	019b      	lsls	r3, r3, #6
 8002e62:	4413      	add	r3, r2
 8002e64:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002e68:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	f000 80ca 	beq.w	8003008 <findNextIndex+0x85c>
				for(int j=0;j<4;j++){
 8002e74:	2300      	movs	r3, #0
 8002e76:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8002e7a:	e0c0      	b.n	8002ffe <findNextIndex+0x852>
					Vector2 index = getIndexAtDirection(getPlayerIndex(&players[i]),(Direction)j);
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <findNextIndex+0x710>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8002e84:	019b      	lsls	r3, r3, #6
 8002e86:	441a      	add	r2, r3
 8002e88:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff f824 	bl	8001edc <getPlayerIndex>
 8002e94:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002e9e:	f5a2 709e 	sub.w	r0, r2, #316	; 0x13c
 8002ea2:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 8002ea6:	ca06      	ldmia	r2, {r1, r2}
 8002ea8:	f7ff f827 	bl	8001efa <getIndexAtDirection>
					for(int k=0;k<player->bombRange&&inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&(!walkMap[index.y][index.x]||Equal(index,startIndex) );k++,index=getIndexAtDirection(index,(Direction)j)){
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8002eb2:	e054      	b.n	8002f5e <findNextIndex+0x7b2>
 8002eb4:	20000d70 	.word	0x20000d70
 8002eb8:	2000185c 	.word	0x2000185c
 8002ebc:	20002d84 	.word	0x20002d84
						scoreMap[index.y][index.x]+=10-2*k;
 8002ec0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002ec4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002ece:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002ed8:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002edc:	4613      	mov	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	4403      	add	r3, r0
 8002ee8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002eec:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8002ef0:	f1c3 0305 	rsb	r3, r3, #5
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002efa:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8002efe:	6852      	ldr	r2, [r2, #4]
 8002f00:	f507 707c 	add.w	r0, r7, #1008	; 0x3f0
 8002f04:	f5a0 709e 	sub.w	r0, r0, #316	; 0x13c
 8002f08:	6804      	ldr	r4, [r0, #0]
 8002f0a:	18c8      	adds	r0, r1, r3
 8002f0c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002f10:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8002f14:	4613      	mov	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	4423      	add	r3, r4
 8002f20:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
					for(int k=0;k<player->bombRange&&inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&(!walkMap[index.y][index.x]||Equal(index,startIndex) );k++,index=getIndexAtDirection(index,(Direction)j)){
 8002f24:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8002f28:	3301      	adds	r3, #1
 8002f2a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8002f2e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002f38:	f5a2 749e 	sub.w	r4, r2, #316	; 0x13c
 8002f3c:	4638      	mov	r0, r7
 8002f3e:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8002f42:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8002f46:	ca06      	ldmia	r2, {r1, r2}
 8002f48:	f7fe ffd7 	bl	8001efa <getIndexAtDirection>
 8002f4c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002f50:	f5a3 727c 	sub.w	r2, r3, #1008	; 0x3f0
 8002f54:	4623      	mov	r3, r4
 8002f56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f5a:	e883 0003 	stmia.w	r3, {r0, r1}
 8002f5e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002f62:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	da40      	bge.n	8002ff4 <findNextIndex+0x848>
 8002f72:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002f76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	220c      	movs	r2, #12
 8002f7e:	4619      	mov	r1, r3
 8002f80:	2000      	movs	r0, #0
 8002f82:	f003 fe0e 	bl	8006ba2 <inBetween>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d033      	beq.n	8002ff4 <findNextIndex+0x848>
 8002f8c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002f90:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	220c      	movs	r2, #12
 8002f98:	4619      	mov	r1, r3
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f003 fe01 	bl	8006ba2 <inBetween>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d026      	beq.n	8002ff4 <findNextIndex+0x848>
 8002fa6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002faa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002fb4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	48a7      	ldr	r0, [pc, #668]	; (8003258 <findNextIndex+0xaac>)
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	4403      	add	r3, r0
 8002fc8:	440b      	add	r3, r1
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	f083 0301 	eor.w	r3, r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f47f af74 	bne.w	8002ec0 <findNextIndex+0x714>
 8002fd8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002fdc:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 8002fe0:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002fe4:	cb0c      	ldmia	r3, {r2, r3}
 8002fe6:	c903      	ldmia	r1, {r0, r1}
 8002fe8:	f7fd fd01 	bl	80009ee <Equal>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f47f af66 	bne.w	8002ec0 <findNextIndex+0x714>
				for(int j=0;j<4;j++){
 8002ff4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8002ffe:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8003002:	2b03      	cmp	r3, #3
 8003004:	f77f af3a 	ble.w	8002e7c <findNextIndex+0x6d0>
		for(int i=0;i<playerCount;i++){
 8003008:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 800300c:	3301      	adds	r3, #1
 800300e:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8003012:	4b92      	ldr	r3, [pc, #584]	; (800325c <findNextIndex+0xab0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 800301a:	429a      	cmp	r2, r3
 800301c:	f6ff af1c 	blt.w	8002e58 <findNextIndex+0x6ac>
					}
				}
			}
		}
		Vector2 resultIndex=startIndex;
 8003020:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003024:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003028:	461a      	mov	r2, r3
 800302a:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800302e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003032:	e882 0003 	stmia.w	r2, {r0, r1}
		Direction resultDirection;
		int mxResult=scoreMap[startIndex.y][startIndex.x];
 8003036:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 800303a:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 800303e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003042:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	4403      	add	r3, r0
 8003052:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003056:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		Queue q = {NULL,NULL,0};
 800305a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800305e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800306a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800306e:	2200      	movs	r2, #0
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003076:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
		Vector2 index;
		for(int i=0;i<4;i++){
 800307e:	2300      	movs	r3, #0
 8003080:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8003084:	e0d5      	b.n	8003232 <findNextIndex+0xa86>
			index = getIndexAtDirection(startIndex,(Direction)i);
 8003086:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8003090:	f5a2 709a 	sub.w	r0, r2, #308	; 0x134
 8003094:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8003098:	ca06      	ldmia	r2, {r1, r2}
 800309a:	f7fe ff2e 	bl	8001efa <getIndexAtDirection>
			if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 800309e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80030a2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	220c      	movs	r2, #12
 80030aa:	4619      	mov	r1, r3
 80030ac:	2000      	movs	r0, #0
 80030ae:	f003 fd78 	bl	8006ba2 <inBetween>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80b7 	beq.w	8003228 <findNextIndex+0xa7c>
 80030ba:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80030be:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	220c      	movs	r2, #12
 80030c6:	4619      	mov	r1, r3
 80030c8:	2000      	movs	r0, #0
 80030ca:	f003 fd6a 	bl	8006ba2 <inBetween>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80a9 	beq.w	8003228 <findNextIndex+0xa7c>
					!walkMap[index.y][index.x]&&
 80030d6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80030da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80030e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030e8:	6819      	ldr	r1, [r3, #0]
 80030ea:	485b      	ldr	r0, [pc, #364]	; (8003258 <findNextIndex+0xaac>)
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	4403      	add	r3, r0
 80030f8:	440b      	add	r3, r1
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	f083 0301 	eor.w	r3, r3, #1
 8003100:	b2db      	uxtb	r3, r3
			if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 8090 	beq.w	8003228 <findNextIndex+0xa7c>
					!havePasts[index.y][index.x]&&
 8003108:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800310c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003116:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800311a:	6819      	ldr	r1, [r3, #0]
 800311c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003120:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8003124:	4613      	mov	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	4403      	add	r3, r0
 8003130:	440b      	add	r3, r1
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	f083 0301 	eor.w	r3, r3, #1
 8003138:	b2db      	uxtb	r3, r3
					!walkMap[index.y][index.x]&&
 800313a:	2b00      	cmp	r3, #0
 800313c:	d074      	beq.n	8003228 <findNextIndex+0xa7c>
					!dangerMap[index.y][index.x]){
 800313e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003142:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800314c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003150:	6819      	ldr	r1, [r3, #0]
 8003152:	4843      	ldr	r0, [pc, #268]	; (8003260 <findNextIndex+0xab4>)
 8003154:	4613      	mov	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	4403      	add	r3, r0
 8003160:	440b      	add	r3, r1
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	f083 0301 	eor.w	r3, r3, #1
 8003168:	b2db      	uxtb	r3, r3
					!havePasts[index.y][index.x]&&
 800316a:	2b00      	cmp	r3, #0
 800316c:	d05c      	beq.n	8003228 <findNextIndex+0xa7c>
				int newResult =scoreMap[index.y][index.x]-2;
 800316e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003172:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800317c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003186:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	4403      	add	r3, r0
 8003196:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800319a:	3b02      	subs	r3, #2
 800319c:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
				if(mxResult<newResult){
 80031a0:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 80031a4:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 80031a8:	429a      	cmp	r2, r3
 80031aa:	da14      	bge.n	80031d6 <findNextIndex+0xa2a>
					mxResult = newResult;
 80031ac:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 80031b0:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
					resultIndex = index;
 80031b4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80031b8:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80031bc:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80031c0:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 80031c4:	460b      	mov	r3, r1
 80031c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031ca:	e883 0003 	stmia.w	r3, {r0, r1}
					resultDirection = i;
 80031ce:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 80031d2:	f887 33c7 	strb.w	r3, [r7, #967]	; 0x3c7
				}
				havePasts[index.y][index.x]=true;
 80031d6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80031da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80031e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80031e8:	6819      	ldr	r1, [r3, #0]
 80031ea:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80031ee:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	4403      	add	r3, r0
 80031fe:	440b      	add	r3, r1
 8003200:	2201      	movs	r2, #1
 8003202:	701a      	strb	r2, [r3, #0]
				enqueue(&q,BFSValue_init(index,2,(Direction)i));
 8003204:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8003208:	b2db      	uxtb	r3, r3
 800320a:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 800320e:	f5a2 719a 	sub.w	r1, r2, #308	; 0x134
 8003212:	2202      	movs	r2, #2
 8003214:	c903      	ldmia	r1, {r0, r1}
 8003216:	f7ff faa7 	bl	8002768 <BFSValue_init>
 800321a:	4602      	mov	r2, r0
 800321c:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8003220:	4611      	mov	r1, r2
 8003222:	4618      	mov	r0, r3
 8003224:	f003 fd46 	bl	8006cb4 <enqueue>
		for(int i=0;i<4;i++){
 8003228:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 800322c:	3301      	adds	r3, #1
 800322e:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8003232:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8003236:	2b03      	cmp	r3, #3
 8003238:	f77f af25 	ble.w	8003086 <findNextIndex+0x8da>
			}
		}
		while(q.size!=0){
 800323c:	e125      	b.n	800348a <findNextIndex+0xcde>
			BFSValue* val = (BFSValue*)q.front->value;
 800323e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003242:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
			for(int i=0;i<4;i++){
 800324e:	2300      	movs	r3, #0
 8003250:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8003254:	e10f      	b.n	8003476 <findNextIndex+0xcca>
 8003256:	bf00      	nop
 8003258:	20000cc4 	.word	0x20000cc4
 800325c:	2000018c 	.word	0x2000018c
 8003260:	20000c18 	.word	0x20000c18
				index = getIndexAtDirection(val->index,(Direction)i);
 8003264:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 800326e:	f5a2 749a 	sub.w	r4, r2, #308	; 0x134
 8003272:	4638      	mov	r0, r7
 8003274:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8003278:	ca06      	ldmia	r2, {r1, r2}
 800327a:	f7fe fe3e 	bl	8001efa <getIndexAtDirection>
 800327e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003282:	f5a3 727c 	sub.w	r2, r3, #1008	; 0x3f0
 8003286:	4623      	mov	r3, r4
 8003288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800328c:	e883 0003 	stmia.w	r3, {r0, r1}
				if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 8003290:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003294:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	220c      	movs	r2, #12
 800329c:	4619      	mov	r1, r3
 800329e:	2000      	movs	r0, #0
 80032a0:	f003 fc7f 	bl	8006ba2 <inBetween>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80e0 	beq.w	800346c <findNextIndex+0xcc0>
 80032ac:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80032b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	220c      	movs	r2, #12
 80032b8:	4619      	mov	r1, r3
 80032ba:	2000      	movs	r0, #0
 80032bc:	f003 fc71 	bl	8006ba2 <inBetween>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80d2 	beq.w	800346c <findNextIndex+0xcc0>
						!walkMap[index.y][index.x]&&
 80032c8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80032cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80032d6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80032da:	6819      	ldr	r1, [r3, #0]
 80032dc:	4896      	ldr	r0, [pc, #600]	; (8003538 <findNextIndex+0xd8c>)
 80032de:	4613      	mov	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	4403      	add	r3, r0
 80032ea:	440b      	add	r3, r1
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	f083 0301 	eor.w	r3, r3, #1
 80032f2:	b2db      	uxtb	r3, r3
				if(inBetween(0,index.y,MAP_HEIGHT-1)&&inBetween(0,index.x,MAP_WIDTH-1)&&
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80b9 	beq.w	800346c <findNextIndex+0xcc0>
						!havePasts[index.y][index.x]&&
 80032fa:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80032fe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003308:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800330c:	6819      	ldr	r1, [r3, #0]
 800330e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003312:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8003316:	4613      	mov	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	4403      	add	r3, r0
 8003322:	440b      	add	r3, r1
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	f083 0301 	eor.w	r3, r3, #1
 800332a:	b2db      	uxtb	r3, r3
						!walkMap[index.y][index.x]&&
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 809d 	beq.w	800346c <findNextIndex+0xcc0>
						!dangerMap[index.y][index.x]){
 8003332:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003336:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003340:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003344:	6819      	ldr	r1, [r3, #0]
 8003346:	487d      	ldr	r0, [pc, #500]	; (800353c <findNextIndex+0xd90>)
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	4403      	add	r3, r0
 8003354:	440b      	add	r3, r1
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	f083 0301 	eor.w	r3, r3, #1
 800335c:	b2db      	uxtb	r3, r3
						!havePasts[index.y][index.x]&&
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 8084 	beq.w	800346c <findNextIndex+0xcc0>
					int newResult =scoreMap[index.y][index.x]-(val->weight*2);
 8003364:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003368:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003372:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800337c:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	4403      	add	r3, r0
 800338c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003390:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
					if(scoreMap[index.y][index.x]>0 && newResult<=0){
 800339e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80033a2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80033ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80033b6:	f5a3 7178 	sub.w	r1, r3, #992	; 0x3e0
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	4403      	add	r3, r0
 80033c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	dd06      	ble.n	80033dc <findNextIndex+0xc30>
 80033ce:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	dc02      	bgt.n	80033dc <findNextIndex+0xc30>
						newResult =1;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
					}
					if(mxResult<newResult){
 80033dc:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 80033e0:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80033e4:	429a      	cmp	r2, r3
 80033e6:	da15      	bge.n	8003414 <findNextIndex+0xc68>
						mxResult = newResult;
 80033e8:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80033ec:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
						resultIndex = index;
 80033f0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80033f4:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80033f8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80033fc:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8003400:	460b      	mov	r3, r1
 8003402:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003406:	e883 0003 	stmia.w	r3, {r0, r1}
						resultDirection = val->startDirection;
 800340a:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800340e:	7b1b      	ldrb	r3, [r3, #12]
 8003410:	f887 33c7 	strb.w	r3, [r7, #967]	; 0x3c7
					}
					havePasts[index.y][index.x]=true;
 8003414:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003418:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003422:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003426:	6819      	ldr	r1, [r3, #0]
 8003428:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800342c:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	4403      	add	r3, r0
 800343c:	440b      	add	r3, r1
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]
					enqueue(&q,BFSValue_init(index,val->weight+1,val->startDirection));
 8003442:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800344e:	7b1b      	ldrb	r3, [r3, #12]
 8003450:	f507 717c 	add.w	r1, r7, #1008	; 0x3f0
 8003454:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 8003458:	c903      	ldmia	r1, {r0, r1}
 800345a:	f7ff f985 	bl	8002768 <BFSValue_init>
 800345e:	4602      	mov	r2, r0
 8003460:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f003 fc24 	bl	8006cb4 <enqueue>
			for(int i=0;i<4;i++){
 800346c:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8003470:	3301      	adds	r3, #1
 8003472:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8003476:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 800347a:	2b03      	cmp	r3, #3
 800347c:	f77f aef2 	ble.w	8003264 <findNextIndex+0xab8>
				}
			}
			dequeue(&q);
 8003480:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8003484:	4618      	mov	r0, r3
 8003486:	f003 fc49 	bl	8006d1c <dequeue>
		while(q.size!=0){
 800348a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800348e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	f47f aed2 	bne.w	800323e <findNextIndex+0xa92>
		}
		if(Equal(resultIndex , startIndex) &&players->currentUseBomb<players->maxBombCount&&mxResult!=0){
 800349a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800349e:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80034a2:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80034a6:	cb0c      	ldmia	r3, {r2, r3}
 80034a8:	c903      	ldmia	r1, {r0, r1}
 80034aa:	f7fd faa0 	bl	80009ee <Equal>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d012      	beq.n	80034da <findNextIndex+0xd2e>
 80034b4:	4b22      	ldr	r3, [pc, #136]	; (8003540 <findNextIndex+0xd94>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ba:	4b21      	ldr	r3, [pc, #132]	; (8003540 <findNextIndex+0xd94>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	da0a      	bge.n	80034da <findNextIndex+0xd2e>
 80034c4:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d006      	beq.n	80034da <findNextIndex+0xd2e>
			placeBomb(player);
 80034cc:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80034d0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	f7fe fb97 	bl	8001c08 <placeBomb>
		}

		if(Equal(resultIndex , startIndex))
 80034da:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80034de:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80034e2:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80034e6:	cb0c      	ldmia	r3, {r2, r3}
 80034e8:	c903      	ldmia	r1, {r0, r1}
 80034ea:	f7fd fa80 	bl	80009ee <Equal>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00c      	beq.n	800350e <findNextIndex+0xd62>
			return startIndex;
 80034f4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80034f8:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8003504:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003508:	e882 0003 	stmia.w	r2, {r0, r1}
 800350c:	e00b      	b.n	8003526 <findNextIndex+0xd7a>
		else{
			return getIndexAtDirection(startIndex,resultDirection) ;
 800350e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003512:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	f897 33c7 	ldrb.w	r3, [r7, #967]	; 0x3c7
 800351c:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8003520:	ca06      	ldmia	r2, {r1, r2}
 8003522:	f7fe fcea 	bl	8001efa <getIndexAtDirection>
		}
	}
}
 8003526:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800352a:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	f507 777d 	add.w	r7, r7, #1012	; 0x3f4
 8003534:	46bd      	mov	sp, r7
 8003536:	bd90      	pop	{r4, r7, pc}
 8003538:	20000cc4 	.word	0x20000cc4
 800353c:	20000c18 	.word	0x20000c18
 8003540:	20002d84 	.word	0x20002d84

08003544 <PlayerUI_init>:
PlayerUI PlayerUI_init(Player* player,Vector2 offset){
 8003544:	b5b0      	push	{r4, r5, r7, lr}
 8003546:	b0ca      	sub	sp, #296	; 0x128
 8003548:	af02      	add	r7, sp, #8
 800354a:	6278      	str	r0, [r7, #36]	; 0x24
 800354c:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8003550:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8003554:	6001      	str	r1, [r0, #0]
 8003556:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800355a:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 800355e:	e881 000c 	stmia.w	r1, {r2, r3}
	PlayerUI playerUI;
	int x = 16 + UI_MARGIN;
 8003562:	2312      	movs	r3, #18
 8003564:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	int y = 16 + UI_MARGIN;
 8003568:	2312      	movs	r3, #18
 800356a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	playerUI.player = player;
 800356e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003572:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
	playerUI.charactorTrans = Transform_init(Add(offset,Vector2_init(0,y)),Vector2_init(16,16),TopLeft);
 800357a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800357e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f7fd f97b 	bl	8000880 <Vector2_init>
 800358a:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800358e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003592:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8003596:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035a0:	ca06      	ldmia	r2, {r1, r2}
 80035a2:	f7fd f985 	bl	80008b0 <Add>
 80035a6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80035aa:	2210      	movs	r2, #16
 80035ac:	2110      	movs	r1, #16
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fd f966 	bl	8000880 <Vector2_init>
 80035b4:	4638      	mov	r0, r7
 80035b6:	2300      	movs	r3, #0
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035c4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80035c8:	ca06      	ldmia	r2, {r1, r2}
 80035ca:	f7fd fa8f 	bl	8000aec <Transform_init>
 80035ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80035d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80035d6:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80035da:	461d      	mov	r5, r3
 80035dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035e0:	682b      	ldr	r3, [r5, #0]
 80035e2:	6023      	str	r3, [r4, #0]

	playerUI.speedImgTrans = Transform_init(Add(offset,Vector2_init(x,y)) ,Vector2_init(16,16),TopLeft);
 80035e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80035e8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80035ec:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fd f945 	bl	8000880 <Vector2_init>
 80035f6:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80035fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80035fe:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8003602:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800360c:	ca06      	ldmia	r2, {r1, r2}
 800360e:	f7fd f94f 	bl	80008b0 <Add>
 8003612:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003616:	2210      	movs	r2, #16
 8003618:	2110      	movs	r1, #16
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd f930 	bl	8000880 <Vector2_init>
 8003620:	4638      	mov	r0, r7
 8003622:	2300      	movs	r3, #0
 8003624:	9301      	str	r3, [sp, #4]
 8003626:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003630:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003634:	ca06      	ldmia	r2, {r1, r2}
 8003636:	f7fd fa59 	bl	8000aec <Transform_init>
 800363a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800363e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003642:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8003646:	461d      	mov	r5, r3
 8003648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800364a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800364c:	682b      	ldr	r3, [r5, #0]
 800364e:	6023      	str	r3, [r4, #0]
	playerUI.bombAmountImgTrans = Transform_init(Add(offset,Vector2_init(x*2,y)) ,Vector2_init(16,16),TopLeft);
 8003650:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003654:	0059      	lsls	r1, r3, #1
 8003656:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800365a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800365e:	4618      	mov	r0, r3
 8003660:	f7fd f90e 	bl	8000880 <Vector2_init>
 8003664:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8003668:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800366c:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8003670:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800367a:	ca06      	ldmia	r2, {r1, r2}
 800367c:	f7fd f918 	bl	80008b0 <Add>
 8003680:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003684:	2210      	movs	r2, #16
 8003686:	2110      	movs	r1, #16
 8003688:	4618      	mov	r0, r3
 800368a:	f7fd f8f9 	bl	8000880 <Vector2_init>
 800368e:	4638      	mov	r0, r7
 8003690:	2300      	movs	r3, #0
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800369e:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80036a2:	ca06      	ldmia	r2, {r1, r2}
 80036a4:	f7fd fa22 	bl	8000aec <Transform_init>
 80036a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80036ac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80036b0:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80036b4:	461d      	mov	r5, r3
 80036b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036ba:	682b      	ldr	r3, [r5, #0]
 80036bc:	6023      	str	r3, [r4, #0]
	playerUI.bombRangeImgTrans = Transform_init(Add(offset,Vector2_init(x*3,y)) ,Vector2_init(16,16),TopLeft);
 80036be:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80036c2:	4613      	mov	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	1899      	adds	r1, r3, r2
 80036c8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80036cc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fd f8d5 	bl	8000880 <Vector2_init>
 80036d6:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 80036da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80036de:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80036e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ec:	ca06      	ldmia	r2, {r1, r2}
 80036ee:	f7fd f8df 	bl	80008b0 <Add>
 80036f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80036f6:	2210      	movs	r2, #16
 80036f8:	2110      	movs	r1, #16
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fd f8c0 	bl	8000880 <Vector2_init>
 8003700:	4638      	mov	r0, r7
 8003702:	2300      	movs	r3, #0
 8003704:	9301      	str	r3, [sp, #4]
 8003706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003710:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8003714:	ca06      	ldmia	r2, {r1, r2}
 8003716:	f7fd f9e9 	bl	8000aec <Transform_init>
 800371a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800371e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003722:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8003726:	461d      	mov	r5, r3
 8003728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800372a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800372c:	682b      	ldr	r3, [r5, #0]
 800372e:	6023      	str	r3, [r4, #0]
	playerUI.healthImgTrans = Transform_init(Add(offset,Vector2_init(x*4,y)) ,Vector2_init(16,16),TopLeft);
 8003730:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003734:	0099      	lsls	r1, r3, #2
 8003736:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800373a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800373e:	4618      	mov	r0, r3
 8003740:	f7fd f89e 	bl	8000880 <Vector2_init>
 8003744:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8003748:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800374c:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8003750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800375a:	ca06      	ldmia	r2, {r1, r2}
 800375c:	f7fd f8a8 	bl	80008b0 <Add>
 8003760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003764:	2210      	movs	r2, #16
 8003766:	2110      	movs	r1, #16
 8003768:	4618      	mov	r0, r3
 800376a:	f7fd f889 	bl	8000880 <Vector2_init>
 800376e:	4638      	mov	r0, r7
 8003770:	2300      	movs	r3, #0
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800377e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8003782:	ca06      	ldmia	r2, {r1, r2}
 8003784:	f7fd f9b2 	bl	8000aec <Transform_init>
 8003788:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800378c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003790:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003794:	461d      	mov	r5, r3
 8003796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800379a:	682b      	ldr	r3, [r5, #0]
 800379c:	6023      	str	r3, [r4, #0]

	playerUI.startTextPos = Add(offset,Vector2_init(x,0));
 800379e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fd f869 	bl	8000880 <Vector2_init>
 80037ae:	4638      	mov	r0, r7
 80037b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80037b4:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80037b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80037c2:	ca06      	ldmia	r2, {r1, r2}
 80037c4:	f7fd f874 	bl	80008b0 <Add>
 80037c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80037cc:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 80037d0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80037d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037d8:	e883 0003 	stmia.w	r3, {r0, r1}
	return playerUI;
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	4618      	mov	r0, r3
 80037e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037e4:	2270      	movs	r2, #112	; 0x70
 80037e6:	4619      	mov	r1, r3
 80037e8:	f009 fb40 	bl	800ce6c <memcpy>
}
 80037ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037ee:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080037f8 <DrawPlayerUI>:
void DrawPlayerUI(PlayerUI* playerUI){
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	; 0x28
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	6078      	str	r0, [r7, #4]
	char str[10];

	DrawImage(&playerUI->charactorTrans,playerUI->player->imgPtr1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	1d1a      	adds	r2, r3, #4
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380a:	4619      	mov	r1, r3
 800380c:	4610      	mov	r0, r2
 800380e:	f7fd fa59 	bl	8000cc4 <DrawImage>

	Vector2 pos =playerUI->startTextPos;
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	f107 030c 	add.w	r3, r7, #12
 8003818:	3268      	adds	r2, #104	; 0x68
 800381a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800381e:	e883 0003 	stmia.w	r3, {r0, r1}
	DrawImage(&playerUI->speedImgTrans,shoeImage);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	332c      	adds	r3, #44	; 0x2c
 8003826:	493f      	ldr	r1, [pc, #252]	; (8003924 <DrawPlayerUI+0x12c>)
 8003828:	4618      	mov	r0, r3
 800382a:	f7fd fa4b 	bl	8000cc4 <DrawImage>
	sprintf(str,"%d",playerUI->player->speed);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699a      	ldr	r2, [r3, #24]
 8003834:	f107 0314 	add.w	r3, r7, #20
 8003838:	493b      	ldr	r1, [pc, #236]	; (8003928 <DrawPlayerUI+0x130>)
 800383a:	4618      	mov	r0, r3
 800383c:	f009 f992 	bl	800cb64 <siprintf>
	ILI9341_Draw_Text(str,pos.x,pos.y, WHITE, 2, BLACK);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	b2d9      	uxtb	r1, r3
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	f107 0014 	add.w	r0, r7, #20
 800384c:	2300      	movs	r3, #0
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	2302      	movs	r3, #2
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003858:	f003 fc14 	bl	8007084 <ILI9341_Draw_Text>

	pos.x+= 16+UI_MARGIN;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3312      	adds	r3, #18
 8003860:	60fb      	str	r3, [r7, #12]
	DrawImage(&playerUI->bombAmountImgTrans,addBombImage);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3340      	adds	r3, #64	; 0x40
 8003866:	4931      	ldr	r1, [pc, #196]	; (800392c <DrawPlayerUI+0x134>)
 8003868:	4618      	mov	r0, r3
 800386a:	f7fd fa2b 	bl	8000cc4 <DrawImage>
	sprintf(str,"%d",playerUI->player->maxBombCount);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	f107 0314 	add.w	r3, r7, #20
 8003878:	492b      	ldr	r1, [pc, #172]	; (8003928 <DrawPlayerUI+0x130>)
 800387a:	4618      	mov	r0, r3
 800387c:	f009 f972 	bl	800cb64 <siprintf>
	ILI9341_Draw_Text(str,pos.x,pos.y, GREEN, 2, BLACK);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	b2d9      	uxtb	r1, r3
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	f107 0014 	add.w	r0, r7, #20
 800388c:	2300      	movs	r3, #0
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	2302      	movs	r3, #2
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003898:	f003 fbf4 	bl	8007084 <ILI9341_Draw_Text>

	pos.x+= 16+UI_MARGIN;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3312      	adds	r3, #18
 80038a0:	60fb      	str	r3, [r7, #12]
	DrawImage(&playerUI->bombRangeImgTrans,potionImage);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3354      	adds	r3, #84	; 0x54
 80038a6:	4922      	ldr	r1, [pc, #136]	; (8003930 <DrawPlayerUI+0x138>)
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fd fa0b 	bl	8000cc4 <DrawImage>
	sprintf(str,"%d",playerUI->player->bombRange);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6a1a      	ldr	r2, [r3, #32]
 80038b4:	f107 0314 	add.w	r3, r7, #20
 80038b8:	491b      	ldr	r1, [pc, #108]	; (8003928 <DrawPlayerUI+0x130>)
 80038ba:	4618      	mov	r0, r3
 80038bc:	f009 f952 	bl	800cb64 <siprintf>
	ILI9341_Draw_Text(str,pos.x,pos.y, BLUE, 2, BLACK);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	b2d9      	uxtb	r1, r3
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	f107 0014 	add.w	r0, r7, #20
 80038cc:	2300      	movs	r3, #0
 80038ce:	9301      	str	r3, [sp, #4]
 80038d0:	2302      	movs	r3, #2
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	231f      	movs	r3, #31
 80038d6:	f003 fbd5 	bl	8007084 <ILI9341_Draw_Text>

	pos.x+= 16+UI_MARGIN;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3312      	adds	r3, #18
 80038de:	60fb      	str	r3, [r7, #12]
	DrawImage(&playerUI->healthImgTrans,heartImage);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3318      	adds	r3, #24
 80038e4:	4913      	ldr	r1, [pc, #76]	; (8003934 <DrawPlayerUI+0x13c>)
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd f9ec 	bl	8000cc4 <DrawImage>
	sprintf(str,"%d",playerUI->player->health);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	f107 0314 	add.w	r3, r7, #20
 80038f6:	490c      	ldr	r1, [pc, #48]	; (8003928 <DrawPlayerUI+0x130>)
 80038f8:	4618      	mov	r0, r3
 80038fa:	f009 f933 	bl	800cb64 <siprintf>
	ILI9341_Draw_Text(str,pos.x,pos.y, RED, 2, BLACK);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	b2d9      	uxtb	r1, r3
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	b2da      	uxtb	r2, r3
 8003906:	f107 0014 	add.w	r0, r7, #20
 800390a:	2300      	movs	r3, #0
 800390c:	9301      	str	r3, [sp, #4]
 800390e:	2302      	movs	r3, #2
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003916:	f003 fbb5 	bl	8007084 <ILI9341_Draw_Text>
}
 800391a:	bf00      	nop
 800391c:	3720      	adds	r7, #32
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	0803b88c 	.word	0x0803b88c
 8003928:	0800ede8 	.word	0x0800ede8
 800392c:	0803c48c 	.word	0x0803c48c
 8003930:	0803bc8c 	.word	0x0803bc8c
 8003934:	0803ba8c 	.word	0x0803ba8c

08003938 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08e      	sub	sp, #56	; 0x38
 800393c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	605a      	str	r2, [r3, #4]
 8003948:	609a      	str	r2, [r3, #8]
 800394a:	60da      	str	r2, [r3, #12]
 800394c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800394e:	4ba7      	ldr	r3, [pc, #668]	; (8003bec <MX_GPIO_Init+0x2b4>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	4aa6      	ldr	r2, [pc, #664]	; (8003bec <MX_GPIO_Init+0x2b4>)
 8003954:	f043 0310 	orr.w	r3, r3, #16
 8003958:	6313      	str	r3, [r2, #48]	; 0x30
 800395a:	4ba4      	ldr	r3, [pc, #656]	; (8003bec <MX_GPIO_Init+0x2b4>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	623b      	str	r3, [r7, #32]
 8003964:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003966:	4ba1      	ldr	r3, [pc, #644]	; (8003bec <MX_GPIO_Init+0x2b4>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	4aa0      	ldr	r2, [pc, #640]	; (8003bec <MX_GPIO_Init+0x2b4>)
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	6313      	str	r3, [r2, #48]	; 0x30
 8003972:	4b9e      	ldr	r3, [pc, #632]	; (8003bec <MX_GPIO_Init+0x2b4>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800397e:	4b9b      	ldr	r3, [pc, #620]	; (8003bec <MX_GPIO_Init+0x2b4>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	4a9a      	ldr	r2, [pc, #616]	; (8003bec <MX_GPIO_Init+0x2b4>)
 8003984:	f043 0320 	orr.w	r3, r3, #32
 8003988:	6313      	str	r3, [r2, #48]	; 0x30
 800398a:	4b98      	ldr	r3, [pc, #608]	; (8003bec <MX_GPIO_Init+0x2b4>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003996:	4b95      	ldr	r3, [pc, #596]	; (8003bec <MX_GPIO_Init+0x2b4>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	4a94      	ldr	r2, [pc, #592]	; (8003bec <MX_GPIO_Init+0x2b4>)
 800399c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a0:	6313      	str	r3, [r2, #48]	; 0x30
 80039a2:	4b92      	ldr	r3, [pc, #584]	; (8003bec <MX_GPIO_Init+0x2b4>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ae:	4b8f      	ldr	r3, [pc, #572]	; (8003bec <MX_GPIO_Init+0x2b4>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	4a8e      	ldr	r2, [pc, #568]	; (8003bec <MX_GPIO_Init+0x2b4>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ba:	4b8c      	ldr	r3, [pc, #560]	; (8003bec <MX_GPIO_Init+0x2b4>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c6:	4b89      	ldr	r3, [pc, #548]	; (8003bec <MX_GPIO_Init+0x2b4>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	4a88      	ldr	r2, [pc, #544]	; (8003bec <MX_GPIO_Init+0x2b4>)
 80039cc:	f043 0302 	orr.w	r3, r3, #2
 80039d0:	6313      	str	r3, [r2, #48]	; 0x30
 80039d2:	4b86      	ldr	r3, [pc, #536]	; (8003bec <MX_GPIO_Init+0x2b4>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039de:	4b83      	ldr	r3, [pc, #524]	; (8003bec <MX_GPIO_Init+0x2b4>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	4a82      	ldr	r2, [pc, #520]	; (8003bec <MX_GPIO_Init+0x2b4>)
 80039e4:	f043 0308 	orr.w	r3, r3, #8
 80039e8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ea:	4b80      	ldr	r3, [pc, #512]	; (8003bec <MX_GPIO_Init+0x2b4>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80039f6:	4b7d      	ldr	r3, [pc, #500]	; (8003bec <MX_GPIO_Init+0x2b4>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	4a7c      	ldr	r2, [pc, #496]	; (8003bec <MX_GPIO_Init+0x2b4>)
 80039fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a00:	6313      	str	r3, [r2, #48]	; 0x30
 8003a02:	4b7a      	ldr	r3, [pc, #488]	; (8003bec <MX_GPIO_Init+0x2b4>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	607b      	str	r3, [r7, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2168      	movs	r1, #104	; 0x68
 8003a12:	4877      	ldr	r0, [pc, #476]	; (8003bf0 <MX_GPIO_Init+0x2b8>)
 8003a14:	f005 fc56 	bl	80092c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8003a1e:	4875      	ldr	r0, [pc, #468]	; (8003bf4 <MX_GPIO_Init+0x2bc>)
 8003a20:	f005 fc50 	bl	80092c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003a24:	2200      	movs	r2, #0
 8003a26:	2140      	movs	r1, #64	; 0x40
 8003a28:	4873      	ldr	r0, [pc, #460]	; (8003bf8 <MX_GPIO_Init+0x2c0>)
 8003a2a:	f005 fc4b 	bl	80092c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003a34:	4871      	ldr	r0, [pc, #452]	; (8003bfc <MX_GPIO_Init+0x2c4>)
 8003a36:	f005 fc45 	bl	80092c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8003a3a:	2314      	movs	r3, #20
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4868      	ldr	r0, [pc, #416]	; (8003bf0 <MX_GPIO_Init+0x2b8>)
 8003a4e:	f005 fa75 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8003a52:	2368      	movs	r3, #104	; 0x68
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a56:	2301      	movs	r3, #1
 8003a58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a66:	4619      	mov	r1, r3
 8003a68:	4861      	ldr	r0, [pc, #388]	; (8003bf0 <MX_GPIO_Init+0x2b8>)
 8003a6a:	f005 fa67 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a82:	4619      	mov	r1, r3
 8003a84:	485d      	ldr	r0, [pc, #372]	; (8003bfc <MX_GPIO_Init+0x2c4>)
 8003a86:	f005 fa59 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003a8a:	2310      	movs	r3, #16
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4858      	ldr	r0, [pc, #352]	; (8003c00 <MX_GPIO_Init+0x2c8>)
 8003aa0:	f005 fa4c 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003aa4:	2332      	movs	r3, #50	; 0x32
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ab4:	230b      	movs	r3, #11
 8003ab6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003abc:	4619      	mov	r1, r3
 8003abe:	484f      	ldr	r0, [pc, #316]	; (8003bfc <MX_GPIO_Init+0x2c4>)
 8003ac0:	f005 fa3c 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ac4:	2308      	movs	r3, #8
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ac8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4848      	ldr	r0, [pc, #288]	; (8003bfc <MX_GPIO_Init+0x2c4>)
 8003ada:	f005 fa2f 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003ade:	2386      	movs	r3, #134	; 0x86
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aea:	2303      	movs	r3, #3
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003aee:	230b      	movs	r3, #11
 8003af0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af6:	4619      	mov	r1, r3
 8003af8:	4842      	ldr	r0, [pc, #264]	; (8003c04 <MX_GPIO_Init+0x2cc>)
 8003afa:	f005 fa1f 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003afe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b04:	2302      	movs	r3, #2
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b10:	230b      	movs	r3, #11
 8003b12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4836      	ldr	r0, [pc, #216]	; (8003bf4 <MX_GPIO_Init+0x2bc>)
 8003b1c:	f005 fa0e 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8003b20:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b26:	2301      	movs	r3, #1
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b36:	4619      	mov	r1, r3
 8003b38:	482e      	ldr	r0, [pc, #184]	; (8003bf4 <MX_GPIO_Init+0x2bc>)
 8003b3a:	f005 f9ff 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003b3e:	2340      	movs	r3, #64	; 0x40
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b42:	2301      	movs	r3, #1
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b52:	4619      	mov	r1, r3
 8003b54:	4828      	ldr	r0, [pc, #160]	; (8003bf8 <MX_GPIO_Init+0x2c0>)
 8003b56:	f005 f9f1 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4822      	ldr	r0, [pc, #136]	; (8003bf8 <MX_GPIO_Init+0x2c0>)
 8003b6e:	f005 f9e5 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8003b72:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b80:	2303      	movs	r3, #3
 8003b82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b88:	4619      	mov	r1, r3
 8003b8a:	481c      	ldr	r0, [pc, #112]	; (8003bfc <MX_GPIO_Init+0x2c4>)
 8003b8c:	f005 f9d6 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003b90:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b96:	2302      	movs	r3, #2
 8003b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ba2:	230b      	movs	r3, #11
 8003ba4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003baa:	4619      	mov	r1, r3
 8003bac:	4812      	ldr	r0, [pc, #72]	; (8003bf8 <MX_GPIO_Init+0x2c0>)
 8003bae:	f005 f9c5 	bl	8008f3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	2009      	movs	r0, #9
 8003bb8:	f004 fe11 	bl	80087de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003bbc:	2009      	movs	r0, #9
 8003bbe:	f004 fe2a 	bl	8008816 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	200a      	movs	r0, #10
 8003bc8:	f004 fe09 	bl	80087de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003bcc:	200a      	movs	r0, #10
 8003bce:	f004 fe22 	bl	8008816 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	2028      	movs	r0, #40	; 0x28
 8003bd8:	f004 fe01 	bl	80087de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003bdc:	2028      	movs	r0, #40	; 0x28
 8003bde:	f004 fe1a 	bl	8008816 <HAL_NVIC_EnableIRQ>

}
 8003be2:	bf00      	nop
 8003be4:	3738      	adds	r7, #56	; 0x38
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	40020400 	.word	0x40020400
 8003bf8:	40021800 	.word	0x40021800
 8003bfc:	40020800 	.word	0x40020800
 8003c00:	40021400 	.word	0x40021400
 8003c04:	40020000 	.word	0x40020000

08003c08 <setRotation>:
	ILI9341_Set_Address(area.x0, area.y0, area.x1, area.y1);
	ILI9341_Draw_Colour_Burst(color, (area.x1 - area.x0) * (area.y1 - area.y0));
}

void setRotation(uint8_t rotation)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
	ILI9341_Set_Rotation(rotation);
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f003 fb35 	bl	8007284 <ILI9341_Set_Rotation>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <drawImageAtPoint>:
{
	ILI9341_Draw_Image(imageArray, orientation);
}

void drawImageAtPoint(Image image, uint8_t rotation)
{
 8003c24:	b590      	push	{r4, r7, lr}
 8003c26:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	f507 7406 	add.w	r4, r7, #536	; 0x218
 8003c30:	f5a4 7405 	sub.w	r4, r4, #532	; 0x214
 8003c34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003c3e:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8003c42:	701a      	strb	r2, [r3, #0]
	setRotation(rotation);
 8003c44:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003c48:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff ffda 	bl	8003c08 <setRotation>

	Point startPoint = image.drawPoint;
 8003c54:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003c58:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	Point endPoint = { 0, 0};
 8003c62:	2300      	movs	r3, #0
 8003c64:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206

	switch (rotation)
 8003c6e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003c72:	f2a3 2315 	subw	r3, r3, #533	; 0x215
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d83d      	bhi.n	8003cf8 <drawImageAtPoint+0xd4>
 8003c7c:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <drawImageAtPoint+0x60>)
 8003c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c82:	bf00      	nop
 8003c84:	08003cc7 	.word	0x08003cc7
 8003c88:	08003c95 	.word	0x08003c95
 8003c8c:	08003cc7 	.word	0x08003cc7
 8003c90:	08003c95 	.word	0x08003c95
	{
	case SCREEN_HORIZONTAL_1:
	case SCREEN_HORIZONTAL_2:
		endPoint.x = startPoint.x + image.width - 1;
 8003c94:	f8b7 2208 	ldrh.w	r2, [r7, #520]	; 0x208
 8003c98:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003c9c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003ca0:	891b      	ldrh	r3, [r3, #8]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
		endPoint.y = startPoint.y + image.height;
 8003cae:	f8b7 220a 	ldrh.w	r2, [r7, #522]	; 0x20a
 8003cb2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003cb6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003cba:	895b      	ldrh	r3, [r3, #10]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
		break;
 8003cc4:	e018      	b.n	8003cf8 <drawImageAtPoint+0xd4>
	case SCREEN_VERTICAL_1:
	case SCREEN_VERTICAL_2:
		endPoint.x = startPoint.y + image.height - 1;
 8003cc6:	f8b7 220a 	ldrh.w	r2, [r7, #522]	; 0x20a
 8003cca:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003cce:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003cd2:	895b      	ldrh	r3, [r3, #10]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
		endPoint.y = startPoint.x + image.width;
 8003ce0:	f8b7 2208 	ldrh.w	r2, [r7, #520]	; 0x208
 8003ce4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003ce8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003cec:	891b      	ldrh	r3, [r3, #8]
 8003cee:	4413      	add	r3, r2
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
		break;
 8003cf6:	bf00      	nop
	}

	ILI9341_Set_Address(startPoint.x, startPoint.y, endPoint.x, endPoint.y);
 8003cf8:	f8b7 0208 	ldrh.w	r0, [r7, #520]	; 0x208
 8003cfc:	f8b7 120a 	ldrh.w	r1, [r7, #522]	; 0x20a
 8003d00:	f8b7 2204 	ldrh.w	r2, [r7, #516]	; 0x204
 8003d04:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8003d08:	f003 fa52 	bl	80071b0 <ILI9341_Set_Address>

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d12:	4834      	ldr	r0, [pc, #208]	; (8003de4 <drawImageAtPoint+0x1c0>)
 8003d14:	f005 fad6 	bl	80092c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d1e:	4831      	ldr	r0, [pc, #196]	; (8003de4 <drawImageAtPoint+0x1c0>)
 8003d20:	f005 fad0 	bl	80092c4 <HAL_GPIO_WritePin>

	unsigned char Temp_small_buffer[BURST_MAX_SIZE];
	uint32_t counter = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	for (uint32_t i = 0; i < image.width * image.height * 2 / BURST_MAX_SIZE; i++)
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003d30:	e035      	b.n	8003d9e <drawImageAtPoint+0x17a>
	{
		for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8003d32:	2300      	movs	r3, #0
 8003d34:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003d38:	e019      	b.n	8003d6e <drawImageAtPoint+0x14a>
		{
			Temp_small_buffer[k] = image.imageArray[counter + k];
 8003d3a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003d3e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8003d48:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003d4c:	440b      	add	r3, r1
 8003d4e:	4413      	add	r3, r2
 8003d50:	7819      	ldrb	r1, [r3, #0]
 8003d52:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003d56:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8003d5a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003d5e:	4413      	add	r3, r2
 8003d60:	460a      	mov	r2, r1
 8003d62:	701a      	strb	r2, [r3, #0]
		for (uint32_t k = 0; k < BURST_MAX_SIZE; k++)
 8003d64:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003d68:	3301      	adds	r3, #1
 8003d6a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003d6e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003d72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d76:	d3e0      	bcc.n	8003d3a <drawImageAtPoint+0x116>
		}
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) Temp_small_buffer, BURST_MAX_SIZE, 10);
 8003d78:	f107 0110 	add.w	r1, r7, #16
 8003d7c:	230a      	movs	r3, #10
 8003d7e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d82:	4819      	ldr	r0, [pc, #100]	; (8003de8 <drawImageAtPoint+0x1c4>)
 8003d84:	f006 fd01 	bl	800a78a <HAL_SPI_Transmit>
		counter += BURST_MAX_SIZE;
 8003d88:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003d8c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003d90:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	for (uint32_t i = 0; i < image.width * image.height * 2 / BURST_MAX_SIZE; i++)
 8003d94:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003d9e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003da2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003da6:	891b      	ldrh	r3, [r3, #8]
 8003da8:	461a      	mov	r2, r3
 8003daa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003dae:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003db2:	895b      	ldrh	r3, [r3, #10]
 8003db4:	fb02 f303 	mul.w	r3, r2, r3
 8003db8:	4a0c      	ldr	r2, [pc, #48]	; (8003dec <drawImageAtPoint+0x1c8>)
 8003dba:	fb82 1203 	smull	r1, r2, r2, r3
 8003dbe:	1112      	asrs	r2, r2, #4
 8003dc0:	17db      	asrs	r3, r3, #31
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d3b1      	bcc.n	8003d32 <drawImageAtPoint+0x10e>
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dd4:	4803      	ldr	r0, [pc, #12]	; (8003de4 <drawImageAtPoint+0x1c0>)
 8003dd6:	f005 fa75 	bl	80092c4 <HAL_GPIO_WritePin>
}
 8003dda:	bf00      	nop
 8003ddc:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd90      	pop	{r4, r7, pc}
 8003de4:	40020800 	.word	0x40020800
 8003de8:	20002dc4 	.word	0x20002dc4
 8003dec:	10624dd3 	.word	0x10624dd3

08003df0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003df4:	f3bf 8f4f 	dsb	sy
}
 8003df8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003dfa:	f3bf 8f6f 	isb	sy
}
 8003dfe:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003e00:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <SCB_EnableICache+0x48>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003e08:	f3bf 8f4f 	dsb	sy
}
 8003e0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e0e:	f3bf 8f6f 	isb	sy
}
 8003e12:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <SCB_EnableICache+0x48>)
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	4a07      	ldr	r2, [pc, #28]	; (8003e38 <SCB_EnableICache+0x48>)
 8003e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e1e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e20:	f3bf 8f4f 	dsb	sy
}
 8003e24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e26:	f3bf 8f6f 	isb	sy
}
 8003e2a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8003e2c:	bf00      	nop
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	e000ed00 	.word	0xe000ed00

08003e3c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003e42:	4b1f      	ldr	r3, [pc, #124]	; (8003ec0 <SCB_EnableDCache+0x84>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003e4a:	f3bf 8f4f 	dsb	sy
}
 8003e4e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003e50:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <SCB_EnableDCache+0x84>)
 8003e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e56:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	0b5b      	lsrs	r3, r3, #13
 8003e5c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003e60:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	08db      	lsrs	r3, r3, #3
 8003e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e6a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003e74:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003e7a:	4911      	ldr	r1, [pc, #68]	; (8003ec0 <SCB_EnableDCache+0x84>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	1e5a      	subs	r2, r3, #1
 8003e86:	60ba      	str	r2, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1ef      	bne.n	8003e6c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1e5a      	subs	r2, r3, #1
 8003e90:	60fa      	str	r2, [r7, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e5      	bne.n	8003e62 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8003e96:	f3bf 8f4f 	dsb	sy
}
 8003e9a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003e9c:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <SCB_EnableDCache+0x84>)
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	4a07      	ldr	r2, [pc, #28]	; (8003ec0 <SCB_EnableDCache+0x84>)
 8003ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ea8:	f3bf 8f4f 	dsb	sy
}
 8003eac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003eae:	f3bf 8f6f 	isb	sy
}
 8003eb2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <isTouchWithinRectangle>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define GAME_TIME 300
bool endGameFlag=true;
char str[90];
uint8_t isTouchWithinRectangle(Rectangle rectangle, Point point) {
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	f107 0308 	add.w	r3, r7, #8
 8003ece:	e883 0003 	stmia.w	r3, {r0, r1}
 8003ed2:	607a      	str	r2, [r7, #4]
	return (point.x >= rectangle.x0 && point.x <= rectangle.x1
 8003ed4:	88ba      	ldrh	r2, [r7, #4]
 8003ed6:	893b      	ldrh	r3, [r7, #8]
			&& point.y <= rectangle.y1 && point.y >= rectangle.y0);
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d30d      	bcc.n	8003ef8 <isTouchWithinRectangle+0x34>
	return (point.x >= rectangle.x0 && point.x <= rectangle.x1
 8003edc:	88ba      	ldrh	r2, [r7, #4]
 8003ede:	89bb      	ldrh	r3, [r7, #12]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d809      	bhi.n	8003ef8 <isTouchWithinRectangle+0x34>
			&& point.y <= rectangle.y1 && point.y >= rectangle.y0);
 8003ee4:	88fa      	ldrh	r2, [r7, #6]
 8003ee6:	89fb      	ldrh	r3, [r7, #14]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d805      	bhi.n	8003ef8 <isTouchWithinRectangle+0x34>
 8003eec:	88fa      	ldrh	r2, [r7, #6]
 8003eee:	897b      	ldrh	r3, [r7, #10]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d301      	bcc.n	8003ef8 <isTouchWithinRectangle+0x34>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <isTouchWithinRectangle+0x36>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <checkMap>:
void startGame();
void checkMap(Point cursor, int mapState[], Rectangle mapRectangle[]) {
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b089      	sub	sp, #36	; 0x24
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < 3; i++) {
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	e0eb      	b.n	80040f2 <checkMap+0x1ea>
		if (isTouchWithinRectangle(mapRectangle[i], cursor)) {
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	4413      	add	r3, r2
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4611      	mov	r1, r2
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	4619      	mov	r1, r3
 8003f30:	f7ff ffc8 	bl	8003ec4 <isTouchWithinRectangle>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01a      	beq.n	8003f70 <checkMap+0x68>
			mapState[i] = 1;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	4413      	add	r3, r2
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
			for (int j = 0; j < 3; j++) {
 8003f46:	2300      	movs	r3, #0
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	e00e      	b.n	8003f6a <checkMap+0x62>
				if (j == i)
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d006      	beq.n	8003f62 <checkMap+0x5a>
					continue;
				mapState[j] = 0;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	e000      	b.n	8003f64 <checkMap+0x5c>
					continue;
 8003f62:	bf00      	nop
			for (int j = 0; j < 3; j++) {
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	3301      	adds	r3, #1
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	dded      	ble.n	8003f4c <checkMap+0x44>
			}
		}
		if (mapState[i]) {
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	4413      	add	r3, r2
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d04e      	beq.n	800401c <checkMap+0x114>
			ILI9341_Draw_Filled_Rectangle_Coord((mapRectangle[i]).x0,
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	4413      	add	r3, r2
 8003f86:	8818      	ldrh	r0, [r3, #0]
					(mapRectangle[i]).y0, (mapRectangle[i]).x1,
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4413      	add	r3, r2
			ILI9341_Draw_Filled_Rectangle_Coord((mapRectangle[i]).x0,
 8003f90:	8859      	ldrh	r1, [r3, #2]
					(mapRectangle[i]).y0, (mapRectangle[i]).x1,
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	4413      	add	r3, r2
			ILI9341_Draw_Filled_Rectangle_Coord((mapRectangle[i]).x0,
 8003f9a:	889c      	ldrh	r4, [r3, #4]
					(mapRectangle[i]).y1, 0x02e0);
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	4413      	add	r3, r2
			ILI9341_Draw_Filled_Rectangle_Coord((mapRectangle[i]).x0,
 8003fa4:	88db      	ldrh	r3, [r3, #6]
 8003fa6:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8003faa:	9200      	str	r2, [sp, #0]
 8003fac:	4622      	mov	r2, r4
 8003fae:	f002 ff71 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
			switch (i) {
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d024      	beq.n	8004002 <checkMap+0xfa>
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	f300 8096 	bgt.w	80040ec <checkMap+0x1e4>
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <checkMap+0xc6>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d00d      	beq.n	8003fe8 <checkMap+0xe0>
 8003fcc:	e08e      	b.n	80040ec <checkMap+0x1e4>
			case 0:
				ILI9341_Draw_Text("Map 1", 48, 180, WHITE, 1, 0x02e0);
 8003fce:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fdc:	22b4      	movs	r2, #180	; 0xb4
 8003fde:	2130      	movs	r1, #48	; 0x30
 8003fe0:	4848      	ldr	r0, [pc, #288]	; (8004104 <checkMap+0x1fc>)
 8003fe2:	f003 f84f 	bl	8007084 <ILI9341_Draw_Text>
				break;
 8003fe6:	e081      	b.n	80040ec <checkMap+0x1e4>
			case 1:
				ILI9341_Draw_Text("Map 2", 118, 180, WHITE, 1, 0x02e0);
 8003fe8:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8003fec:	9301      	str	r3, [sp, #4]
 8003fee:	2301      	movs	r3, #1
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ff6:	22b4      	movs	r2, #180	; 0xb4
 8003ff8:	2176      	movs	r1, #118	; 0x76
 8003ffa:	4843      	ldr	r0, [pc, #268]	; (8004108 <checkMap+0x200>)
 8003ffc:	f003 f842 	bl	8007084 <ILI9341_Draw_Text>
				break;
 8004000:	e074      	b.n	80040ec <checkMap+0x1e4>
			case 2:
				ILI9341_Draw_Text("Map 3", 188, 180, WHITE, 1, 0x02e0);
 8004002:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8004006:	9301      	str	r3, [sp, #4]
 8004008:	2301      	movs	r3, #1
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004010:	22b4      	movs	r2, #180	; 0xb4
 8004012:	21bc      	movs	r1, #188	; 0xbc
 8004014:	483d      	ldr	r0, [pc, #244]	; (800410c <checkMap+0x204>)
 8004016:	f003 f835 	bl	8007084 <ILI9341_Draw_Text>
				break;
 800401a:	e067      	b.n	80040ec <checkMap+0x1e4>
			}
		} else {
			ILI9341_Draw_Filled_Rectangle_Coord((mapRectangle[i]).x0,
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	4413      	add	r3, r2
 8004024:	8818      	ldrh	r0, [r3, #0]
					(mapRectangle[i]).y0, (mapRectangle[i]).x1,
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	4413      	add	r3, r2
			ILI9341_Draw_Filled_Rectangle_Coord((mapRectangle[i]).x0,
 800402e:	8859      	ldrh	r1, [r3, #2]
					(mapRectangle[i]).y0, (mapRectangle[i]).x1,
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4413      	add	r3, r2
			ILI9341_Draw_Filled_Rectangle_Coord((mapRectangle[i]).x0,
 8004038:	889c      	ldrh	r4, [r3, #4]
					(mapRectangle[i]).y1,
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	4413      	add	r3, r2
			ILI9341_Draw_Filled_Rectangle_Coord((mapRectangle[i]).x0,
 8004042:	88db      	ldrh	r3, [r3, #6]
 8004044:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004048:	9200      	str	r2, [sp, #0]
 800404a:	4622      	mov	r2, r4
 800404c:	f002 ff22 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
					GREEN);
			ILI9341_Draw_Hollow_Rectangle_Coord((mapRectangle[i]).x0,
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	4413      	add	r3, r2
 8004058:	8818      	ldrh	r0, [r3, #0]
					(mapRectangle[i]).y0, (mapRectangle[i]).x1,
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	4413      	add	r3, r2
			ILI9341_Draw_Hollow_Rectangle_Coord((mapRectangle[i]).x0,
 8004062:	8859      	ldrh	r1, [r3, #2]
					(mapRectangle[i]).y0, (mapRectangle[i]).x1,
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	4413      	add	r3, r2
			ILI9341_Draw_Hollow_Rectangle_Coord((mapRectangle[i]).x0,
 800406c:	889c      	ldrh	r4, [r3, #4]
					(mapRectangle[i]).y1, 0x02e0);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	4413      	add	r3, r2
			ILI9341_Draw_Hollow_Rectangle_Coord((mapRectangle[i]).x0,
 8004076:	88db      	ldrh	r3, [r3, #6]
 8004078:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800407c:	9200      	str	r2, [sp, #0]
 800407e:	4622      	mov	r2, r4
 8004080:	f002 fe87 	bl	8006d92 <ILI9341_Draw_Hollow_Rectangle_Coord>
			switch (i) {
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d023      	beq.n	80040d2 <checkMap+0x1ca>
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b02      	cmp	r3, #2
 800408e:	dc2d      	bgt.n	80040ec <checkMap+0x1e4>
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <checkMap+0x196>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d00d      	beq.n	80040b8 <checkMap+0x1b0>
 800409c:	e026      	b.n	80040ec <checkMap+0x1e4>
			case 0:
				ILI9341_Draw_Text("Map 1", 48, 180, 0x02e0, 1,
 800409e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040a2:	9301      	str	r3, [sp, #4]
 80040a4:	2301      	movs	r3, #1
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 80040ac:	22b4      	movs	r2, #180	; 0xb4
 80040ae:	2130      	movs	r1, #48	; 0x30
 80040b0:	4814      	ldr	r0, [pc, #80]	; (8004104 <checkMap+0x1fc>)
 80040b2:	f002 ffe7 	bl	8007084 <ILI9341_Draw_Text>
				GREEN);
				break;
 80040b6:	e019      	b.n	80040ec <checkMap+0x1e4>
			case 1:
				ILI9341_Draw_Text("Map 2", 118, 180, 0x02e0, 1,
 80040b8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040bc:	9301      	str	r3, [sp, #4]
 80040be:	2301      	movs	r3, #1
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 80040c6:	22b4      	movs	r2, #180	; 0xb4
 80040c8:	2176      	movs	r1, #118	; 0x76
 80040ca:	480f      	ldr	r0, [pc, #60]	; (8004108 <checkMap+0x200>)
 80040cc:	f002 ffda 	bl	8007084 <ILI9341_Draw_Text>
				GREEN);
				break;
 80040d0:	e00c      	b.n	80040ec <checkMap+0x1e4>
			case 2:
				ILI9341_Draw_Text("Map 3", 188, 180, 0x02e0, 1,
 80040d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	2301      	movs	r3, #1
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 80040e0:	22b4      	movs	r2, #180	; 0xb4
 80040e2:	21bc      	movs	r1, #188	; 0xbc
 80040e4:	4809      	ldr	r0, [pc, #36]	; (800410c <checkMap+0x204>)
 80040e6:	f002 ffcd 	bl	8007084 <ILI9341_Draw_Text>
				GREEN);
				break;
 80040ea:	bf00      	nop
	for (int i = 0; i < 3; i++) {
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	3301      	adds	r3, #1
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	f77f af10 	ble.w	8003f1a <checkMap+0x12>
			}
		}
	}
}
 80040fa:	bf00      	nop
 80040fc:	bf00      	nop
 80040fe:	371c      	adds	r7, #28
 8004100:	46bd      	mov	sp, r7
 8004102:	bd90      	pop	{r4, r7, pc}
 8004104:	0800edec 	.word	0x0800edec
 8004108:	0800edf4 	.word	0x0800edf4
 800410c:	0800edfc 	.word	0x0800edfc

08004110 <checkStartGame>:

int checkStartGame(int numPlayerState[], int mapState[], int characterState[],
		int characterState_2[], int displayScreen) {
 8004110:	b480      	push	{r7}
 8004112:	b08b      	sub	sp, #44	; 0x2c
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
	int checkPlay = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < 2; i++) {
 8004122:	2300      	movs	r3, #0
 8004124:	623b      	str	r3, [r7, #32]
 8004126:	e00d      	b.n	8004144 <checkStartGame+0x34>
		if (numPlayerState[i] == 1) {
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d103      	bne.n	800413e <checkStartGame+0x2e>
			checkPlay++;
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	3301      	adds	r3, #1
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800413c:	e005      	b.n	800414a <checkStartGame+0x3a>
	for (int i = 0; i < 2; i++) {
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	3301      	adds	r3, #1
 8004142:	623b      	str	r3, [r7, #32]
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	2b01      	cmp	r3, #1
 8004148:	ddee      	ble.n	8004128 <checkStartGame+0x18>
		}
	}
	for (int i = 0; i < 3; i++) {
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	e00d      	b.n	800416c <checkStartGame+0x5c>
		if (mapState[i] == 1) {
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	4413      	add	r3, r2
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d103      	bne.n	8004166 <checkStartGame+0x56>
			checkPlay++;
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	3301      	adds	r3, #1
 8004162:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8004164:	e005      	b.n	8004172 <checkStartGame+0x62>
	for (int i = 0; i < 3; i++) {
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3301      	adds	r3, #1
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	2b02      	cmp	r3, #2
 8004170:	ddee      	ble.n	8004150 <checkStartGame+0x40>
		}
	}

	for (int i = 0; i < 5; i++) {
 8004172:	2300      	movs	r3, #0
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	e00d      	b.n	8004194 <checkStartGame+0x84>
		if (characterState[i] == 1) {
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	4413      	add	r3, r2
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d103      	bne.n	800418e <checkStartGame+0x7e>
			checkPlay++;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	3301      	adds	r3, #1
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800418c:	e005      	b.n	800419a <checkStartGame+0x8a>
	for (int i = 0; i < 5; i++) {
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	3301      	adds	r3, #1
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2b04      	cmp	r3, #4
 8004198:	ddee      	ble.n	8004178 <checkStartGame+0x68>
		}
	}
	if (numPlayerState[1]) {
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3304      	adds	r3, #4
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d013      	beq.n	80041cc <checkStartGame+0xbc>
		for (int i = 0; i < 5; i++) {
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	e00d      	b.n	80041c6 <checkStartGame+0xb6>
			if (characterState_2[i] == 1) {
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	4413      	add	r3, r2
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d103      	bne.n	80041c0 <checkStartGame+0xb0>
				checkPlay++;
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	3301      	adds	r3, #1
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80041be:	e005      	b.n	80041cc <checkStartGame+0xbc>
		for (int i = 0; i < 5; i++) {
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	3301      	adds	r3, #1
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	ddee      	ble.n	80041aa <checkStartGame+0x9a>
			}
		}
	}

	if (numPlayerState[0] && checkPlay == 3) {
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d006      	beq.n	80041e2 <checkStartGame+0xd2>
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d103      	bne.n	80041e2 <checkStartGame+0xd2>
		displayScreen = 2;
 80041da:	2302      	movs	r3, #2
 80041dc:	633b      	str	r3, [r7, #48]	; 0x30
		return 1;
 80041de:	2301      	movs	r3, #1
 80041e0:	e00e      	b.n	8004200 <checkStartGame+0xf0>
	} else if (numPlayerState[1] && checkPlay == 4) {
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3304      	adds	r3, #4
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d006      	beq.n	80041fa <checkStartGame+0xea>
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d103      	bne.n	80041fa <checkStartGame+0xea>
		displayScreen = 2;
 80041f2:	2302      	movs	r3, #2
 80041f4:	633b      	str	r3, [r7, #48]	; 0x30
		return 1;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e002      	b.n	8004200 <checkStartGame+0xf0>
	} else {
		checkPlay = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
		return 0;
 80041fe:	2300      	movs	r3, #0
	}
}
 8004200:	4618      	mov	r0, r3
 8004202:	372c      	adds	r7, #44	; 0x2c
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <setting_winPage>:

void setting_winPage() {
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
 8004212:	af02      	add	r7, sp, #8
	int numPlayerState[2] = { 0, 0 };
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 800421a:	2300      	movs	r3, #0
 800421c:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
	int characterState[5] = { 0, 0, 0, 0, 0 };
 8004220:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	60da      	str	r2, [r3, #12]
 800422e:	611a      	str	r2, [r3, #16]
	int characterState_2[5] = { 0, 0, 0, 0, 0 };
 8004230:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	605a      	str	r2, [r3, #4]
 800423a:	609a      	str	r2, [r3, #8]
 800423c:	60da      	str	r2, [r3, #12]
 800423e:	611a      	str	r2, [r3, #16]
	int mapState[3] = { 0, 0, 0 };
 8004240:	2300      	movs	r3, #0
 8004242:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8004246:	2300      	movs	r3, #0
 8004248:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800424c:	2300      	movs	r3, #0
 800424e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
	int displayScreen = 0;
 8004252:	2300      	movs	r3, #0
 8004254:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
	int mapID = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
	int stateWin = 3;
 800425e:	2303      	movs	r3, #3
 8004260:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c

	Rectangle numPlayerRectangle[2] = { };
 8004264:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	60da      	str	r2, [r3, #12]
	Rectangle charRectangle[5] = { };
 8004272:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8004276:	2228      	movs	r2, #40	; 0x28
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f008 fdae 	bl	800cddc <memset>
	Rectangle charHighlightRectangle[5] = { };
 8004280:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8004284:	2228      	movs	r2, #40	; 0x28
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f008 fda7 	bl	800cddc <memset>
	Rectangle mapRectangle[3] = { };
 800428e:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	609a      	str	r2, [r3, #8]
 800429a:	60da      	str	r2, [r3, #12]
 800429c:	611a      	str	r2, [r3, #16]
 800429e:	615a      	str	r2, [r3, #20]

	uint16_t xPos = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
	uint16_t yPos = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	f8a7 32c4 	strh.w	r3, [r7, #708]	; 0x2c4
//setting container
	Rectangle c1 = { 10, 50, 250, 90 }; //size: 40x240
 80042ac:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80042b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042b4:	4ad6      	ldr	r2, [pc, #856]	; (8004610 <setting_winPage+0x404>)
 80042b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042ba:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle c2 = { 10, 100, 250, 155 }; //size: 55x240
 80042be:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80042c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042c6:	4ad3      	ldr	r2, [pc, #844]	; (8004614 <setting_winPage+0x408>)
 80042c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042cc:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle c3 = { 10, 160, 250, 205 }; //size: 40x240
 80042d0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80042d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042d8:	4acf      	ldr	r2, [pc, #828]	; (8004618 <setting_winPage+0x40c>)
 80042da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042de:	e883 0003 	stmia.w	r3, {r0, r1}
//setting Button
	Rectangle bPlayer_1 = { 45, 65, 125, 85 }; //size: 80x20
 80042e2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80042e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80042ea:	4acc      	ldr	r2, [pc, #816]	; (800461c <setting_winPage+0x410>)
 80042ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042f0:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle bPlayer_2 = { 135, 65, 215, 85 }; //size: 80x20
 80042f4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80042f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80042fc:	4ac8      	ldr	r2, [pc, #800]	; (8004620 <setting_winPage+0x414>)
 80042fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004302:	e883 0003 	stmia.w	r3, {r0, r1}
//setting character
	Rectangle ch1 = { 30, 115, 62, 147 }; //size: 32x32
 8004306:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800430a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800430e:	4ac5      	ldr	r2, [pc, #788]	; (8004624 <setting_winPage+0x418>)
 8004310:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004314:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle ch2 = { 72, 115, 104, 147 }; //size: 32x32
 8004318:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800431c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004320:	4ac1      	ldr	r2, [pc, #772]	; (8004628 <setting_winPage+0x41c>)
 8004322:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004326:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle ch3 = { 114, 115, 146, 147 }; //size: 32x32
 800432a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800432e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004332:	4abe      	ldr	r2, [pc, #760]	; (800462c <setting_winPage+0x420>)
 8004334:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004338:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle ch4 = { 156, 115, 188, 147 }; //size: 32x32
 800433c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004340:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004344:	4aba      	ldr	r2, [pc, #744]	; (8004630 <setting_winPage+0x424>)
 8004346:	e892 0003 	ldmia.w	r2, {r0, r1}
 800434a:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle ch5 = { 198, 115, 230, 147 }; //size: 32x32
 800434e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004352:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004356:	4ab7      	ldr	r2, [pc, #732]	; (8004634 <setting_winPage+0x428>)
 8004358:	e892 0003 	ldmia.w	r2, {r0, r1}
 800435c:	e883 0003 	stmia.w	r3, {r0, r1}
//setting hilight when choosen
	Rectangle hil_ch1 = { 28, 113, 64, 149 }; //size: 36x36
 8004360:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004364:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004368:	4ab3      	ldr	r2, [pc, #716]	; (8004638 <setting_winPage+0x42c>)
 800436a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800436e:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle hil_ch2 = { 70, 113, 106, 149 }; //size: 36x36
 8004372:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004376:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800437a:	4ab0      	ldr	r2, [pc, #704]	; (800463c <setting_winPage+0x430>)
 800437c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004380:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle hil_ch3 = { 112, 113, 148, 149 }; //size: 36x36
 8004384:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004388:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800438c:	4aac      	ldr	r2, [pc, #688]	; (8004640 <setting_winPage+0x434>)
 800438e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004392:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle hil_ch4 = { 154, 113, 190, 149 }; //size: 36x36
 8004396:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800439a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800439e:	4aa9      	ldr	r2, [pc, #676]	; (8004644 <setting_winPage+0x438>)
 80043a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043a4:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle hil_ch5 = { 196, 113, 232, 149 }; //size: 36x36
 80043a8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80043ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80043b0:	4aa5      	ldr	r2, [pc, #660]	; (8004648 <setting_winPage+0x43c>)
 80043b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043b6:	e883 0003 	stmia.w	r3, {r0, r1}
//setting Button
	Rectangle bMap_1 = { 30, 175, 90, 195 }; //size: 60x20
 80043ba:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80043be:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80043c2:	4aa2      	ldr	r2, [pc, #648]	; (800464c <setting_winPage+0x440>)
 80043c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043c8:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle bMap_2 = { 100, 175, 160, 195 }; //size: 60x20
 80043cc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80043d0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80043d4:	4a9e      	ldr	r2, [pc, #632]	; (8004650 <setting_winPage+0x444>)
 80043d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043da:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle bMap_3 = { 170, 175, 230, 195 }; //size: 60x20
 80043de:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80043e2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80043e6:	4a9b      	ldr	r2, [pc, #620]	; (8004654 <setting_winPage+0x448>)
 80043e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043ec:	e883 0003 	stmia.w	r3, {r0, r1}

	Rectangle bPlay = { 90, 210, 170, 230 }; //size: 80x20
 80043f0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80043f4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80043f8:	4a97      	ldr	r2, [pc, #604]	; (8004658 <setting_winPage+0x44c>)
 80043fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043fe:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle bNext = { 230, 210, 250, 230 }; //size: 20x20
 8004402:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004406:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800440a:	4a94      	ldr	r2, [pc, #592]	; (800465c <setting_winPage+0x450>)
 800440c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004410:	e883 0003 	stmia.w	r3, {r0, r1}
	Rectangle bBack = { 10, 210, 30, 230 }; //size: 20x20
 8004414:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004418:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800441c:	4a90      	ldr	r2, [pc, #576]	; (8004660 <setting_winPage+0x454>)
 800441e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004422:	e883 0003 	stmia.w	r3, {r0, r1}

	const uint8_t SCREEN_ROTATION = SCREEN_HORIZONTAL_1;
 8004426:	2301      	movs	r3, #1
 8004428:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
	ILI9341_Set_Rotation(SCREEN_ROTATION);
 800442c:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8004430:	4618      	mov	r0, r3
 8004432:	f002 ff27 	bl	8007284 <ILI9341_Set_Rotation>
	Image characterYellowList[5] = { playerIcon1Yellow_32, playerIcon2Yellow_32,
 8004436:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800443a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800443e:	4a89      	ldr	r2, [pc, #548]	; (8004664 <setting_winPage+0x458>)
 8004440:	ca07      	ldmia	r2, {r0, r1, r2}
 8004442:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004446:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800444a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800444e:	4a86      	ldr	r2, [pc, #536]	; (8004668 <setting_winPage+0x45c>)
 8004450:	330c      	adds	r3, #12
 8004452:	ca07      	ldmia	r2, {r0, r1, r2}
 8004454:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004458:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800445c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004460:	4a82      	ldr	r2, [pc, #520]	; (800466c <setting_winPage+0x460>)
 8004462:	3318      	adds	r3, #24
 8004464:	ca07      	ldmia	r2, {r0, r1, r2}
 8004466:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800446a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800446e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004472:	4a7f      	ldr	r2, [pc, #508]	; (8004670 <setting_winPage+0x464>)
 8004474:	3324      	adds	r3, #36	; 0x24
 8004476:	ca07      	ldmia	r2, {r0, r1, r2}
 8004478:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800447c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004480:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004484:	4a7b      	ldr	r2, [pc, #492]	; (8004674 <setting_winPage+0x468>)
 8004486:	3330      	adds	r3, #48	; 0x30
 8004488:	ca07      	ldmia	r2, {r0, r1, r2}
 800448a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			playerIcon3Yellow_32, playerIcon4Yellow_32, playerIcon5Yellow_32 };
	Image characterOrangeList[5] = { playerIcon1Orange_32, playerIcon2Orange_32,
 800448e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004492:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8004496:	4a78      	ldr	r2, [pc, #480]	; (8004678 <setting_winPage+0x46c>)
 8004498:	ca07      	ldmia	r2, {r0, r1, r2}
 800449a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800449e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80044a2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80044a6:	4a75      	ldr	r2, [pc, #468]	; (800467c <setting_winPage+0x470>)
 80044a8:	330c      	adds	r3, #12
 80044aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80044ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80044b0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80044b4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80044b8:	4a71      	ldr	r2, [pc, #452]	; (8004680 <setting_winPage+0x474>)
 80044ba:	3318      	adds	r3, #24
 80044bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80044be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80044c2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80044c6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80044ca:	4a6e      	ldr	r2, [pc, #440]	; (8004684 <setting_winPage+0x478>)
 80044cc:	3324      	adds	r3, #36	; 0x24
 80044ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80044d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80044d4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80044d8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80044dc:	4a6a      	ldr	r2, [pc, #424]	; (8004688 <setting_winPage+0x47c>)
 80044de:	3330      	adds	r3, #48	; 0x30
 80044e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80044e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			playerIcon3Orange_32, playerIcon4Orange_32, playerIcon5Orange_32 };
	Image character112List[5] = { playerIcon1_112, playerIcon2_112,
 80044e6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80044ea:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044ee:	4a67      	ldr	r2, [pc, #412]	; (800468c <setting_winPage+0x480>)
 80044f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80044f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80044f6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80044fa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044fe:	4a64      	ldr	r2, [pc, #400]	; (8004690 <setting_winPage+0x484>)
 8004500:	330c      	adds	r3, #12
 8004502:	ca07      	ldmia	r2, {r0, r1, r2}
 8004504:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004508:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800450c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004510:	4a60      	ldr	r2, [pc, #384]	; (8004694 <setting_winPage+0x488>)
 8004512:	3318      	adds	r3, #24
 8004514:	ca07      	ldmia	r2, {r0, r1, r2}
 8004516:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800451a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800451e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004522:	4a5d      	ldr	r2, [pc, #372]	; (8004698 <setting_winPage+0x48c>)
 8004524:	3324      	adds	r3, #36	; 0x24
 8004526:	ca07      	ldmia	r2, {r0, r1, r2}
 8004528:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800452c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004530:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004534:	4a59      	ldr	r2, [pc, #356]	; (800469c <setting_winPage+0x490>)
 8004536:	3330      	adds	r3, #48	; 0x30
 8004538:	ca07      	ldmia	r2, {r0, r1, r2}
 800453a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			playerIcon3_112, playerIcon4_112, playerIcon5_112 };
	Image character56List[5] = { playerIcon1_56, playerIcon2_56,
 800453e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004542:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8004546:	4a56      	ldr	r2, [pc, #344]	; (80046a0 <setting_winPage+0x494>)
 8004548:	ca07      	ldmia	r2, {r0, r1, r2}
 800454a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800454e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004552:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8004556:	4a53      	ldr	r2, [pc, #332]	; (80046a4 <setting_winPage+0x498>)
 8004558:	330c      	adds	r3, #12
 800455a:	ca07      	ldmia	r2, {r0, r1, r2}
 800455c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004560:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004564:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8004568:	4a4f      	ldr	r2, [pc, #316]	; (80046a8 <setting_winPage+0x49c>)
 800456a:	3318      	adds	r3, #24
 800456c:	ca07      	ldmia	r2, {r0, r1, r2}
 800456e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004572:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004576:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800457a:	4a4c      	ldr	r2, [pc, #304]	; (80046ac <setting_winPage+0x4a0>)
 800457c:	3324      	adds	r3, #36	; 0x24
 800457e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004580:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004584:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004588:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800458c:	4a48      	ldr	r2, [pc, #288]	; (80046b0 <setting_winPage+0x4a4>)
 800458e:	3330      	adds	r3, #48	; 0x30
 8004590:	ca07      	ldmia	r2, {r0, r1, r2}
 8004592:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while (1) {

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		sprintf(str,"value :%d endFlag:%b\n",displayScreen,endGameFlag);
 8004596:	4b47      	ldr	r3, [pc, #284]	; (80046b4 <setting_winPage+0x4a8>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 800459e:	4946      	ldr	r1, [pc, #280]	; (80046b8 <setting_winPage+0x4ac>)
 80045a0:	4846      	ldr	r0, [pc, #280]	; (80046bc <setting_winPage+0x4b0>)
 80045a2:	f008 fadf 	bl	800cb64 <siprintf>
		printOut(str);
 80045a6:	4845      	ldr	r0, [pc, #276]	; (80046bc <setting_winPage+0x4b0>)
 80045a8:	f002 fb16 	bl	8006bd8 <printOut>
		if (displayScreen == 0) {
 80045ac:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f040 8510 	bne.w	8004fd6 <setting_winPage+0xdca>
			drawPos.x = 0;
 80045b6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80045ba:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80045be:	2200      	movs	r2, #0
 80045c0:	801a      	strh	r2, [r3, #0]
			drawPos.y = 0;
 80045c2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80045c6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80045ca:	2200      	movs	r2, #0
 80045cc:	805a      	strh	r2, [r3, #2]
			settingPage_1.drawPoint = drawPos;
 80045ce:	4a3c      	ldr	r2, [pc, #240]	; (80046c0 <setting_winPage+0x4b4>)
 80045d0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80045d4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6053      	str	r3, [r2, #4]
			drawImageAtPoint(settingPage_1, SCREEN_ROTATION);
 80045dc:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80045e0:	4a37      	ldr	r2, [pc, #220]	; (80046c0 <setting_winPage+0x4b4>)
 80045e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80045e4:	f7ff fb1e 	bl	8003c24 <drawImageAtPoint>
			ILI9341_Draw_Text("Bomber Man", 10, 10, BLACK, 4, WHITE);
 80045e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	2304      	movs	r3, #4
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	2300      	movs	r3, #0
 80045f4:	220a      	movs	r2, #10
 80045f6:	210a      	movs	r1, #10
 80045f8:	4832      	ldr	r0, [pc, #200]	; (80046c4 <setting_winPage+0x4b8>)
 80045fa:	f002 fd43 	bl	8007084 <ILI9341_Draw_Text>
			drawPos.x = 157;
 80045fe:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004602:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8004606:	229d      	movs	r2, #157	; 0x9d
 8004608:	801a      	strh	r2, [r3, #0]
			drawPos.y = 20;
 800460a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800460e:	e05b      	b.n	80046c8 <setting_winPage+0x4bc>
 8004610:	0800eee0 	.word	0x0800eee0
 8004614:	0800eee8 	.word	0x0800eee8
 8004618:	0800eef0 	.word	0x0800eef0
 800461c:	0800eef8 	.word	0x0800eef8
 8004620:	0800ef00 	.word	0x0800ef00
 8004624:	0800ef08 	.word	0x0800ef08
 8004628:	0800ef10 	.word	0x0800ef10
 800462c:	0800ef18 	.word	0x0800ef18
 8004630:	0800ef20 	.word	0x0800ef20
 8004634:	0800ef28 	.word	0x0800ef28
 8004638:	0800ef30 	.word	0x0800ef30
 800463c:	0800ef38 	.word	0x0800ef38
 8004640:	0800ef40 	.word	0x0800ef40
 8004644:	0800ef48 	.word	0x0800ef48
 8004648:	0800ef50 	.word	0x0800ef50
 800464c:	0800ef58 	.word	0x0800ef58
 8004650:	0800ef60 	.word	0x0800ef60
 8004654:	0800ef68 	.word	0x0800ef68
 8004658:	0800ef70 	.word	0x0800ef70
 800465c:	0800ef78 	.word	0x0800ef78
 8004660:	0800ef80 	.word	0x0800ef80
 8004664:	20000000 	.word	0x20000000
 8004668:	2000000c 	.word	0x2000000c
 800466c:	20000018 	.word	0x20000018
 8004670:	20000024 	.word	0x20000024
 8004674:	20000030 	.word	0x20000030
 8004678:	2000003c 	.word	0x2000003c
 800467c:	20000048 	.word	0x20000048
 8004680:	20000054 	.word	0x20000054
 8004684:	20000060 	.word	0x20000060
 8004688:	2000006c 	.word	0x2000006c
 800468c:	200000c0 	.word	0x200000c0
 8004690:	200000cc 	.word	0x200000cc
 8004694:	200000d8 	.word	0x200000d8
 8004698:	200000e4 	.word	0x200000e4
 800469c:	200000f0 	.word	0x200000f0
 80046a0:	20000084 	.word	0x20000084
 80046a4:	20000090 	.word	0x20000090
 80046a8:	2000009c 	.word	0x2000009c
 80046ac:	200000a8 	.word	0x200000a8
 80046b0:	200000b4 	.word	0x200000b4
 80046b4:	20000120 	.word	0x20000120
 80046b8:	0800ee04 	.word	0x0800ee04
 80046bc:	20001800 	.word	0x20001800
 80046c0:	200000fc 	.word	0x200000fc
 80046c4:	0800ee1c 	.word	0x0800ee1c
 80046c8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80046cc:	2214      	movs	r2, #20
 80046ce:	805a      	strh	r2, [r3, #2]
			bombIcon_16.drawPoint = drawPos;
 80046d0:	4adb      	ldr	r2, [pc, #876]	; (8004a40 <setting_winPage+0x834>)
 80046d2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80046d6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6053      	str	r3, [r2, #4]
			drawImageAtPoint(bombIcon_16, SCREEN_ROTATION);
 80046de:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80046e2:	4ad7      	ldr	r2, [pc, #860]	; (8004a40 <setting_winPage+0x834>)
 80046e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80046e6:	f7ff fa9d 	bl	8003c24 <drawImageAtPoint>
			//draw container
			ILI9341_Draw_Filled_Rectangle_Coord(c1.x0, c1.y0, c1.x1, c1.y1,
 80046ea:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80046ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046f2:	8818      	ldrh	r0, [r3, #0]
 80046f4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80046f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046fc:	8859      	ldrh	r1, [r3, #2]
 80046fe:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004706:	889a      	ldrh	r2, [r3, #4]
 8004708:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800470c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004710:	88db      	ldrh	r3, [r3, #6]
 8004712:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8004716:	9400      	str	r4, [sp, #0]
 8004718:	f002 fbbc 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
			CYAN);
			ILI9341_Draw_Filled_Rectangle_Coord(c2.x0, c2.y0, c2.x1, c2.y1,
 800471c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004720:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004724:	8818      	ldrh	r0, [r3, #0]
 8004726:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800472a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800472e:	8859      	ldrh	r1, [r3, #2]
 8004730:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004734:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004738:	889a      	ldrh	r2, [r3, #4]
 800473a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800473e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004742:	88db      	ldrh	r3, [r3, #6]
 8004744:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8004748:	9400      	str	r4, [sp, #0]
 800474a:	f002 fba3 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
			YELLOW);
			ILI9341_Draw_Filled_Rectangle_Coord(c3.x0, c3.y0, c3.x1, c3.y1,
 800474e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004752:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004756:	8818      	ldrh	r0, [r3, #0]
 8004758:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800475c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004760:	8859      	ldrh	r1, [r3, #2]
 8004762:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004766:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800476a:	889a      	ldrh	r2, [r3, #4]
 800476c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004770:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004774:	88db      	ldrh	r3, [r3, #6]
 8004776:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 800477a:	9400      	str	r4, [sp, #0]
 800477c:	f002 fb8a 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
			GREEN);
			//draw header text
			ILI9341_Draw_Text("Choose Number Of Players", 60, 53, BLACK, 1,
 8004780:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004784:	9301      	str	r3, [sp, #4]
 8004786:	2301      	movs	r3, #1
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	2300      	movs	r3, #0
 800478c:	2235      	movs	r2, #53	; 0x35
 800478e:	213c      	movs	r1, #60	; 0x3c
 8004790:	48ac      	ldr	r0, [pc, #688]	; (8004a44 <setting_winPage+0x838>)
 8004792:	f002 fc77 	bl	8007084 <ILI9341_Draw_Text>
			CYAN);
			ILI9341_Draw_Text("Choose Character", 80, 103, BLACK, 1, YELLOW);
 8004796:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800479a:	9301      	str	r3, [sp, #4]
 800479c:	2301      	movs	r3, #1
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	2300      	movs	r3, #0
 80047a2:	2267      	movs	r2, #103	; 0x67
 80047a4:	2150      	movs	r1, #80	; 0x50
 80047a6:	48a8      	ldr	r0, [pc, #672]	; (8004a48 <setting_winPage+0x83c>)
 80047a8:	f002 fc6c 	bl	8007084 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("Choose Map", 100, 163, BLACK, 1, GREEN);
 80047ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80047b0:	9301      	str	r3, [sp, #4]
 80047b2:	2301      	movs	r3, #1
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	2300      	movs	r3, #0
 80047b8:	22a3      	movs	r2, #163	; 0xa3
 80047ba:	2164      	movs	r1, #100	; 0x64
 80047bc:	48a3      	ldr	r0, [pc, #652]	; (8004a4c <setting_winPage+0x840>)
 80047be:	f002 fc61 	bl	8007084 <ILI9341_Draw_Text>

			ILI9341_Draw_Text("1 Player", 62, 70, 0x843f, 1, CYAN);
 80047c2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	2301      	movs	r3, #1
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	f248 433f 	movw	r3, #33855	; 0x843f
 80047d0:	2246      	movs	r2, #70	; 0x46
 80047d2:	213e      	movs	r1, #62	; 0x3e
 80047d4:	489e      	ldr	r0, [pc, #632]	; (8004a50 <setting_winPage+0x844>)
 80047d6:	f002 fc55 	bl	8007084 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("2 Player", 152, 70, 0x843f, 1, CYAN);
 80047da:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80047de:	9301      	str	r3, [sp, #4]
 80047e0:	2301      	movs	r3, #1
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	f248 433f 	movw	r3, #33855	; 0x843f
 80047e8:	2246      	movs	r2, #70	; 0x46
 80047ea:	2198      	movs	r1, #152	; 0x98
 80047ec:	4899      	ldr	r0, [pc, #612]	; (8004a54 <setting_winPage+0x848>)
 80047ee:	f002 fc49 	bl	8007084 <ILI9341_Draw_Text>
			numPlayerRectangle[0] = bPlayer_1;
 80047f2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80047f6:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80047fa:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80047fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004802:	e883 0003 	stmia.w	r3, {r0, r1}
			numPlayerRectangle[1] = bPlayer_2;
 8004806:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800480a:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 800480e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8004812:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004816:	e883 0003 	stmia.w	r3, {r0, r1}

			charRectangle[0] = ch1;
 800481a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800481e:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8004822:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8004826:	e892 0003 	ldmia.w	r2, {r0, r1}
 800482a:	e883 0003 	stmia.w	r3, {r0, r1}
			charRectangle[1] = ch2;
 800482e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004832:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8004836:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800483a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800483e:	e883 0003 	stmia.w	r3, {r0, r1}
			charRectangle[2] = ch3;
 8004842:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004846:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800484a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800484e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004852:	e883 0003 	stmia.w	r3, {r0, r1}
			charRectangle[3] = ch4;
 8004856:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800485a:	f5a3 72a2 	sub.w	r2, r3, #324	; 0x144
 800485e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8004862:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004866:	e883 0003 	stmia.w	r3, {r0, r1}
			charRectangle[4] = ch5;
 800486a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800486e:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8004872:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8004876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800487a:	e883 0003 	stmia.w	r3, {r0, r1}
			//picture
			for (int i = 0;
 800487e:	2300      	movs	r3, #0
 8004880:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8004884:	e041      	b.n	800490a <setting_winPage+0x6fe>
					i
							< sizeof(characterYellowList)
									/ sizeof(characterYellowList[0]); i++) {
				drawPos.x = charRectangle[i].x0;
 8004886:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004890:	443b      	add	r3, r7
 8004892:	f833 2cbc 	ldrh.w	r2, [r3, #-188]
 8004896:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800489a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800489e:	801a      	strh	r2, [r3, #0]
				drawPos.y = charRectangle[i].y0;
 80048a0:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80048aa:	443b      	add	r3, r7
 80048ac:	f833 2cba 	ldrh.w	r2, [r3, #-186]
 80048b0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80048b4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80048b8:	805a      	strh	r2, [r3, #2]
				characterYellowList[i].drawPoint = drawPos;
 80048ba:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80048be:	f5a3 71f0 	sub.w	r1, r3, #480	; 0x1e0
 80048c2:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80048c6:	4613      	mov	r3, r2
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	3304      	adds	r3, #4
 80048d2:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80048d6:	f5a2 7227 	sub.w	r2, r2, #668	; 0x29c
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	601a      	str	r2, [r3, #0]
				drawImageAtPoint(characterYellowList[i], SCREEN_ROTATION);
 80048de:	f897 028b 	ldrb.w	r0, [r7, #651]	; 0x28b
 80048e2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80048e6:	f5a3 71f0 	sub.w	r1, r3, #480	; 0x1e0
 80048ea:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80048ee:	4613      	mov	r3, r2
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	18ca      	adds	r2, r1, r3
 80048f8:	4603      	mov	r3, r0
 80048fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80048fc:	f7ff f992 	bl	8003c24 <drawImageAtPoint>
									/ sizeof(characterYellowList[0]); i++) {
 8004900:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8004904:	3301      	adds	r3, #1
 8004906:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
							< sizeof(characterYellowList)
 800490a:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800490e:	2b04      	cmp	r3, #4
 8004910:	d9b9      	bls.n	8004886 <setting_winPage+0x67a>
			}

			ILI9341_Draw_Filled_Rectangle_Coord(bPlay.x0, bPlay.y0, bPlay.x1,
 8004912:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004916:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800491a:	8818      	ldrh	r0, [r3, #0]
 800491c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004920:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004924:	8859      	ldrh	r1, [r3, #2]
 8004926:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800492a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800492e:	889a      	ldrh	r2, [r3, #4]
 8004930:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004934:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004938:	88db      	ldrh	r3, [r3, #6]
 800493a:	f64f 041f 	movw	r4, #63519	; 0xf81f
 800493e:	9400      	str	r4, [sp, #0]
 8004940:	f002 faa8 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
					bPlay.y1, PINK);
			ILI9341_Draw_Text("PLAY", 108, 211, WHITE, 2, PINK);
 8004944:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	2302      	movs	r3, #2
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004952:	22d3      	movs	r2, #211	; 0xd3
 8004954:	216c      	movs	r1, #108	; 0x6c
 8004956:	4840      	ldr	r0, [pc, #256]	; (8004a58 <setting_winPage+0x84c>)
 8004958:	f002 fb94 	bl	8007084 <ILI9341_Draw_Text>
			charHighlightRectangle[0] = hil_ch1;
 800495c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004960:	f5a3 72aa 	sub.w	r2, r3, #340	; 0x154
 8004964:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8004968:	e892 0003 	ldmia.w	r2, {r0, r1}
 800496c:	e883 0003 	stmia.w	r3, {r0, r1}
			charHighlightRectangle[1] = hil_ch2;
 8004970:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004974:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 8004978:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800497c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004980:	e883 0003 	stmia.w	r3, {r0, r1}
			charHighlightRectangle[2] = hil_ch3;
 8004984:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004988:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800498c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8004990:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004994:	e883 0003 	stmia.w	r3, {r0, r1}
			charHighlightRectangle[3] = hil_ch4;
 8004998:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800499c:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 80049a0:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80049a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049a8:	e883 0003 	stmia.w	r3, {r0, r1}
			charHighlightRectangle[4] = hil_ch5;
 80049ac:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80049b0:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 80049b4:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80049b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049bc:	e883 0003 	stmia.w	r3, {r0, r1}

			mapRectangle[0] = bMap_1;
 80049c0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80049c4:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 80049c8:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80049cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049d0:	e883 0003 	stmia.w	r3, {r0, r1}
			mapRectangle[1] = bMap_2;
 80049d4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80049d8:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 80049dc:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80049e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049e4:	e883 0003 	stmia.w	r3, {r0, r1}
			mapRectangle[2] = bMap_3;
 80049e8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80049ec:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 80049f0:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80049f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049f8:	e883 0003 	stmia.w	r3, {r0, r1}
			int player2_character;
			//play & next button
			//		Rectangle bPlay = { 90, 210, 170, 230 }; //size: 80x20
			while (1) {
				if (TP_Touchpad_Pressed()) {
 80049fc:	f003 f956 	bl	8007cac <TP_Touchpad_Pressed>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d04c      	beq.n	8004aa0 <setting_winPage+0x894>
					uint16_t position_array[2];

					if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 8004a06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f003 f88c 	bl	8007b28 <TP_Read_Coordinates>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d136      	bne.n	8004a84 <setting_winPage+0x878>
						if (SCREEN_ROTATION == SCREEN_HORIZONTAL_1) {
 8004a16:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d11e      	bne.n	8004a5c <setting_winPage+0x850>
							xPos = position_array[1];
 8004a1e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004a22:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8004a26:	885b      	ldrh	r3, [r3, #2]
 8004a28:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
							yPos = SCREEN_HEIGHT - position_array[0];
 8004a2c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004a30:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8004a3a:	f8a7 32c4 	strh.w	r3, [r7, #708]	; 0x2c4
 8004a3e:	e021      	b.n	8004a84 <setting_winPage+0x878>
 8004a40:	20000078 	.word	0x20000078
 8004a44:	0800ee28 	.word	0x0800ee28
 8004a48:	0800ee44 	.word	0x0800ee44
 8004a4c:	0800ee58 	.word	0x0800ee58
 8004a50:	0800ee64 	.word	0x0800ee64
 8004a54:	0800ee70 	.word	0x0800ee70
 8004a58:	0800ee7c 	.word	0x0800ee7c
						} else if (SCREEN_ROTATION == SCREEN_HORIZONTAL_2) {
 8004a5c:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d10f      	bne.n	8004a84 <setting_winPage+0x878>
							xPos = SCREEN_WIDTH - position_array[1];
 8004a64:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004a68:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8004a6c:	885b      	ldrh	r3, [r3, #2]
 8004a6e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8004a72:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
							yPos = position_array[0];
 8004a76:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004a7a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	f8a7 32c4 	strh.w	r3, [r7, #708]	; 0x2c4
						}
					}
					cursor.x = xPos;
 8004a84:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004a88:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8004a8c:	f8b7 22c6 	ldrh.w	r2, [r7, #710]	; 0x2c6
 8004a90:	801a      	strh	r2, [r3, #0]
					cursor.y = yPos;
 8004a92:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004a96:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8004a9a:	f8b7 22c4 	ldrh.w	r2, [r7, #708]	; 0x2c4
 8004a9e:	805a      	strh	r2, [r3, #2]
				}
				for (int i = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8004aa6:	e139      	b.n	8004d1c <setting_winPage+0xb10>
						i < sizeof(numPlayerState) / sizeof(numPlayerState[0]);
						i++) {
					if (isTouchWithinRectangle(numPlayerRectangle[i], cursor)) {
 8004aa8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004aac:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8004ab0:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004aba:	443b      	add	r3, r7
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	3b94      	subs	r3, #148	; 0x94
 8004ac0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ac4:	f7ff f9fe 	bl	8003ec4 <isTouchWithinRectangle>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d016      	beq.n	8004afc <setting_winPage+0x8f0>
						numPlayerState[i] = 1;
 8004ace:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004ad8:	443b      	add	r3, r7
 8004ada:	2201      	movs	r2, #1
 8004adc:	f843 2c50 	str.w	r2, [r3, #-80]
						numPlayerState[(i == 0) ? 1 : 0] = 0;
 8004ae0:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf0c      	ite	eq
 8004ae8:	2301      	moveq	r3, #1
 8004aea:	2300      	movne	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004af4:	443b      	add	r3, r7
 8004af6:	2200      	movs	r2, #0
 8004af8:	f843 2c50 	str.w	r2, [r3, #-80]
					}
					if (numPlayerState[i]) {
 8004afc:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004b06:	443b      	add	r3, r7
 8004b08:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 809c 	beq.w	8004c4a <setting_winPage+0xa3e>
						ILI9341_Draw_Filled_Rectangle_Coord(
 8004b12:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004b1c:	443b      	add	r3, r7
 8004b1e:	f833 0c94 	ldrh.w	r0, [r3, #-148]
 8004b22:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004b2c:	443b      	add	r3, r7
 8004b2e:	f833 1c92 	ldrh.w	r1, [r3, #-146]
 8004b32:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004b3c:	443b      	add	r3, r7
 8004b3e:	f833 2c90 	ldrh.w	r2, [r3, #-144]
 8004b42:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004b4c:	443b      	add	r3, r7
 8004b4e:	f833 3c8e 	ldrh.w	r3, [r3, #-142]
 8004b52:	241f      	movs	r4, #31
 8004b54:	9400      	str	r4, [sp, #0]
 8004b56:	f002 f99d 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
								(numPlayerRectangle[i]).x0,
								(numPlayerRectangle[i]).y0,
								(numPlayerRectangle[i]).x1,
								(numPlayerRectangle[i]).y1, BLUE);
						if (i == 0) {
 8004b5a:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d167      	bne.n	8004c32 <setting_winPage+0xa26>
							ILI9341_Draw_Text("1 Player", 62, 70, WHITE, 1,
 8004b62:	231f      	movs	r3, #31
 8004b64:	9301      	str	r3, [sp, #4]
 8004b66:	2301      	movs	r3, #1
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b6e:	2246      	movs	r2, #70	; 0x46
 8004b70:	213e      	movs	r1, #62	; 0x3e
 8004b72:	48da      	ldr	r0, [pc, #872]	; (8004edc <setting_winPage+0xcd0>)
 8004b74:	f002 fa86 	bl	8007084 <ILI9341_Draw_Text>
							BLUE);
							for (int i = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8004b7e:	e00d      	b.n	8004b9c <setting_winPage+0x990>
									i
											< sizeof(characterState_2)
													/ sizeof(characterState_2[0]);
									i++) {
								characterState_2[i] = 0;
 8004b80:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004b8a:	443b      	add	r3, r7
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f843 2c78 	str.w	r2, [r3, #-120]
									i++) {
 8004b92:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8004b96:	3301      	adds	r3, #1
 8004b98:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
											< sizeof(characterState_2)
 8004b9c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d9ed      	bls.n	8004b80 <setting_winPage+0x974>
							}
							ILI9341_Draw_Hollow_Rectangle_Coord(
 8004ba4:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004bae:	443b      	add	r3, r7
 8004bb0:	f833 0ce4 	ldrh.w	r0, [r3, #-228]
 8004bb4:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004bbe:	443b      	add	r3, r7
 8004bc0:	f833 1ce2 	ldrh.w	r1, [r3, #-226]
 8004bc4:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004bce:	443b      	add	r3, r7
 8004bd0:	f833 2ce0 	ldrh.w	r2, [r3, #-224]
 8004bd4:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004bde:	443b      	add	r3, r7
 8004be0:	f833 3cde 	ldrh.w	r3, [r3, #-222]
 8004be4:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8004be8:	9400      	str	r4, [sp, #0]
 8004bea:	f002 f8d2 	bl	8006d92 <ILI9341_Draw_Hollow_Rectangle_Coord>
									(charHighlightRectangle[player2_character]).x0,
									(charHighlightRectangle[player2_character]).y0,
									(charHighlightRectangle[player2_character]).x1,
									(charHighlightRectangle[player2_character]).y1,
									YELLOW);
							ILI9341_Draw_Filled_Rectangle_Coord(bNext.x0 - 2,
 8004bee:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004bf2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	3b02      	subs	r3, #2
 8004bfa:	b298      	uxth	r0, r3
									bNext.y0 - 2, bNext.x1 + 2, bNext.y1 + 2,
 8004bfc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004c00:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004c04:	885b      	ldrh	r3, [r3, #2]
							ILI9341_Draw_Filled_Rectangle_Coord(bNext.x0 - 2,
 8004c06:	3b02      	subs	r3, #2
 8004c08:	b299      	uxth	r1, r3
									bNext.y0 - 2, bNext.x1 + 2, bNext.y1 + 2,
 8004c0a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004c0e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004c12:	889b      	ldrh	r3, [r3, #4]
							ILI9341_Draw_Filled_Rectangle_Coord(bNext.x0 - 2,
 8004c14:	3302      	adds	r3, #2
 8004c16:	b29a      	uxth	r2, r3
									bNext.y0 - 2, bNext.x1 + 2, bNext.y1 + 2,
 8004c18:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004c1c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004c20:	88db      	ldrh	r3, [r3, #6]
							ILI9341_Draw_Filled_Rectangle_Coord(bNext.x0 - 2,
 8004c22:	3302      	adds	r3, #2
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004c2a:	9400      	str	r4, [sp, #0]
 8004c2c:	f002 f932 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
 8004c30:	e06f      	b.n	8004d12 <setting_winPage+0xb06>
									WHITE);
						}

						else {
							ILI9341_Draw_Text("2 Player", 152, 70, WHITE, 1,
 8004c32:	231f      	movs	r3, #31
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	2301      	movs	r3, #1
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c3e:	2246      	movs	r2, #70	; 0x46
 8004c40:	2198      	movs	r1, #152	; 0x98
 8004c42:	48a7      	ldr	r0, [pc, #668]	; (8004ee0 <setting_winPage+0xcd4>)
 8004c44:	f002 fa1e 	bl	8007084 <ILI9341_Draw_Text>
 8004c48:	e063      	b.n	8004d12 <setting_winPage+0xb06>
							BLUE);
						}

					} else {
						ILI9341_Draw_Filled_Rectangle_Coord(
 8004c4a:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004c54:	443b      	add	r3, r7
 8004c56:	f833 0c94 	ldrh.w	r0, [r3, #-148]
 8004c5a:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004c64:	443b      	add	r3, r7
 8004c66:	f833 1c92 	ldrh.w	r1, [r3, #-146]
 8004c6a:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004c74:	443b      	add	r3, r7
 8004c76:	f833 2c90 	ldrh.w	r2, [r3, #-144]
 8004c7a:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004c84:	443b      	add	r3, r7
 8004c86:	f833 3c8e 	ldrh.w	r3, [r3, #-142]
 8004c8a:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8004c8e:	9400      	str	r4, [sp, #0]
 8004c90:	f002 f900 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
								(numPlayerRectangle[i]).x0,
								(numPlayerRectangle[i]).y0,
								(numPlayerRectangle[i]).x1,
								(numPlayerRectangle[i]).y1, CYAN);
						ILI9341_Draw_Hollow_Rectangle_Coord(
 8004c94:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004c9e:	443b      	add	r3, r7
 8004ca0:	f833 0c94 	ldrh.w	r0, [r3, #-148]
 8004ca4:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004cae:	443b      	add	r3, r7
 8004cb0:	f833 1c92 	ldrh.w	r1, [r3, #-146]
 8004cb4:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004cbe:	443b      	add	r3, r7
 8004cc0:	f833 2c90 	ldrh.w	r2, [r3, #-144]
 8004cc4:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004cce:	443b      	add	r3, r7
 8004cd0:	f833 3c8e 	ldrh.w	r3, [r3, #-142]
 8004cd4:	241f      	movs	r4, #31
 8004cd6:	9400      	str	r4, [sp, #0]
 8004cd8:	f002 f85b 	bl	8006d92 <ILI9341_Draw_Hollow_Rectangle_Coord>
								(numPlayerRectangle[i]).x0,
								(numPlayerRectangle[i]).y0,
								(numPlayerRectangle[i]).x1,
								(numPlayerRectangle[i]).y1, BLUE);
						if (i == 0)
 8004cdc:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10b      	bne.n	8004cfc <setting_winPage+0xaf0>
							ILI9341_Draw_Text("1 Player", 62, 70, BLUE, 1,
 8004ce4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004ce8:	9301      	str	r3, [sp, #4]
 8004cea:	2301      	movs	r3, #1
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	231f      	movs	r3, #31
 8004cf0:	2246      	movs	r2, #70	; 0x46
 8004cf2:	213e      	movs	r1, #62	; 0x3e
 8004cf4:	4879      	ldr	r0, [pc, #484]	; (8004edc <setting_winPage+0xcd0>)
 8004cf6:	f002 f9c5 	bl	8007084 <ILI9341_Draw_Text>
 8004cfa:	e00a      	b.n	8004d12 <setting_winPage+0xb06>
							CYAN);
						else
							ILI9341_Draw_Text("2 Player", 150, 70, BLUE, 1,
 8004cfc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	2301      	movs	r3, #1
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	231f      	movs	r3, #31
 8004d08:	2246      	movs	r2, #70	; 0x46
 8004d0a:	2196      	movs	r1, #150	; 0x96
 8004d0c:	4874      	ldr	r0, [pc, #464]	; (8004ee0 <setting_winPage+0xcd4>)
 8004d0e:	f002 f9b9 	bl	8007084 <ILI9341_Draw_Text>
						i++) {
 8004d12:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004d16:	3301      	adds	r3, #1
 8004d18:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
						i < sizeof(numPlayerState) / sizeof(numPlayerState[0]);
 8004d1c:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	f67f aec1 	bls.w	8004aa8 <setting_winPage+0x89c>
							CYAN);
					}
				}
				for (int i = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8004d2c:	e037      	b.n	8004d9e <setting_winPage+0xb92>
						i
								< sizeof(characterState_2)
										/ sizeof(characterState_2[0]); i++) {
					if (characterState_2[i]) {
 8004d2e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004d38:	443b      	add	r3, r7
 8004d3a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d028      	beq.n	8004d94 <setting_winPage+0xb88>
						ILI9341_Draw_Hollow_Rectangle_Coord(
 8004d42:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004d4c:	443b      	add	r3, r7
 8004d4e:	f833 0ce4 	ldrh.w	r0, [r3, #-228]
 8004d52:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004d5c:	443b      	add	r3, r7
 8004d5e:	f833 1ce2 	ldrh.w	r1, [r3, #-226]
 8004d62:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004d6c:	443b      	add	r3, r7
 8004d6e:	f833 2ce0 	ldrh.w	r2, [r3, #-224]
 8004d72:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004d7c:	443b      	add	r3, r7
 8004d7e:	f833 3cde 	ldrh.w	r3, [r3, #-222]
 8004d82:	241f      	movs	r4, #31
 8004d84:	9400      	str	r4, [sp, #0]
 8004d86:	f002 f804 	bl	8006d92 <ILI9341_Draw_Hollow_Rectangle_Coord>
								(charHighlightRectangle[i]).x0,
								(charHighlightRectangle[i]).y0,
								(charHighlightRectangle[i]).x1,
								(charHighlightRectangle[i]).y1, BLUE);
						player2_character = i;
 8004d8a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8004d8e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
						break;
 8004d92:	e008      	b.n	8004da6 <setting_winPage+0xb9a>
										/ sizeof(characterState_2[0]); i++) {
 8004d94:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8004d98:	3301      	adds	r3, #1
 8004d9a:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
								< sizeof(characterState_2)
 8004d9e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d9c3      	bls.n	8004d2e <setting_winPage+0xb22>
					}
				}
				for (int i = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8004dac:	e0a0      	b.n	8004ef0 <setting_winPage+0xce4>
						i < sizeof(characterState) / sizeof(characterState[0]);
						i++) {
					if (player2_character == i)
 8004dae:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8004db2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8004db6:	429a      	cmp	r2, r3
 8004db8:	f000 8094 	beq.w	8004ee4 <setting_winPage+0xcd8>
						continue;
					if (isTouchWithinRectangle(charHighlightRectangle[i],
 8004dbc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004dc0:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8004dc4:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004dce:	443b      	add	r3, r7
 8004dd0:	6812      	ldr	r2, [r2, #0]
 8004dd2:	3be4      	subs	r3, #228	; 0xe4
 8004dd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004dd8:	f7ff f874 	bl	8003ec4 <isTouchWithinRectangle>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d026      	beq.n	8004e30 <setting_winPage+0xc24>
							cursor)) {
						characterState[i] = 1;
 8004de2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004dec:	443b      	add	r3, r7
 8004dee:	2201      	movs	r2, #1
 8004df0:	f843 2c64 	str.w	r2, [r3, #-100]
						for (int j = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8004dfa:	e015      	b.n	8004e28 <setting_winPage+0xc1c>
								j
										< sizeof(characterState)
												/ sizeof(characterState[0]);
								j++) {
							if (j == i)
 8004dfc:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 8004e00:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d009      	beq.n	8004e1c <setting_winPage+0xc10>
								continue;
							characterState[j] = 0;
 8004e08:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004e12:	443b      	add	r3, r7
 8004e14:	2200      	movs	r2, #0
 8004e16:	f843 2c64 	str.w	r2, [r3, #-100]
 8004e1a:	e000      	b.n	8004e1e <setting_winPage+0xc12>
								continue;
 8004e1c:	bf00      	nop
								j++) {
 8004e1e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8004e22:	3301      	adds	r3, #1
 8004e24:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
										< sizeof(characterState)
 8004e28:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d9e5      	bls.n	8004dfc <setting_winPage+0xbf0>
						}
					}
					if (characterState[i])
 8004e30:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004e3a:	443b      	add	r3, r7
 8004e3c:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d025      	beq.n	8004e90 <setting_winPage+0xc84>
						ILI9341_Draw_Hollow_Rectangle_Coord(
 8004e44:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004e4e:	443b      	add	r3, r7
 8004e50:	f833 0ce4 	ldrh.w	r0, [r3, #-228]
 8004e54:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004e5e:	443b      	add	r3, r7
 8004e60:	f833 1ce2 	ldrh.w	r1, [r3, #-226]
 8004e64:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004e6e:	443b      	add	r3, r7
 8004e70:	f833 2ce0 	ldrh.w	r2, [r3, #-224]
 8004e74:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004e7e:	443b      	add	r3, r7
 8004e80:	f833 3cde 	ldrh.w	r3, [r3, #-222]
 8004e84:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8004e88:	9400      	str	r4, [sp, #0]
 8004e8a:	f001 ff82 	bl	8006d92 <ILI9341_Draw_Hollow_Rectangle_Coord>
 8004e8e:	e02a      	b.n	8004ee6 <setting_winPage+0xcda>
								(charHighlightRectangle[i]).x0,
								(charHighlightRectangle[i]).y0,
								(charHighlightRectangle[i]).x1,
								(charHighlightRectangle[i]).y1, RED);
					else
						ILI9341_Draw_Hollow_Rectangle_Coord(
 8004e90:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004e9a:	443b      	add	r3, r7
 8004e9c:	f833 0ce4 	ldrh.w	r0, [r3, #-228]
 8004ea0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004eaa:	443b      	add	r3, r7
 8004eac:	f833 1ce2 	ldrh.w	r1, [r3, #-226]
 8004eb0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004eba:	443b      	add	r3, r7
 8004ebc:	f833 2ce0 	ldrh.w	r2, [r3, #-224]
 8004ec0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004eca:	443b      	add	r3, r7
 8004ecc:	f833 3cde 	ldrh.w	r3, [r3, #-222]
 8004ed0:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8004ed4:	9400      	str	r4, [sp, #0]
 8004ed6:	f001 ff5c 	bl	8006d92 <ILI9341_Draw_Hollow_Rectangle_Coord>
 8004eda:	e004      	b.n	8004ee6 <setting_winPage+0xcda>
 8004edc:	0800ee64 	.word	0x0800ee64
 8004ee0:	0800ee70 	.word	0x0800ee70
						continue;
 8004ee4:	bf00      	nop
						i++) {
 8004ee6:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8004eea:	3301      	adds	r3, #1
 8004eec:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
						i < sizeof(characterState) / sizeof(characterState[0]);
 8004ef0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	f67f af5a 	bls.w	8004dae <setting_winPage+0xba2>
								(charHighlightRectangle[i]).x0,
								(charHighlightRectangle[i]).y0,
								(charHighlightRectangle[i]).x1,
								(charHighlightRectangle[i]).y1, YELLOW);
				}
				checkMap(cursor, mapState, mapRectangle);
 8004efa:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 8004efe:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8004f02:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004f06:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	f7fe fffc 	bl	8003f08 <checkMap>
				//					if (isTouchWithinRectangle(bPlay, cursor)) {
				//						if (checkStartGame())
				//							break;
				//					}
				//				}
				if (numPlayerState[1]) {
 8004f10:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d038      	beq.n	8004f8a <setting_winPage+0xd7e>
					ILI9341_Draw_Filled_Rectangle_Coord(bNext.x0, bNext.y0,
 8004f18:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004f1c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004f20:	8818      	ldrh	r0, [r3, #0]
 8004f22:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004f26:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004f2a:	8859      	ldrh	r1, [r3, #2]
 8004f2c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004f30:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004f34:	889a      	ldrh	r2, [r3, #4]
 8004f36:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004f3a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004f3e:	88db      	ldrh	r3, [r3, #6]
 8004f40:	f647 040f 	movw	r4, #30735	; 0x780f
 8004f44:	9400      	str	r4, [sp, #0]
 8004f46:	f001 ffa5 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
							bNext.x1, bNext.y1, PURPLE);
					ILI9341_Draw_Text(">", 238, 211, WHITE, 2, PURPLE);
 8004f4a:	f647 030f 	movw	r3, #30735	; 0x780f
 8004f4e:	9301      	str	r3, [sp, #4]
 8004f50:	2302      	movs	r3, #2
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f58:	22d3      	movs	r2, #211	; 0xd3
 8004f5a:	21ee      	movs	r1, #238	; 0xee
 8004f5c:	48cb      	ldr	r0, [pc, #812]	; (800528c <setting_winPage+0x1080>)
 8004f5e:	f002 f891 	bl	8007084 <ILI9341_Draw_Text>
					if (isTouchWithinRectangle(bNext, cursor)) {
 8004f62:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004f66:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8004f6a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004f6e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f78:	f7fe ffa4 	bl	8003ec4 <isTouchWithinRectangle>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <setting_winPage+0xd7e>
						displayScreen = 1;
 8004f82:	2301      	movs	r3, #1
 8004f84:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
						break;
 8004f88:	e025      	b.n	8004fd6 <setting_winPage+0xdca>
					}
				}
				if (checkStartGame(numPlayerState, mapState, characterState,
 8004f8a:	f507 7416 	add.w	r4, r7, #600	; 0x258
 8004f8e:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 8004f92:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8004f96:	f507 7020 	add.w	r0, r7, #640	; 0x280
 8004f9a:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	4623      	mov	r3, r4
 8004fa2:	f7ff f8b5 	bl	8004110 <checkStartGame>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00f      	beq.n	8004fcc <setting_winPage+0xdc0>
						characterState_2, displayScreen)) {
					if (isTouchWithinRectangle(bPlay, cursor)){
 8004fac:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004fb0:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8004fb4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004fb8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004fc2:	f7fe ff7f 	bl	8003ec4 <isTouchWithinRectangle>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d103      	bne.n	8004fd4 <setting_winPage+0xdc8>
						break;
					}
				}

				HAL_Delay(100);
 8004fcc:	2064      	movs	r0, #100	; 0x64
 8004fce:	f002 fee3 	bl	8007d98 <HAL_Delay>
				if (TP_Touchpad_Pressed()) {
 8004fd2:	e513      	b.n	80049fc <setting_winPage+0x7f0>
						break;
 8004fd4:	bf00      	nop
			}
		}
		if (displayScreen == 1) {
 8004fd6:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	f040 8297 	bne.w	800550e <setting_winPage+0x1302>
			int player1_character;
			drawPos.x = 250;
 8004fe0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004fe4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8004fe8:	22fa      	movs	r2, #250	; 0xfa
 8004fea:	801a      	strh	r2, [r3, #0]
			drawPos.y = 0;
 8004fec:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004ff0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	805a      	strh	r2, [r3, #2]
			settingPage_2.drawPoint = drawPos;
 8004ff8:	4aa5      	ldr	r2, [pc, #660]	; (8005290 <setting_winPage+0x1084>)
 8004ffa:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004ffe:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6053      	str	r3, [r2, #4]
			drawImageAtPoint(settingPage_2, SCREEN_ROTATION);
 8005006:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 800500a:	4aa1      	ldr	r2, [pc, #644]	; (8005290 <setting_winPage+0x1084>)
 800500c:	ca07      	ldmia	r2, {r0, r1, r2}
 800500e:	f7fe fe09 	bl	8003c24 <drawImageAtPoint>
			ILI9341_Draw_Filled_Rectangle_Coord(c2.x0, c2.y0, c2.x1, c2.y1,
 8005012:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005016:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800501a:	8818      	ldrh	r0, [r3, #0]
 800501c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005020:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005024:	8859      	ldrh	r1, [r3, #2]
 8005026:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800502a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800502e:	889a      	ldrh	r2, [r3, #4]
 8005030:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005034:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005038:	88db      	ldrh	r3, [r3, #6]
 800503a:	f64f 34e0 	movw	r4, #64480	; 0xfbe0
 800503e:	9400      	str	r4, [sp, #0]
 8005040:	f001 ff28 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
					0xFBE0);
			ILI9341_Draw_Text("Choose Character Of Player 2", 50, 103, BLACK, 1,
 8005044:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 8005048:	9301      	str	r3, [sp, #4]
 800504a:	2301      	movs	r3, #1
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	2300      	movs	r3, #0
 8005050:	2267      	movs	r2, #103	; 0x67
 8005052:	2132      	movs	r1, #50	; 0x32
 8005054:	488f      	ldr	r0, [pc, #572]	; (8005294 <setting_winPage+0x1088>)
 8005056:	f002 f815 	bl	8007084 <ILI9341_Draw_Text>
			//			RED);
			//			ILI9341_Draw_Filled_Rectangle_Coord(ch4.x0, ch4.y0, ch4.x1, ch4.y1,
			//			RED);
			//			ILI9341_Draw_Filled_Rectangle_Coord(ch5.x0, ch5.y0, ch5.x1, ch5.y1,
			//			RED);
			for (int i = 0;
 800505a:	2300      	movs	r3, #0
 800505c:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8005060:	e041      	b.n	80050e6 <setting_winPage+0xeda>
					i
							< sizeof(characterOrangeList)
									/ sizeof(characterOrangeList[0]); i++) {
				drawPos.x = charRectangle[i].x0;
 8005062:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800506c:	443b      	add	r3, r7
 800506e:	f833 2cbc 	ldrh.w	r2, [r3, #-188]
 8005072:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005076:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800507a:	801a      	strh	r2, [r3, #0]
				drawPos.y = charRectangle[i].y0;
 800507c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8005086:	443b      	add	r3, r7
 8005088:	f833 2cba 	ldrh.w	r2, [r3, #-186]
 800508c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005090:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005094:	805a      	strh	r2, [r3, #2]
				characterOrangeList[i].drawPoint = drawPos;
 8005096:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800509a:	f5a3 7107 	sub.w	r1, r3, #540	; 0x21c
 800509e:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 80050a2:	4613      	mov	r3, r2
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	3304      	adds	r3, #4
 80050ae:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80050b2:	f5a2 7227 	sub.w	r2, r2, #668	; 0x29c
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	601a      	str	r2, [r3, #0]
				drawImageAtPoint(characterOrangeList[i], SCREEN_ROTATION);
 80050ba:	f897 028b 	ldrb.w	r0, [r7, #651]	; 0x28b
 80050be:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80050c2:	f5a3 7107 	sub.w	r1, r3, #540	; 0x21c
 80050c6:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 80050ca:	4613      	mov	r3, r2
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	18ca      	adds	r2, r1, r3
 80050d4:	4603      	mov	r3, r0
 80050d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80050d8:	f7fe fda4 	bl	8003c24 <drawImageAtPoint>
									/ sizeof(characterOrangeList[0]); i++) {
 80050dc:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80050e0:	3301      	adds	r3, #1
 80050e2:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
							< sizeof(characterOrangeList)
 80050e6:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d9b9      	bls.n	8005062 <setting_winPage+0xe56>
			}
			ILI9341_Draw_Filled_Rectangle_Coord(bNext.x0 - 2, bNext.y0 - 2,
 80050ee:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80050f2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	3b02      	subs	r3, #2
 80050fa:	b298      	uxth	r0, r3
 80050fc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005100:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005104:	885b      	ldrh	r3, [r3, #2]
 8005106:	3b02      	subs	r3, #2
 8005108:	b299      	uxth	r1, r3
					bNext.x1 + 2, bNext.y1 + 2, WHITE);
 800510a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800510e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005112:	889b      	ldrh	r3, [r3, #4]
			ILI9341_Draw_Filled_Rectangle_Coord(bNext.x0 - 2, bNext.y0 - 2,
 8005114:	3302      	adds	r3, #2
 8005116:	b29a      	uxth	r2, r3
					bNext.x1 + 2, bNext.y1 + 2, WHITE);
 8005118:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800511c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005120:	88db      	ldrh	r3, [r3, #6]
			ILI9341_Draw_Filled_Rectangle_Coord(bNext.x0 - 2, bNext.y0 - 2,
 8005122:	3302      	adds	r3, #2
 8005124:	b29b      	uxth	r3, r3
 8005126:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800512a:	9400      	str	r4, [sp, #0]
 800512c:	f001 feb2 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
			//			ILI9341_Draw_Filled_Rectangle_Coord(bPlay.x0, bPlay.y0, bPlay.x1,
			//					bPlay.y1, PINK);
			//			ILI9341_Draw_Text("PLAY", 108, 211, WHITE, 2, PINK);
			ILI9341_Draw_Filled_Rectangle_Coord(bBack.x0, bBack.y0, bBack.x1,
 8005130:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005134:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8005138:	8818      	ldrh	r0, [r3, #0]
 800513a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800513e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8005142:	8859      	ldrh	r1, [r3, #2]
 8005144:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005148:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800514c:	889a      	ldrh	r2, [r3, #4]
 800514e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005152:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8005156:	88db      	ldrh	r3, [r3, #6]
 8005158:	f647 040f 	movw	r4, #30735	; 0x780f
 800515c:	9400      	str	r4, [sp, #0]
 800515e:	f001 fe99 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
					bBack.y1, PURPLE);
			ILI9341_Draw_Text("<", 15, 211, WHITE, 2, PURPLE);
 8005162:	f647 030f 	movw	r3, #30735	; 0x780f
 8005166:	9301      	str	r3, [sp, #4]
 8005168:	2302      	movs	r3, #2
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005170:	22d3      	movs	r2, #211	; 0xd3
 8005172:	210f      	movs	r1, #15
 8005174:	4848      	ldr	r0, [pc, #288]	; (8005298 <setting_winPage+0x108c>)
 8005176:	f001 ff85 	bl	8007084 <ILI9341_Draw_Text>
			while (1) {
				for (int i = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8005180:	e038      	b.n	80051f4 <setting_winPage+0xfe8>
						i < sizeof(characterState) / sizeof(characterState[0]);
						i++) {
					if (characterState[i]) {
 8005182:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800518c:	443b      	add	r3, r7
 800518e:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d029      	beq.n	80051ea <setting_winPage+0xfde>
						ILI9341_Draw_Hollow_Rectangle_Coord(
 8005196:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80051a0:	443b      	add	r3, r7
 80051a2:	f833 0ce4 	ldrh.w	r0, [r3, #-228]
 80051a6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80051b0:	443b      	add	r3, r7
 80051b2:	f833 1ce2 	ldrh.w	r1, [r3, #-226]
 80051b6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80051c0:	443b      	add	r3, r7
 80051c2:	f833 2ce0 	ldrh.w	r2, [r3, #-224]
 80051c6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80051d0:	443b      	add	r3, r7
 80051d2:	f833 3cde 	ldrh.w	r3, [r3, #-222]
 80051d6:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80051da:	9400      	str	r4, [sp, #0]
 80051dc:	f001 fdd9 	bl	8006d92 <ILI9341_Draw_Hollow_Rectangle_Coord>
								(charHighlightRectangle[i]).x0,
								(charHighlightRectangle[i]).y0,
								(charHighlightRectangle[i]).x1,
								(charHighlightRectangle[i]).y1, RED);
						player1_character = i;
 80051e0:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80051e4:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
						break;
 80051e8:	e008      	b.n	80051fc <setting_winPage+0xff0>
						i++) {
 80051ea:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80051ee:	3301      	adds	r3, #1
 80051f0:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
						i < sizeof(characterState) / sizeof(characterState[0]);
 80051f4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d9c2      	bls.n	8005182 <setting_winPage+0xf76>
					}
				}
				if (TP_Touchpad_Pressed()) {
 80051fc:	f002 fd56 	bl	8007cac <TP_Touchpad_Pressed>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d03e      	beq.n	8005284 <setting_winPage+0x1078>
					uint16_t position_array[2];

					if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 8005206:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800520a:	4618      	mov	r0, r3
 800520c:	f002 fc8c 	bl	8007b28 <TP_Read_Coordinates>
 8005210:	4603      	mov	r3, r0
 8005212:	2b01      	cmp	r3, #1
 8005214:	d128      	bne.n	8005268 <setting_winPage+0x105c>
						if (SCREEN_ROTATION == SCREEN_HORIZONTAL_1) {
 8005216:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 800521a:	2b01      	cmp	r3, #1
 800521c:	d110      	bne.n	8005240 <setting_winPage+0x1034>
							xPos = position_array[1];
 800521e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005222:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8005226:	885b      	ldrh	r3, [r3, #2]
 8005228:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
							yPos = SCREEN_HEIGHT - position_array[0];
 800522c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005230:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800523a:	f8a7 32c4 	strh.w	r3, [r7, #708]	; 0x2c4
 800523e:	e013      	b.n	8005268 <setting_winPage+0x105c>
						} else if (SCREEN_ROTATION == SCREEN_HORIZONTAL_2) {
 8005240:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8005244:	2b03      	cmp	r3, #3
 8005246:	d10f      	bne.n	8005268 <setting_winPage+0x105c>
							xPos = SCREEN_WIDTH - position_array[1];
 8005248:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800524c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8005250:	885b      	ldrh	r3, [r3, #2]
 8005252:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8005256:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
							yPos = position_array[0];
 800525a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800525e:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	f8a7 32c4 	strh.w	r3, [r7, #708]	; 0x2c4
						}
					}
					cursor.x = xPos;
 8005268:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800526c:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8005270:	f8b7 22c6 	ldrh.w	r2, [r7, #710]	; 0x2c6
 8005274:	801a      	strh	r2, [r3, #0]
					cursor.y = yPos;
 8005276:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800527a:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800527e:	f8b7 22c4 	ldrh.w	r2, [r7, #708]	; 0x2c4
 8005282:	805a      	strh	r2, [r3, #2]
				}
				for (int i = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800528a:	e0a3      	b.n	80053d4 <setting_winPage+0x11c8>
 800528c:	0800ee84 	.word	0x0800ee84
 8005290:	20000108 	.word	0x20000108
 8005294:	0800ee88 	.word	0x0800ee88
 8005298:	0800eea8 	.word	0x0800eea8
						i
								< sizeof(characterState_2)
										/ sizeof(characterState_2[0]); i++) {
					if (player1_character == i)
 800529c:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80052a0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80052a4:	429a      	cmp	r2, r3
 80052a6:	f000 808f 	beq.w	80053c8 <setting_winPage+0x11bc>
						continue;
					if (isTouchWithinRectangle(charHighlightRectangle[i],
 80052aa:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80052ae:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 80052b2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80052bc:	443b      	add	r3, r7
 80052be:	6812      	ldr	r2, [r2, #0]
 80052c0:	3be4      	subs	r3, #228	; 0xe4
 80052c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052c6:	f7fe fdfd 	bl	8003ec4 <isTouchWithinRectangle>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d026      	beq.n	800531e <setting_winPage+0x1112>
							cursor)) {
						characterState_2[i] = 1;
 80052d0:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80052da:	443b      	add	r3, r7
 80052dc:	2201      	movs	r2, #1
 80052de:	f843 2c78 	str.w	r2, [r3, #-120]
						for (int j = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80052e8:	e015      	b.n	8005316 <setting_winPage+0x110a>
								j
										< sizeof(characterState_2)
												/ sizeof(characterState_2[0]);
								j++) {
							if (j == i)
 80052ea:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 80052ee:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d009      	beq.n	800530a <setting_winPage+0x10fe>
								continue;
							characterState_2[j] = 0;
 80052f6:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8005300:	443b      	add	r3, r7
 8005302:	2200      	movs	r2, #0
 8005304:	f843 2c78 	str.w	r2, [r3, #-120]
 8005308:	e000      	b.n	800530c <setting_winPage+0x1100>
								continue;
 800530a:	bf00      	nop
								j++) {
 800530c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8005310:	3301      	adds	r3, #1
 8005312:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
										< sizeof(characterState_2)
 8005316:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800531a:	2b04      	cmp	r3, #4
 800531c:	d9e5      	bls.n	80052ea <setting_winPage+0x10de>
						}
					}
					if (characterState_2[i])
 800531e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8005328:	443b      	add	r3, r7
 800532a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d024      	beq.n	800537c <setting_winPage+0x1170>
						ILI9341_Draw_Hollow_Rectangle_Coord(
 8005332:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800533c:	443b      	add	r3, r7
 800533e:	f833 0ce4 	ldrh.w	r0, [r3, #-228]
 8005342:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800534c:	443b      	add	r3, r7
 800534e:	f833 1ce2 	ldrh.w	r1, [r3, #-226]
 8005352:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800535c:	443b      	add	r3, r7
 800535e:	f833 2ce0 	ldrh.w	r2, [r3, #-224]
 8005362:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800536c:	443b      	add	r3, r7
 800536e:	f833 3cde 	ldrh.w	r3, [r3, #-222]
 8005372:	241f      	movs	r4, #31
 8005374:	9400      	str	r4, [sp, #0]
 8005376:	f001 fd0c 	bl	8006d92 <ILI9341_Draw_Hollow_Rectangle_Coord>
 800537a:	e026      	b.n	80053ca <setting_winPage+0x11be>
								(charHighlightRectangle[i]).x0,
								(charHighlightRectangle[i]).y0,
								(charHighlightRectangle[i]).x1,
								(charHighlightRectangle[i]).y1, BLUE);
					else
						ILI9341_Draw_Hollow_Rectangle_Coord(
 800537c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8005386:	443b      	add	r3, r7
 8005388:	f833 0ce4 	ldrh.w	r0, [r3, #-228]
 800538c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8005396:	443b      	add	r3, r7
 8005398:	f833 1ce2 	ldrh.w	r1, [r3, #-226]
 800539c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80053a6:	443b      	add	r3, r7
 80053a8:	f833 2ce0 	ldrh.w	r2, [r3, #-224]
 80053ac:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80053b6:	443b      	add	r3, r7
 80053b8:	f833 3cde 	ldrh.w	r3, [r3, #-222]
 80053bc:	f64f 34e0 	movw	r4, #64480	; 0xfbe0
 80053c0:	9400      	str	r4, [sp, #0]
 80053c2:	f001 fce6 	bl	8006d92 <ILI9341_Draw_Hollow_Rectangle_Coord>
 80053c6:	e000      	b.n	80053ca <setting_winPage+0x11be>
						continue;
 80053c8:	bf00      	nop
										/ sizeof(characterState_2[0]); i++) {
 80053ca:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80053ce:	3301      	adds	r3, #1
 80053d0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
								< sizeof(characterState_2)
 80053d4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80053d8:	2b04      	cmp	r3, #4
 80053da:	f67f af5f 	bls.w	800529c <setting_winPage+0x1090>
								(charHighlightRectangle[i]).x0,
								(charHighlightRectangle[i]).y0,
								(charHighlightRectangle[i]).x1,
								(charHighlightRectangle[i]).y1, 0xFBE0);
				}
				checkMap(cursor, mapState, mapRectangle);
 80053de:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80053e2:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 80053e6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80053ea:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	f7fe fd8a 	bl	8003f08 <checkMap>
				if (isTouchWithinRectangle(bBack, cursor)) {
 80053f4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80053f8:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 80053fc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005400:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	e893 0003 	ldmia.w	r3, {r0, r1}
 800540a:	f7fe fd5b 	bl	8003ec4 <isTouchWithinRectangle>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <setting_winPage+0x1210>
					displayScreen = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
					break;
 800541a:	e078      	b.n	800550e <setting_winPage+0x1302>
				}
				if (isTouchWithinRectangle(numPlayerRectangle[0], cursor)) {
 800541c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005420:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800542a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800542e:	f7fe fd49 	bl	8003ec4 <isTouchWithinRectangle>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01f      	beq.n	8005478 <setting_winPage+0x126c>
					displayScreen = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
					numPlayerState[0] = 1;
 800543e:	2301      	movs	r3, #1
 8005440:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
					numPlayerState[1] = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
					for (int i = 0;
 800544a:	2300      	movs	r3, #0
 800544c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8005450:	e00d      	b.n	800546e <setting_winPage+0x1262>
							i
									< sizeof(characterState_2)
											/ sizeof(characterState_2[0]);
							i++) {
						characterState_2[i] = 0;
 8005452:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800545c:	443b      	add	r3, r7
 800545e:	2200      	movs	r2, #0
 8005460:	f843 2c78 	str.w	r2, [r3, #-120]
							i++) {
 8005464:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8005468:	3301      	adds	r3, #1
 800546a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
									< sizeof(characterState_2)
 800546e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8005472:	2b04      	cmp	r3, #4
 8005474:	d9ed      	bls.n	8005452 <setting_winPage+0x1246>
					}
					break;
 8005476:	e04a      	b.n	800550e <setting_winPage+0x1302>
				}
				//				if (isTouchWithinRectangle(bPlay, cursor)) {
				//					if (checkStartGame())
				//						break;
				//				}
				if (checkStartGame(numPlayerState, mapState, characterState,
 8005478:	f507 7416 	add.w	r4, r7, #600	; 0x258
 800547c:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 8005480:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8005484:	f507 7020 	add.w	r0, r7, #640	; 0x280
 8005488:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	4623      	mov	r3, r4
 8005490:	f7fe fe3e 	bl	8004110 <checkStartGame>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d034      	beq.n	8005504 <setting_winPage+0x12f8>
						characterState_2, displayScreen)) {
					ILI9341_Draw_Filled_Rectangle_Coord(bPlay.x0, bPlay.y0,
 800549a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800549e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80054a2:	8818      	ldrh	r0, [r3, #0]
 80054a4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80054a8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80054ac:	8859      	ldrh	r1, [r3, #2]
 80054ae:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80054b2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80054b6:	889a      	ldrh	r2, [r3, #4]
 80054b8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80054bc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80054c0:	88db      	ldrh	r3, [r3, #6]
 80054c2:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80054c6:	9400      	str	r4, [sp, #0]
 80054c8:	f001 fce4 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
							bPlay.x1, bPlay.y1, PINK);
					ILI9341_Draw_Text("PLAY", 108, 211, WHITE, 2, PINK);
 80054cc:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	2302      	movs	r3, #2
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054da:	22d3      	movs	r2, #211	; 0xd3
 80054dc:	216c      	movs	r1, #108	; 0x6c
 80054de:	489d      	ldr	r0, [pc, #628]	; (8005754 <setting_winPage+0x1548>)
 80054e0:	f001 fdd0 	bl	8007084 <ILI9341_Draw_Text>
					if (isTouchWithinRectangle(bPlay, cursor))
 80054e4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80054e8:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 80054ec:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80054f0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80054fa:	f7fe fce3 	bl	8003ec4 <isTouchWithinRectangle>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d103      	bne.n	800550c <setting_winPage+0x1300>
						break;
				}
				HAL_Delay(100);
 8005504:	2064      	movs	r0, #100	; 0x64
 8005506:	f002 fc47 	bl	8007d98 <HAL_Delay>
				for (int i = 0;
 800550a:	e636      	b.n	800517a <setting_winPage+0xf6e>
						break;
 800550c:	bf00      	nop
			}
		}
		if (displayScreen == 2) {
 800550e:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8005512:	2b02      	cmp	r3, #2
 8005514:	d115      	bne.n	8005542 <setting_winPage+0x1336>
			endGameFlag = false;
 8005516:	4b90      	ldr	r3, [pc, #576]	; (8005758 <setting_winPage+0x154c>)
 8005518:	2200      	movs	r2, #0
 800551a:	701a      	strb	r2, [r3, #0]
			startGame();
 800551c:	f000 fe52 	bl	80061c4 <startGame>
			while(!endGameFlag){}
 8005520:	bf00      	nop
 8005522:	4b8d      	ldr	r3, [pc, #564]	; (8005758 <setting_winPage+0x154c>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	f083 0301 	eor.w	r3, r3, #1
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1f8      	bne.n	8005522 <setting_winPage+0x1316>
			printOut("END LOOP\n");
 8005530:	488a      	ldr	r0, [pc, #552]	; (800575c <setting_winPage+0x1550>)
 8005532:	f001 fb51 	bl	8006bd8 <printOut>
			HAL_TIM_Base_Stop_IT(&htim1);
 8005536:	488a      	ldr	r0, [pc, #552]	; (8005760 <setting_winPage+0x1554>)
 8005538:	f005 fcee 	bl	800af18 <HAL_TIM_Base_Stop_IT>
			displayScreen = 3;
 800553c:	2303      	movs	r3, #3
 800553e:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
		}
		if (displayScreen == 3) {
 8005542:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8005546:	2b03      	cmp	r3, #3
 8005548:	f47f a825 	bne.w	8004596 <setting_winPage+0x38a>
			drawPos.x = 0;
 800554c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005550:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005554:	2200      	movs	r2, #0
 8005556:	801a      	strh	r2, [r3, #0]
			drawPos.y = 0;
 8005558:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800555c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005560:	2200      	movs	r2, #0
 8005562:	805a      	strh	r2, [r3, #2]
			winnerPage.drawPoint = drawPos;
 8005564:	4a7f      	ldr	r2, [pc, #508]	; (8005764 <setting_winPage+0x1558>)
 8005566:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800556a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6053      	str	r3, [r2, #4]
			drawImageAtPoint(winnerPage, SCREEN_ROTATION);
 8005572:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8005576:	4a7b      	ldr	r2, [pc, #492]	; (8005764 <setting_winPage+0x1558>)
 8005578:	ca07      	ldmia	r2, {r0, r1, r2}
 800557a:	f7fe fb53 	bl	8003c24 <drawImageAtPoint>
			Rectangle winnerPic = { 100, 25, 212, 137 };
 800557e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005582:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8005586:	4a78      	ldr	r2, [pc, #480]	; (8005768 <setting_winPage+0x155c>)
 8005588:	e892 0003 	ldmia.w	r2, {r0, r1}
 800558c:	e883 0003 	stmia.w	r3, {r0, r1}

			Rectangle winnerTextContainer = { 95, 142, 215, 170 };
 8005590:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005594:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8005598:	4a74      	ldr	r2, [pc, #464]	; (800576c <setting_winPage+0x1560>)
 800559a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800559e:	e883 0003 	stmia.w	r3, {r0, r1}
			ILI9341_Draw_Filled_Rectangle_Coord(winnerTextContainer.x0,
 80055a2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80055a6:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80055aa:	8818      	ldrh	r0, [r3, #0]
 80055ac:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80055b0:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80055b4:	8859      	ldrh	r1, [r3, #2]
 80055b6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80055ba:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80055be:	889a      	ldrh	r2, [r3, #4]
 80055c0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80055c4:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80055c8:	88db      	ldrh	r3, [r3, #6]
 80055ca:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 80055ce:	9400      	str	r4, [sp, #0]
 80055d0:	f001 fc60 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
					winnerTextContainer.y0, winnerTextContainer.x1,
					winnerTextContainer.y1, YELLOW);

			Rectangle bReplay = { 55, 175, 150, 200 };
 80055d4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80055d8:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80055dc:	4a64      	ldr	r2, [pc, #400]	; (8005770 <setting_winPage+0x1564>)
 80055de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055e2:	e883 0003 	stmia.w	r3, {r0, r1}
			Rectangle bNext = { 155, 175, 250, 200 };
 80055e6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80055ea:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80055ee:	4a61      	ldr	r2, [pc, #388]	; (8005774 <setting_winPage+0x1568>)
 80055f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055f4:	e883 0003 	stmia.w	r3, {r0, r1}
			Rectangle bExit = { 108, 205, 203, 230 };
 80055f8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80055fc:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8005600:	4a5d      	ldr	r2, [pc, #372]	; (8005778 <setting_winPage+0x156c>)
 8005602:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005606:	e883 0003 	stmia.w	r3, {r0, r1}

			ILI9341_Draw_Filled_Rectangle_Coord(bReplay.x0, bReplay.y0,
 800560a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800560e:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8005612:	8818      	ldrh	r0, [r3, #0]
 8005614:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005618:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800561c:	8859      	ldrh	r1, [r3, #2]
 800561e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005622:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8005626:	889a      	ldrh	r2, [r3, #4]
 8005628:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800562c:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8005630:	88db      	ldrh	r3, [r3, #6]
 8005632:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8005636:	9400      	str	r4, [sp, #0]
 8005638:	f001 fc2c 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
					bReplay.x1, bReplay.y1, CYAN);
			ILI9341_Draw_Filled_Rectangle_Coord(bNext.x0, bNext.y0, bNext.x1,
 800563c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005640:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8005644:	8818      	ldrh	r0, [r3, #0]
 8005646:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800564a:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800564e:	8859      	ldrh	r1, [r3, #2]
 8005650:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005654:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8005658:	889a      	ldrh	r2, [r3, #4]
 800565a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800565e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8005662:	88db      	ldrh	r3, [r3, #6]
 8005664:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 8005668:	9400      	str	r4, [sp, #0]
 800566a:	f001 fc13 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
					bNext.y1, GREEN);
			ILI9341_Draw_Filled_Rectangle_Coord(bExit.x0, bExit.y0, bExit.x1,
 800566e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005672:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8005676:	8818      	ldrh	r0, [r3, #0]
 8005678:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800567c:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8005680:	8859      	ldrh	r1, [r3, #2]
 8005682:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005686:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800568a:	889a      	ldrh	r2, [r3, #4]
 800568c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005690:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8005694:	88db      	ldrh	r3, [r3, #6]
 8005696:	f64f 5420 	movw	r4, #64800	; 0xfd20
 800569a:	9400      	str	r4, [sp, #0]
 800569c:	f001 fbfa 	bl	8006e94 <ILI9341_Draw_Filled_Rectangle_Coord>
					bExit.y1, ORANGE);

			ILI9341_Draw_Text("<REPLAY", 60, 179, BLACK, 2, CYAN);
 80056a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80056a4:	9301      	str	r3, [sp, #4]
 80056a6:	2302      	movs	r3, #2
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	2300      	movs	r3, #0
 80056ac:	22b3      	movs	r2, #179	; 0xb3
 80056ae:	213c      	movs	r1, #60	; 0x3c
 80056b0:	4832      	ldr	r0, [pc, #200]	; (800577c <setting_winPage+0x1570>)
 80056b2:	f001 fce7 	bl	8007084 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("NEXT>", 175, 179, BLACK, 2, GREEN);
 80056b6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80056ba:	9301      	str	r3, [sp, #4]
 80056bc:	2302      	movs	r3, #2
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	2300      	movs	r3, #0
 80056c2:	22b3      	movs	r2, #179	; 0xb3
 80056c4:	21af      	movs	r1, #175	; 0xaf
 80056c6:	482e      	ldr	r0, [pc, #184]	; (8005780 <setting_winPage+0x1574>)
 80056c8:	f001 fcdc 	bl	8007084 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("EXIT", 133, 209, RED, 2, ORANGE);
 80056cc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80056d0:	9301      	str	r3, [sp, #4]
 80056d2:	2302      	movs	r3, #2
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80056da:	22d1      	movs	r2, #209	; 0xd1
 80056dc:	2185      	movs	r1, #133	; 0x85
 80056de:	4829      	ldr	r0, [pc, #164]	; (8005784 <setting_winPage+0x1578>)
 80056e0:	f001 fcd0 	bl	8007084 <ILI9341_Draw_Text>
			//�����褹����
			if(stateWin == 0){
 80056e4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d14f      	bne.n	800578c <setting_winPage+0x1580>
				ILI9341_Draw_Text("WINNER", 103, 143, BLUE, 3, YELLOW);
 80056ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80056f0:	9301      	str	r3, [sp, #4]
 80056f2:	2303      	movs	r3, #3
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	231f      	movs	r3, #31
 80056f8:	228f      	movs	r2, #143	; 0x8f
 80056fa:	2167      	movs	r1, #103	; 0x67
 80056fc:	4822      	ldr	r0, [pc, #136]	; (8005788 <setting_winPage+0x157c>)
 80056fe:	f001 fcc1 	bl	8007084 <ILI9341_Draw_Text>
				drawPos.x = winnerPic.x0;
 8005702:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005706:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800570a:	881a      	ldrh	r2, [r3, #0]
 800570c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005710:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005714:	801a      	strh	r2, [r3, #0]
				drawPos.y = winnerPic.y0;
 8005716:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800571a:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800571e:	885a      	ldrh	r2, [r3, #2]
 8005720:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005724:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005728:	805a      	strh	r2, [r3, #2]
				character112List[0].drawPoint = drawPos;
 800572a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800572e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005732:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8005736:	f5a2 7227 	sub.w	r2, r2, #668	; 0x29c
 800573a:	6812      	ldr	r2, [r2, #0]
 800573c:	605a      	str	r2, [r3, #4]
				drawImageAtPoint(character112List[0], SCREEN_ROTATION);
 800573e:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8005742:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8005746:	f5a2 7216 	sub.w	r2, r2, #600	; 0x258
 800574a:	ca07      	ldmia	r2, {r0, r1, r2}
 800574c:	f7fe fa6a 	bl	8003c24 <drawImageAtPoint>
 8005750:	e1b2      	b.n	8005ab8 <setting_winPage+0x18ac>
 8005752:	bf00      	nop
 8005754:	0800ee7c 	.word	0x0800ee7c
 8005758:	20000120 	.word	0x20000120
 800575c:	0800eeac 	.word	0x0800eeac
 8005760:	20002e2c 	.word	0x20002e2c
 8005764:	20000114 	.word	0x20000114
 8005768:	0800ef88 	.word	0x0800ef88
 800576c:	0800ef90 	.word	0x0800ef90
 8005770:	0800ef98 	.word	0x0800ef98
 8005774:	0800efa0 	.word	0x0800efa0
 8005778:	0800efa8 	.word	0x0800efa8
 800577c:	0800eeb8 	.word	0x0800eeb8
 8005780:	0800eec0 	.word	0x0800eec0
 8005784:	0800eec8 	.word	0x0800eec8
 8005788:	0800eed0 	.word	0x0800eed0
			}
			//����
			else if(stateWin > 0){
 800578c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8005790:	2b00      	cmp	r3, #0
 8005792:	f340 8191 	ble.w	8005ab8 <setting_winPage+0x18ac>
				ILI9341_Draw_Text("DRAW", 120, 143, BLUE, 3, YELLOW);
 8005796:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800579a:	9301      	str	r3, [sp, #4]
 800579c:	2303      	movs	r3, #3
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	231f      	movs	r3, #31
 80057a2:	228f      	movs	r2, #143	; 0x8f
 80057a4:	2178      	movs	r1, #120	; 0x78
 80057a6:	48ca      	ldr	r0, [pc, #808]	; (8005ad0 <setting_winPage+0x18c4>)
 80057a8:	f001 fc6c 	bl	8007084 <ILI9341_Draw_Text>
				//���� 2
				if(stateWin == 1){
 80057ac:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d154      	bne.n	800585e <setting_winPage+0x1652>
					drawPos.x = winnerPic.x0;
 80057b4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80057b8:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80057bc:	881a      	ldrh	r2, [r3, #0]
 80057be:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80057c2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80057c6:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0+28;
 80057c8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80057cc:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80057d0:	885b      	ldrh	r3, [r3, #2]
 80057d2:	331c      	adds	r3, #28
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80057da:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80057de:	805a      	strh	r2, [r3, #2]
					character56List[0].drawPoint = drawPos;
 80057e0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80057e4:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80057e8:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80057ec:	f5a2 7227 	sub.w	r2, r2, #668	; 0x29c
 80057f0:	6812      	ldr	r2, [r2, #0]
 80057f2:	605a      	str	r2, [r3, #4]
					drawImageAtPoint(character56List[0], SCREEN_ROTATION);
 80057f4:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80057f8:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80057fc:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 8005800:	ca07      	ldmia	r2, {r0, r1, r2}
 8005802:	f7fe fa0f 	bl	8003c24 <drawImageAtPoint>
					drawPos.x = winnerPic.x1-56;
 8005806:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800580a:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800580e:	889b      	ldrh	r3, [r3, #4]
 8005810:	3b38      	subs	r3, #56	; 0x38
 8005812:	b29a      	uxth	r2, r3
 8005814:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005818:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800581c:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0+28;
 800581e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005822:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8005826:	885b      	ldrh	r3, [r3, #2]
 8005828:	331c      	adds	r3, #28
 800582a:	b29a      	uxth	r2, r3
 800582c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005830:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005834:	805a      	strh	r2, [r3, #2]
					character56List[1].drawPoint = drawPos;
 8005836:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800583a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800583e:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8005842:	f5a2 7227 	sub.w	r2, r2, #668	; 0x29c
 8005846:	6812      	ldr	r2, [r2, #0]
 8005848:	611a      	str	r2, [r3, #16]
					drawImageAtPoint(character56List[1], SCREEN_ROTATION);
 800584a:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 800584e:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8005852:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 8005856:	320c      	adds	r2, #12
 8005858:	ca07      	ldmia	r2, {r0, r1, r2}
 800585a:	f7fe f9e3 	bl	8003c24 <drawImageAtPoint>
				}
				//���� 3
				if(stateWin == 2){
 800585e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8005862:	2b02      	cmp	r3, #2
 8005864:	d17c      	bne.n	8005960 <setting_winPage+0x1754>
					drawPos.x = winnerPic.x0;
 8005866:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800586a:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800586e:	881a      	ldrh	r2, [r3, #0]
 8005870:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005874:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005878:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0;
 800587a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800587e:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8005882:	885a      	ldrh	r2, [r3, #2]
 8005884:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005888:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800588c:	805a      	strh	r2, [r3, #2]
					character56List[0].drawPoint = drawPos;
 800588e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005892:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8005896:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 800589a:	f5a2 7227 	sub.w	r2, r2, #668	; 0x29c
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	605a      	str	r2, [r3, #4]
					drawImageAtPoint(character56List[0], SCREEN_ROTATION);
 80058a2:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80058a6:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80058aa:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 80058ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80058b0:	f7fe f9b8 	bl	8003c24 <drawImageAtPoint>
					drawPos.x = winnerPic.x0+56;
 80058b4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80058b8:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	3338      	adds	r3, #56	; 0x38
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80058c6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80058ca:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0;
 80058cc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80058d0:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80058d4:	885a      	ldrh	r2, [r3, #2]
 80058d6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80058da:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80058de:	805a      	strh	r2, [r3, #2]
					character56List[1].drawPoint = drawPos;
 80058e0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80058e4:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80058e8:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80058ec:	f5a2 7227 	sub.w	r2, r2, #668	; 0x29c
 80058f0:	6812      	ldr	r2, [r2, #0]
 80058f2:	611a      	str	r2, [r3, #16]
					drawImageAtPoint(character56List[1], SCREEN_ROTATION);
 80058f4:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80058f8:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80058fc:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 8005900:	320c      	adds	r2, #12
 8005902:	ca07      	ldmia	r2, {r0, r1, r2}
 8005904:	f7fe f98e 	bl	8003c24 <drawImageAtPoint>
					drawPos.x = winnerPic.x0+32;
 8005908:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800590c:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	3320      	adds	r3, #32
 8005914:	b29a      	uxth	r2, r3
 8005916:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800591a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800591e:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0+56;
 8005920:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005924:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8005928:	885b      	ldrh	r3, [r3, #2]
 800592a:	3338      	adds	r3, #56	; 0x38
 800592c:	b29a      	uxth	r2, r3
 800592e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005932:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005936:	805a      	strh	r2, [r3, #2]
					character56List[2].drawPoint = drawPos;
 8005938:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800593c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8005940:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8005944:	f5a2 7227 	sub.w	r2, r2, #668	; 0x29c
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	61da      	str	r2, [r3, #28]
					drawImageAtPoint(character56List[2], SCREEN_ROTATION);
 800594c:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8005950:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8005954:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 8005958:	3218      	adds	r2, #24
 800595a:	ca07      	ldmia	r2, {r0, r1, r2}
 800595c:	f7fe f962 	bl	8003c24 <drawImageAtPoint>

				}
				//���� 4
				if(stateWin == 3){
 8005960:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8005964:	2b03      	cmp	r3, #3
 8005966:	f040 80a7 	bne.w	8005ab8 <setting_winPage+0x18ac>
					drawPos.x = winnerPic.x0;
 800596a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800596e:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8005972:	881a      	ldrh	r2, [r3, #0]
 8005974:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005978:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800597c:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0;
 800597e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005982:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8005986:	885a      	ldrh	r2, [r3, #2]
 8005988:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800598c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005990:	805a      	strh	r2, [r3, #2]
					character56List[0].drawPoint = drawPos;
 8005992:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005996:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800599a:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 800599e:	f5a2 7227 	sub.w	r2, r2, #668	; 0x29c
 80059a2:	6812      	ldr	r2, [r2, #0]
 80059a4:	605a      	str	r2, [r3, #4]
					drawImageAtPoint(character56List[0], SCREEN_ROTATION);
 80059a6:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80059aa:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80059ae:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 80059b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80059b4:	f7fe f936 	bl	8003c24 <drawImageAtPoint>
					drawPos.x = winnerPic.x0+56;
 80059b8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80059bc:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	3338      	adds	r3, #56	; 0x38
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80059ca:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80059ce:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0;
 80059d0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80059d4:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80059d8:	885a      	ldrh	r2, [r3, #2]
 80059da:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80059de:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80059e2:	805a      	strh	r2, [r3, #2]
					character56List[1].drawPoint = drawPos;
 80059e4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80059e8:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80059ec:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80059f0:	f5a2 7227 	sub.w	r2, r2, #668	; 0x29c
 80059f4:	6812      	ldr	r2, [r2, #0]
 80059f6:	611a      	str	r2, [r3, #16]
					drawImageAtPoint(character56List[1], SCREEN_ROTATION);
 80059f8:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 80059fc:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8005a00:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 8005a04:	320c      	adds	r2, #12
 8005a06:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a08:	f7fe f90c 	bl	8003c24 <drawImageAtPoint>
					drawPos.x = winnerPic.x0;
 8005a0c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005a10:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8005a14:	881a      	ldrh	r2, [r3, #0]
 8005a16:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005a1a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005a1e:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0+56;
 8005a20:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005a24:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8005a28:	885b      	ldrh	r3, [r3, #2]
 8005a2a:	3338      	adds	r3, #56	; 0x38
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005a32:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005a36:	805a      	strh	r2, [r3, #2]
					character56List[2].drawPoint = drawPos;
 8005a38:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005a3c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8005a40:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8005a44:	f5a2 7227 	sub.w	r2, r2, #668	; 0x29c
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	61da      	str	r2, [r3, #28]
					drawImageAtPoint(character56List[2], SCREEN_ROTATION);
 8005a4c:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8005a50:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8005a54:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 8005a58:	3218      	adds	r2, #24
 8005a5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a5c:	f7fe f8e2 	bl	8003c24 <drawImageAtPoint>
					drawPos.x = winnerPic.x0+56;
 8005a60:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005a64:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	3338      	adds	r3, #56	; 0x38
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005a72:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005a76:	801a      	strh	r2, [r3, #0]
					drawPos.y = winnerPic.y0+56;
 8005a78:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005a7c:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8005a80:	885b      	ldrh	r3, [r3, #2]
 8005a82:	3338      	adds	r3, #56	; 0x38
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005a8a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005a8e:	805a      	strh	r2, [r3, #2]
					character56List[3].drawPoint = drawPos;
 8005a90:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005a94:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8005a98:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8005a9c:	f5a2 7227 	sub.w	r2, r2, #668	; 0x29c
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	629a      	str	r2, [r3, #40]	; 0x28
					drawImageAtPoint(character56List[3], SCREEN_ROTATION);
 8005aa4:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
 8005aa8:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8005aac:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 8005ab0:	3224      	adds	r2, #36	; 0x24
 8005ab2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ab4:	f7fe f8b6 	bl	8003c24 <drawImageAtPoint>
				}
			}
			while (1) {
				if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10) == GPIO_PIN_SET) {
 8005ab8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005abc:	4805      	ldr	r0, [pc, #20]	; (8005ad4 <setting_winPage+0x18c8>)
 8005abe:	f003 fbe9 	bl	8009294 <HAL_GPIO_ReadPin>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d107      	bne.n	8005ad8 <setting_winPage+0x18cc>
					displayScreen = 2;
 8005ac8:	2302      	movs	r3, #2
 8005aca:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
					break;
 8005ace:	e027      	b.n	8005b20 <setting_winPage+0x1914>
 8005ad0:	0800eed8 	.word	0x0800eed8
 8005ad4:	40021000 	.word	0x40021000
				}
				if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == GPIO_PIN_SET) {
 8005ad8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005adc:	4811      	ldr	r0, [pc, #68]	; (8005b24 <setting_winPage+0x1918>)
 8005ade:	f003 fbd9 	bl	8009294 <HAL_GPIO_ReadPin>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d108      	bne.n	8005afa <setting_winPage+0x18ee>
					displayScreen = 2;
 8005ae8:	2302      	movs	r3, #2
 8005aea:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
					mapID++;
 8005aee:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8005af2:	3301      	adds	r3, #1
 8005af4:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
					break;
 8005af8:	e012      	b.n	8005b20 <setting_winPage+0x1914>
				}
				if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == GPIO_PIN_SET) {
 8005afa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005afe:	4809      	ldr	r0, [pc, #36]	; (8005b24 <setting_winPage+0x1918>)
 8005b00:	f003 fbc8 	bl	8009294 <HAL_GPIO_ReadPin>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d106      	bne.n	8005b18 <setting_winPage+0x190c>
					displayScreen = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
					mapID = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
					break;
 8005b16:	e003      	b.n	8005b20 <setting_winPage+0x1914>
				}
				HAL_Delay(200);
 8005b18:	20c8      	movs	r0, #200	; 0xc8
 8005b1a:	f002 f93d 	bl	8007d98 <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10) == GPIO_PIN_SET) {
 8005b1e:	e7cb      	b.n	8005ab8 <setting_winPage+0x18ac>
		sprintf(str,"value :%d endFlag:%b\n",displayScreen,endGameFlag);
 8005b20:	f7fe bd39 	b.w	8004596 <setting_winPage+0x38a>
 8005b24:	40021000 	.word	0x40021000

08005b28 <HAL_TIM_PeriodElapsedCallback>:
Player* players ;
PlayerUI* playerUIs;
Queue bombs ={NULL,NULL,0};
Queue detonateEffects = {NULL,NULL,0};
int32_t buffer[4];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
	if(htim==&htim1){
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a2d      	ldr	r2, [pc, #180]	; (8005be8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d129      	bne.n	8005b8c <HAL_TIM_PeriodElapsedCallback+0x64>
		TimeTotal += 20;
 8005b38:	4b2c      	ldr	r3, [pc, #176]	; (8005bec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3314      	adds	r3, #20
 8005b3e:	4a2b      	ldr	r2, [pc, #172]	; (8005bec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8005b40:	6013      	str	r3, [r2, #0]
		int deadFlagTotal = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
		for(int i=0;i<playerCount;i++){
 8005b46:	2300      	movs	r3, #0
 8005b48:	60bb      	str	r3, [r7, #8]
 8005b4a:	e00e      	b.n	8005b6a <HAL_TIM_PeriodElapsedCallback+0x42>
			if(players[i].deadFlag)
 8005b4c:	4b28      	ldr	r3, [pc, #160]	; (8005bf0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	019b      	lsls	r3, r3, #6
 8005b54:	4413      	add	r3, r2
 8005b56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_TIM_PeriodElapsedCallback+0x3c>
				deadFlagTotal ++;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3301      	adds	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
		for(int i=0;i<playerCount;i++){
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	3301      	adds	r3, #1
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	4b22      	ldr	r3, [pc, #136]	; (8005bf4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	dbeb      	blt.n	8005b4c <HAL_TIM_PeriodElapsedCallback+0x24>
		}
		if(deadFlagTotal+1<playerCount){
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	4b1e      	ldr	r3, [pc, #120]	; (8005bf4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	da2e      	bge.n	8005bde <HAL_TIM_PeriodElapsedCallback+0xb6>
			HAL_ADC_Start_DMA(&hadc1,(uint32_t *)buffer,4);
 8005b80:	2204      	movs	r2, #4
 8005b82:	491d      	ldr	r1, [pc, #116]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8005b84:	481d      	ldr	r0, [pc, #116]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8005b86:	f002 f96f 	bl	8007e68 <HAL_ADC_Start_DMA>
		clock++;
		sprintf(str,"%d:%d\n",clock/60,clock%60);
		printOut(str);

	}
}
 8005b8a:	e028      	b.n	8005bde <HAL_TIM_PeriodElapsedCallback+0xb6>
	else if(htim==&htim2){
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a1c      	ldr	r2, [pc, #112]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d124      	bne.n	8005bde <HAL_TIM_PeriodElapsedCallback+0xb6>
		clock++;
 8005b94:	4b1b      	ldr	r3, [pc, #108]	; (8005c04 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	4a1a      	ldr	r2, [pc, #104]	; (8005c04 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8005b9c:	6013      	str	r3, [r2, #0]
		sprintf(str,"%d:%d\n",clock/60,clock%60);
 8005b9e:	4b19      	ldr	r3, [pc, #100]	; (8005c04 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a19      	ldr	r2, [pc, #100]	; (8005c08 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8005ba4:	fb82 1203 	smull	r1, r2, r2, r3
 8005ba8:	441a      	add	r2, r3
 8005baa:	1152      	asrs	r2, r2, #5
 8005bac:	17db      	asrs	r3, r3, #31
 8005bae:	1ad0      	subs	r0, r2, r3
 8005bb0:	4b14      	ldr	r3, [pc, #80]	; (8005c04 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8005bb6:	fb83 1302 	smull	r1, r3, r3, r2
 8005bba:	4413      	add	r3, r2
 8005bbc:	1159      	asrs	r1, r3, #5
 8005bbe:	17d3      	asrs	r3, r2, #31
 8005bc0:	1ac9      	subs	r1, r1, r3
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	1a5b      	subs	r3, r3, r1
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	1ad1      	subs	r1, r2, r3
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4602      	mov	r2, r0
 8005bd0:	490e      	ldr	r1, [pc, #56]	; (8005c0c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8005bd2:	480f      	ldr	r0, [pc, #60]	; (8005c10 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005bd4:	f006 ffc6 	bl	800cb64 <siprintf>
		printOut(str);
 8005bd8:	480d      	ldr	r0, [pc, #52]	; (8005c10 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8005bda:	f000 fffd 	bl	8006bd8 <printOut>
}
 8005bde:	bf00      	nop
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20002e2c 	.word	0x20002e2c
 8005bec:	20002d80 	.word	0x20002d80
 8005bf0:	20002d84 	.word	0x20002d84
 8005bf4:	2000018c 	.word	0x2000018c
 8005bf8:	20002da4 	.word	0x20002da4
 8005bfc:	20000b70 	.word	0x20000b70
 8005c00:	20002e78 	.word	0x20002e78
 8005c04:	20002d7c 	.word	0x20002d7c
 8005c08:	88888889 	.word	0x88888889
 8005c0c:	0800efb0 	.word	0x0800efb0
 8005c10:	20001800 	.word	0x20001800

08005c14 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8005c14:	b590      	push	{r4, r7, lr}
 8005c16:	ed2d 8b02 	vpush	{d8}
 8005c1a:	b099      	sub	sp, #100	; 0x64
 8005c1c:	af02      	add	r7, sp, #8
 8005c1e:	6078      	str	r0, [r7, #4]
	int time=TimeTotal;
 8005c20:	4b92      	ldr	r3, [pc, #584]	; (8005e6c <HAL_ADC_ConvCpltCallback+0x258>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	647b      	str	r3, [r7, #68]	; 0x44
	if(TimeTotal>=GAME_TIME)
 8005c26:	4b91      	ldr	r3, [pc, #580]	; (8005e6c <HAL_ADC_ConvCpltCallback+0x258>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005c2e:	db1a      	blt.n	8005c66 <HAL_ADC_ConvCpltCallback+0x52>
	while(bombs.size&&((Bomb*)bombs.front->value)->detonateTime<time){
 8005c30:	e005      	b.n	8005c3e <HAL_ADC_ConvCpltCallback+0x2a>

		detonate((Bomb*)bombs.front->value);
 8005c32:	4b8f      	ldr	r3, [pc, #572]	; (8005e70 <HAL_ADC_ConvCpltCallback+0x25c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fc f847 	bl	8001ccc <detonate>
	while(bombs.size&&((Bomb*)bombs.front->value)->detonateTime<time){
 8005c3e:	4b8c      	ldr	r3, [pc, #560]	; (8005e70 <HAL_ADC_ConvCpltCallback+0x25c>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00f      	beq.n	8005c66 <HAL_ADC_ConvCpltCallback+0x52>
 8005c46:	4b8a      	ldr	r3, [pc, #552]	; (8005e70 <HAL_ADC_ConvCpltCallback+0x25c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c50:	429a      	cmp	r2, r3
 8005c52:	dcee      	bgt.n	8005c32 <HAL_ADC_ConvCpltCallback+0x1e>
	}
	while(detonateEffects.size&&((DetonateEffect*)detonateEffects.front->value)->deconstructTime<time){
 8005c54:	e007      	b.n	8005c66 <HAL_ADC_ConvCpltCallback+0x52>

		clearObject(((DetonateEffect*)detonateEffects.front->value)->index,true);
 8005c56:	4b87      	ldr	r3, [pc, #540]	; (8005e74 <HAL_ADC_ConvCpltCallback+0x260>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005c62:	f7fb ff19 	bl	8001a98 <clearObject>
	while(detonateEffects.size&&((DetonateEffect*)detonateEffects.front->value)->deconstructTime<time){
 8005c66:	4b83      	ldr	r3, [pc, #524]	; (8005e74 <HAL_ADC_ConvCpltCallback+0x260>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d006      	beq.n	8005c7c <HAL_ADC_ConvCpltCallback+0x68>
 8005c6e:	4b81      	ldr	r3, [pc, #516]	; (8005e74 <HAL_ADC_ConvCpltCallback+0x260>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	dcec      	bgt.n	8005c56 <HAL_ADC_ConvCpltCallback+0x42>
	}
	for(int i=0;i<playerCount;i++){
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c80:	e01f      	b.n	8005cc2 <HAL_ADC_ConvCpltCallback+0xae>
		if(players[i].immortalFlag&&time-players[i].initialImmortalTime>IMMORTAL_DURATION)
 8005c82:	4b7d      	ldr	r3, [pc, #500]	; (8005e78 <HAL_ADC_ConvCpltCallback+0x264>)
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c88:	019b      	lsls	r3, r3, #6
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d013      	beq.n	8005cbc <HAL_ADC_ConvCpltCallback+0xa8>
 8005c94:	4b78      	ldr	r3, [pc, #480]	; (8005e78 <HAL_ADC_ConvCpltCallback+0x264>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c9a:	019b      	lsls	r3, r3, #6
 8005c9c:	4413      	add	r3, r2
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	dd07      	ble.n	8005cbc <HAL_ADC_ConvCpltCallback+0xa8>
			players[i].immortalFlag = false;
 8005cac:	4b72      	ldr	r3, [pc, #456]	; (8005e78 <HAL_ADC_ConvCpltCallback+0x264>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb2:	019b      	lsls	r3, r3, #6
 8005cb4:	4413      	add	r3, r2
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for(int i=0;i<playerCount;i++){
 8005cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	657b      	str	r3, [r7, #84]	; 0x54
 8005cc2:	4b6e      	ldr	r3, [pc, #440]	; (8005e7c <HAL_ADC_ConvCpltCallback+0x268>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	dbda      	blt.n	8005c82 <HAL_ADC_ConvCpltCallback+0x6e>
	}
	updateMap();
 8005ccc:	f7fc f956 	bl	8001f7c <updateMap>
	for(int i=0,humanPlayerCount =0;i<playerCount;i++){
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	653b      	str	r3, [r7, #80]	; 0x50
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cd8:	e0b7      	b.n	8005e4a <HAL_ADC_ConvCpltCallback+0x236>
		if(players[i].botFlag){
 8005cda:	4b67      	ldr	r3, [pc, #412]	; (8005e78 <HAL_ADC_ConvCpltCallback+0x264>)
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce0:	019b      	lsls	r3, r3, #6
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d04c      	beq.n	8005d86 <HAL_ADC_ConvCpltCallback+0x172>
			if(!players[i].deadFlag){
 8005cec:	4b62      	ldr	r3, [pc, #392]	; (8005e78 <HAL_ADC_ConvCpltCallback+0x264>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cf2:	019b      	lsls	r3, r3, #6
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cfa:	f083 0301 	eor.w	r3, r3, #1
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 809f 	beq.w	8005e44 <HAL_ADC_ConvCpltCallback+0x230>
				Vector2 dst=Sub( toPosition(findNextIndex(&players[i])) ,players[i].transform.position);
 8005d06:	4b5c      	ldr	r3, [pc, #368]	; (8005e78 <HAL_ADC_ConvCpltCallback+0x264>)
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d0c:	019b      	lsls	r3, r3, #6
 8005d0e:	441a      	add	r2, r3
 8005d10:	f107 031c 	add.w	r3, r7, #28
 8005d14:	4611      	mov	r1, r2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fc fd48 	bl	80027ac <findNextIndex>
 8005d1c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d20:	f107 031c 	add.w	r3, r7, #28
 8005d24:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005d28:	f7fa fec0 	bl	8000aac <toPosition>
 8005d2c:	4b52      	ldr	r3, [pc, #328]	; (8005e78 <HAL_ADC_ConvCpltCallback+0x264>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d32:	019b      	lsls	r3, r3, #6
 8005d34:	4413      	add	r3, r2
 8005d36:	f107 000c 	add.w	r0, r7, #12
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	9200      	str	r2, [sp, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005d44:	ca06      	ldmia	r2, {r1, r2}
 8005d46:	f7fa fdd2 	bl	80008ee <Sub>
				dst.x = clamp(-1,dst.x,1);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	4619      	mov	r1, r3
 8005d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d54:	f000 ff0c 	bl	8006b70 <clamp>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	60fb      	str	r3, [r7, #12]
				dst.y = clamp(-1,dst.y,1);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	4619      	mov	r1, r3
 8005d62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d66:	f000 ff03 	bl	8006b70 <clamp>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	613b      	str	r3, [r7, #16]
				Move(&players[i],dst);
 8005d6e:	4b42      	ldr	r3, [pc, #264]	; (8005e78 <HAL_ADC_ConvCpltCallback+0x264>)
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d74:	019b      	lsls	r3, r3, #6
 8005d76:	18d0      	adds	r0, r2, r3
 8005d78:	f107 030c 	add.w	r3, r7, #12
 8005d7c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005d80:	f7fb f916 	bl	8000fb0 <Move>
 8005d84:	e05e      	b.n	8005e44 <HAL_ADC_ConvCpltCallback+0x230>
			}
		}
		else{
			int num =(humanPlayerCount == 0)?0:2;
 8005d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <HAL_ADC_ConvCpltCallback+0x17c>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e000      	b.n	8005d92 <HAL_ADC_ConvCpltCallback+0x17e>
 8005d90:	2302      	movs	r3, #2
 8005d92:	637b      	str	r3, [r7, #52]	; 0x34
			if(humanPlayerCount<2){
 8005d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	dc51      	bgt.n	8005e3e <HAL_ADC_ConvCpltCallback+0x22a>
				if(!players[i].deadFlag)
 8005d9a:	4b37      	ldr	r3, [pc, #220]	; (8005e78 <HAL_ADC_ConvCpltCallback+0x264>)
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da0:	019b      	lsls	r3, r3, #6
 8005da2:	4413      	add	r3, r2
 8005da4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005da8:	f083 0301 	eor.w	r3, r3, #1
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d045      	beq.n	8005e3e <HAL_ADC_ConvCpltCallback+0x22a>
					Move(&players[i],Vector2_init(mappingValue(buffer[num],0,0xfff,-3,3) ,mappingValue(buffer[num+1],0,0xfff,3,-3)));
 8005db2:	4b31      	ldr	r3, [pc, #196]	; (8005e78 <HAL_ADC_ConvCpltCallback+0x264>)
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db8:	019b      	lsls	r3, r3, #6
 8005dba:	18d4      	adds	r4, r2, r3
 8005dbc:	4a30      	ldr	r2, [pc, #192]	; (8005e80 <HAL_ADC_ConvCpltCallback+0x26c>)
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc4:	ee07 3a90 	vmov	s15, r3
 8005dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dcc:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 8005dd0:	eef8 1a08 	vmov.f32	s3, #136	; 0xc0400000 -3.0
 8005dd4:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8005e84 <HAL_ADC_ConvCpltCallback+0x270>
 8005dd8:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8005e88 <HAL_ADC_ConvCpltCallback+0x274>
 8005ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8005de0:	f000 fe98 	bl	8006b14 <mappingValue>
 8005de4:	eef0 7a40 	vmov.f32	s15, s0
 8005de8:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8005dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dee:	3301      	adds	r3, #1
 8005df0:	4a23      	ldr	r2, [pc, #140]	; (8005e80 <HAL_ADC_ConvCpltCallback+0x26c>)
 8005df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df6:	ee07 3a90 	vmov	s15, r3
 8005dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dfe:	eeb8 2a08 	vmov.f32	s4, #136	; 0xc0400000 -3.0
 8005e02:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8005e06:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8005e84 <HAL_ADC_ConvCpltCallback+0x270>
 8005e0a:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8005e88 <HAL_ADC_ConvCpltCallback+0x274>
 8005e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8005e12:	f000 fe7f 	bl	8006b14 <mappingValue>
 8005e16:	eef0 7a40 	vmov.f32	s15, s0
 8005e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e22:	ee17 2a90 	vmov	r2, s15
 8005e26:	ee18 1a10 	vmov	r1, s16
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fa fd28 	bl	8000880 <Vector2_init>
 8005e30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e34:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f7fb f8b9 	bl	8000fb0 <Move>
			}

			humanPlayerCount++;
 8005e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e40:	3301      	adds	r3, #1
 8005e42:	64fb      	str	r3, [r7, #76]	; 0x4c
	for(int i=0,humanPlayerCount =0;i<playerCount;i++){
 8005e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e46:	3301      	adds	r3, #1
 8005e48:	653b      	str	r3, [r7, #80]	; 0x50
 8005e4a:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <HAL_ADC_ConvCpltCallback+0x268>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e50:	429a      	cmp	r2, r3
 8005e52:	f6ff af42 	blt.w	8005cda <HAL_ADC_ConvCpltCallback+0xc6>
		}
	}

	drawPlayers(players,playerCount);
 8005e56:	4b08      	ldr	r3, [pc, #32]	; (8005e78 <HAL_ADC_ConvCpltCallback+0x264>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a08      	ldr	r2, [pc, #32]	; (8005e7c <HAL_ADC_ConvCpltCallback+0x268>)
 8005e5c:	6812      	ldr	r2, [r2, #0]
 8005e5e:	4611      	mov	r1, r2
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fb faf7 	bl	8001454 <drawPlayers>
	for(int i=0;i<playerCount;i++)
 8005e66:	2300      	movs	r3, #0
 8005e68:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e6a:	e01d      	b.n	8005ea8 <HAL_ADC_ConvCpltCallback+0x294>
 8005e6c:	20002d80 	.word	0x20002d80
 8005e70:	20002d8c 	.word	0x20002d8c
 8005e74:	20002d98 	.word	0x20002d98
 8005e78:	20002d84 	.word	0x20002d84
 8005e7c:	2000018c 	.word	0x2000018c
 8005e80:	20002da4 	.word	0x20002da4
 8005e84:	457ff000 	.word	0x457ff000
 8005e88:	00000000 	.word	0x00000000
		DrawPlayerUI(&playerUIs[i]);
 8005e8c:	4b2c      	ldr	r3, [pc, #176]	; (8005f40 <HAL_ADC_ConvCpltCallback+0x32c>)
 8005e8e:	6819      	ldr	r1, [r3, #0]
 8005e90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e92:	4613      	mov	r3, r2
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	1a9b      	subs	r3, r3, r2
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	440b      	add	r3, r1
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fd fcab 	bl	80037f8 <DrawPlayerUI>
	for(int i=0;i<playerCount;i++)
 8005ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ea8:	4b26      	ldr	r3, [pc, #152]	; (8005f44 <HAL_ADC_ConvCpltCallback+0x330>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	dbec      	blt.n	8005e8c <HAL_ADC_ConvCpltCallback+0x278>
	Vector2 clockPosition = Vector2_init(UI_MARGIN,10);
 8005eb2:	f107 0314 	add.w	r3, r7, #20
 8005eb6:	220a      	movs	r2, #10
 8005eb8:	2102      	movs	r1, #2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fa fce0 	bl	8000880 <Vector2_init>
	int timeLeft = GAME_TIME - clock;
 8005ec0:	4b21      	ldr	r3, [pc, #132]	; (8005f48 <HAL_ADC_ConvCpltCallback+0x334>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8005ec8:	643b      	str	r3, [r7, #64]	; 0x40
	int minute = timeLeft/60,second=timeLeft%60;
 8005eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ecc:	4a1f      	ldr	r2, [pc, #124]	; (8005f4c <HAL_ADC_ConvCpltCallback+0x338>)
 8005ece:	fb82 1203 	smull	r1, r2, r2, r3
 8005ed2:	441a      	add	r2, r3
 8005ed4:	1152      	asrs	r2, r2, #5
 8005ed6:	17db      	asrs	r3, r3, #31
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005edc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ede:	4b1b      	ldr	r3, [pc, #108]	; (8005f4c <HAL_ADC_ConvCpltCallback+0x338>)
 8005ee0:	fb83 1302 	smull	r1, r3, r3, r2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	1159      	asrs	r1, r3, #5
 8005ee8:	17d3      	asrs	r3, r2, #31
 8005eea:	1ac9      	subs	r1, r1, r3
 8005eec:	460b      	mov	r3, r1
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	1a5b      	subs	r3, r3, r1
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	63bb      	str	r3, [r7, #56]	; 0x38
	if(second<10)
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	2b09      	cmp	r3, #9
 8005efc:	dc06      	bgt.n	8005f0c <HAL_ADC_ConvCpltCallback+0x2f8>
		sprintf(str,"%d:0%d",minute,second);
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f02:	4913      	ldr	r1, [pc, #76]	; (8005f50 <HAL_ADC_ConvCpltCallback+0x33c>)
 8005f04:	4813      	ldr	r0, [pc, #76]	; (8005f54 <HAL_ADC_ConvCpltCallback+0x340>)
 8005f06:	f006 fe2d 	bl	800cb64 <siprintf>
 8005f0a:	e005      	b.n	8005f18 <HAL_ADC_ConvCpltCallback+0x304>
	else
		sprintf(str,"%d:%d",minute,second);
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f10:	4911      	ldr	r1, [pc, #68]	; (8005f58 <HAL_ADC_ConvCpltCallback+0x344>)
 8005f12:	4810      	ldr	r0, [pc, #64]	; (8005f54 <HAL_ADC_ConvCpltCallback+0x340>)
 8005f14:	f006 fe26 	bl	800cb64 <siprintf>
	ILI9341_Draw_Text(str,clockPosition.x,clockPosition.y, WHITE, 2, BLACK);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	b2d9      	uxtb	r1, r3
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	2300      	movs	r3, #0
 8005f22:	9301      	str	r3, [sp, #4]
 8005f24:	2302      	movs	r3, #2
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f2c:	4809      	ldr	r0, [pc, #36]	; (8005f54 <HAL_ADC_ConvCpltCallback+0x340>)
 8005f2e:	f001 f8a9 	bl	8007084 <ILI9341_Draw_Text>
}
 8005f32:	bf00      	nop
 8005f34:	375c      	adds	r7, #92	; 0x5c
 8005f36:	46bd      	mov	sp, r7
 8005f38:	ecbd 8b02 	vpop	{d8}
 8005f3c:	bd90      	pop	{r4, r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20002d88 	.word	0x20002d88
 8005f44:	2000018c 	.word	0x2000018c
 8005f48:	20002d7c 	.word	0x20002d7c
 8005f4c:	88888889 	.word	0x88888889
 8005f50:	0800efb8 	.word	0x0800efb8
 8005f54:	20001800 	.word	0x20001800
 8005f58:	0800efc0 	.word	0x0800efc0

08005f5c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	4603      	mov	r3, r0
 8005f64:	80fb      	strh	r3, [r7, #6]
	int humanTotal = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	617b      	str	r3, [r7, #20]
	int val=-1;
 8005f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f6e:	613b      	str	r3, [r7, #16]
	if(GPIO_Pin==GPIO_PIN_3){ val =1; }
 8005f70:	88fb      	ldrh	r3, [r7, #6]
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d102      	bne.n	8005f7c <HAL_GPIO_EXTI_Callback+0x20>
 8005f76:	2301      	movs	r3, #1
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	e004      	b.n	8005f86 <HAL_GPIO_EXTI_Callback+0x2a>
	else if(GPIO_Pin==GPIO_PIN_4){ val =2; }
 8005f7c:	88fb      	ldrh	r3, [r7, #6]
 8005f7e:	2b10      	cmp	r3, #16
 8005f80:	d101      	bne.n	8005f86 <HAL_GPIO_EXTI_Callback+0x2a>
 8005f82:	2302      	movs	r3, #2
 8005f84:	613b      	str	r3, [r7, #16]
	if(val!=-1){
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f8c:	d027      	beq.n	8005fde <HAL_GPIO_EXTI_Callback+0x82>
		for(int i=0;i<playerCount;i++){
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	e01f      	b.n	8005fd4 <HAL_GPIO_EXTI_Callback+0x78>
			if(!players[i].botFlag){
 8005f94:	4b14      	ldr	r3, [pc, #80]	; (8005fe8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	019b      	lsls	r3, r3, #6
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa2:	f083 0301 	eor.w	r3, r3, #1
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d010      	beq.n	8005fce <HAL_GPIO_EXTI_Callback+0x72>
				humanTotal++;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]
				if(humanTotal == val){
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d109      	bne.n	8005fce <HAL_GPIO_EXTI_Callback+0x72>
					placeBomb(&players[i]);
 8005fba:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	019b      	lsls	r3, r3, #6
 8005fc2:	4413      	add	r3, r2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fb fe1f 	bl	8001c08 <placeBomb>
					break;
 8005fca:	bf00      	nop
				}
			}
		}
	}
}
 8005fcc:	e007      	b.n	8005fde <HAL_GPIO_EXTI_Callback+0x82>
		for(int i=0;i<playerCount;i++){
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	4b05      	ldr	r3, [pc, #20]	; (8005fec <HAL_GPIO_EXTI_Callback+0x90>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	dbda      	blt.n	8005f94 <HAL_GPIO_EXTI_Callback+0x38>
}
 8005fde:	bf00      	nop
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20002d84 	.word	0x20002d84
 8005fec:	2000018c 	.word	0x2000018c

08005ff0 <SetPlayers>:
void SetPlayers(int count,bool* isBot){
 8005ff0:	b5b0      	push	{r4, r5, r7, lr}
 8005ff2:	b0ce      	sub	sp, #312	; 0x138
 8005ff4:	af02      	add	r7, sp, #8
 8005ff6:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 8005ffa:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
	playerCount = count;
 8005ffe:	4a6b      	ldr	r2, [pc, #428]	; (80061ac <SetPlayers+0x1bc>)
 8006000:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006004:	6013      	str	r3, [r2, #0]
	players = calloc(playerCount,sizeof(Player));
 8006006:	4b69      	ldr	r3, [pc, #420]	; (80061ac <SetPlayers+0x1bc>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2140      	movs	r1, #64	; 0x40
 800600c:	4618      	mov	r0, r3
 800600e:	f006 f895 	bl	800c13c <calloc>
 8006012:	4603      	mov	r3, r0
 8006014:	461a      	mov	r2, r3
 8006016:	4b66      	ldr	r3, [pc, #408]	; (80061b0 <SetPlayers+0x1c0>)
 8006018:	601a      	str	r2, [r3, #0]
	playerUIs = calloc(playerCount,sizeof(PlayerUI));
 800601a:	4b64      	ldr	r3, [pc, #400]	; (80061ac <SetPlayers+0x1bc>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2170      	movs	r1, #112	; 0x70
 8006020:	4618      	mov	r0, r3
 8006022:	f006 f88b 	bl	800c13c <calloc>
 8006026:	4603      	mov	r3, r0
 8006028:	461a      	mov	r2, r3
 800602a:	4b62      	ldr	r3, [pc, #392]	; (80061b4 <SetPlayers+0x1c4>)
 800602c:	601a      	str	r2, [r3, #0]
	char *playerImage[4]={
 800602e:	4b62      	ldr	r3, [pc, #392]	; (80061b8 <SetPlayers+0x1c8>)
 8006030:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8006034:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006036:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		playerImage1,
		playerImage2,
		playerImage3,
		playerImage4
	};
	char *playerImageBomb[4]={
 800603a:	4b60      	ldr	r3, [pc, #384]	; (80061bc <SetPlayers+0x1cc>)
 800603c:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8006040:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006042:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			playerImage1Bomb,
			playerImage2Bomb,
			playerImage3Bomb,
			playerImage4Bomb
		};
	Vector2 startPosition[4]={
 8006046:	4b5e      	ldr	r3, [pc, #376]	; (80061c0 <SetPlayers+0x1d0>)
 8006048:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 800604c:	461d      	mov	r5, r3
 800604e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006052:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,0},
			{0,MAP_HEIGHT-1},
			{MAP_WIDTH-1,0},
			{MAP_WIDTH-1,MAP_HEIGHT-1},
	};
	for(int i=0;i<playerCount;i++){
 800605a:	2300      	movs	r3, #0
 800605c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006060:	e03b      	b.n	80060da <SetPlayers+0xea>
		players[i] = Player_init(startPosition[i],playerImage[i],playerImageBomb[i],isBot[i]);
 8006062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800606c:	443b      	add	r3, r7
 800606e:	f853 4c30 	ldr.w	r4, [r3, #-48]
 8006072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800607c:	443b      	add	r3, r7
 800607e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8006082:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8006086:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800608a:	440a      	add	r2, r1
 800608c:	7811      	ldrb	r1, [r2, #0]
 800608e:	4a48      	ldr	r2, [pc, #288]	; (80061b0 <SetPlayers+0x1c0>)
 8006090:	6810      	ldr	r0, [r2, #0]
 8006092:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8006096:	0192      	lsls	r2, r2, #6
 8006098:	1885      	adds	r5, r0, r2
 800609a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800609e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80060a2:	00d2      	lsls	r2, r2, #3
 80060a4:	f502 7298 	add.w	r2, r2, #304	; 0x130
 80060a8:	443a      	add	r2, r7
 80060aa:	9101      	str	r1, [sp, #4]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	4623      	mov	r3, r4
 80060b0:	3a60      	subs	r2, #96	; 0x60
 80060b2:	ca06      	ldmia	r2, {r1, r2}
 80060b4:	f7fb fec0 	bl	8001e38 <Player_init>
 80060b8:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80060bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80060cc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	for(int i=0;i<playerCount;i++){
 80060d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d4:	3301      	adds	r3, #1
 80060d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80060da:	4b34      	ldr	r3, [pc, #208]	; (80061ac <SetPlayers+0x1bc>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80060e2:	429a      	cmp	r2, r3
 80060e4:	dbbd      	blt.n	8006062 <SetPlayers+0x72>
	}
	for(int i=0;i<playerCount;i++){
 80060e6:	2300      	movs	r3, #0
 80060e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80060ec:	e031      	b.n	8006152 <SetPlayers+0x162>
		playerUIs[i] = PlayerUI_init(&players[i],Vector2_init(5,40+(16+UI_MARGIN)*3*i));
 80060ee:	4b30      	ldr	r3, [pc, #192]	; (80061b0 <SetPlayers+0x1c0>)
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060f6:	019b      	lsls	r3, r3, #6
 80060f8:	18d4      	adds	r4, r2, r3
 80060fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060fe:	2236      	movs	r2, #54	; 0x36
 8006100:	fb02 f303 	mul.w	r3, r2, r3
 8006104:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8006108:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800610c:	2105      	movs	r1, #5
 800610e:	4618      	mov	r0, r3
 8006110:	f7fa fbb6 	bl	8000880 <Vector2_init>
 8006114:	4b27      	ldr	r3, [pc, #156]	; (80061b4 <SetPlayers+0x1c4>)
 8006116:	6819      	ldr	r1, [r3, #0]
 8006118:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800611c:	4613      	mov	r3, r2
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	18cd      	adds	r5, r1, r3
 8006126:	4638      	mov	r0, r7
 8006128:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800612c:	cb0c      	ldmia	r3, {r2, r3}
 800612e:	4621      	mov	r1, r4
 8006130:	f7fd fa08 	bl	8003544 <PlayerUI_init>
 8006134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800613c:	4628      	mov	r0, r5
 800613e:	4619      	mov	r1, r3
 8006140:	2370      	movs	r3, #112	; 0x70
 8006142:	461a      	mov	r2, r3
 8006144:	f006 fe92 	bl	800ce6c <memcpy>
	for(int i=0;i<playerCount;i++){
 8006148:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800614c:	3301      	adds	r3, #1
 800614e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006152:	4b16      	ldr	r3, [pc, #88]	; (80061ac <SetPlayers+0x1bc>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800615a:	429a      	cmp	r2, r3
 800615c:	dbc7      	blt.n	80060ee <SetPlayers+0xfe>
	}
	Transform UI_Bg =Transform_init(Vector2_init(0,0),Vector2_init(5+(16+UI_MARGIN)*5,240),TopLeft);
 800615e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006162:	2200      	movs	r2, #0
 8006164:	2100      	movs	r1, #0
 8006166:	4618      	mov	r0, r3
 8006168:	f7fa fb8a 	bl	8000880 <Vector2_init>
 800616c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006170:	22f0      	movs	r2, #240	; 0xf0
 8006172:	215f      	movs	r1, #95	; 0x5f
 8006174:	4618      	mov	r0, r3
 8006176:	f7fa fb83 	bl	8000880 <Vector2_init>
 800617a:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 800617e:	2300      	movs	r3, #0
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800618c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8006190:	ca06      	ldmia	r2, {r1, r2}
 8006192:	f7fa fcab 	bl	8000aec <Transform_init>
	Draw(&UI_Bg,BLACK);
 8006196:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800619a:	2100      	movs	r1, #0
 800619c:	4618      	mov	r0, r3
 800619e:	f7fa fd68 	bl	8000c72 <Draw>
}
 80061a2:	bf00      	nop
 80061a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bdb0      	pop	{r4, r5, r7, pc}
 80061ac:	2000018c 	.word	0x2000018c
 80061b0:	20002d84 	.word	0x20002d84
 80061b4:	20002d88 	.word	0x20002d88
 80061b8:	0800efc8 	.word	0x0800efc8
 80061bc:	0800efd8 	.word	0x0800efd8
 80061c0:	0800efe8 	.word	0x0800efe8

080061c4 <startGame>:
void startGame(){
 80061c4:	b5b0      	push	{r4, r5, r7, lr}
 80061c6:	b090      	sub	sp, #64	; 0x40
 80061c8:	af02      	add	r7, sp, #8
	for(int i=0;i<mapSize.y;i++){
 80061ca:	2300      	movs	r3, #0
 80061cc:	637b      	str	r3, [r7, #52]	; 0x34
 80061ce:	e039      	b.n	8006244 <startGame+0x80>
		for(int j=0;j<mapSize.x;j++){
 80061d0:	2300      	movs	r3, #0
 80061d2:	633b      	str	r3, [r7, #48]	; 0x30
 80061d4:	e02e      	b.n	8006234 <startGame+0x70>
			Vector2 index = Vector2_init(j,i);
 80061d6:	f107 031c 	add.w	r3, r7, #28
 80061da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fa fb4e 	bl	8000880 <Vector2_init>
			map[i][j].floor = Transform_init(toPosition(index),cellSize,MiddleCenter);
 80061e4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80061e8:	f107 031c 	add.w	r3, r7, #28
 80061ec:	e893 0006 	ldmia.w	r3, {r1, r2}
 80061f0:	f7fa fc5c 	bl	8000aac <toPosition>
 80061f4:	4923      	ldr	r1, [pc, #140]	; (8006284 <startGame+0xc0>)
 80061f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061f8:	4613      	mov	r3, r2
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	4413      	add	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006204:	4413      	add	r3, r2
 8006206:	015b      	lsls	r3, r3, #5
 8006208:	18cc      	adds	r4, r1, r3
 800620a:	4638      	mov	r0, r7
 800620c:	4b1e      	ldr	r3, [pc, #120]	; (8006288 <startGame+0xc4>)
 800620e:	2204      	movs	r2, #4
 8006210:	9201      	str	r2, [sp, #4]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	9200      	str	r2, [sp, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800621c:	ca06      	ldmia	r2, {r1, r2}
 800621e:	f7fa fc65 	bl	8000aec <Transform_init>
 8006222:	4625      	mov	r5, r4
 8006224:	463c      	mov	r4, r7
 8006226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	602b      	str	r3, [r5, #0]
		for(int j=0;j<mapSize.x;j++){
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	3301      	adds	r3, #1
 8006232:	633b      	str	r3, [r7, #48]	; 0x30
 8006234:	4b15      	ldr	r3, [pc, #84]	; (800628c <startGame+0xc8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800623a:	429a      	cmp	r2, r3
 800623c:	dbcb      	blt.n	80061d6 <startGame+0x12>
	for(int i=0;i<mapSize.y;i++){
 800623e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006240:	3301      	adds	r3, #1
 8006242:	637b      	str	r3, [r7, #52]	; 0x34
 8006244:	4b11      	ldr	r3, [pc, #68]	; (800628c <startGame+0xc8>)
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800624a:	429a      	cmp	r2, r3
 800624c:	dbc0      	blt.n	80061d0 <startGame+0xc>
		}
	}
	clock = 0;
 800624e:	4b10      	ldr	r3, [pc, #64]	; (8006290 <startGame+0xcc>)
 8006250:	2200      	movs	r2, #0
 8006252:	601a      	str	r2, [r3, #0]
	ILI9341_Fill_Screen(0x5AED);
 8006254:	f645 20ed 	movw	r0, #23277	; 0x5aed
 8006258:	f001 fa1e 	bl	8007698 <ILI9341_Fill_Screen>
	setMap(2);
 800625c:	2002      	movs	r0, #2
 800625e:	f7fb fa97 	bl	8001790 <setMap>

	bool isBot[4]={false,false,true,true};
 8006262:	4b0c      	ldr	r3, [pc, #48]	; (8006294 <startGame+0xd0>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
	SetPlayers(4,isBot);
 8006268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800626c:	4619      	mov	r1, r3
 800626e:	2004      	movs	r0, #4
 8006270:	f7ff febe 	bl	8005ff0 <SetPlayers>
	HAL_TIM_Base_Start_IT(&htim1);
 8006274:	4808      	ldr	r0, [pc, #32]	; (8006298 <startGame+0xd4>)
 8006276:	f004 fdd7 	bl	800ae28 <HAL_TIM_Base_Start_IT>
}
 800627a:	bf00      	nop
 800627c:	3738      	adds	r7, #56	; 0x38
 800627e:	46bd      	mov	sp, r7
 8006280:	bdb0      	pop	{r4, r5, r7, pc}
 8006282:	bf00      	nop
 8006284:	2000185c 	.word	0x2000185c
 8006288:	20000134 	.word	0x20000134
 800628c:	2000012c 	.word	0x2000012c
 8006290:	20002d7c 	.word	0x20002d7c
 8006294:	0800f008 	.word	0x0800f008
 8006298:	20002e2c 	.word	0x20002e2c

0800629c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80062a0:	f7fd fda6 	bl	8003df0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80062a4:	f7fd fdca 	bl	8003e3c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80062a8:	f001 fd10 	bl	8007ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80062ac:	f000 f824 	bl	80062f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80062b0:	f7fd fb42 	bl	8003938 <MX_GPIO_Init>
  MX_DMA_Init();
 80062b4:	f7fa fac6 	bl	8000844 <MX_DMA_Init>
  MX_TIM1_Init();
 80062b8:	f000 fab6 	bl	8006828 <MX_TIM1_Init>
  MX_RNG_Init();
 80062bc:	f000 f890 	bl	80063e0 <MX_RNG_Init>
  MX_ADC1_Init();
 80062c0:	f7fa f994 	bl	80005ec <MX_ADC1_Init>
  MX_SPI5_Init();
 80062c4:	f000 f8d4 	bl	8006470 <MX_SPI5_Init>
  MX_USART3_UART_Init();
 80062c8:	f000 fb94 	bl	80069f4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80062cc:	f000 fb02 	bl	80068d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 80062d0:	f001 f836 	bl	8007340 <ILI9341_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  srand(HAL_GetTick());
 80062d4:	f001 fd54 	bl	8007d80 <HAL_GetTick>
 80062d8:	4603      	mov	r3, r0
 80062da:	4618      	mov	r0, r3
 80062dc:	f006 fc62 	bl	800cba4 <srand>
  HAL_TIM_Base_Start_IT(&htim2);
 80062e0:	4804      	ldr	r0, [pc, #16]	; (80062f4 <main+0x58>)
 80062e2:	f004 fda1 	bl	800ae28 <HAL_TIM_Base_Start_IT>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80062e6:	2001      	movs	r0, #1
 80062e8:	f000 ffcc 	bl	8007284 <ILI9341_Set_Rotation>
  while (1)
  {
	  setting_winPage();
 80062ec:	f7fd ff8e 	bl	800420c <setting_winPage>
 80062f0:	e7fc      	b.n	80062ec <main+0x50>
 80062f2:	bf00      	nop
 80062f4:	20002e78 	.word	0x20002e78

080062f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b094      	sub	sp, #80	; 0x50
 80062fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062fe:	f107 031c 	add.w	r3, r7, #28
 8006302:	2234      	movs	r2, #52	; 0x34
 8006304:	2100      	movs	r1, #0
 8006306:	4618      	mov	r0, r3
 8006308:	f006 fd68 	bl	800cddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800630c:	f107 0308 	add.w	r3, r7, #8
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	605a      	str	r2, [r3, #4]
 8006316:	609a      	str	r2, [r3, #8]
 8006318:	60da      	str	r2, [r3, #12]
 800631a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800631c:	f003 f804 	bl	8009328 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006320:	4b2b      	ldr	r3, [pc, #172]	; (80063d0 <SystemClock_Config+0xd8>)
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	4a2a      	ldr	r2, [pc, #168]	; (80063d0 <SystemClock_Config+0xd8>)
 8006326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800632a:	6413      	str	r3, [r2, #64]	; 0x40
 800632c:	4b28      	ldr	r3, [pc, #160]	; (80063d0 <SystemClock_Config+0xd8>)
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006334:	607b      	str	r3, [r7, #4]
 8006336:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006338:	4b26      	ldr	r3, [pc, #152]	; (80063d4 <SystemClock_Config+0xdc>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a25      	ldr	r2, [pc, #148]	; (80063d4 <SystemClock_Config+0xdc>)
 800633e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	4b23      	ldr	r3, [pc, #140]	; (80063d4 <SystemClock_Config+0xdc>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800634c:	603b      	str	r3, [r7, #0]
 800634e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006350:	2301      	movs	r3, #1
 8006352:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006354:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8006358:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800635a:	2302      	movs	r3, #2
 800635c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800635e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006362:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006364:	2304      	movs	r3, #4
 8006366:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8006368:	23d8      	movs	r3, #216	; 0xd8
 800636a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800636c:	2302      	movs	r3, #2
 800636e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8006370:	2309      	movs	r3, #9
 8006372:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006374:	2302      	movs	r3, #2
 8006376:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006378:	f107 031c 	add.w	r3, r7, #28
 800637c:	4618      	mov	r0, r3
 800637e:	f003 f833 	bl	80093e8 <HAL_RCC_OscConfig>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006388:	f000 f826 	bl	80063d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800638c:	f002 ffdc 	bl	8009348 <HAL_PWREx_EnableOverDrive>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8006396:	f000 f81f 	bl	80063d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800639a:	230f      	movs	r3, #15
 800639c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800639e:	2302      	movs	r3, #2
 80063a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80063a2:	2300      	movs	r3, #0
 80063a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80063a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80063aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80063ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80063b2:	f107 0308 	add.w	r3, r7, #8
 80063b6:	2107      	movs	r1, #7
 80063b8:	4618      	mov	r0, r3
 80063ba:	f003 fac3 	bl	8009944 <HAL_RCC_ClockConfig>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80063c4:	f000 f808 	bl	80063d8 <Error_Handler>
  }
}
 80063c8:	bf00      	nop
 80063ca:	3750      	adds	r7, #80	; 0x50
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	40023800 	.word	0x40023800
 80063d4:	40007000 	.word	0x40007000

080063d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80063d8:	b480      	push	{r7}
 80063da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80063dc:	e7fe      	b.n	80063dc <Error_Handler+0x4>
	...

080063e0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80063e4:	4b06      	ldr	r3, [pc, #24]	; (8006400 <MX_RNG_Init+0x20>)
 80063e6:	4a07      	ldr	r2, [pc, #28]	; (8006404 <MX_RNG_Init+0x24>)
 80063e8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80063ea:	4805      	ldr	r0, [pc, #20]	; (8006400 <MX_RNG_Init+0x20>)
 80063ec:	f004 f8f8 	bl	800a5e0 <HAL_RNG_Init>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80063f6:	f7ff ffef 	bl	80063d8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80063fa:	bf00      	nop
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20002db4 	.word	0x20002db4
 8006404:	50060800 	.word	0x50060800

08006408 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b0a8      	sub	sp, #160	; 0xa0
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006410:	f107 0310 	add.w	r3, r7, #16
 8006414:	2290      	movs	r2, #144	; 0x90
 8006416:	2100      	movs	r1, #0
 8006418:	4618      	mov	r0, r3
 800641a:	f006 fcdf 	bl	800cddc <memset>
  if(rngHandle->Instance==RNG)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a11      	ldr	r2, [pc, #68]	; (8006468 <HAL_RNG_MspInit+0x60>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d11b      	bne.n	8006460 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8006428:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800642c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800642e:	2300      	movs	r3, #0
 8006430:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006434:	f107 0310 	add.w	r3, r7, #16
 8006438:	4618      	mov	r0, r3
 800643a:	f003 fca9 	bl	8009d90 <HAL_RCCEx_PeriphCLKConfig>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8006444:	f7ff ffc8 	bl	80063d8 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8006448:	4b08      	ldr	r3, [pc, #32]	; (800646c <HAL_RNG_MspInit+0x64>)
 800644a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644c:	4a07      	ldr	r2, [pc, #28]	; (800646c <HAL_RNG_MspInit+0x64>)
 800644e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006452:	6353      	str	r3, [r2, #52]	; 0x34
 8006454:	4b05      	ldr	r3, [pc, #20]	; (800646c <HAL_RNG_MspInit+0x64>)
 8006456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8006460:	bf00      	nop
 8006462:	37a0      	adds	r7, #160	; 0xa0
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	50060800 	.word	0x50060800
 800646c:	40023800 	.word	0x40023800

08006470 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8006474:	4b1b      	ldr	r3, [pc, #108]	; (80064e4 <MX_SPI5_Init+0x74>)
 8006476:	4a1c      	ldr	r2, [pc, #112]	; (80064e8 <MX_SPI5_Init+0x78>)
 8006478:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800647a:	4b1a      	ldr	r3, [pc, #104]	; (80064e4 <MX_SPI5_Init+0x74>)
 800647c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006480:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8006482:	4b18      	ldr	r3, [pc, #96]	; (80064e4 <MX_SPI5_Init+0x74>)
 8006484:	2200      	movs	r2, #0
 8006486:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8006488:	4b16      	ldr	r3, [pc, #88]	; (80064e4 <MX_SPI5_Init+0x74>)
 800648a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800648e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006490:	4b14      	ldr	r3, [pc, #80]	; (80064e4 <MX_SPI5_Init+0x74>)
 8006492:	2200      	movs	r2, #0
 8006494:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006496:	4b13      	ldr	r3, [pc, #76]	; (80064e4 <MX_SPI5_Init+0x74>)
 8006498:	2200      	movs	r2, #0
 800649a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800649c:	4b11      	ldr	r3, [pc, #68]	; (80064e4 <MX_SPI5_Init+0x74>)
 800649e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064a2:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064a4:	4b0f      	ldr	r3, [pc, #60]	; (80064e4 <MX_SPI5_Init+0x74>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80064aa:	4b0e      	ldr	r3, [pc, #56]	; (80064e4 <MX_SPI5_Init+0x74>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80064b0:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <MX_SPI5_Init+0x74>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064b6:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <MX_SPI5_Init+0x74>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 80064bc:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <MX_SPI5_Init+0x74>)
 80064be:	2207      	movs	r2, #7
 80064c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80064c2:	4b08      	ldr	r3, [pc, #32]	; (80064e4 <MX_SPI5_Init+0x74>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80064c8:	4b06      	ldr	r3, [pc, #24]	; (80064e4 <MX_SPI5_Init+0x74>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80064ce:	4805      	ldr	r0, [pc, #20]	; (80064e4 <MX_SPI5_Init+0x74>)
 80064d0:	f004 f8b0 	bl	800a634 <HAL_SPI_Init>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80064da:	f7ff ff7d 	bl	80063d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80064de:	bf00      	nop
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	20002dc4 	.word	0x20002dc4
 80064e8:	40015000 	.word	0x40015000

080064ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08a      	sub	sp, #40	; 0x28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064f4:	f107 0314 	add.w	r3, r7, #20
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	605a      	str	r2, [r3, #4]
 80064fe:	609a      	str	r2, [r3, #8]
 8006500:	60da      	str	r2, [r3, #12]
 8006502:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a17      	ldr	r2, [pc, #92]	; (8006568 <HAL_SPI_MspInit+0x7c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d128      	bne.n	8006560 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800650e:	4b17      	ldr	r3, [pc, #92]	; (800656c <HAL_SPI_MspInit+0x80>)
 8006510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006512:	4a16      	ldr	r2, [pc, #88]	; (800656c <HAL_SPI_MspInit+0x80>)
 8006514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006518:	6453      	str	r3, [r2, #68]	; 0x44
 800651a:	4b14      	ldr	r3, [pc, #80]	; (800656c <HAL_SPI_MspInit+0x80>)
 800651c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006522:	613b      	str	r3, [r7, #16]
 8006524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006526:	4b11      	ldr	r3, [pc, #68]	; (800656c <HAL_SPI_MspInit+0x80>)
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	4a10      	ldr	r2, [pc, #64]	; (800656c <HAL_SPI_MspInit+0x80>)
 800652c:	f043 0320 	orr.w	r3, r3, #32
 8006530:	6313      	str	r3, [r2, #48]	; 0x30
 8006532:	4b0e      	ldr	r3, [pc, #56]	; (800656c <HAL_SPI_MspInit+0x80>)
 8006534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800653e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8006542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006544:	2302      	movs	r3, #2
 8006546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006548:	2300      	movs	r3, #0
 800654a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800654c:	2303      	movs	r3, #3
 800654e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006550:	2305      	movs	r3, #5
 8006552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006554:	f107 0314 	add.w	r3, r7, #20
 8006558:	4619      	mov	r1, r3
 800655a:	4805      	ldr	r0, [pc, #20]	; (8006570 <HAL_SPI_MspInit+0x84>)
 800655c:	f002 fcee 	bl	8008f3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8006560:	bf00      	nop
 8006562:	3728      	adds	r7, #40	; 0x28
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	40015000 	.word	0x40015000
 800656c:	40023800 	.word	0x40023800
 8006570:	40021400 	.word	0x40021400

08006574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800657a:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <HAL_MspInit+0x44>)
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	4a0e      	ldr	r2, [pc, #56]	; (80065b8 <HAL_MspInit+0x44>)
 8006580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006584:	6413      	str	r3, [r2, #64]	; 0x40
 8006586:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <HAL_MspInit+0x44>)
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800658e:	607b      	str	r3, [r7, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006592:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <HAL_MspInit+0x44>)
 8006594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006596:	4a08      	ldr	r2, [pc, #32]	; (80065b8 <HAL_MspInit+0x44>)
 8006598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800659c:	6453      	str	r3, [r2, #68]	; 0x44
 800659e:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <HAL_MspInit+0x44>)
 80065a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065a6:	603b      	str	r3, [r7, #0]
 80065a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80065aa:	2005      	movs	r0, #5
 80065ac:	f002 f90c 	bl	80087c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065b0:	bf00      	nop
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40023800 	.word	0x40023800

080065bc <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80065c0:	f001 fbca 	bl	8007d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80065c4:	bf00      	nop
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80065cc:	2008      	movs	r0, #8
 80065ce:	f002 fe93 	bl	80092f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80065d2:	bf00      	nop
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80065da:	2010      	movs	r0, #16
 80065dc:	f002 fe8c 	bl	80092f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80065e0:	bf00      	nop
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80065e8:	4802      	ldr	r0, [pc, #8]	; (80065f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80065ea:	f004 fcc4 	bl	800af76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80065ee:	bf00      	nop
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20002e2c 	.word	0x20002e2c

080065f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80065fc:	4802      	ldr	r0, [pc, #8]	; (8006608 <TIM2_IRQHandler+0x10>)
 80065fe:	f004 fcba 	bl	800af76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006602:	bf00      	nop
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	20002e78 	.word	0x20002e78

0800660c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006610:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006614:	f002 fe70 	bl	80092f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006618:	bf00      	nop
 800661a:	bd80      	pop	{r7, pc}

0800661c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006620:	4802      	ldr	r0, [pc, #8]	; (800662c <DMA2_Stream0_IRQHandler+0x10>)
 8006622:	f002 fa21 	bl	8008a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006626:	bf00      	nop
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20000bb8 	.word	0x20000bb8

08006630 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
	return 1;
 8006634:	2301      	movs	r3, #1
}
 8006636:	4618      	mov	r0, r3
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <_kill>:

int _kill(int pid, int sig)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800664a:	f006 fbe3 	bl	800ce14 <__errno>
 800664e:	4603      	mov	r3, r0
 8006650:	2216      	movs	r2, #22
 8006652:	601a      	str	r2, [r3, #0]
	return -1;
 8006654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006658:	4618      	mov	r0, r3
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <_exit>:

void _exit (int status)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006668:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff ffe7 	bl	8006640 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006672:	e7fe      	b.n	8006672 <_exit+0x12>

08006674 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006680:	2300      	movs	r3, #0
 8006682:	617b      	str	r3, [r7, #20]
 8006684:	e00a      	b.n	800669c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006686:	f3af 8000 	nop.w
 800668a:	4601      	mov	r1, r0
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	1c5a      	adds	r2, r3, #1
 8006690:	60ba      	str	r2, [r7, #8]
 8006692:	b2ca      	uxtb	r2, r1
 8006694:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	3301      	adds	r3, #1
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	dbf0      	blt.n	8006686 <_read+0x12>
	}

return len;
 80066a4:	687b      	ldr	r3, [r7, #4]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b086      	sub	sp, #24
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066ba:	2300      	movs	r3, #0
 80066bc:	617b      	str	r3, [r7, #20]
 80066be:	e009      	b.n	80066d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	60ba      	str	r2, [r7, #8]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	3301      	adds	r3, #1
 80066d2:	617b      	str	r3, [r7, #20]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	429a      	cmp	r2, r3
 80066da:	dbf1      	blt.n	80066c0 <_write+0x12>
	}
	return len;
 80066dc:	687b      	ldr	r3, [r7, #4]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <_close>:

int _close(int file)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
	return -1;
 80066ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800670e:	605a      	str	r2, [r3, #4]
	return 0;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <_isatty>:

int _isatty(int file)
{
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
	return 1;
 8006726:	2301      	movs	r3, #1
}
 8006728:	4618      	mov	r0, r3
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
	return 0;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
	...

08006750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006758:	4a14      	ldr	r2, [pc, #80]	; (80067ac <_sbrk+0x5c>)
 800675a:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <_sbrk+0x60>)
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006764:	4b13      	ldr	r3, [pc, #76]	; (80067b4 <_sbrk+0x64>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d102      	bne.n	8006772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800676c:	4b11      	ldr	r3, [pc, #68]	; (80067b4 <_sbrk+0x64>)
 800676e:	4a12      	ldr	r2, [pc, #72]	; (80067b8 <_sbrk+0x68>)
 8006770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006772:	4b10      	ldr	r3, [pc, #64]	; (80067b4 <_sbrk+0x64>)
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4413      	add	r3, r2
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	429a      	cmp	r2, r3
 800677e:	d207      	bcs.n	8006790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006780:	f006 fb48 	bl	800ce14 <__errno>
 8006784:	4603      	mov	r3, r0
 8006786:	220c      	movs	r2, #12
 8006788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800678a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800678e:	e009      	b.n	80067a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006790:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <_sbrk+0x64>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006796:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <_sbrk+0x64>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4413      	add	r3, r2
 800679e:	4a05      	ldr	r2, [pc, #20]	; (80067b4 <_sbrk+0x64>)
 80067a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80067a2:	68fb      	ldr	r3, [r7, #12]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20080000 	.word	0x20080000
 80067b0:	00000400 	.word	0x00000400
 80067b4:	20002e28 	.word	0x20002e28
 80067b8:	200030a0 	.word	0x200030a0

080067bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80067c0:	4b15      	ldr	r3, [pc, #84]	; (8006818 <SystemInit+0x5c>)
 80067c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c6:	4a14      	ldr	r2, [pc, #80]	; (8006818 <SystemInit+0x5c>)
 80067c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80067d0:	4b12      	ldr	r3, [pc, #72]	; (800681c <SystemInit+0x60>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a11      	ldr	r2, [pc, #68]	; (800681c <SystemInit+0x60>)
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80067dc:	4b0f      	ldr	r3, [pc, #60]	; (800681c <SystemInit+0x60>)
 80067de:	2200      	movs	r2, #0
 80067e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80067e2:	4b0e      	ldr	r3, [pc, #56]	; (800681c <SystemInit+0x60>)
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	490d      	ldr	r1, [pc, #52]	; (800681c <SystemInit+0x60>)
 80067e8:	4b0d      	ldr	r3, [pc, #52]	; (8006820 <SystemInit+0x64>)
 80067ea:	4013      	ands	r3, r2
 80067ec:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80067ee:	4b0b      	ldr	r3, [pc, #44]	; (800681c <SystemInit+0x60>)
 80067f0:	4a0c      	ldr	r2, [pc, #48]	; (8006824 <SystemInit+0x68>)
 80067f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80067f4:	4b09      	ldr	r3, [pc, #36]	; (800681c <SystemInit+0x60>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a08      	ldr	r2, [pc, #32]	; (800681c <SystemInit+0x60>)
 80067fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006800:	4b06      	ldr	r3, [pc, #24]	; (800681c <SystemInit+0x60>)
 8006802:	2200      	movs	r2, #0
 8006804:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006806:	4b04      	ldr	r3, [pc, #16]	; (8006818 <SystemInit+0x5c>)
 8006808:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800680c:	609a      	str	r2, [r3, #8]
#endif
}
 800680e:	bf00      	nop
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	e000ed00 	.word	0xe000ed00
 800681c:	40023800 	.word	0x40023800
 8006820:	fef6ffff 	.word	0xfef6ffff
 8006824:	24003010 	.word	0x24003010

08006828 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800682e:	f107 0310 	add.w	r3, r7, #16
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	605a      	str	r2, [r3, #4]
 8006838:	609a      	str	r2, [r3, #8]
 800683a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800683c:	1d3b      	adds	r3, r7, #4
 800683e:	2200      	movs	r2, #0
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	605a      	str	r2, [r3, #4]
 8006844:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006846:	4b21      	ldr	r3, [pc, #132]	; (80068cc <MX_TIM1_Init+0xa4>)
 8006848:	4a21      	ldr	r2, [pc, #132]	; (80068d0 <MX_TIM1_Init+0xa8>)
 800684a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2160-1;
 800684c:	4b1f      	ldr	r3, [pc, #124]	; (80068cc <MX_TIM1_Init+0xa4>)
 800684e:	f640 026f 	movw	r2, #2159	; 0x86f
 8006852:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006854:	4b1d      	ldr	r3, [pc, #116]	; (80068cc <MX_TIM1_Init+0xa4>)
 8006856:	2200      	movs	r2, #0
 8006858:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 800685a:	4b1c      	ldr	r3, [pc, #112]	; (80068cc <MX_TIM1_Init+0xa4>)
 800685c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006860:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8006862:	4b1a      	ldr	r3, [pc, #104]	; (80068cc <MX_TIM1_Init+0xa4>)
 8006864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006868:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800686a:	4b18      	ldr	r3, [pc, #96]	; (80068cc <MX_TIM1_Init+0xa4>)
 800686c:	2200      	movs	r2, #0
 800686e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006870:	4b16      	ldr	r3, [pc, #88]	; (80068cc <MX_TIM1_Init+0xa4>)
 8006872:	2200      	movs	r2, #0
 8006874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006876:	4815      	ldr	r0, [pc, #84]	; (80068cc <MX_TIM1_Init+0xa4>)
 8006878:	f004 fa7e 	bl	800ad78 <HAL_TIM_Base_Init>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8006882:	f7ff fda9 	bl	80063d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800688a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800688c:	f107 0310 	add.w	r3, r7, #16
 8006890:	4619      	mov	r1, r3
 8006892:	480e      	ldr	r0, [pc, #56]	; (80068cc <MX_TIM1_Init+0xa4>)
 8006894:	f004 fc8e 	bl	800b1b4 <HAL_TIM_ConfigClockSource>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800689e:	f7ff fd9b 	bl	80063d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068a2:	2300      	movs	r3, #0
 80068a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80068a6:	2300      	movs	r3, #0
 80068a8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80068ae:	1d3b      	adds	r3, r7, #4
 80068b0:	4619      	mov	r1, r3
 80068b2:	4806      	ldr	r0, [pc, #24]	; (80068cc <MX_TIM1_Init+0xa4>)
 80068b4:	f004 feaa 	bl	800b60c <HAL_TIMEx_MasterConfigSynchronization>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80068be:	f7ff fd8b 	bl	80063d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80068c2:	bf00      	nop
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20002e2c 	.word	0x20002e2c
 80068d0:	40010000 	.word	0x40010000

080068d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80068da:	f107 0310 	add.w	r3, r7, #16
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	605a      	str	r2, [r3, #4]
 80068e4:	609a      	str	r2, [r3, #8]
 80068e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068e8:	1d3b      	adds	r3, r7, #4
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	605a      	str	r2, [r3, #4]
 80068f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80068f2:	4b1e      	ldr	r3, [pc, #120]	; (800696c <MX_TIM2_Init+0x98>)
 80068f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80068f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 80068fa:	4b1c      	ldr	r3, [pc, #112]	; (800696c <MX_TIM2_Init+0x98>)
 80068fc:	f240 4237 	movw	r2, #1079	; 0x437
 8006900:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006902:	4b1a      	ldr	r3, [pc, #104]	; (800696c <MX_TIM2_Init+0x98>)
 8006904:	2200      	movs	r2, #0
 8006906:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 8006908:	4b18      	ldr	r3, [pc, #96]	; (800696c <MX_TIM2_Init+0x98>)
 800690a:	4a19      	ldr	r2, [pc, #100]	; (8006970 <MX_TIM2_Init+0x9c>)
 800690c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800690e:	4b17      	ldr	r3, [pc, #92]	; (800696c <MX_TIM2_Init+0x98>)
 8006910:	2200      	movs	r2, #0
 8006912:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006914:	4b15      	ldr	r3, [pc, #84]	; (800696c <MX_TIM2_Init+0x98>)
 8006916:	2200      	movs	r2, #0
 8006918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800691a:	4814      	ldr	r0, [pc, #80]	; (800696c <MX_TIM2_Init+0x98>)
 800691c:	f004 fa2c 	bl	800ad78 <HAL_TIM_Base_Init>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006926:	f7ff fd57 	bl	80063d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800692a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800692e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006930:	f107 0310 	add.w	r3, r7, #16
 8006934:	4619      	mov	r1, r3
 8006936:	480d      	ldr	r0, [pc, #52]	; (800696c <MX_TIM2_Init+0x98>)
 8006938:	f004 fc3c 	bl	800b1b4 <HAL_TIM_ConfigClockSource>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006942:	f7ff fd49 	bl	80063d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006946:	2300      	movs	r3, #0
 8006948:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800694e:	1d3b      	adds	r3, r7, #4
 8006950:	4619      	mov	r1, r3
 8006952:	4806      	ldr	r0, [pc, #24]	; (800696c <MX_TIM2_Init+0x98>)
 8006954:	f004 fe5a 	bl	800b60c <HAL_TIMEx_MasterConfigSynchronization>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800695e:	f7ff fd3b 	bl	80063d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006962:	bf00      	nop
 8006964:	3720      	adds	r7, #32
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20002e78 	.word	0x20002e78
 8006970:	000186a0 	.word	0x000186a0

08006974 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a1a      	ldr	r2, [pc, #104]	; (80069ec <HAL_TIM_Base_MspInit+0x78>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d114      	bne.n	80069b0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006986:	4b1a      	ldr	r3, [pc, #104]	; (80069f0 <HAL_TIM_Base_MspInit+0x7c>)
 8006988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698a:	4a19      	ldr	r2, [pc, #100]	; (80069f0 <HAL_TIM_Base_MspInit+0x7c>)
 800698c:	f043 0301 	orr.w	r3, r3, #1
 8006990:	6453      	str	r3, [r2, #68]	; 0x44
 8006992:	4b17      	ldr	r3, [pc, #92]	; (80069f0 <HAL_TIM_Base_MspInit+0x7c>)
 8006994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 800699e:	2200      	movs	r2, #0
 80069a0:	2102      	movs	r1, #2
 80069a2:	2019      	movs	r0, #25
 80069a4:	f001 ff1b 	bl	80087de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80069a8:	2019      	movs	r0, #25
 80069aa:	f001 ff34 	bl	8008816 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80069ae:	e018      	b.n	80069e2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b8:	d113      	bne.n	80069e2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80069ba:	4b0d      	ldr	r3, [pc, #52]	; (80069f0 <HAL_TIM_Base_MspInit+0x7c>)
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	4a0c      	ldr	r2, [pc, #48]	; (80069f0 <HAL_TIM_Base_MspInit+0x7c>)
 80069c0:	f043 0301 	orr.w	r3, r3, #1
 80069c4:	6413      	str	r3, [r2, #64]	; 0x40
 80069c6:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <HAL_TIM_Base_MspInit+0x7c>)
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	60bb      	str	r3, [r7, #8]
 80069d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80069d2:	2200      	movs	r2, #0
 80069d4:	2101      	movs	r1, #1
 80069d6:	201c      	movs	r0, #28
 80069d8:	f001 ff01 	bl	80087de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80069dc:	201c      	movs	r0, #28
 80069de:	f001 ff1a 	bl	8008816 <HAL_NVIC_EnableIRQ>
}
 80069e2:	bf00      	nop
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	40010000 	.word	0x40010000
 80069f0:	40023800 	.word	0x40023800

080069f4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80069f8:	4b14      	ldr	r3, [pc, #80]	; (8006a4c <MX_USART3_UART_Init+0x58>)
 80069fa:	4a15      	ldr	r2, [pc, #84]	; (8006a50 <MX_USART3_UART_Init+0x5c>)
 80069fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80069fe:	4b13      	ldr	r3, [pc, #76]	; (8006a4c <MX_USART3_UART_Init+0x58>)
 8006a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006a04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006a06:	4b11      	ldr	r3, [pc, #68]	; (8006a4c <MX_USART3_UART_Init+0x58>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <MX_USART3_UART_Init+0x58>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006a12:	4b0e      	ldr	r3, [pc, #56]	; (8006a4c <MX_USART3_UART_Init+0x58>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <MX_USART3_UART_Init+0x58>)
 8006a1a:	220c      	movs	r2, #12
 8006a1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a1e:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <MX_USART3_UART_Init+0x58>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a24:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <MX_USART3_UART_Init+0x58>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006a2a:	4b08      	ldr	r3, [pc, #32]	; (8006a4c <MX_USART3_UART_Init+0x58>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006a30:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <MX_USART3_UART_Init+0x58>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006a36:	4805      	ldr	r0, [pc, #20]	; (8006a4c <MX_USART3_UART_Init+0x58>)
 8006a38:	f004 fe94 	bl	800b764 <HAL_UART_Init>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8006a42:	f7ff fcc9 	bl	80063d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006a46:	bf00      	nop
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20002ec4 	.word	0x20002ec4
 8006a50:	40004800 	.word	0x40004800

08006a54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b0ae      	sub	sp, #184	; 0xb8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	605a      	str	r2, [r3, #4]
 8006a66:	609a      	str	r2, [r3, #8]
 8006a68:	60da      	str	r2, [r3, #12]
 8006a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006a6c:	f107 0314 	add.w	r3, r7, #20
 8006a70:	2290      	movs	r2, #144	; 0x90
 8006a72:	2100      	movs	r1, #0
 8006a74:	4618      	mov	r0, r3
 8006a76:	f006 f9b1 	bl	800cddc <memset>
  if(uartHandle->Instance==USART3)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a22      	ldr	r2, [pc, #136]	; (8006b08 <HAL_UART_MspInit+0xb4>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d13c      	bne.n	8006afe <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a8e:	f107 0314 	add.w	r3, r7, #20
 8006a92:	4618      	mov	r0, r3
 8006a94:	f003 f97c 	bl	8009d90 <HAL_RCCEx_PeriphCLKConfig>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006a9e:	f7ff fc9b 	bl	80063d8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006aa2:	4b1a      	ldr	r3, [pc, #104]	; (8006b0c <HAL_UART_MspInit+0xb8>)
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa6:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <HAL_UART_MspInit+0xb8>)
 8006aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006aac:	6413      	str	r3, [r2, #64]	; 0x40
 8006aae:	4b17      	ldr	r3, [pc, #92]	; (8006b0c <HAL_UART_MspInit+0xb8>)
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ab6:	613b      	str	r3, [r7, #16]
 8006ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006aba:	4b14      	ldr	r3, [pc, #80]	; (8006b0c <HAL_UART_MspInit+0xb8>)
 8006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abe:	4a13      	ldr	r2, [pc, #76]	; (8006b0c <HAL_UART_MspInit+0xb8>)
 8006ac0:	f043 0308 	orr.w	r3, r3, #8
 8006ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ac6:	4b11      	ldr	r3, [pc, #68]	; (8006b0c <HAL_UART_MspInit+0xb8>)
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006ad2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ada:	2302      	movs	r3, #2
 8006adc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006aec:	2307      	movs	r3, #7
 8006aee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006af2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006af6:	4619      	mov	r1, r3
 8006af8:	4805      	ldr	r0, [pc, #20]	; (8006b10 <HAL_UART_MspInit+0xbc>)
 8006afa:	f002 fa1f 	bl	8008f3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006afe:	bf00      	nop
 8006b00:	37b8      	adds	r7, #184	; 0xb8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	40004800 	.word	0x40004800
 8006b0c:	40023800 	.word	0x40023800
 8006b10:	40020c00 	.word	0x40020c00

08006b14 <mappingValue>:
#include "utility.h"
extern UART_HandleTypeDef huart3;

float mappingValue(float val,float preMin,float preMax,float postMin,float postMax){
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	ed87 0a05 	vstr	s0, [r7, #20]
 8006b1e:	edc7 0a04 	vstr	s1, [r7, #16]
 8006b22:	ed87 1a03 	vstr	s2, [r7, #12]
 8006b26:	edc7 1a02 	vstr	s3, [r7, #8]
 8006b2a:	ed87 2a01 	vstr	s4, [r7, #4]
	  return (val-preMin)/(preMax-preMin)*(postMax-postMin)+postMin;
 8006b2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8006b32:	edd7 7a04 	vldr	s15, [r7, #16]
 8006b36:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006b3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8006b3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b4a:	edd7 6a01 	vldr	s13, [r7, #4]
 8006b4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006b52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006b56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8006b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
  }
 8006b62:	eeb0 0a67 	vmov.f32	s0, s15
 8006b66:	371c      	adds	r7, #28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <clamp>:
int clamp(int min,int value,int max){
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
	if(min>value)
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	dd01      	ble.n	8006b88 <clamp+0x18>
		return min;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	e006      	b.n	8006b96 <clamp+0x26>
	else if(max<value)
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	da01      	bge.n	8006b94 <clamp+0x24>
		return max;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	e000      	b.n	8006b96 <clamp+0x26>
	else
		return value;
 8006b94:	68bb      	ldr	r3, [r7, #8]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <inBetween>:
bool inBetween(int min,int value,int max){
 8006ba2:	b480      	push	{r7}
 8006ba4:	b085      	sub	sp, #20
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	607a      	str	r2, [r7, #4]
	return (min<=value)&&(value<=max);
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	dc05      	bgt.n	8006bc2 <inBetween+0x20>
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	dc01      	bgt.n	8006bc2 <inBetween+0x20>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <inBetween+0x22>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	b2db      	uxtb	r3, r3
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
	...

08006bd8 <printOut>:
	char ch1;
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)== RESET){}
	HAL_UART_Receive(&huart3, (uint8_t*) &ch1, 1, 1000);
	return ch1;
}
void printOut(char* str){
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]

	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8006be0:	bf00      	nop
 8006be2:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <printOut+0x38>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bec:	2b40      	cmp	r3, #64	; 0x40
 8006bee:	d1f8      	bne.n	8006be2 <printOut+0xa>
		HAL_UART_Transmit(&huart3, (uint8_t*) str,strlen(str),1000);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7f9 fb75 	bl	80002e0 <strlen>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	4803      	ldr	r0, [pc, #12]	; (8006c10 <printOut+0x38>)
 8006c02:	f004 fdfd 	bl	800b800 <HAL_UART_Transmit>

}
 8006c06:	bf00      	nop
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20002ec4 	.word	0x20002ec4

08006c14 <QueueElement_init>:
	tim->Instance -> CCR2 = (1000-1) * dutyCycle;
}
void setBlue(TIM_HandleTypeDef* tim,float dutyCycle){
	tim->Instance -> CCR3 = (1000-1) * dutyCycle;
}
QueueElement* QueueElement_init(void* value){
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
	QueueElement* element = malloc(sizeof(QueueElement));
 8006c1c:	200c      	movs	r0, #12
 8006c1e:	f005 fd55 	bl	800c6cc <malloc>
 8006c22:	4603      	mov	r3, r0
 8006c24:	60fb      	str	r3, [r7, #12]
	element->value = value;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	601a      	str	r2, [r3, #0]
	element->previous = NULL;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	609a      	str	r2, [r3, #8]
	element->next = NULL;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	605a      	str	r2, [r3, #4]
	return element;
 8006c38:	68fb      	ldr	r3, [r7, #12]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <DeleteQueueElement>:
	q->front = NULL;
	q->back = NULL;
	q->size = 0;
	return q;
}
void DeleteQueueElement(Queue* q,QueueElement* element){
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b082      	sub	sp, #8
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	6039      	str	r1, [r7, #0]
	if(q==NULL||element==NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d02c      	beq.n	8006cac <DeleteQueueElement+0x6a>
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d029      	beq.n	8006cac <DeleteQueueElement+0x6a>
		return;
	q->size--;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	1e5a      	subs	r2, r3, #1
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	609a      	str	r2, [r3, #8]
	if(element->next == NULL){
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d104      	bne.n	8006c74 <DeleteQueueElement+0x32>
		q->back = element->previous;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	605a      	str	r2, [r3, #4]
 8006c72:	e004      	b.n	8006c7e <DeleteQueueElement+0x3c>
	}
	else{
		element->next->previous = element->previous;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	6892      	ldr	r2, [r2, #8]
 8006c7c:	609a      	str	r2, [r3, #8]
	}
	if(element->previous == NULL){
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d104      	bne.n	8006c90 <DeleteQueueElement+0x4e>
		q->front = element->next;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	e004      	b.n	8006c9a <DeleteQueueElement+0x58>
	}
	else{
		element->previous->next = element->next;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	6852      	ldr	r2, [r2, #4]
 8006c98:	605a      	str	r2, [r3, #4]
	}
	free(element->value);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f005 fd1c 	bl	800c6dc <free>
	free(element);
 8006ca4:	6838      	ldr	r0, [r7, #0]
 8006ca6:	f005 fd19 	bl	800c6dc <free>
 8006caa:	e000      	b.n	8006cae <DeleteQueueElement+0x6c>
		return;
 8006cac:	bf00      	nop
}
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <enqueue>:
QueueElement* enqueue(Queue* q,void* ptr){
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
	if(q == NULL&&ptr == NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d104      	bne.n	8006cce <enqueue+0x1a>
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <enqueue+0x1a>
		return NULL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e022      	b.n	8006d14 <enqueue+0x60>
	QueueElement* element = QueueElement_init(ptr);
 8006cce:	6838      	ldr	r0, [r7, #0]
 8006cd0:	f7ff ffa0 	bl	8006c14 <QueueElement_init>
 8006cd4:	60f8      	str	r0, [r7, #12]
	if(q->size){
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d008      	beq.n	8006cf0 <enqueue+0x3c>
		q->back->next =element;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	605a      	str	r2, [r3, #4]
		element->previous = q->back;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	609a      	str	r2, [r3, #8]
 8006cee:	e008      	b.n	8006d02 <enqueue+0x4e>
	}
	else{
		q->front = element;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	601a      	str	r2, [r3, #0]
		element->previous = NULL;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	609a      	str	r2, [r3, #8]
		element->next = NULL;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	605a      	str	r2, [r3, #4]
	}
	q->size++;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	609a      	str	r2, [r3, #8]
	q->back=element;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	605a      	str	r2, [r3, #4]
	return element;
 8006d12:	68fb      	ldr	r3, [r7, #12]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <dequeue>:
void dequeue(Queue* q){
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
	if(q != NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d005      	beq.n	8006d36 <dequeue+0x1a>
		DeleteQueueElement(q,q->front);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff ff86 	bl	8006c42 <DeleteQueueElement>

}
 8006d36:	bf00      	nop
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006d44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006d46:	e003      	b.n	8006d50 <LoopCopyDataInit>

08006d48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006d48:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006d4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006d4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006d4e:	3104      	adds	r1, #4

08006d50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006d50:	480b      	ldr	r0, [pc, #44]	; (8006d80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006d52:	4b0c      	ldr	r3, [pc, #48]	; (8006d84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006d54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006d56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006d58:	d3f6      	bcc.n	8006d48 <CopyDataInit>
  ldr  r2, =_sbss
 8006d5a:	4a0b      	ldr	r2, [pc, #44]	; (8006d88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006d5c:	e002      	b.n	8006d64 <LoopFillZerobss>

08006d5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006d5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006d60:	f842 3b04 	str.w	r3, [r2], #4

08006d64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006d64:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006d66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006d68:	d3f9      	bcc.n	8006d5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006d6a:	f7ff fd27 	bl	80067bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006d6e:	f006 f857 	bl	800ce20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006d72:	f7ff fa93 	bl	800629c <main>
  bx  lr    
 8006d76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006d78:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8006d7c:	08090008 	.word	0x08090008
  ldr  r0, =_sdata
 8006d80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006d84:	20000b54 	.word	0x20000b54
  ldr  r2, =_sbss
 8006d88:	20000b54 	.word	0x20000b54
  ldr  r3, = _ebss
 8006d8c:	2000309c 	.word	0x2000309c

08006d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d90:	e7fe      	b.n	8006d90 <ADC_IRQHandler>

08006d92 <ILI9341_Draw_Hollow_Rectangle_Coord>:
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8006d92:	b590      	push	{r4, r7, lr}
 8006d94:	b087      	sub	sp, #28
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	4604      	mov	r4, r0
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	461a      	mov	r2, r3
 8006da0:	4623      	mov	r3, r4
 8006da2:	80fb      	strh	r3, [r7, #6]
 8006da4:	4603      	mov	r3, r0
 8006da6:	80bb      	strh	r3, [r7, #4]
 8006da8:	460b      	mov	r3, r1
 8006daa:	807b      	strh	r3, [r7, #2]
 8006dac:	4613      	mov	r3, r2
 8006dae:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8006dc6:	887a      	ldrh	r2, [r7, #2]
 8006dc8:	88fb      	ldrh	r3, [r7, #6]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	ee07 3a90 	vmov	s15, r3
 8006dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dd4:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 8006dd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ddc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de4:	d501      	bpl.n	8006dea <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 8006de6:	2301      	movs	r3, #1
 8006de8:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8006dea:	f04f 0300 	mov.w	r3, #0
 8006dee:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 8006df0:	883a      	ldrh	r2, [r7, #0]
 8006df2:	88bb      	ldrh	r3, [r7, #4]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dfe:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 8006e02:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e0e:	d501      	bpl.n	8006e14 <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 8006e10:	2301      	movs	r3, #1
 8006e12:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8006e14:	7cfb      	ldrb	r3, [r7, #19]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d104      	bne.n	8006e24 <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 8006e1a:	887a      	ldrh	r2, [r7, #2]
 8006e1c:	88fb      	ldrh	r3, [r7, #6]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	82fb      	strh	r3, [r7, #22]
 8006e22:	e003      	b.n	8006e2c <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 8006e24:	88fa      	ldrh	r2, [r7, #6]
 8006e26:	887b      	ldrh	r3, [r7, #2]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8006e2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e2e:	8afa      	ldrh	r2, [r7, #22]
 8006e30:	88b9      	ldrh	r1, [r7, #4]
 8006e32:	88f8      	ldrh	r0, [r7, #6]
 8006e34:	f000 fd8c 	bl	8007950 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8006e38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e3a:	8afa      	ldrh	r2, [r7, #22]
 8006e3c:	8839      	ldrh	r1, [r7, #0]
 8006e3e:	88f8      	ldrh	r0, [r7, #6]
 8006e40:	f000 fd86 	bl	8007950 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8006e44:	7cbb      	ldrb	r3, [r7, #18]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d104      	bne.n	8006e54 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 8006e4a:	883a      	ldrh	r2, [r7, #0]
 8006e4c:	88bb      	ldrh	r3, [r7, #4]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	82bb      	strh	r3, [r7, #20]
 8006e52:	e003      	b.n	8006e5c <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8006e54:	88ba      	ldrh	r2, [r7, #4]
 8006e56:	883b      	ldrh	r3, [r7, #0]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8006e5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e5e:	8aba      	ldrh	r2, [r7, #20]
 8006e60:	88b9      	ldrh	r1, [r7, #4]
 8006e62:	88f8      	ldrh	r0, [r7, #6]
 8006e64:	f000 fdb8 	bl	80079d8 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8006e68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e6a:	8aba      	ldrh	r2, [r7, #20]
 8006e6c:	88b9      	ldrh	r1, [r7, #4]
 8006e6e:	8878      	ldrh	r0, [r7, #2]
 8006e70:	f000 fdb2 	bl	80079d8 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8006e74:	8afb      	ldrh	r3, [r7, #22]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d102      	bne.n	8006e80 <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 8006e7a:	8abb      	ldrh	r3, [r7, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d005      	beq.n	8006e8c <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8006e80:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006e82:	8839      	ldrh	r1, [r7, #0]
 8006e84:	887b      	ldrh	r3, [r7, #2]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fc2c 	bl	80076e4 <ILI9341_Draw_Pixel>
	}
	
}
 8006e8c:	bf00      	nop
 8006e8e:	371c      	adds	r7, #28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd90      	pop	{r4, r7, pc}

08006e94 <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8006e94:	b590      	push	{r4, r7, lr}
 8006e96:	b089      	sub	sp, #36	; 0x24
 8006e98:	af02      	add	r7, sp, #8
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4623      	mov	r3, r4
 8006ea4:	80fb      	strh	r3, [r7, #6]
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	80bb      	strh	r3, [r7, #4]
 8006eaa:	460b      	mov	r3, r1
 8006eac:	807b      	strh	r3, [r7, #2]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8006ece:	887a      	ldrh	r2, [r7, #2]
 8006ed0:	88fb      	ldrh	r3, [r7, #6]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	da01      	bge.n	8006ee0 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8006edc:	2301      	movs	r3, #1
 8006ede:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8006ee4:	883a      	ldrh	r2, [r7, #0]
 8006ee6:	88bb      	ldrh	r3, [r7, #4]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	da01      	bge.n	8006ef6 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8006ef6:	7cfb      	ldrb	r3, [r7, #19]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d106      	bne.n	8006f0a <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8006efc:	887a      	ldrh	r2, [r7, #2]
 8006efe:	88fb      	ldrh	r3, [r7, #6]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8006f04:	88fb      	ldrh	r3, [r7, #6]
 8006f06:	823b      	strh	r3, [r7, #16]
 8006f08:	e005      	b.n	8006f16 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8006f0a:	88fa      	ldrh	r2, [r7, #6]
 8006f0c:	887b      	ldrh	r3, [r7, #2]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8006f12:	887b      	ldrh	r3, [r7, #2]
 8006f14:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8006f16:	7cbb      	ldrb	r3, [r7, #18]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d106      	bne.n	8006f2a <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8006f1c:	883a      	ldrh	r2, [r7, #0]
 8006f1e:	88bb      	ldrh	r3, [r7, #4]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8006f24:	88bb      	ldrh	r3, [r7, #4]
 8006f26:	81fb      	strh	r3, [r7, #14]
 8006f28:	e005      	b.n	8006f36 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8006f2a:	88ba      	ldrh	r2, [r7, #4]
 8006f2c:	883b      	ldrh	r3, [r7, #0]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8006f32:	883b      	ldrh	r3, [r7, #0]
 8006f34:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8006f36:	8abc      	ldrh	r4, [r7, #20]
 8006f38:	8afa      	ldrh	r2, [r7, #22]
 8006f3a:	89f9      	ldrh	r1, [r7, #14]
 8006f3c:	8a38      	ldrh	r0, [r7, #16]
 8006f3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	4623      	mov	r3, r4
 8006f44:	f000 fca8 	bl	8007898 <ILI9341_Draw_Rectangle>
}
 8006f48:	bf00      	nop
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd90      	pop	{r4, r7, pc}

08006f50 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8006f50:	b590      	push	{r4, r7, lr}
 8006f52:	b089      	sub	sp, #36	; 0x24
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	4604      	mov	r4, r0
 8006f58:	4608      	mov	r0, r1
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	4623      	mov	r3, r4
 8006f60:	71fb      	strb	r3, [r7, #7]
 8006f62:	4603      	mov	r3, r0
 8006f64:	71bb      	strb	r3, [r7, #6]
 8006f66:	460b      	mov	r3, r1
 8006f68:	717b      	strb	r3, [r7, #5]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8006f6e:	79fb      	ldrb	r3, [r7, #7]
 8006f70:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
 8006f74:	2b1f      	cmp	r3, #31
 8006f76:	d802      	bhi.n	8006f7e <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	71fb      	strb	r3, [r7, #7]
 8006f7c:	e002      	b.n	8006f84 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	3b20      	subs	r3, #32
 8006f82:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8006f84:	2300      	movs	r3, #0
 8006f86:	753b      	strb	r3, [r7, #20]
 8006f88:	e012      	b.n	8006fb0 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8006f8a:	7dfa      	ldrb	r2, [r7, #23]
 8006f8c:	7d38      	ldrb	r0, [r7, #20]
 8006f8e:	7d39      	ldrb	r1, [r7, #20]
 8006f90:	4c3b      	ldr	r4, [pc, #236]	; (8007080 <ILI9341_Draw_Char+0x130>)
 8006f92:	4613      	mov	r3, r2
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	4413      	add	r3, r2
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	4423      	add	r3, r4
 8006f9c:	4403      	add	r3, r0
 8006f9e:	781a      	ldrb	r2, [r3, #0]
 8006fa0:	f101 0318 	add.w	r3, r1, #24
 8006fa4:	443b      	add	r3, r7
 8006fa6:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8006faa:	7d3b      	ldrb	r3, [r7, #20]
 8006fac:	3301      	adds	r3, #1
 8006fae:	753b      	strb	r3, [r7, #20]
 8006fb0:	7d3b      	ldrb	r3, [r7, #20]
 8006fb2:	2b05      	cmp	r3, #5
 8006fb4:	d9e9      	bls.n	8006f8a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8006fb6:	79bb      	ldrb	r3, [r7, #6]
 8006fb8:	b298      	uxth	r0, r3
 8006fba:	797b      	ldrb	r3, [r7, #5]
 8006fbc:	b299      	uxth	r1, r3
 8006fbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	0052      	lsls	r2, r2, #1
 8006fc4:	4413      	add	r3, r2
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	b29c      	uxth	r4, r3
 8006fd0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	4623      	mov	r3, r4
 8006fd6:	f000 fc5f 	bl	8007898 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8006fda:	2300      	movs	r3, #0
 8006fdc:	757b      	strb	r3, [r7, #21]
 8006fde:	e047      	b.n	8007070 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	75bb      	strb	r3, [r7, #22]
 8006fe4:	e03e      	b.n	8007064 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8006fe6:	7d7b      	ldrb	r3, [r7, #21]
 8006fe8:	3318      	adds	r3, #24
 8006fea:	443b      	add	r3, r7
 8006fec:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	7dbb      	ldrb	r3, [r7, #22]
 8006ff4:	fa42 f303 	asr.w	r3, r2, r3
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d02e      	beq.n	800705e <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8007000:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007002:	2b01      	cmp	r3, #1
 8007004:	d110      	bne.n	8007028 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8007006:	79bb      	ldrb	r3, [r7, #6]
 8007008:	b29a      	uxth	r2, r3
 800700a:	7d7b      	ldrb	r3, [r7, #21]
 800700c:	b29b      	uxth	r3, r3
 800700e:	4413      	add	r3, r2
 8007010:	b298      	uxth	r0, r3
 8007012:	797b      	ldrb	r3, [r7, #5]
 8007014:	b29a      	uxth	r2, r3
 8007016:	7dbb      	ldrb	r3, [r7, #22]
 8007018:	b29b      	uxth	r3, r3
 800701a:	4413      	add	r3, r2
 800701c:	b29b      	uxth	r3, r3
 800701e:	887a      	ldrh	r2, [r7, #2]
 8007020:	4619      	mov	r1, r3
 8007022:	f000 fb5f 	bl	80076e4 <ILI9341_Draw_Pixel>
 8007026:	e01a      	b.n	800705e <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8007028:	79bb      	ldrb	r3, [r7, #6]
 800702a:	b29a      	uxth	r2, r3
 800702c:	7d7b      	ldrb	r3, [r7, #21]
 800702e:	b29b      	uxth	r3, r3
 8007030:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8007032:	fb11 f303 	smulbb	r3, r1, r3
 8007036:	b29b      	uxth	r3, r3
 8007038:	4413      	add	r3, r2
 800703a:	b298      	uxth	r0, r3
 800703c:	797b      	ldrb	r3, [r7, #5]
 800703e:	b29a      	uxth	r2, r3
 8007040:	7dbb      	ldrb	r3, [r7, #22]
 8007042:	b29b      	uxth	r3, r3
 8007044:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8007046:	fb11 f303 	smulbb	r3, r1, r3
 800704a:	b29b      	uxth	r3, r3
 800704c:	4413      	add	r3, r2
 800704e:	b299      	uxth	r1, r3
 8007050:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8007052:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007054:	887b      	ldrh	r3, [r7, #2]
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	4623      	mov	r3, r4
 800705a:	f000 fc1d 	bl	8007898 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800705e:	7dbb      	ldrb	r3, [r7, #22]
 8007060:	3301      	adds	r3, #1
 8007062:	75bb      	strb	r3, [r7, #22]
 8007064:	7dbb      	ldrb	r3, [r7, #22]
 8007066:	2b07      	cmp	r3, #7
 8007068:	d9bd      	bls.n	8006fe6 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 800706a:	7d7b      	ldrb	r3, [r7, #21]
 800706c:	3301      	adds	r3, #1
 800706e:	757b      	strb	r3, [r7, #21]
 8007070:	7d7b      	ldrb	r3, [r7, #21]
 8007072:	2b05      	cmp	r3, #5
 8007074:	d9b4      	bls.n	8006fe0 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8007076:	bf00      	nop
 8007078:	bf00      	nop
 800707a:	371c      	adds	r7, #28
 800707c:	46bd      	mov	sp, r7
 800707e:	bd90      	pop	{r4, r7, pc}
 8007080:	0808f9e4 	.word	0x0808f9e4

08007084 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8007084:	b590      	push	{r4, r7, lr}
 8007086:	b085      	sub	sp, #20
 8007088:	af02      	add	r7, sp, #8
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	4608      	mov	r0, r1
 800708e:	4611      	mov	r1, r2
 8007090:	461a      	mov	r2, r3
 8007092:	4603      	mov	r3, r0
 8007094:	70fb      	strb	r3, [r7, #3]
 8007096:	460b      	mov	r3, r1
 8007098:	70bb      	strb	r3, [r7, #2]
 800709a:	4613      	mov	r3, r2
 800709c:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 800709e:	e017      	b.n	80070d0 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	607a      	str	r2, [r7, #4]
 80070a6:	7818      	ldrb	r0, [r3, #0]
 80070a8:	883c      	ldrh	r4, [r7, #0]
 80070aa:	78ba      	ldrb	r2, [r7, #2]
 80070ac:	78f9      	ldrb	r1, [r7, #3]
 80070ae:	8bbb      	ldrh	r3, [r7, #28]
 80070b0:	9301      	str	r3, [sp, #4]
 80070b2:	8b3b      	ldrh	r3, [r7, #24]
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	4623      	mov	r3, r4
 80070b8:	f7ff ff4a 	bl	8006f50 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80070bc:	8b3b      	ldrh	r3, [r7, #24]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	0052      	lsls	r2, r2, #1
 80070c4:	4413      	add	r3, r2
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	78fb      	ldrb	r3, [r7, #3]
 80070cc:	4413      	add	r3, r2
 80070ce:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e3      	bne.n	80070a0 <ILI9341_Draw_Text+0x1c>
    }
}
 80070d8:	bf00      	nop
 80070da:	bf00      	nop
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd90      	pop	{r4, r7, pc}
	...

080070e4 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 80070e8:	f7ff f9c2 	bl	8006470 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 80070ec:	f7fc fc24 	bl	8003938 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80070f0:	2200      	movs	r2, #0
 80070f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070f6:	4802      	ldr	r0, [pc, #8]	; (8007100 <ILI9341_SPI_Init+0x1c>)
 80070f8:	f002 f8e4 	bl	80092c4 <HAL_GPIO_WritePin>
}
 80070fc:	bf00      	nop
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	40020800 	.word	0x40020800

08007104 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800710e:	1df9      	adds	r1, r7, #7
 8007110:	2301      	movs	r3, #1
 8007112:	2201      	movs	r2, #1
 8007114:	4803      	ldr	r0, [pc, #12]	; (8007124 <ILI9341_SPI_Send+0x20>)
 8007116:	f003 fb38 	bl	800a78a <HAL_SPI_Transmit>
}
 800711a:	bf00      	nop
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20002dc4 	.word	0x20002dc4

08007128 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007132:	2200      	movs	r2, #0
 8007134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007138:	480b      	ldr	r0, [pc, #44]	; (8007168 <ILI9341_Write_Command+0x40>)
 800713a:	f002 f8c3 	bl	80092c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800713e:	2200      	movs	r2, #0
 8007140:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007144:	4808      	ldr	r0, [pc, #32]	; (8007168 <ILI9341_Write_Command+0x40>)
 8007146:	f002 f8bd 	bl	80092c4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800714a:	79fb      	ldrb	r3, [r7, #7]
 800714c:	4618      	mov	r0, r3
 800714e:	f7ff ffd9 	bl	8007104 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8007152:	2201      	movs	r2, #1
 8007154:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007158:	4803      	ldr	r0, [pc, #12]	; (8007168 <ILI9341_Write_Command+0x40>)
 800715a:	f002 f8b3 	bl	80092c4 <HAL_GPIO_WritePin>
}
 800715e:	bf00      	nop
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	40020800 	.word	0x40020800

0800716c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8007176:	2201      	movs	r2, #1
 8007178:	f44f 7100 	mov.w	r1, #512	; 0x200
 800717c:	480b      	ldr	r0, [pc, #44]	; (80071ac <ILI9341_Write_Data+0x40>)
 800717e:	f002 f8a1 	bl	80092c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007182:	2200      	movs	r2, #0
 8007184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007188:	4808      	ldr	r0, [pc, #32]	; (80071ac <ILI9341_Write_Data+0x40>)
 800718a:	f002 f89b 	bl	80092c4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800718e:	79fb      	ldrb	r3, [r7, #7]
 8007190:	4618      	mov	r0, r3
 8007192:	f7ff ffb7 	bl	8007104 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007196:	2201      	movs	r2, #1
 8007198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800719c:	4803      	ldr	r0, [pc, #12]	; (80071ac <ILI9341_Write_Data+0x40>)
 800719e:	f002 f891 	bl	80092c4 <HAL_GPIO_WritePin>
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	40020800 	.word	0x40020800

080071b0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80071b0:	b590      	push	{r4, r7, lr}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4604      	mov	r4, r0
 80071b8:	4608      	mov	r0, r1
 80071ba:	4611      	mov	r1, r2
 80071bc:	461a      	mov	r2, r3
 80071be:	4623      	mov	r3, r4
 80071c0:	80fb      	strh	r3, [r7, #6]
 80071c2:	4603      	mov	r3, r0
 80071c4:	80bb      	strh	r3, [r7, #4]
 80071c6:	460b      	mov	r3, r1
 80071c8:	807b      	strh	r3, [r7, #2]
 80071ca:	4613      	mov	r3, r2
 80071cc:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80071ce:	202a      	movs	r0, #42	; 0x2a
 80071d0:	f7ff ffaa 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80071d4:	88fb      	ldrh	r3, [r7, #6]
 80071d6:	0a1b      	lsrs	r3, r3, #8
 80071d8:	b29b      	uxth	r3, r3
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff ffc5 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80071e2:	88fb      	ldrh	r3, [r7, #6]
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff ffc0 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80071ec:	887b      	ldrh	r3, [r7, #2]
 80071ee:	0a1b      	lsrs	r3, r3, #8
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7ff ffb9 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80071fa:	887b      	ldrh	r3, [r7, #2]
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	4618      	mov	r0, r3
 8007200:	f7ff ffb4 	bl	800716c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8007204:	202b      	movs	r0, #43	; 0x2b
 8007206:	f7ff ff8f 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800720a:	88bb      	ldrh	r3, [r7, #4]
 800720c:	0a1b      	lsrs	r3, r3, #8
 800720e:	b29b      	uxth	r3, r3
 8007210:	b2db      	uxtb	r3, r3
 8007212:	4618      	mov	r0, r3
 8007214:	f7ff ffaa 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8007218:	88bb      	ldrh	r3, [r7, #4]
 800721a:	b2db      	uxtb	r3, r3
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff ffa5 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8007222:	883b      	ldrh	r3, [r7, #0]
 8007224:	0a1b      	lsrs	r3, r3, #8
 8007226:	b29b      	uxth	r3, r3
 8007228:	b2db      	uxtb	r3, r3
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff ff9e 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8007230:	883b      	ldrh	r3, [r7, #0]
 8007232:	b2db      	uxtb	r3, r3
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff ff99 	bl	800716c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800723a:	202c      	movs	r0, #44	; 0x2c
 800723c:	f7ff ff74 	bl	8007128 <ILI9341_Write_Command>
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	bd90      	pop	{r4, r7, pc}

08007248 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800724c:	2201      	movs	r2, #1
 800724e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007252:	480b      	ldr	r0, [pc, #44]	; (8007280 <ILI9341_Reset+0x38>)
 8007254:	f002 f836 	bl	80092c4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8007258:	20c8      	movs	r0, #200	; 0xc8
 800725a:	f000 fd9d 	bl	8007d98 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800725e:	2200      	movs	r2, #0
 8007260:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007264:	4806      	ldr	r0, [pc, #24]	; (8007280 <ILI9341_Reset+0x38>)
 8007266:	f002 f82d 	bl	80092c4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800726a:	20c8      	movs	r0, #200	; 0xc8
 800726c:	f000 fd94 	bl	8007d98 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8007270:	2201      	movs	r2, #1
 8007272:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007276:	4802      	ldr	r0, [pc, #8]	; (8007280 <ILI9341_Reset+0x38>)
 8007278:	f002 f824 	bl	80092c4 <HAL_GPIO_WritePin>
}
 800727c:	bf00      	nop
 800727e:	bd80      	pop	{r7, pc}
 8007280:	40020800 	.word	0x40020800

08007284 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	4603      	mov	r3, r0
 800728c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800728e:	79fb      	ldrb	r3, [r7, #7]
 8007290:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8007292:	2036      	movs	r0, #54	; 0x36
 8007294:	f7ff ff48 	bl	8007128 <ILI9341_Write_Command>
HAL_Delay(1);
 8007298:	2001      	movs	r0, #1
 800729a:	f000 fd7d 	bl	8007d98 <HAL_Delay>
	
switch(screen_rotation) 
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	d837      	bhi.n	8007314 <ILI9341_Set_Rotation+0x90>
 80072a4:	a201      	add	r2, pc, #4	; (adr r2, 80072ac <ILI9341_Set_Rotation+0x28>)
 80072a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072aa:	bf00      	nop
 80072ac:	080072bd 	.word	0x080072bd
 80072b0:	080072d3 	.word	0x080072d3
 80072b4:	080072e9 	.word	0x080072e9
 80072b8:	080072ff 	.word	0x080072ff
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80072bc:	2048      	movs	r0, #72	; 0x48
 80072be:	f7ff ff55 	bl	800716c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80072c2:	4b17      	ldr	r3, [pc, #92]	; (8007320 <ILI9341_Set_Rotation+0x9c>)
 80072c4:	22f0      	movs	r2, #240	; 0xf0
 80072c6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80072c8:	4b16      	ldr	r3, [pc, #88]	; (8007324 <ILI9341_Set_Rotation+0xa0>)
 80072ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80072ce:	801a      	strh	r2, [r3, #0]
			break;
 80072d0:	e021      	b.n	8007316 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80072d2:	2028      	movs	r0, #40	; 0x28
 80072d4:	f7ff ff4a 	bl	800716c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80072d8:	4b11      	ldr	r3, [pc, #68]	; (8007320 <ILI9341_Set_Rotation+0x9c>)
 80072da:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80072de:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80072e0:	4b10      	ldr	r3, [pc, #64]	; (8007324 <ILI9341_Set_Rotation+0xa0>)
 80072e2:	22f0      	movs	r2, #240	; 0xf0
 80072e4:	801a      	strh	r2, [r3, #0]
			break;
 80072e6:	e016      	b.n	8007316 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80072e8:	2088      	movs	r0, #136	; 0x88
 80072ea:	f7ff ff3f 	bl	800716c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80072ee:	4b0c      	ldr	r3, [pc, #48]	; (8007320 <ILI9341_Set_Rotation+0x9c>)
 80072f0:	22f0      	movs	r2, #240	; 0xf0
 80072f2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80072f4:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <ILI9341_Set_Rotation+0xa0>)
 80072f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80072fa:	801a      	strh	r2, [r3, #0]
			break;
 80072fc:	e00b      	b.n	8007316 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80072fe:	20e8      	movs	r0, #232	; 0xe8
 8007300:	f7ff ff34 	bl	800716c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007304:	4b06      	ldr	r3, [pc, #24]	; (8007320 <ILI9341_Set_Rotation+0x9c>)
 8007306:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800730a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800730c:	4b05      	ldr	r3, [pc, #20]	; (8007324 <ILI9341_Set_Rotation+0xa0>)
 800730e:	22f0      	movs	r2, #240	; 0xf0
 8007310:	801a      	strh	r2, [r3, #0]
			break;
 8007312:	e000      	b.n	8007316 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8007314:	bf00      	nop
	}
}
 8007316:	bf00      	nop
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20000982 	.word	0x20000982
 8007324:	20000980 	.word	0x20000980

08007328 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800732c:	2201      	movs	r2, #1
 800732e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007332:	4802      	ldr	r0, [pc, #8]	; (800733c <ILI9341_Enable+0x14>)
 8007334:	f001 ffc6 	bl	80092c4 <HAL_GPIO_WritePin>
}
 8007338:	bf00      	nop
 800733a:	bd80      	pop	{r7, pc}
 800733c:	40020800 	.word	0x40020800

08007340 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8007344:	f7ff fff0 	bl	8007328 <ILI9341_Enable>
ILI9341_SPI_Init();
 8007348:	f7ff fecc 	bl	80070e4 <ILI9341_SPI_Init>
ILI9341_Reset();
 800734c:	f7ff ff7c 	bl	8007248 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8007350:	2001      	movs	r0, #1
 8007352:	f7ff fee9 	bl	8007128 <ILI9341_Write_Command>
HAL_Delay(1000);
 8007356:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800735a:	f000 fd1d 	bl	8007d98 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800735e:	20cb      	movs	r0, #203	; 0xcb
 8007360:	f7ff fee2 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8007364:	2039      	movs	r0, #57	; 0x39
 8007366:	f7ff ff01 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800736a:	202c      	movs	r0, #44	; 0x2c
 800736c:	f7ff fefe 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8007370:	2000      	movs	r0, #0
 8007372:	f7ff fefb 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8007376:	2034      	movs	r0, #52	; 0x34
 8007378:	f7ff fef8 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800737c:	2002      	movs	r0, #2
 800737e:	f7ff fef5 	bl	800716c <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8007382:	20cf      	movs	r0, #207	; 0xcf
 8007384:	f7ff fed0 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8007388:	2000      	movs	r0, #0
 800738a:	f7ff feef 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800738e:	20c1      	movs	r0, #193	; 0xc1
 8007390:	f7ff feec 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8007394:	2030      	movs	r0, #48	; 0x30
 8007396:	f7ff fee9 	bl	800716c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800739a:	20e8      	movs	r0, #232	; 0xe8
 800739c:	f7ff fec4 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80073a0:	2085      	movs	r0, #133	; 0x85
 80073a2:	f7ff fee3 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80073a6:	2000      	movs	r0, #0
 80073a8:	f7ff fee0 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80073ac:	2078      	movs	r0, #120	; 0x78
 80073ae:	f7ff fedd 	bl	800716c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80073b2:	20ea      	movs	r0, #234	; 0xea
 80073b4:	f7ff feb8 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80073b8:	2000      	movs	r0, #0
 80073ba:	f7ff fed7 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80073be:	2000      	movs	r0, #0
 80073c0:	f7ff fed4 	bl	800716c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80073c4:	20ed      	movs	r0, #237	; 0xed
 80073c6:	f7ff feaf 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80073ca:	2064      	movs	r0, #100	; 0x64
 80073cc:	f7ff fece 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80073d0:	2003      	movs	r0, #3
 80073d2:	f7ff fecb 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80073d6:	2012      	movs	r0, #18
 80073d8:	f7ff fec8 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80073dc:	2081      	movs	r0, #129	; 0x81
 80073de:	f7ff fec5 	bl	800716c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80073e2:	20f7      	movs	r0, #247	; 0xf7
 80073e4:	f7ff fea0 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80073e8:	2020      	movs	r0, #32
 80073ea:	f7ff febf 	bl	800716c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80073ee:	20c0      	movs	r0, #192	; 0xc0
 80073f0:	f7ff fe9a 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80073f4:	2023      	movs	r0, #35	; 0x23
 80073f6:	f7ff feb9 	bl	800716c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80073fa:	20c1      	movs	r0, #193	; 0xc1
 80073fc:	f7ff fe94 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8007400:	2010      	movs	r0, #16
 8007402:	f7ff feb3 	bl	800716c <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8007406:	20c5      	movs	r0, #197	; 0xc5
 8007408:	f7ff fe8e 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 800740c:	203e      	movs	r0, #62	; 0x3e
 800740e:	f7ff fead 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8007412:	2028      	movs	r0, #40	; 0x28
 8007414:	f7ff feaa 	bl	800716c <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8007418:	20c7      	movs	r0, #199	; 0xc7
 800741a:	f7ff fe85 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800741e:	2086      	movs	r0, #134	; 0x86
 8007420:	f7ff fea4 	bl	800716c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8007424:	2036      	movs	r0, #54	; 0x36
 8007426:	f7ff fe7f 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800742a:	2048      	movs	r0, #72	; 0x48
 800742c:	f7ff fe9e 	bl	800716c <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8007430:	203a      	movs	r0, #58	; 0x3a
 8007432:	f7ff fe79 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8007436:	2055      	movs	r0, #85	; 0x55
 8007438:	f7ff fe98 	bl	800716c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800743c:	20b1      	movs	r0, #177	; 0xb1
 800743e:	f7ff fe73 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8007442:	2000      	movs	r0, #0
 8007444:	f7ff fe92 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8007448:	2018      	movs	r0, #24
 800744a:	f7ff fe8f 	bl	800716c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800744e:	20b6      	movs	r0, #182	; 0xb6
 8007450:	f7ff fe6a 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8007454:	2008      	movs	r0, #8
 8007456:	f7ff fe89 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800745a:	2082      	movs	r0, #130	; 0x82
 800745c:	f7ff fe86 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8007460:	2027      	movs	r0, #39	; 0x27
 8007462:	f7ff fe83 	bl	800716c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8007466:	20f2      	movs	r0, #242	; 0xf2
 8007468:	f7ff fe5e 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800746c:	2000      	movs	r0, #0
 800746e:	f7ff fe7d 	bl	800716c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8007472:	2026      	movs	r0, #38	; 0x26
 8007474:	f7ff fe58 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8007478:	2001      	movs	r0, #1
 800747a:	f7ff fe77 	bl	800716c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800747e:	20e0      	movs	r0, #224	; 0xe0
 8007480:	f7ff fe52 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8007484:	200f      	movs	r0, #15
 8007486:	f7ff fe71 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800748a:	2031      	movs	r0, #49	; 0x31
 800748c:	f7ff fe6e 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8007490:	202b      	movs	r0, #43	; 0x2b
 8007492:	f7ff fe6b 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8007496:	200c      	movs	r0, #12
 8007498:	f7ff fe68 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800749c:	200e      	movs	r0, #14
 800749e:	f7ff fe65 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80074a2:	2008      	movs	r0, #8
 80074a4:	f7ff fe62 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80074a8:	204e      	movs	r0, #78	; 0x4e
 80074aa:	f7ff fe5f 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80074ae:	20f1      	movs	r0, #241	; 0xf1
 80074b0:	f7ff fe5c 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80074b4:	2037      	movs	r0, #55	; 0x37
 80074b6:	f7ff fe59 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80074ba:	2007      	movs	r0, #7
 80074bc:	f7ff fe56 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80074c0:	2010      	movs	r0, #16
 80074c2:	f7ff fe53 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80074c6:	2003      	movs	r0, #3
 80074c8:	f7ff fe50 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80074cc:	200e      	movs	r0, #14
 80074ce:	f7ff fe4d 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80074d2:	2009      	movs	r0, #9
 80074d4:	f7ff fe4a 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80074d8:	2000      	movs	r0, #0
 80074da:	f7ff fe47 	bl	800716c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80074de:	20e1      	movs	r0, #225	; 0xe1
 80074e0:	f7ff fe22 	bl	8007128 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80074e4:	2000      	movs	r0, #0
 80074e6:	f7ff fe41 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80074ea:	200e      	movs	r0, #14
 80074ec:	f7ff fe3e 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80074f0:	2014      	movs	r0, #20
 80074f2:	f7ff fe3b 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80074f6:	2003      	movs	r0, #3
 80074f8:	f7ff fe38 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80074fc:	2011      	movs	r0, #17
 80074fe:	f7ff fe35 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8007502:	2007      	movs	r0, #7
 8007504:	f7ff fe32 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8007508:	2031      	movs	r0, #49	; 0x31
 800750a:	f7ff fe2f 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800750e:	20c1      	movs	r0, #193	; 0xc1
 8007510:	f7ff fe2c 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8007514:	2048      	movs	r0, #72	; 0x48
 8007516:	f7ff fe29 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800751a:	2008      	movs	r0, #8
 800751c:	f7ff fe26 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8007520:	200f      	movs	r0, #15
 8007522:	f7ff fe23 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8007526:	200c      	movs	r0, #12
 8007528:	f7ff fe20 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800752c:	2031      	movs	r0, #49	; 0x31
 800752e:	f7ff fe1d 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8007532:	2036      	movs	r0, #54	; 0x36
 8007534:	f7ff fe1a 	bl	800716c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8007538:	200f      	movs	r0, #15
 800753a:	f7ff fe17 	bl	800716c <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800753e:	2011      	movs	r0, #17
 8007540:	f7ff fdf2 	bl	8007128 <ILI9341_Write_Command>
HAL_Delay(120);
 8007544:	2078      	movs	r0, #120	; 0x78
 8007546:	f000 fc27 	bl	8007d98 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800754a:	2029      	movs	r0, #41	; 0x29
 800754c:	f7ff fdec 	bl	8007128 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8007550:	2000      	movs	r0, #0
 8007552:	f7ff fe97 	bl	8007284 <ILI9341_Set_Rotation>
}
 8007556:	bf00      	nop
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800755c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007560:	b08d      	sub	sp, #52	; 0x34
 8007562:	af00      	add	r7, sp, #0
 8007564:	4603      	mov	r3, r0
 8007566:	6039      	str	r1, [r7, #0]
 8007568:	80fb      	strh	r3, [r7, #6]
 800756a:	466b      	mov	r3, sp
 800756c:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800757a:	d202      	bcs.n	8007582 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007580:	e002      	b.n	8007588 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8007582:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007586:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8007588:	2201      	movs	r2, #1
 800758a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800758e:	4840      	ldr	r0, [pc, #256]	; (8007690 <ILI9341_Draw_Colour_Burst+0x134>)
 8007590:	f001 fe98 	bl	80092c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007594:	2200      	movs	r2, #0
 8007596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800759a:	483d      	ldr	r0, [pc, #244]	; (8007690 <ILI9341_Draw_Colour_Burst+0x134>)
 800759c:	f001 fe92 	bl	80092c4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80075a0:	88fb      	ldrh	r3, [r7, #6]
 80075a2:	0a1b      	lsrs	r3, r3, #8
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80075aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075ac:	460b      	mov	r3, r1
 80075ae:	3b01      	subs	r3, #1
 80075b0:	61fb      	str	r3, [r7, #28]
 80075b2:	2300      	movs	r3, #0
 80075b4:	4688      	mov	r8, r1
 80075b6:	4699      	mov	r9, r3
 80075b8:	f04f 0200 	mov.w	r2, #0
 80075bc:	f04f 0300 	mov.w	r3, #0
 80075c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075cc:	2300      	movs	r3, #0
 80075ce:	460c      	mov	r4, r1
 80075d0:	461d      	mov	r5, r3
 80075d2:	f04f 0200 	mov.w	r2, #0
 80075d6:	f04f 0300 	mov.w	r3, #0
 80075da:	00eb      	lsls	r3, r5, #3
 80075dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075e0:	00e2      	lsls	r2, r4, #3
 80075e2:	1dcb      	adds	r3, r1, #7
 80075e4:	08db      	lsrs	r3, r3, #3
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	ebad 0d03 	sub.w	sp, sp, r3
 80075ec:	466b      	mov	r3, sp
 80075ee:	3300      	adds	r3, #0
 80075f0:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80075f2:	2300      	movs	r3, #0
 80075f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80075f6:	e00e      	b.n	8007616 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fc:	4413      	add	r3, r2
 80075fe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007602:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007606:	3301      	adds	r3, #1
 8007608:	88fa      	ldrh	r2, [r7, #6]
 800760a:	b2d1      	uxtb	r1, r2
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	3302      	adds	r3, #2
 8007614:	62bb      	str	r3, [r7, #40]	; 0x28
 8007616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761a:	429a      	cmp	r2, r3
 800761c:	d3ec      	bcc.n	80075f8 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007628:	fbb2 f3f3 	udiv	r3, r2, r3
 800762c:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007632:	fbb3 f2f2 	udiv	r2, r3, r2
 8007636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007638:	fb01 f202 	mul.w	r2, r1, r2
 800763c:	1a9b      	subs	r3, r3, r2
 800763e:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d010      	beq.n	8007668 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8007646:	2300      	movs	r3, #0
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
 800764a:	e009      	b.n	8007660 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 800764c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764e:	b29a      	uxth	r2, r3
 8007650:	230a      	movs	r3, #10
 8007652:	69b9      	ldr	r1, [r7, #24]
 8007654:	480f      	ldr	r0, [pc, #60]	; (8007694 <ILI9341_Draw_Colour_Burst+0x138>)
 8007656:	f003 f898 	bl	800a78a <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	3301      	adds	r3, #1
 800765e:	627b      	str	r3, [r7, #36]	; 0x24
 8007660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	429a      	cmp	r2, r3
 8007666:	d3f1      	bcc.n	800764c <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	b29a      	uxth	r2, r3
 800766c:	230a      	movs	r3, #10
 800766e:	69b9      	ldr	r1, [r7, #24]
 8007670:	4808      	ldr	r0, [pc, #32]	; (8007694 <ILI9341_Draw_Colour_Burst+0x138>)
 8007672:	f003 f88a 	bl	800a78a <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007676:	2201      	movs	r2, #1
 8007678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800767c:	4804      	ldr	r0, [pc, #16]	; (8007690 <ILI9341_Draw_Colour_Burst+0x134>)
 800767e:	f001 fe21 	bl	80092c4 <HAL_GPIO_WritePin>
 8007682:	46b5      	mov	sp, r6
}
 8007684:	bf00      	nop
 8007686:	3734      	adds	r7, #52	; 0x34
 8007688:	46bd      	mov	sp, r7
 800768a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800768e:	bf00      	nop
 8007690:	40020800 	.word	0x40020800
 8007694:	20002dc4 	.word	0x20002dc4

08007698 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80076a2:	4b0e      	ldr	r3, [pc, #56]	; (80076dc <ILI9341_Fill_Screen+0x44>)
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	4b0d      	ldr	r3, [pc, #52]	; (80076e0 <ILI9341_Fill_Screen+0x48>)
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2100      	movs	r1, #0
 80076b0:	2000      	movs	r0, #0
 80076b2:	f7ff fd7d 	bl	80071b0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80076b6:	4b09      	ldr	r3, [pc, #36]	; (80076dc <ILI9341_Fill_Screen+0x44>)
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	461a      	mov	r2, r3
 80076be:	4b08      	ldr	r3, [pc, #32]	; (80076e0 <ILI9341_Fill_Screen+0x48>)
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	fb02 f303 	mul.w	r3, r2, r3
 80076c8:	461a      	mov	r2, r3
 80076ca:	88fb      	ldrh	r3, [r7, #6]
 80076cc:	4611      	mov	r1, r2
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff ff44 	bl	800755c <ILI9341_Draw_Colour_Burst>
}
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	20000982 	.word	0x20000982
 80076e0:	20000980 	.word	0x20000980

080076e4 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	4603      	mov	r3, r0
 80076ec:	80fb      	strh	r3, [r7, #6]
 80076ee:	460b      	mov	r3, r1
 80076f0:	80bb      	strh	r3, [r7, #4]
 80076f2:	4613      	mov	r3, r2
 80076f4:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80076f6:	4b64      	ldr	r3, [pc, #400]	; (8007888 <ILI9341_Draw_Pixel+0x1a4>)
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	88fa      	ldrh	r2, [r7, #6]
 80076fe:	429a      	cmp	r2, r3
 8007700:	f080 80be 	bcs.w	8007880 <ILI9341_Draw_Pixel+0x19c>
 8007704:	4b61      	ldr	r3, [pc, #388]	; (800788c <ILI9341_Draw_Pixel+0x1a8>)
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	88ba      	ldrh	r2, [r7, #4]
 800770c:	429a      	cmp	r2, r3
 800770e:	f080 80b7 	bcs.w	8007880 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8007712:	2200      	movs	r2, #0
 8007714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007718:	485d      	ldr	r0, [pc, #372]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 800771a:	f001 fdd3 	bl	80092c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800771e:	2200      	movs	r2, #0
 8007720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007724:	485a      	ldr	r0, [pc, #360]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 8007726:	f001 fdcd 	bl	80092c4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800772a:	202a      	movs	r0, #42	; 0x2a
 800772c:	f7ff fcea 	bl	8007104 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8007730:	2201      	movs	r2, #1
 8007732:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007736:	4856      	ldr	r0, [pc, #344]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 8007738:	f001 fdc4 	bl	80092c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800773c:	2201      	movs	r2, #1
 800773e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007742:	4853      	ldr	r0, [pc, #332]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 8007744:	f001 fdbe 	bl	80092c4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8007748:	2200      	movs	r2, #0
 800774a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800774e:	4850      	ldr	r0, [pc, #320]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 8007750:	f001 fdb8 	bl	80092c4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8007754:	88fb      	ldrh	r3, [r7, #6]
 8007756:	0a1b      	lsrs	r3, r3, #8
 8007758:	b29b      	uxth	r3, r3
 800775a:	b2db      	uxtb	r3, r3
 800775c:	753b      	strb	r3, [r7, #20]
 800775e:	88fb      	ldrh	r3, [r7, #6]
 8007760:	b2db      	uxtb	r3, r3
 8007762:	757b      	strb	r3, [r7, #21]
 8007764:	88fb      	ldrh	r3, [r7, #6]
 8007766:	3301      	adds	r3, #1
 8007768:	121b      	asrs	r3, r3, #8
 800776a:	b2db      	uxtb	r3, r3
 800776c:	75bb      	strb	r3, [r7, #22]
 800776e:	88fb      	ldrh	r3, [r7, #6]
 8007770:	b2db      	uxtb	r3, r3
 8007772:	3301      	adds	r3, #1
 8007774:	b2db      	uxtb	r3, r3
 8007776:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8007778:	f107 0114 	add.w	r1, r7, #20
 800777c:	2301      	movs	r3, #1
 800777e:	2204      	movs	r2, #4
 8007780:	4844      	ldr	r0, [pc, #272]	; (8007894 <ILI9341_Draw_Pixel+0x1b0>)
 8007782:	f003 f802 	bl	800a78a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007786:	2201      	movs	r2, #1
 8007788:	f44f 7180 	mov.w	r1, #256	; 0x100
 800778c:	4840      	ldr	r0, [pc, #256]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 800778e:	f001 fd99 	bl	80092c4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8007792:	2200      	movs	r2, #0
 8007794:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007798:	483d      	ldr	r0, [pc, #244]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 800779a:	f001 fd93 	bl	80092c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800779e:	2200      	movs	r2, #0
 80077a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80077a4:	483a      	ldr	r0, [pc, #232]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 80077a6:	f001 fd8d 	bl	80092c4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80077aa:	202b      	movs	r0, #43	; 0x2b
 80077ac:	f7ff fcaa 	bl	8007104 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80077b0:	2201      	movs	r2, #1
 80077b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80077b6:	4836      	ldr	r0, [pc, #216]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 80077b8:	f001 fd84 	bl	80092c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80077bc:	2201      	movs	r2, #1
 80077be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80077c2:	4833      	ldr	r0, [pc, #204]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 80077c4:	f001 fd7e 	bl	80092c4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80077c8:	2200      	movs	r2, #0
 80077ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80077ce:	4830      	ldr	r0, [pc, #192]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 80077d0:	f001 fd78 	bl	80092c4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80077d4:	88bb      	ldrh	r3, [r7, #4]
 80077d6:	0a1b      	lsrs	r3, r3, #8
 80077d8:	b29b      	uxth	r3, r3
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	743b      	strb	r3, [r7, #16]
 80077de:	88bb      	ldrh	r3, [r7, #4]
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	747b      	strb	r3, [r7, #17]
 80077e4:	88bb      	ldrh	r3, [r7, #4]
 80077e6:	3301      	adds	r3, #1
 80077e8:	121b      	asrs	r3, r3, #8
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	74bb      	strb	r3, [r7, #18]
 80077ee:	88bb      	ldrh	r3, [r7, #4]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	3301      	adds	r3, #1
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80077f8:	f107 0110 	add.w	r1, r7, #16
 80077fc:	2301      	movs	r3, #1
 80077fe:	2204      	movs	r2, #4
 8007800:	4824      	ldr	r0, [pc, #144]	; (8007894 <ILI9341_Draw_Pixel+0x1b0>)
 8007802:	f002 ffc2 	bl	800a78a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007806:	2201      	movs	r2, #1
 8007808:	f44f 7180 	mov.w	r1, #256	; 0x100
 800780c:	4820      	ldr	r0, [pc, #128]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 800780e:	f001 fd59 	bl	80092c4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8007812:	2200      	movs	r2, #0
 8007814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007818:	481d      	ldr	r0, [pc, #116]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 800781a:	f001 fd53 	bl	80092c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800781e:	2200      	movs	r2, #0
 8007820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007824:	481a      	ldr	r0, [pc, #104]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 8007826:	f001 fd4d 	bl	80092c4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 800782a:	202c      	movs	r0, #44	; 0x2c
 800782c:	f7ff fc6a 	bl	8007104 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8007830:	2201      	movs	r2, #1
 8007832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007836:	4816      	ldr	r0, [pc, #88]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 8007838:	f001 fd44 	bl	80092c4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800783c:	2201      	movs	r2, #1
 800783e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007842:	4813      	ldr	r0, [pc, #76]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 8007844:	f001 fd3e 	bl	80092c4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007848:	2200      	movs	r2, #0
 800784a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800784e:	4810      	ldr	r0, [pc, #64]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 8007850:	f001 fd38 	bl	80092c4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8007854:	887b      	ldrh	r3, [r7, #2]
 8007856:	0a1b      	lsrs	r3, r3, #8
 8007858:	b29b      	uxth	r3, r3
 800785a:	b2db      	uxtb	r3, r3
 800785c:	733b      	strb	r3, [r7, #12]
 800785e:	887b      	ldrh	r3, [r7, #2]
 8007860:	b2db      	uxtb	r3, r3
 8007862:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8007864:	f107 010c 	add.w	r1, r7, #12
 8007868:	2301      	movs	r3, #1
 800786a:	2202      	movs	r2, #2
 800786c:	4809      	ldr	r0, [pc, #36]	; (8007894 <ILI9341_Draw_Pixel+0x1b0>)
 800786e:	f002 ff8c 	bl	800a78a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007872:	2201      	movs	r2, #1
 8007874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007878:	4805      	ldr	r0, [pc, #20]	; (8007890 <ILI9341_Draw_Pixel+0x1ac>)
 800787a:	f001 fd23 	bl	80092c4 <HAL_GPIO_WritePin>
 800787e:	e000      	b.n	8007882 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8007880:	bf00      	nop
	
}
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20000982 	.word	0x20000982
 800788c:	20000980 	.word	0x20000980
 8007890:	40020800 	.word	0x40020800
 8007894:	20002dc4 	.word	0x20002dc4

08007898 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8007898:	b590      	push	{r4, r7, lr}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	4604      	mov	r4, r0
 80078a0:	4608      	mov	r0, r1
 80078a2:	4611      	mov	r1, r2
 80078a4:	461a      	mov	r2, r3
 80078a6:	4623      	mov	r3, r4
 80078a8:	80fb      	strh	r3, [r7, #6]
 80078aa:	4603      	mov	r3, r0
 80078ac:	80bb      	strh	r3, [r7, #4]
 80078ae:	460b      	mov	r3, r1
 80078b0:	807b      	strh	r3, [r7, #2]
 80078b2:	4613      	mov	r3, r2
 80078b4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80078b6:	4b24      	ldr	r3, [pc, #144]	; (8007948 <ILI9341_Draw_Rectangle+0xb0>)
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	88fa      	ldrh	r2, [r7, #6]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d23d      	bcs.n	800793e <ILI9341_Draw_Rectangle+0xa6>
 80078c2:	4b22      	ldr	r3, [pc, #136]	; (800794c <ILI9341_Draw_Rectangle+0xb4>)
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	88ba      	ldrh	r2, [r7, #4]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d237      	bcs.n	800793e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80078ce:	88fa      	ldrh	r2, [r7, #6]
 80078d0:	887b      	ldrh	r3, [r7, #2]
 80078d2:	4413      	add	r3, r2
 80078d4:	4a1c      	ldr	r2, [pc, #112]	; (8007948 <ILI9341_Draw_Rectangle+0xb0>)
 80078d6:	8812      	ldrh	r2, [r2, #0]
 80078d8:	b292      	uxth	r2, r2
 80078da:	4293      	cmp	r3, r2
 80078dc:	dd05      	ble.n	80078ea <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80078de:	4b1a      	ldr	r3, [pc, #104]	; (8007948 <ILI9341_Draw_Rectangle+0xb0>)
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	88fb      	ldrh	r3, [r7, #6]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80078ea:	88ba      	ldrh	r2, [r7, #4]
 80078ec:	883b      	ldrh	r3, [r7, #0]
 80078ee:	4413      	add	r3, r2
 80078f0:	4a16      	ldr	r2, [pc, #88]	; (800794c <ILI9341_Draw_Rectangle+0xb4>)
 80078f2:	8812      	ldrh	r2, [r2, #0]
 80078f4:	b292      	uxth	r2, r2
 80078f6:	4293      	cmp	r3, r2
 80078f8:	dd05      	ble.n	8007906 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80078fa:	4b14      	ldr	r3, [pc, #80]	; (800794c <ILI9341_Draw_Rectangle+0xb4>)
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29a      	uxth	r2, r3
 8007900:	88bb      	ldrh	r3, [r7, #4]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8007906:	88fa      	ldrh	r2, [r7, #6]
 8007908:	887b      	ldrh	r3, [r7, #2]
 800790a:	4413      	add	r3, r2
 800790c:	b29b      	uxth	r3, r3
 800790e:	3b01      	subs	r3, #1
 8007910:	b29c      	uxth	r4, r3
 8007912:	88ba      	ldrh	r2, [r7, #4]
 8007914:	883b      	ldrh	r3, [r7, #0]
 8007916:	4413      	add	r3, r2
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b01      	subs	r3, #1
 800791c:	b29b      	uxth	r3, r3
 800791e:	88b9      	ldrh	r1, [r7, #4]
 8007920:	88f8      	ldrh	r0, [r7, #6]
 8007922:	4622      	mov	r2, r4
 8007924:	f7ff fc44 	bl	80071b0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8007928:	883b      	ldrh	r3, [r7, #0]
 800792a:	887a      	ldrh	r2, [r7, #2]
 800792c:	fb02 f303 	mul.w	r3, r2, r3
 8007930:	461a      	mov	r2, r3
 8007932:	8b3b      	ldrh	r3, [r7, #24]
 8007934:	4611      	mov	r1, r2
 8007936:	4618      	mov	r0, r3
 8007938:	f7ff fe10 	bl	800755c <ILI9341_Draw_Colour_Burst>
 800793c:	e000      	b.n	8007940 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800793e:	bf00      	nop
}
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	bd90      	pop	{r4, r7, pc}
 8007946:	bf00      	nop
 8007948:	20000982 	.word	0x20000982
 800794c:	20000980 	.word	0x20000980

08007950 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 8007950:	b590      	push	{r4, r7, lr}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	4604      	mov	r4, r0
 8007958:	4608      	mov	r0, r1
 800795a:	4611      	mov	r1, r2
 800795c:	461a      	mov	r2, r3
 800795e:	4623      	mov	r3, r4
 8007960:	80fb      	strh	r3, [r7, #6]
 8007962:	4603      	mov	r3, r0
 8007964:	80bb      	strh	r3, [r7, #4]
 8007966:	460b      	mov	r3, r1
 8007968:	807b      	strh	r3, [r7, #2]
 800796a:	4613      	mov	r3, r2
 800796c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800796e:	4b18      	ldr	r3, [pc, #96]	; (80079d0 <ILI9341_Draw_Horizontal_Line+0x80>)
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	88fa      	ldrh	r2, [r7, #6]
 8007976:	429a      	cmp	r2, r3
 8007978:	d225      	bcs.n	80079c6 <ILI9341_Draw_Horizontal_Line+0x76>
 800797a:	4b16      	ldr	r3, [pc, #88]	; (80079d4 <ILI9341_Draw_Horizontal_Line+0x84>)
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	b29b      	uxth	r3, r3
 8007980:	88ba      	ldrh	r2, [r7, #4]
 8007982:	429a      	cmp	r2, r3
 8007984:	d21f      	bcs.n	80079c6 <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 8007986:	88fa      	ldrh	r2, [r7, #6]
 8007988:	887b      	ldrh	r3, [r7, #2]
 800798a:	4413      	add	r3, r2
 800798c:	4a10      	ldr	r2, [pc, #64]	; (80079d0 <ILI9341_Draw_Horizontal_Line+0x80>)
 800798e:	8812      	ldrh	r2, [r2, #0]
 8007990:	b292      	uxth	r2, r2
 8007992:	4293      	cmp	r3, r2
 8007994:	dd05      	ble.n	80079a2 <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 8007996:	4b0e      	ldr	r3, [pc, #56]	; (80079d0 <ILI9341_Draw_Horizontal_Line+0x80>)
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29a      	uxth	r2, r3
 800799c:	88fb      	ldrh	r3, [r7, #6]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 80079a2:	88fa      	ldrh	r2, [r7, #6]
 80079a4:	887b      	ldrh	r3, [r7, #2]
 80079a6:	4413      	add	r3, r2
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	88bb      	ldrh	r3, [r7, #4]
 80079b0:	88b9      	ldrh	r1, [r7, #4]
 80079b2:	88f8      	ldrh	r0, [r7, #6]
 80079b4:	f7ff fbfc 	bl	80071b0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 80079b8:	887a      	ldrh	r2, [r7, #2]
 80079ba:	883b      	ldrh	r3, [r7, #0]
 80079bc:	4611      	mov	r1, r2
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff fdcc 	bl	800755c <ILI9341_Draw_Colour_Burst>
 80079c4:	e000      	b.n	80079c8 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80079c6:	bf00      	nop
}
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd90      	pop	{r4, r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20000982 	.word	0x20000982
 80079d4:	20000980 	.word	0x20000980

080079d8 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 80079d8:	b590      	push	{r4, r7, lr}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	4604      	mov	r4, r0
 80079e0:	4608      	mov	r0, r1
 80079e2:	4611      	mov	r1, r2
 80079e4:	461a      	mov	r2, r3
 80079e6:	4623      	mov	r3, r4
 80079e8:	80fb      	strh	r3, [r7, #6]
 80079ea:	4603      	mov	r3, r0
 80079ec:	80bb      	strh	r3, [r7, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	807b      	strh	r3, [r7, #2]
 80079f2:	4613      	mov	r3, r2
 80079f4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80079f6:	4b18      	ldr	r3, [pc, #96]	; (8007a58 <ILI9341_Draw_Vertical_Line+0x80>)
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	88fa      	ldrh	r2, [r7, #6]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d225      	bcs.n	8007a4e <ILI9341_Draw_Vertical_Line+0x76>
 8007a02:	4b16      	ldr	r3, [pc, #88]	; (8007a5c <ILI9341_Draw_Vertical_Line+0x84>)
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	88ba      	ldrh	r2, [r7, #4]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d21f      	bcs.n	8007a4e <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 8007a0e:	88ba      	ldrh	r2, [r7, #4]
 8007a10:	887b      	ldrh	r3, [r7, #2]
 8007a12:	4413      	add	r3, r2
 8007a14:	4a11      	ldr	r2, [pc, #68]	; (8007a5c <ILI9341_Draw_Vertical_Line+0x84>)
 8007a16:	8812      	ldrh	r2, [r2, #0]
 8007a18:	b292      	uxth	r2, r2
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	dd05      	ble.n	8007a2a <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 8007a1e:	4b0f      	ldr	r3, [pc, #60]	; (8007a5c <ILI9341_Draw_Vertical_Line+0x84>)
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	88bb      	ldrh	r3, [r7, #4]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 8007a2a:	88ba      	ldrh	r2, [r7, #4]
 8007a2c:	887b      	ldrh	r3, [r7, #2]
 8007a2e:	4413      	add	r3, r2
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	3b01      	subs	r3, #1
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	88fa      	ldrh	r2, [r7, #6]
 8007a38:	88b9      	ldrh	r1, [r7, #4]
 8007a3a:	88f8      	ldrh	r0, [r7, #6]
 8007a3c:	f7ff fbb8 	bl	80071b0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 8007a40:	887a      	ldrh	r2, [r7, #2]
 8007a42:	883b      	ldrh	r3, [r7, #0]
 8007a44:	4611      	mov	r1, r2
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff fd88 	bl	800755c <ILI9341_Draw_Colour_Burst>
 8007a4c:	e000      	b.n	8007a50 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8007a4e:	bf00      	nop
}
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd90      	pop	{r4, r7, pc}
 8007a56:	bf00      	nop
 8007a58:	20000982 	.word	0x20000982
 8007a5c:	20000980 	.word	0x20000980

08007a60 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8007a66:	2310      	movs	r3, #16
 8007a68:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8007a6e:	e019      	b.n	8007aa4 <TP_Read+0x44>
    {
        value <<= 1;
 8007a70:	88bb      	ldrh	r3, [r7, #4]
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8007a76:	2201      	movs	r2, #1
 8007a78:	2108      	movs	r1, #8
 8007a7a:	480e      	ldr	r0, [pc, #56]	; (8007ab4 <TP_Read+0x54>)
 8007a7c:	f001 fc22 	bl	80092c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8007a80:	2200      	movs	r2, #0
 8007a82:	2108      	movs	r1, #8
 8007a84:	480b      	ldr	r0, [pc, #44]	; (8007ab4 <TP_Read+0x54>)
 8007a86:	f001 fc1d 	bl	80092c4 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8007a8a:	2110      	movs	r1, #16
 8007a8c:	4809      	ldr	r0, [pc, #36]	; (8007ab4 <TP_Read+0x54>)
 8007a8e:	f001 fc01 	bl	8009294 <HAL_GPIO_ReadPin>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <TP_Read+0x3e>
        {
            value++;
 8007a98:	88bb      	ldrh	r3, [r7, #4]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8007aa4:	79fb      	ldrb	r3, [r7, #7]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e2      	bne.n	8007a70 <TP_Read+0x10>
    };

    return value;
 8007aaa:	88bb      	ldrh	r3, [r7, #4]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	40021000 	.word	0x40021000

08007ab8 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8007ac2:	2308      	movs	r3, #8
 8007ac4:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2108      	movs	r1, #8
 8007aca:	4815      	ldr	r0, [pc, #84]	; (8007b20 <TP_Write+0x68>)
 8007acc:	f001 fbfa 	bl	80092c4 <HAL_GPIO_WritePin>
	
    while(i > 0)
 8007ad0:	e01e      	b.n	8007b10 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8007ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	da05      	bge.n	8007ae6 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8007ada:	2201      	movs	r2, #1
 8007adc:	2120      	movs	r1, #32
 8007ade:	4810      	ldr	r0, [pc, #64]	; (8007b20 <TP_Write+0x68>)
 8007ae0:	f001 fbf0 	bl	80092c4 <HAL_GPIO_WritePin>
 8007ae4:	e004      	b.n	8007af0 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2120      	movs	r1, #32
 8007aea:	480d      	ldr	r0, [pc, #52]	; (8007b20 <TP_Write+0x68>)
 8007aec:	f001 fbea 	bl	80092c4 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8007af0:	79fb      	ldrb	r3, [r7, #7]
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8007af6:	2201      	movs	r2, #1
 8007af8:	2108      	movs	r1, #8
 8007afa:	4809      	ldr	r0, [pc, #36]	; (8007b20 <TP_Write+0x68>)
 8007afc:	f001 fbe2 	bl	80092c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8007b00:	2200      	movs	r2, #0
 8007b02:	2108      	movs	r1, #8
 8007b04:	4806      	ldr	r0, [pc, #24]	; (8007b20 <TP_Write+0x68>)
 8007b06:	f001 fbdd 	bl	80092c4 <HAL_GPIO_WritePin>
        i--;
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8007b10:	7bfb      	ldrb	r3, [r7, #15]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1dd      	bne.n	8007ad2 <TP_Write+0x1a>
    };
}
 8007b16:	bf00      	nop
 8007b18:	bf00      	nop
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	40021000 	.word	0x40021000
 8007b24:	00000000 	.word	0x00000000

08007b28 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08a      	sub	sp, #40	; 0x28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8007b30:	2201      	movs	r2, #1
 8007b32:	2108      	movs	r1, #8
 8007b34:	485a      	ldr	r0, [pc, #360]	; (8007ca0 <TP_Read_Coordinates+0x178>)
 8007b36:	f001 fbc5 	bl	80092c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	2120      	movs	r1, #32
 8007b3e:	4858      	ldr	r0, [pc, #352]	; (8007ca0 <TP_Read_Coordinates+0x178>)
 8007b40:	f001 fbc0 	bl	80092c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 8007b44:	2201      	movs	r2, #1
 8007b46:	2140      	movs	r1, #64	; 0x40
 8007b48:	4855      	ldr	r0, [pc, #340]	; (8007ca0 <TP_Read_Coordinates+0x178>)
 8007b4a:	f001 fbbb 	bl	80092c4 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8007b4e:	2300      	movs	r3, #0
 8007b50:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 8007b52:	2300      	movs	r3, #0
 8007b54:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 8007b56:	2300      	movs	r3, #0
 8007b58:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8007b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b5e:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8007b60:	2300      	movs	r3, #0
 8007b62:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8007b64:	2200      	movs	r2, #0
 8007b66:	2140      	movs	r1, #64	; 0x40
 8007b68:	484d      	ldr	r0, [pc, #308]	; (8007ca0 <TP_Read_Coordinates+0x178>)
 8007b6a:	f001 fbab 	bl	80092c4 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8007b6e:	e023      	b.n	8007bb8 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8007b70:	2090      	movs	r0, #144	; 0x90
 8007b72:	f7ff ffa1 	bl	8007ab8 <TP_Write>

				rawy = TP_Read();	
 8007b76:	f7ff ff73 	bl	8007a60 <TP_Read>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8007b7e:	89fb      	ldrh	r3, [r7, #14]
 8007b80:	6a3a      	ldr	r2, [r7, #32]
 8007b82:	4413      	add	r3, r2
 8007b84:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 8007b86:	89fb      	ldrh	r3, [r7, #14]
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8007b8e:	20d0      	movs	r0, #208	; 0xd0
 8007b90:	f7ff ff92 	bl	8007ab8 <TP_Write>
        rawx = TP_Read();
 8007b94:	f7ff ff64 	bl	8007a60 <TP_Read>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8007b9c:	89bb      	ldrh	r3, [r7, #12]
 8007b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba0:	4413      	add	r3, r2
 8007ba2:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 8007ba4:	89bb      	ldrh	r3, [r7, #12]
 8007ba6:	69fa      	ldr	r2, [r7, #28]
 8007ba8:	4413      	add	r3, r2
 8007baa:	61fb      	str	r3, [r7, #28]
        samples--;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d006      	beq.n	8007bcc <TP_Read_Coordinates+0xa4>
 8007bbe:	2104      	movs	r1, #4
 8007bc0:	4837      	ldr	r0, [pc, #220]	; (8007ca0 <TP_Read_Coordinates+0x178>)
 8007bc2:	f001 fb67 	bl	8009294 <HAL_GPIO_ReadPin>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d0d1      	beq.n	8007b70 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8007bcc:	2201      	movs	r2, #1
 8007bce:	2140      	movs	r1, #64	; 0x40
 8007bd0:	4833      	ldr	r0, [pc, #204]	; (8007ca0 <TP_Read_Coordinates+0x178>)
 8007bd2:	f001 fb77 	bl	80092c4 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bdc:	d14d      	bne.n	8007c7a <TP_Read_Coordinates+0x152>
 8007bde:	2104      	movs	r1, #4
 8007be0:	482f      	ldr	r0, [pc, #188]	; (8007ca0 <TP_Read_Coordinates+0x178>)
 8007be2:	f001 fb57 	bl	8009294 <HAL_GPIO_ReadPin>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d146      	bne.n	8007c7a <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 8007bec:	69fa      	ldr	r2, [r7, #28]
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf4:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bfe:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8007c08:	89bb      	ldrh	r3, [r7, #12]
 8007c0a:	425b      	negs	r3, r3
 8007c0c:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8007c0e:	89fb      	ldrh	r3, [r7, #14]
 8007c10:	425b      	negs	r3, r3
 8007c12:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8007c14:	89ba      	ldrh	r2, [r7, #12]
 8007c16:	4b23      	ldr	r3, [pc, #140]	; (8007ca4 <TP_Read_Coordinates+0x17c>)
 8007c18:	fba3 1302 	umull	r1, r3, r3, r2
 8007c1c:	1ad2      	subs	r2, r2, r3
 8007c1e:	0852      	lsrs	r2, r2, #1
 8007c20:	4413      	add	r3, r2
 8007c22:	0a1b      	lsrs	r3, r3, #8
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8007c2a:	ee07 3a90 	vmov	s15, r3
 8007c2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007c32:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8007c98 <TP_Read_Coordinates+0x170>
 8007c36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c3a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007c3e:	ee17 3a90 	vmov	r3, s15
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8007c48:	89fb      	ldrh	r3, [r7, #14]
 8007c4a:	4a17      	ldr	r2, [pc, #92]	; (8007ca8 <TP_Read_Coordinates+0x180>)
 8007c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c50:	09db      	lsrs	r3, r3, #7
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	3b0f      	subs	r3, #15
 8007c56:	ee07 3a90 	vmov	s15, r3
 8007c5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007c5e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8007c98 <TP_Read_Coordinates+0x170>
 8007c62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	3302      	adds	r3, #2
 8007c6a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007c6e:	ee17 2a90 	vmov	r2, s15
 8007c72:	b292      	uxth	r2, r2
 8007c74:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 8007c76:	2301      	movs	r3, #1
 8007c78:	e007      	b.n	8007c8a <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	3302      	adds	r3, #2
 8007c84:	2200      	movs	r2, #0
 8007c86:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8007c88:	2300      	movs	r3, #0
		}
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3728      	adds	r7, #40	; 0x28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	f3af 8000 	nop.w
 8007c98:	28f5c28f 	.word	0x28f5c28f
 8007c9c:	3ff28f5c 	.word	0x3ff28f5c
 8007ca0:	40021000 	.word	0x40021000
 8007ca4:	e01e01e1 	.word	0xe01e01e1
 8007ca8:	a0a0a0a1 	.word	0xa0a0a0a1

08007cac <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8007cb0:	2104      	movs	r1, #4
 8007cb2:	4805      	ldr	r0, [pc, #20]	; (8007cc8 <TP_Touchpad_Pressed+0x1c>)
 8007cb4:	f001 faee 	bl	8009294 <HAL_GPIO_ReadPin>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d101      	bne.n	8007cc2 <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e000      	b.n	8007cc4 <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8007cc2:	2300      	movs	r3, #0
	}
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	40021000 	.word	0x40021000

08007ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007cd0:	4b08      	ldr	r3, [pc, #32]	; (8007cf4 <HAL_Init+0x28>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a07      	ldr	r2, [pc, #28]	; (8007cf4 <HAL_Init+0x28>)
 8007cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007cdc:	2003      	movs	r0, #3
 8007cde:	f000 fd73 	bl	80087c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	f000 f808 	bl	8007cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007ce8:	f7fe fc44 	bl	8006574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	40023c00 	.word	0x40023c00

08007cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007d00:	4b12      	ldr	r3, [pc, #72]	; (8007d4c <HAL_InitTick+0x54>)
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	4b12      	ldr	r3, [pc, #72]	; (8007d50 <HAL_InitTick+0x58>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fd8b 	bl	8008832 <HAL_SYSTICK_Config>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d001      	beq.n	8007d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e00e      	b.n	8007d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b0f      	cmp	r3, #15
 8007d2a:	d80a      	bhi.n	8007d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d34:	f000 fd53 	bl	80087de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007d38:	4a06      	ldr	r2, [pc, #24]	; (8007d54 <HAL_InitTick+0x5c>)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	e000      	b.n	8007d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	2000097c 	.word	0x2000097c
 8007d50:	20000988 	.word	0x20000988
 8007d54:	20000984 	.word	0x20000984

08007d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007d5c:	4b06      	ldr	r3, [pc, #24]	; (8007d78 <HAL_IncTick+0x20>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	461a      	mov	r2, r3
 8007d62:	4b06      	ldr	r3, [pc, #24]	; (8007d7c <HAL_IncTick+0x24>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4413      	add	r3, r2
 8007d68:	4a04      	ldr	r2, [pc, #16]	; (8007d7c <HAL_IncTick+0x24>)
 8007d6a:	6013      	str	r3, [r2, #0]
}
 8007d6c:	bf00      	nop
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	20000988 	.word	0x20000988
 8007d7c:	20002f4c 	.word	0x20002f4c

08007d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d80:	b480      	push	{r7}
 8007d82:	af00      	add	r7, sp, #0
  return uwTick;
 8007d84:	4b03      	ldr	r3, [pc, #12]	; (8007d94 <HAL_GetTick+0x14>)
 8007d86:	681b      	ldr	r3, [r3, #0]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	20002f4c 	.word	0x20002f4c

08007d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007da0:	f7ff ffee 	bl	8007d80 <HAL_GetTick>
 8007da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007db0:	d005      	beq.n	8007dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007db2:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <HAL_Delay+0x44>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4413      	add	r3, r2
 8007dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007dbe:	bf00      	nop
 8007dc0:	f7ff ffde 	bl	8007d80 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d8f7      	bhi.n	8007dc0 <HAL_Delay+0x28>
  {
  }
}
 8007dd0:	bf00      	nop
 8007dd2:	bf00      	nop
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	20000988 	.word	0x20000988

08007de0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e031      	b.n	8007e5a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d109      	bne.n	8007e12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7f8 fc70 	bl	80006e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e16:	f003 0310 	and.w	r3, r3, #16
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d116      	bne.n	8007e4c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e22:	4b10      	ldr	r3, [pc, #64]	; (8007e64 <HAL_ADC_Init+0x84>)
 8007e24:	4013      	ands	r3, r2
 8007e26:	f043 0202 	orr.w	r2, r3, #2
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fa7e 	bl	8008330 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3e:	f023 0303 	bic.w	r3, r3, #3
 8007e42:	f043 0201 	orr.w	r2, r3, #1
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	641a      	str	r2, [r3, #64]	; 0x40
 8007e4a:	e001      	b.n	8007e50 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	ffffeefd 	.word	0xffffeefd

08007e68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8007e74:	2300      	movs	r3, #0
 8007e76:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d101      	bne.n	8007e86 <HAL_ADC_Start_DMA+0x1e>
 8007e82:	2302      	movs	r3, #2
 8007e84:	e0d4      	b.n	8008030 <HAL_ADC_Start_DMA+0x1c8>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d018      	beq.n	8007ece <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689a      	ldr	r2, [r3, #8]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f042 0201 	orr.w	r2, r2, #1
 8007eaa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007eac:	4b62      	ldr	r3, [pc, #392]	; (8008038 <HAL_ADC_Start_DMA+0x1d0>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a62      	ldr	r2, [pc, #392]	; (800803c <HAL_ADC_Start_DMA+0x1d4>)
 8007eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb6:	0c9a      	lsrs	r2, r3, #18
 8007eb8:	4613      	mov	r3, r2
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	4413      	add	r3, r2
 8007ebe:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8007ec0:	e002      	b.n	8007ec8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1f9      	bne.n	8007ec2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	f040 809c 	bne.w	8008016 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ee2:	4b57      	ldr	r3, [pc, #348]	; (8008040 <HAL_ADC_Start_DMA+0x1d8>)
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d007      	beq.n	8007f0c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007f04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f18:	d106      	bne.n	8007f28 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1e:	f023 0206 	bic.w	r2, r3, #6
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	645a      	str	r2, [r3, #68]	; 0x44
 8007f26:	e002      	b.n	8007f2e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3a:	4a42      	ldr	r2, [pc, #264]	; (8008044 <HAL_ADC_Start_DMA+0x1dc>)
 8007f3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f42:	4a41      	ldr	r2, [pc, #260]	; (8008048 <HAL_ADC_Start_DMA+0x1e0>)
 8007f44:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4a:	4a40      	ldr	r2, [pc, #256]	; (800804c <HAL_ADC_Start_DMA+0x1e4>)
 8007f4c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007f56:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007f66:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f76:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	334c      	adds	r3, #76	; 0x4c
 8007f82:	4619      	mov	r1, r3
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f000 fd0e 	bl	80089a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8007f8c:	4b30      	ldr	r3, [pc, #192]	; (8008050 <HAL_ADC_Start_DMA+0x1e8>)
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	f003 031f 	and.w	r3, r3, #31
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10f      	bne.n	8007fb8 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d143      	bne.n	800802e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	689a      	ldr	r2, [r3, #8]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007fb4:	609a      	str	r2, [r3, #8]
 8007fb6:	e03a      	b.n	800802e <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a25      	ldr	r2, [pc, #148]	; (8008054 <HAL_ADC_Start_DMA+0x1ec>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d10e      	bne.n	8007fe0 <HAL_ADC_Start_DMA+0x178>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d107      	bne.n	8007fe0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689a      	ldr	r2, [r3, #8]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007fde:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007fe0:	4b1b      	ldr	r3, [pc, #108]	; (8008050 <HAL_ADC_Start_DMA+0x1e8>)
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f003 0310 	and.w	r3, r3, #16
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d120      	bne.n	800802e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a19      	ldr	r2, [pc, #100]	; (8008058 <HAL_ADC_Start_DMA+0x1f0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d11b      	bne.n	800802e <HAL_ADC_Start_DMA+0x1c6>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d114      	bne.n	800802e <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689a      	ldr	r2, [r3, #8]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008012:	609a      	str	r2, [r3, #8]
 8008014:	e00b      	b.n	800802e <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801a:	f043 0210 	orr.w	r2, r3, #16
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008026:	f043 0201 	orr.w	r2, r3, #1
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3718      	adds	r7, #24
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	2000097c 	.word	0x2000097c
 800803c:	431bde83 	.word	0x431bde83
 8008040:	fffff8fe 	.word	0xfffff8fe
 8008044:	08008525 	.word	0x08008525
 8008048:	080085df 	.word	0x080085df
 800804c:	080085fb 	.word	0x080085fb
 8008050:	40012300 	.word	0x40012300
 8008054:	40012000 	.word	0x40012000
 8008058:	40012200 	.word	0x40012200

0800805c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800808e:	2300      	movs	r3, #0
 8008090:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008098:	2b01      	cmp	r3, #1
 800809a:	d101      	bne.n	80080a0 <HAL_ADC_ConfigChannel+0x1c>
 800809c:	2302      	movs	r3, #2
 800809e:	e136      	b.n	800830e <HAL_ADC_ConfigChannel+0x28a>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b09      	cmp	r3, #9
 80080ae:	d93a      	bls.n	8008126 <HAL_ADC_ConfigChannel+0xa2>
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080b8:	d035      	beq.n	8008126 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68d9      	ldr	r1, [r3, #12]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	461a      	mov	r2, r3
 80080c8:	4613      	mov	r3, r2
 80080ca:	005b      	lsls	r3, r3, #1
 80080cc:	4413      	add	r3, r2
 80080ce:	3b1e      	subs	r3, #30
 80080d0:	2207      	movs	r2, #7
 80080d2:	fa02 f303 	lsl.w	r3, r2, r3
 80080d6:	43da      	mvns	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	400a      	ands	r2, r1
 80080de:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a8d      	ldr	r2, [pc, #564]	; (800831c <HAL_ADC_ConfigChannel+0x298>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d10a      	bne.n	8008100 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68d9      	ldr	r1, [r3, #12]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	061a      	lsls	r2, r3, #24
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80080fe:	e035      	b.n	800816c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68d9      	ldr	r1, [r3, #12]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	b29b      	uxth	r3, r3
 8008110:	4618      	mov	r0, r3
 8008112:	4603      	mov	r3, r0
 8008114:	005b      	lsls	r3, r3, #1
 8008116:	4403      	add	r3, r0
 8008118:	3b1e      	subs	r3, #30
 800811a:	409a      	lsls	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008124:	e022      	b.n	800816c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6919      	ldr	r1, [r3, #16]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	b29b      	uxth	r3, r3
 8008132:	461a      	mov	r2, r3
 8008134:	4613      	mov	r3, r2
 8008136:	005b      	lsls	r3, r3, #1
 8008138:	4413      	add	r3, r2
 800813a:	2207      	movs	r2, #7
 800813c:	fa02 f303 	lsl.w	r3, r2, r3
 8008140:	43da      	mvns	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	400a      	ands	r2, r1
 8008148:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6919      	ldr	r1, [r3, #16]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	689a      	ldr	r2, [r3, #8]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	b29b      	uxth	r3, r3
 800815a:	4618      	mov	r0, r3
 800815c:	4603      	mov	r3, r0
 800815e:	005b      	lsls	r3, r3, #1
 8008160:	4403      	add	r3, r0
 8008162:	409a      	lsls	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	430a      	orrs	r2, r1
 800816a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	2b06      	cmp	r3, #6
 8008172:	d824      	bhi.n	80081be <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	4613      	mov	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	3b05      	subs	r3, #5
 8008186:	221f      	movs	r2, #31
 8008188:	fa02 f303 	lsl.w	r3, r2, r3
 800818c:	43da      	mvns	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	400a      	ands	r2, r1
 8008194:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	4618      	mov	r0, r3
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	4613      	mov	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	3b05      	subs	r3, #5
 80081b0:	fa00 f203 	lsl.w	r2, r0, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	635a      	str	r2, [r3, #52]	; 0x34
 80081bc:	e04c      	b.n	8008258 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	2b0c      	cmp	r3, #12
 80081c4:	d824      	bhi.n	8008210 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	4613      	mov	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	3b23      	subs	r3, #35	; 0x23
 80081d8:	221f      	movs	r2, #31
 80081da:	fa02 f303 	lsl.w	r3, r2, r3
 80081de:	43da      	mvns	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	400a      	ands	r2, r1
 80081e6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	4618      	mov	r0, r3
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	4613      	mov	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	3b23      	subs	r3, #35	; 0x23
 8008202:	fa00 f203 	lsl.w	r2, r0, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	631a      	str	r2, [r3, #48]	; 0x30
 800820e:	e023      	b.n	8008258 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	4613      	mov	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	3b41      	subs	r3, #65	; 0x41
 8008222:	221f      	movs	r2, #31
 8008224:	fa02 f303 	lsl.w	r3, r2, r3
 8008228:	43da      	mvns	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	400a      	ands	r2, r1
 8008230:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	b29b      	uxth	r3, r3
 800823e:	4618      	mov	r0, r3
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	685a      	ldr	r2, [r3, #4]
 8008244:	4613      	mov	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	3b41      	subs	r3, #65	; 0x41
 800824c:	fa00 f203 	lsl.w	r2, r0, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a30      	ldr	r2, [pc, #192]	; (8008320 <HAL_ADC_ConfigChannel+0x29c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d10a      	bne.n	8008278 <HAL_ADC_ConfigChannel+0x1f4>
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800826a:	d105      	bne.n	8008278 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800826c:	4b2d      	ldr	r3, [pc, #180]	; (8008324 <HAL_ADC_ConfigChannel+0x2a0>)
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	4a2c      	ldr	r2, [pc, #176]	; (8008324 <HAL_ADC_ConfigChannel+0x2a0>)
 8008272:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008276:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a28      	ldr	r2, [pc, #160]	; (8008320 <HAL_ADC_ConfigChannel+0x29c>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d10f      	bne.n	80082a2 <HAL_ADC_ConfigChannel+0x21e>
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b12      	cmp	r3, #18
 8008288:	d10b      	bne.n	80082a2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800828a:	4b26      	ldr	r3, [pc, #152]	; (8008324 <HAL_ADC_ConfigChannel+0x2a0>)
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	4a25      	ldr	r2, [pc, #148]	; (8008324 <HAL_ADC_ConfigChannel+0x2a0>)
 8008290:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008294:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8008296:	4b23      	ldr	r3, [pc, #140]	; (8008324 <HAL_ADC_ConfigChannel+0x2a0>)
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	4a22      	ldr	r2, [pc, #136]	; (8008324 <HAL_ADC_ConfigChannel+0x2a0>)
 800829c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80082a0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a1e      	ldr	r2, [pc, #120]	; (8008320 <HAL_ADC_ConfigChannel+0x29c>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d12b      	bne.n	8008304 <HAL_ADC_ConfigChannel+0x280>
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a1a      	ldr	r2, [pc, #104]	; (800831c <HAL_ADC_ConfigChannel+0x298>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d003      	beq.n	80082be <HAL_ADC_ConfigChannel+0x23a>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b11      	cmp	r3, #17
 80082bc:	d122      	bne.n	8008304 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80082be:	4b19      	ldr	r3, [pc, #100]	; (8008324 <HAL_ADC_ConfigChannel+0x2a0>)
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	4a18      	ldr	r2, [pc, #96]	; (8008324 <HAL_ADC_ConfigChannel+0x2a0>)
 80082c4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80082c8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80082ca:	4b16      	ldr	r3, [pc, #88]	; (8008324 <HAL_ADC_ConfigChannel+0x2a0>)
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	4a15      	ldr	r2, [pc, #84]	; (8008324 <HAL_ADC_ConfigChannel+0x2a0>)
 80082d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80082d4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a10      	ldr	r2, [pc, #64]	; (800831c <HAL_ADC_ConfigChannel+0x298>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d111      	bne.n	8008304 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80082e0:	4b11      	ldr	r3, [pc, #68]	; (8008328 <HAL_ADC_ConfigChannel+0x2a4>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a11      	ldr	r2, [pc, #68]	; (800832c <HAL_ADC_ConfigChannel+0x2a8>)
 80082e6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ea:	0c9a      	lsrs	r2, r3, #18
 80082ec:	4613      	mov	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80082f6:	e002      	b.n	80082fe <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1f9      	bne.n	80082f8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	10000012 	.word	0x10000012
 8008320:	40012000 	.word	0x40012000
 8008324:	40012300 	.word	0x40012300
 8008328:	2000097c 	.word	0x2000097c
 800832c:	431bde83 	.word	0x431bde83

08008330 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8008338:	4b78      	ldr	r3, [pc, #480]	; (800851c <ADC_Init+0x1ec>)
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	4a77      	ldr	r2, [pc, #476]	; (800851c <ADC_Init+0x1ec>)
 800833e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008342:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8008344:	4b75      	ldr	r3, [pc, #468]	; (800851c <ADC_Init+0x1ec>)
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	4973      	ldr	r1, [pc, #460]	; (800851c <ADC_Init+0x1ec>)
 800834e:	4313      	orrs	r3, r2
 8008350:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	685a      	ldr	r2, [r3, #4]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008360:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6859      	ldr	r1, [r3, #4]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	021a      	lsls	r2, r3, #8
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008384:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6859      	ldr	r1, [r3, #4]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689a      	ldr	r2, [r3, #8]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689a      	ldr	r2, [r3, #8]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6899      	ldr	r1, [r3, #8]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083be:	4a58      	ldr	r2, [pc, #352]	; (8008520 <ADC_Init+0x1f0>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d022      	beq.n	800840a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	689a      	ldr	r2, [r3, #8]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80083d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6899      	ldr	r1, [r3, #8]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80083f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6899      	ldr	r1, [r3, #8]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	609a      	str	r2, [r3, #8]
 8008408:	e00f      	b.n	800842a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008418:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008428:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	689a      	ldr	r2, [r3, #8]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f022 0202 	bic.w	r2, r2, #2
 8008438:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	6899      	ldr	r1, [r3, #8]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	005a      	lsls	r2, r3, #1
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	430a      	orrs	r2, r1
 800844c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d01b      	beq.n	8008490 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	685a      	ldr	r2, [r3, #4]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008466:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	685a      	ldr	r2, [r3, #4]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008476:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6859      	ldr	r1, [r3, #4]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008482:	3b01      	subs	r3, #1
 8008484:	035a      	lsls	r2, r3, #13
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	605a      	str	r2, [r3, #4]
 800848e:	e007      	b.n	80084a0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800849e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80084ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	051a      	lsls	r2, r3, #20
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	689a      	ldr	r2, [r3, #8]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80084d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6899      	ldr	r1, [r3, #8]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084e2:	025a      	lsls	r2, r3, #9
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689a      	ldr	r2, [r3, #8]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6899      	ldr	r1, [r3, #8]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	029a      	lsls	r2, r3, #10
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	609a      	str	r2, [r3, #8]
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	40012300 	.word	0x40012300
 8008520:	0f000001 	.word	0x0f000001

08008524 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008530:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800853a:	2b00      	cmp	r3, #0
 800853c:	d13c      	bne.n	80085b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d12b      	bne.n	80085b0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800855c:	2b00      	cmp	r3, #0
 800855e:	d127      	bne.n	80085b0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008566:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800856a:	2b00      	cmp	r3, #0
 800856c:	d006      	beq.n	800857c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008578:	2b00      	cmp	r3, #0
 800857a:	d119      	bne.n	80085b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0220 	bic.w	r2, r2, #32
 800858a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008590:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d105      	bne.n	80085b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a8:	f043 0201 	orr.w	r2, r3, #1
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f7fd fb2f 	bl	8005c14 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80085b6:	e00e      	b.n	80085d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085bc:	f003 0310 	and.w	r3, r3, #16
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f7ff fd53 	bl	8008070 <HAL_ADC_ErrorCallback>
}
 80085ca:	e004      	b.n	80085d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	4798      	blx	r3
}
 80085d6:	bf00      	nop
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f7ff fd35 	bl	800805c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80085f2:	bf00      	nop
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b084      	sub	sp, #16
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008606:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2240      	movs	r2, #64	; 0x40
 800860c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008612:	f043 0204 	orr.w	r2, r3, #4
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f7ff fd28 	bl	8008070 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008620:	bf00      	nop
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <__NVIC_SetPriorityGrouping>:
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f003 0307 	and.w	r3, r3, #7
 8008636:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008638:	4b0b      	ldr	r3, [pc, #44]	; (8008668 <__NVIC_SetPriorityGrouping+0x40>)
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008644:	4013      	ands	r3, r2
 8008646:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008650:	4b06      	ldr	r3, [pc, #24]	; (800866c <__NVIC_SetPriorityGrouping+0x44>)
 8008652:	4313      	orrs	r3, r2
 8008654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008656:	4a04      	ldr	r2, [pc, #16]	; (8008668 <__NVIC_SetPriorityGrouping+0x40>)
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	60d3      	str	r3, [r2, #12]
}
 800865c:	bf00      	nop
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	e000ed00 	.word	0xe000ed00
 800866c:	05fa0000 	.word	0x05fa0000

08008670 <__NVIC_GetPriorityGrouping>:
{
 8008670:	b480      	push	{r7}
 8008672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008674:	4b04      	ldr	r3, [pc, #16]	; (8008688 <__NVIC_GetPriorityGrouping+0x18>)
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	0a1b      	lsrs	r3, r3, #8
 800867a:	f003 0307 	and.w	r3, r3, #7
}
 800867e:	4618      	mov	r0, r3
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	e000ed00 	.word	0xe000ed00

0800868c <__NVIC_EnableIRQ>:
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800869a:	2b00      	cmp	r3, #0
 800869c:	db0b      	blt.n	80086b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800869e:	79fb      	ldrb	r3, [r7, #7]
 80086a0:	f003 021f 	and.w	r2, r3, #31
 80086a4:	4907      	ldr	r1, [pc, #28]	; (80086c4 <__NVIC_EnableIRQ+0x38>)
 80086a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086aa:	095b      	lsrs	r3, r3, #5
 80086ac:	2001      	movs	r0, #1
 80086ae:	fa00 f202 	lsl.w	r2, r0, r2
 80086b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	e000e100 	.word	0xe000e100

080086c8 <__NVIC_SetPriority>:
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	6039      	str	r1, [r7, #0]
 80086d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	db0a      	blt.n	80086f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	490c      	ldr	r1, [pc, #48]	; (8008714 <__NVIC_SetPriority+0x4c>)
 80086e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086e6:	0112      	lsls	r2, r2, #4
 80086e8:	b2d2      	uxtb	r2, r2
 80086ea:	440b      	add	r3, r1
 80086ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80086f0:	e00a      	b.n	8008708 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	4908      	ldr	r1, [pc, #32]	; (8008718 <__NVIC_SetPriority+0x50>)
 80086f8:	79fb      	ldrb	r3, [r7, #7]
 80086fa:	f003 030f 	and.w	r3, r3, #15
 80086fe:	3b04      	subs	r3, #4
 8008700:	0112      	lsls	r2, r2, #4
 8008702:	b2d2      	uxtb	r2, r2
 8008704:	440b      	add	r3, r1
 8008706:	761a      	strb	r2, [r3, #24]
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	e000e100 	.word	0xe000e100
 8008718:	e000ed00 	.word	0xe000ed00

0800871c <NVIC_EncodePriority>:
{
 800871c:	b480      	push	{r7}
 800871e:	b089      	sub	sp, #36	; 0x24
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f003 0307 	and.w	r3, r3, #7
 800872e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	f1c3 0307 	rsb	r3, r3, #7
 8008736:	2b04      	cmp	r3, #4
 8008738:	bf28      	it	cs
 800873a:	2304      	movcs	r3, #4
 800873c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	3304      	adds	r3, #4
 8008742:	2b06      	cmp	r3, #6
 8008744:	d902      	bls.n	800874c <NVIC_EncodePriority+0x30>
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	3b03      	subs	r3, #3
 800874a:	e000      	b.n	800874e <NVIC_EncodePriority+0x32>
 800874c:	2300      	movs	r3, #0
 800874e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	fa02 f303 	lsl.w	r3, r2, r3
 800875a:	43da      	mvns	r2, r3
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	401a      	ands	r2, r3
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008764:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	fa01 f303 	lsl.w	r3, r1, r3
 800876e:	43d9      	mvns	r1, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008774:	4313      	orrs	r3, r2
}
 8008776:	4618      	mov	r0, r3
 8008778:	3724      	adds	r7, #36	; 0x24
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
	...

08008784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3b01      	subs	r3, #1
 8008790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008794:	d301      	bcc.n	800879a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008796:	2301      	movs	r3, #1
 8008798:	e00f      	b.n	80087ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800879a:	4a0a      	ldr	r2, [pc, #40]	; (80087c4 <SysTick_Config+0x40>)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3b01      	subs	r3, #1
 80087a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80087a2:	210f      	movs	r1, #15
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087a8:	f7ff ff8e 	bl	80086c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80087ac:	4b05      	ldr	r3, [pc, #20]	; (80087c4 <SysTick_Config+0x40>)
 80087ae:	2200      	movs	r2, #0
 80087b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80087b2:	4b04      	ldr	r3, [pc, #16]	; (80087c4 <SysTick_Config+0x40>)
 80087b4:	2207      	movs	r2, #7
 80087b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	e000e010 	.word	0xe000e010

080087c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7ff ff29 	bl	8008628 <__NVIC_SetPriorityGrouping>
}
 80087d6:	bf00      	nop
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80087de:	b580      	push	{r7, lr}
 80087e0:	b086      	sub	sp, #24
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	4603      	mov	r3, r0
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	607a      	str	r2, [r7, #4]
 80087ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80087ec:	2300      	movs	r3, #0
 80087ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80087f0:	f7ff ff3e 	bl	8008670 <__NVIC_GetPriorityGrouping>
 80087f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	68b9      	ldr	r1, [r7, #8]
 80087fa:	6978      	ldr	r0, [r7, #20]
 80087fc:	f7ff ff8e 	bl	800871c <NVIC_EncodePriority>
 8008800:	4602      	mov	r2, r0
 8008802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008806:	4611      	mov	r1, r2
 8008808:	4618      	mov	r0, r3
 800880a:	f7ff ff5d 	bl	80086c8 <__NVIC_SetPriority>
}
 800880e:	bf00      	nop
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	4603      	mov	r3, r0
 800881e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008824:	4618      	mov	r0, r3
 8008826:	f7ff ff31 	bl	800868c <__NVIC_EnableIRQ>
}
 800882a:	bf00      	nop
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7ff ffa2 	bl	8008784 <SysTick_Config>
 8008840:	4603      	mov	r3, r0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
	...

0800884c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008854:	2300      	movs	r3, #0
 8008856:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008858:	f7ff fa92 	bl	8007d80 <HAL_GetTick>
 800885c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e099      	b.n	800899c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2202      	movs	r2, #2
 800886c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f022 0201 	bic.w	r2, r2, #1
 8008886:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008888:	e00f      	b.n	80088aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800888a:	f7ff fa79 	bl	8007d80 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b05      	cmp	r3, #5
 8008896:	d908      	bls.n	80088aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2220      	movs	r2, #32
 800889c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2203      	movs	r2, #3
 80088a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e078      	b.n	800899c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1e8      	bne.n	800888a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	4b38      	ldr	r3, [pc, #224]	; (80089a4 <HAL_DMA_Init+0x158>)
 80088c4:	4013      	ands	r3, r2
 80088c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80088d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80088e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80088ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a1b      	ldr	r3, [r3, #32]
 80088f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008900:	2b04      	cmp	r3, #4
 8008902:	d107      	bne.n	8008914 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890c:	4313      	orrs	r3, r2
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	4313      	orrs	r3, r2
 8008912:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f023 0307 	bic.w	r3, r3, #7
 800892a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	4313      	orrs	r3, r2
 8008934:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893a:	2b04      	cmp	r3, #4
 800893c:	d117      	bne.n	800896e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	4313      	orrs	r3, r2
 8008946:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00e      	beq.n	800896e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fa77 	bl	8008e44 <DMA_CheckFifoParam>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d008      	beq.n	800896e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2240      	movs	r2, #64	; 0x40
 8008960:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800896a:	2301      	movs	r3, #1
 800896c:	e016      	b.n	800899c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fa2e 	bl	8008dd8 <DMA_CalcBaseAndBitshift>
 800897c:	4603      	mov	r3, r0
 800897e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008984:	223f      	movs	r2, #63	; 0x3f
 8008986:	409a      	lsls	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3718      	adds	r7, #24
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	e010803f 	.word	0xe010803f

080089a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
 80089b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d101      	bne.n	80089ce <HAL_DMA_Start_IT+0x26>
 80089ca:	2302      	movs	r3, #2
 80089cc:	e048      	b.n	8008a60 <HAL_DMA_Start_IT+0xb8>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d137      	bne.n	8008a52 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2202      	movs	r2, #2
 80089e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	68b9      	ldr	r1, [r7, #8]
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f000 f9c0 	bl	8008d7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a00:	223f      	movs	r2, #63	; 0x3f
 8008a02:	409a      	lsls	r2, r3
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0216 	orr.w	r2, r2, #22
 8008a16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	695a      	ldr	r2, [r3, #20]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a26:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d007      	beq.n	8008a40 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f042 0208 	orr.w	r2, r2, #8
 8008a3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f042 0201 	orr.w	r2, r2, #1
 8008a4e:	601a      	str	r2, [r3, #0]
 8008a50:	e005      	b.n	8008a5e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008a70:	2300      	movs	r3, #0
 8008a72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008a74:	4b8e      	ldr	r3, [pc, #568]	; (8008cb0 <HAL_DMA_IRQHandler+0x248>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a8e      	ldr	r2, [pc, #568]	; (8008cb4 <HAL_DMA_IRQHandler+0x24c>)
 8008a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a7e:	0a9b      	lsrs	r3, r3, #10
 8008a80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a92:	2208      	movs	r2, #8
 8008a94:	409a      	lsls	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4013      	ands	r3, r2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d01a      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0304 	and.w	r3, r3, #4
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d013      	beq.n	8008ad4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f022 0204 	bic.w	r2, r2, #4
 8008aba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ac0:	2208      	movs	r2, #8
 8008ac2:	409a      	lsls	r2, r3
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008acc:	f043 0201 	orr.w	r2, r3, #1
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ad8:	2201      	movs	r2, #1
 8008ada:	409a      	lsls	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d012      	beq.n	8008b0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00b      	beq.n	8008b0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008af6:	2201      	movs	r2, #1
 8008af8:	409a      	lsls	r2, r3
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b02:	f043 0202 	orr.w	r2, r3, #2
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b0e:	2204      	movs	r2, #4
 8008b10:	409a      	lsls	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4013      	ands	r3, r2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d012      	beq.n	8008b40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b2c:	2204      	movs	r2, #4
 8008b2e:	409a      	lsls	r2, r3
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b38:	f043 0204 	orr.w	r2, r3, #4
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b44:	2210      	movs	r2, #16
 8008b46:	409a      	lsls	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d043      	beq.n	8008bd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d03c      	beq.n	8008bd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b62:	2210      	movs	r2, #16
 8008b64:	409a      	lsls	r2, r3
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d018      	beq.n	8008baa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d108      	bne.n	8008b98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d024      	beq.n	8008bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	4798      	blx	r3
 8008b96:	e01f      	b.n	8008bd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d01b      	beq.n	8008bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	4798      	blx	r3
 8008ba8:	e016      	b.n	8008bd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d107      	bne.n	8008bc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f022 0208 	bic.w	r2, r2, #8
 8008bc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d003      	beq.n	8008bd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bdc:	2220      	movs	r2, #32
 8008bde:	409a      	lsls	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	4013      	ands	r3, r2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 808f 	beq.w	8008d08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0310 	and.w	r3, r3, #16
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 8087 	beq.w	8008d08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bfe:	2220      	movs	r2, #32
 8008c00:	409a      	lsls	r2, r3
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b05      	cmp	r3, #5
 8008c10:	d136      	bne.n	8008c80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f022 0216 	bic.w	r2, r2, #22
 8008c20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	695a      	ldr	r2, [r3, #20]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d103      	bne.n	8008c42 <HAL_DMA_IRQHandler+0x1da>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d007      	beq.n	8008c52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f022 0208 	bic.w	r2, r2, #8
 8008c50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c56:	223f      	movs	r2, #63	; 0x3f
 8008c58:	409a      	lsls	r2, r3
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d07e      	beq.n	8008d74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	4798      	blx	r3
        }
        return;
 8008c7e:	e079      	b.n	8008d74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d01d      	beq.n	8008cca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10d      	bne.n	8008cb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d031      	beq.n	8008d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	4798      	blx	r3
 8008cac:	e02c      	b.n	8008d08 <HAL_DMA_IRQHandler+0x2a0>
 8008cae:	bf00      	nop
 8008cb0:	2000097c 	.word	0x2000097c
 8008cb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d023      	beq.n	8008d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	4798      	blx	r3
 8008cc8:	e01e      	b.n	8008d08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10f      	bne.n	8008cf8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f022 0210 	bic.w	r2, r2, #16
 8008ce6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d003      	beq.n	8008d08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d032      	beq.n	8008d76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d022      	beq.n	8008d62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2205      	movs	r2, #5
 8008d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f022 0201 	bic.w	r2, r2, #1
 8008d32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	3301      	adds	r3, #1
 8008d38:	60bb      	str	r3, [r7, #8]
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d307      	bcc.n	8008d50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1f2      	bne.n	8008d34 <HAL_DMA_IRQHandler+0x2cc>
 8008d4e:	e000      	b.n	8008d52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008d50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d005      	beq.n	8008d76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	4798      	blx	r3
 8008d72:	e000      	b.n	8008d76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008d74:	bf00      	nop
    }
  }
}
 8008d76:	3718      	adds	r7, #24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
 8008d88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	683a      	ldr	r2, [r7, #0]
 8008da0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	2b40      	cmp	r3, #64	; 0x40
 8008da8:	d108      	bne.n	8008dbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008dba:	e007      	b.n	8008dcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	60da      	str	r2, [r3, #12]
}
 8008dcc:	bf00      	nop
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	3b10      	subs	r3, #16
 8008de8:	4a13      	ldr	r2, [pc, #76]	; (8008e38 <DMA_CalcBaseAndBitshift+0x60>)
 8008dea:	fba2 2303 	umull	r2, r3, r2, r3
 8008dee:	091b      	lsrs	r3, r3, #4
 8008df0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008df2:	4a12      	ldr	r2, [pc, #72]	; (8008e3c <DMA_CalcBaseAndBitshift+0x64>)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4413      	add	r3, r2
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d908      	bls.n	8008e18 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	4b0c      	ldr	r3, [pc, #48]	; (8008e40 <DMA_CalcBaseAndBitshift+0x68>)
 8008e0e:	4013      	ands	r3, r2
 8008e10:	1d1a      	adds	r2, r3, #4
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	659a      	str	r2, [r3, #88]	; 0x58
 8008e16:	e006      	b.n	8008e26 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	4b08      	ldr	r3, [pc, #32]	; (8008e40 <DMA_CalcBaseAndBitshift+0x68>)
 8008e20:	4013      	ands	r3, r2
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3714      	adds	r7, #20
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	aaaaaaab 	.word	0xaaaaaaab
 8008e3c:	0808fc24 	.word	0x0808fc24
 8008e40:	fffffc00 	.word	0xfffffc00

08008e44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d11f      	bne.n	8008e9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	2b03      	cmp	r3, #3
 8008e62:	d856      	bhi.n	8008f12 <DMA_CheckFifoParam+0xce>
 8008e64:	a201      	add	r2, pc, #4	; (adr r2, 8008e6c <DMA_CheckFifoParam+0x28>)
 8008e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6a:	bf00      	nop
 8008e6c:	08008e7d 	.word	0x08008e7d
 8008e70:	08008e8f 	.word	0x08008e8f
 8008e74:	08008e7d 	.word	0x08008e7d
 8008e78:	08008f13 	.word	0x08008f13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d046      	beq.n	8008f16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e8c:	e043      	b.n	8008f16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008e96:	d140      	bne.n	8008f1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e9c:	e03d      	b.n	8008f1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ea6:	d121      	bne.n	8008eec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2b03      	cmp	r3, #3
 8008eac:	d837      	bhi.n	8008f1e <DMA_CheckFifoParam+0xda>
 8008eae:	a201      	add	r2, pc, #4	; (adr r2, 8008eb4 <DMA_CheckFifoParam+0x70>)
 8008eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb4:	08008ec5 	.word	0x08008ec5
 8008eb8:	08008ecb 	.word	0x08008ecb
 8008ebc:	08008ec5 	.word	0x08008ec5
 8008ec0:	08008edd 	.word	0x08008edd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ec8:	e030      	b.n	8008f2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ece:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d025      	beq.n	8008f22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008eda:	e022      	b.n	8008f22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008ee4:	d11f      	bne.n	8008f26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008eea:	e01c      	b.n	8008f26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d903      	bls.n	8008efa <DMA_CheckFifoParam+0xb6>
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d003      	beq.n	8008f00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008ef8:	e018      	b.n	8008f2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	73fb      	strb	r3, [r7, #15]
      break;
 8008efe:	e015      	b.n	8008f2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00e      	beq.n	8008f2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f10:	e00b      	b.n	8008f2a <DMA_CheckFifoParam+0xe6>
      break;
 8008f12:	bf00      	nop
 8008f14:	e00a      	b.n	8008f2c <DMA_CheckFifoParam+0xe8>
      break;
 8008f16:	bf00      	nop
 8008f18:	e008      	b.n	8008f2c <DMA_CheckFifoParam+0xe8>
      break;
 8008f1a:	bf00      	nop
 8008f1c:	e006      	b.n	8008f2c <DMA_CheckFifoParam+0xe8>
      break;
 8008f1e:	bf00      	nop
 8008f20:	e004      	b.n	8008f2c <DMA_CheckFifoParam+0xe8>
      break;
 8008f22:	bf00      	nop
 8008f24:	e002      	b.n	8008f2c <DMA_CheckFifoParam+0xe8>
      break;   
 8008f26:	bf00      	nop
 8008f28:	e000      	b.n	8008f2c <DMA_CheckFifoParam+0xe8>
      break;
 8008f2a:	bf00      	nop
    }
  } 
  
  return status; 
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop

08008f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b089      	sub	sp, #36	; 0x24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008f46:	2300      	movs	r3, #0
 8008f48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008f52:	2300      	movs	r3, #0
 8008f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008f56:	2300      	movs	r3, #0
 8008f58:	61fb      	str	r3, [r7, #28]
 8008f5a:	e175      	b.n	8009248 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	fa02 f303 	lsl.w	r3, r2, r3
 8008f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	f040 8164 	bne.w	8009242 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	f003 0303 	and.w	r3, r3, #3
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d005      	beq.n	8008f92 <HAL_GPIO_Init+0x56>
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	f003 0303 	and.w	r3, r3, #3
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d130      	bne.n	8008ff4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	005b      	lsls	r3, r3, #1
 8008f9c:	2203      	movs	r2, #3
 8008f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa2:	43db      	mvns	r3, r3
 8008fa4:	69ba      	ldr	r2, [r7, #24]
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	68da      	ldr	r2, [r3, #12]
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	005b      	lsls	r3, r3, #1
 8008fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb6:	69ba      	ldr	r2, [r7, #24]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	69ba      	ldr	r2, [r7, #24]
 8008fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008fc8:	2201      	movs	r2, #1
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd0:	43db      	mvns	r3, r3
 8008fd2:	69ba      	ldr	r2, [r7, #24]
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	091b      	lsrs	r3, r3, #4
 8008fde:	f003 0201 	and.w	r2, r3, #1
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	69ba      	ldr	r2, [r7, #24]
 8008ff2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f003 0303 	and.w	r3, r3, #3
 8008ffc:	2b03      	cmp	r3, #3
 8008ffe:	d017      	beq.n	8009030 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	2203      	movs	r2, #3
 800900c:	fa02 f303 	lsl.w	r3, r2, r3
 8009010:	43db      	mvns	r3, r3
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	4013      	ands	r3, r2
 8009016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	689a      	ldr	r2, [r3, #8]
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	005b      	lsls	r3, r3, #1
 8009020:	fa02 f303 	lsl.w	r3, r2, r3
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	4313      	orrs	r3, r2
 8009028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	69ba      	ldr	r2, [r7, #24]
 800902e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f003 0303 	and.w	r3, r3, #3
 8009038:	2b02      	cmp	r3, #2
 800903a:	d123      	bne.n	8009084 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	08da      	lsrs	r2, r3, #3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3208      	adds	r2, #8
 8009044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	f003 0307 	and.w	r3, r3, #7
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	220f      	movs	r2, #15
 8009054:	fa02 f303 	lsl.w	r3, r2, r3
 8009058:	43db      	mvns	r3, r3
 800905a:	69ba      	ldr	r2, [r7, #24]
 800905c:	4013      	ands	r3, r2
 800905e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	691a      	ldr	r2, [r3, #16]
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	fa02 f303 	lsl.w	r3, r2, r3
 8009070:	69ba      	ldr	r2, [r7, #24]
 8009072:	4313      	orrs	r3, r2
 8009074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	08da      	lsrs	r2, r3, #3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	3208      	adds	r2, #8
 800907e:	69b9      	ldr	r1, [r7, #24]
 8009080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	005b      	lsls	r3, r3, #1
 800908e:	2203      	movs	r2, #3
 8009090:	fa02 f303 	lsl.w	r3, r2, r3
 8009094:	43db      	mvns	r3, r3
 8009096:	69ba      	ldr	r2, [r7, #24]
 8009098:	4013      	ands	r3, r2
 800909a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	f003 0203 	and.w	r2, r3, #3
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	005b      	lsls	r3, r3, #1
 80090a8:	fa02 f303 	lsl.w	r3, r2, r3
 80090ac:	69ba      	ldr	r2, [r7, #24]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 80be 	beq.w	8009242 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090c6:	4b66      	ldr	r3, [pc, #408]	; (8009260 <HAL_GPIO_Init+0x324>)
 80090c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ca:	4a65      	ldr	r2, [pc, #404]	; (8009260 <HAL_GPIO_Init+0x324>)
 80090cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090d0:	6453      	str	r3, [r2, #68]	; 0x44
 80090d2:	4b63      	ldr	r3, [pc, #396]	; (8009260 <HAL_GPIO_Init+0x324>)
 80090d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80090de:	4a61      	ldr	r2, [pc, #388]	; (8009264 <HAL_GPIO_Init+0x328>)
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	089b      	lsrs	r3, r3, #2
 80090e4:	3302      	adds	r3, #2
 80090e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	f003 0303 	and.w	r3, r3, #3
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	220f      	movs	r2, #15
 80090f6:	fa02 f303 	lsl.w	r3, r2, r3
 80090fa:	43db      	mvns	r3, r3
 80090fc:	69ba      	ldr	r2, [r7, #24]
 80090fe:	4013      	ands	r3, r2
 8009100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a58      	ldr	r2, [pc, #352]	; (8009268 <HAL_GPIO_Init+0x32c>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d037      	beq.n	800917a <HAL_GPIO_Init+0x23e>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a57      	ldr	r2, [pc, #348]	; (800926c <HAL_GPIO_Init+0x330>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d031      	beq.n	8009176 <HAL_GPIO_Init+0x23a>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a56      	ldr	r2, [pc, #344]	; (8009270 <HAL_GPIO_Init+0x334>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d02b      	beq.n	8009172 <HAL_GPIO_Init+0x236>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a55      	ldr	r2, [pc, #340]	; (8009274 <HAL_GPIO_Init+0x338>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d025      	beq.n	800916e <HAL_GPIO_Init+0x232>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a54      	ldr	r2, [pc, #336]	; (8009278 <HAL_GPIO_Init+0x33c>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d01f      	beq.n	800916a <HAL_GPIO_Init+0x22e>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a53      	ldr	r2, [pc, #332]	; (800927c <HAL_GPIO_Init+0x340>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d019      	beq.n	8009166 <HAL_GPIO_Init+0x22a>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a52      	ldr	r2, [pc, #328]	; (8009280 <HAL_GPIO_Init+0x344>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d013      	beq.n	8009162 <HAL_GPIO_Init+0x226>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a51      	ldr	r2, [pc, #324]	; (8009284 <HAL_GPIO_Init+0x348>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d00d      	beq.n	800915e <HAL_GPIO_Init+0x222>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a50      	ldr	r2, [pc, #320]	; (8009288 <HAL_GPIO_Init+0x34c>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d007      	beq.n	800915a <HAL_GPIO_Init+0x21e>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a4f      	ldr	r2, [pc, #316]	; (800928c <HAL_GPIO_Init+0x350>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d101      	bne.n	8009156 <HAL_GPIO_Init+0x21a>
 8009152:	2309      	movs	r3, #9
 8009154:	e012      	b.n	800917c <HAL_GPIO_Init+0x240>
 8009156:	230a      	movs	r3, #10
 8009158:	e010      	b.n	800917c <HAL_GPIO_Init+0x240>
 800915a:	2308      	movs	r3, #8
 800915c:	e00e      	b.n	800917c <HAL_GPIO_Init+0x240>
 800915e:	2307      	movs	r3, #7
 8009160:	e00c      	b.n	800917c <HAL_GPIO_Init+0x240>
 8009162:	2306      	movs	r3, #6
 8009164:	e00a      	b.n	800917c <HAL_GPIO_Init+0x240>
 8009166:	2305      	movs	r3, #5
 8009168:	e008      	b.n	800917c <HAL_GPIO_Init+0x240>
 800916a:	2304      	movs	r3, #4
 800916c:	e006      	b.n	800917c <HAL_GPIO_Init+0x240>
 800916e:	2303      	movs	r3, #3
 8009170:	e004      	b.n	800917c <HAL_GPIO_Init+0x240>
 8009172:	2302      	movs	r3, #2
 8009174:	e002      	b.n	800917c <HAL_GPIO_Init+0x240>
 8009176:	2301      	movs	r3, #1
 8009178:	e000      	b.n	800917c <HAL_GPIO_Init+0x240>
 800917a:	2300      	movs	r3, #0
 800917c:	69fa      	ldr	r2, [r7, #28]
 800917e:	f002 0203 	and.w	r2, r2, #3
 8009182:	0092      	lsls	r2, r2, #2
 8009184:	4093      	lsls	r3, r2
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	4313      	orrs	r3, r2
 800918a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800918c:	4935      	ldr	r1, [pc, #212]	; (8009264 <HAL_GPIO_Init+0x328>)
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	089b      	lsrs	r3, r3, #2
 8009192:	3302      	adds	r3, #2
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800919a:	4b3d      	ldr	r3, [pc, #244]	; (8009290 <HAL_GPIO_Init+0x354>)
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	43db      	mvns	r3, r3
 80091a4:	69ba      	ldr	r2, [r7, #24]
 80091a6:	4013      	ands	r3, r2
 80091a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d003      	beq.n	80091be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80091be:	4a34      	ldr	r2, [pc, #208]	; (8009290 <HAL_GPIO_Init+0x354>)
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80091c4:	4b32      	ldr	r3, [pc, #200]	; (8009290 <HAL_GPIO_Init+0x354>)
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	43db      	mvns	r3, r3
 80091ce:	69ba      	ldr	r2, [r7, #24]
 80091d0:	4013      	ands	r3, r2
 80091d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d003      	beq.n	80091e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80091e8:	4a29      	ldr	r2, [pc, #164]	; (8009290 <HAL_GPIO_Init+0x354>)
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80091ee:	4b28      	ldr	r3, [pc, #160]	; (8009290 <HAL_GPIO_Init+0x354>)
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	43db      	mvns	r3, r3
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	4013      	ands	r3, r2
 80091fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d003      	beq.n	8009212 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800920a:	69ba      	ldr	r2, [r7, #24]
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009212:	4a1f      	ldr	r2, [pc, #124]	; (8009290 <HAL_GPIO_Init+0x354>)
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009218:	4b1d      	ldr	r3, [pc, #116]	; (8009290 <HAL_GPIO_Init+0x354>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	43db      	mvns	r3, r3
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	4013      	ands	r3, r2
 8009226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d003      	beq.n	800923c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009234:	69ba      	ldr	r2, [r7, #24]
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	4313      	orrs	r3, r2
 800923a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800923c:	4a14      	ldr	r2, [pc, #80]	; (8009290 <HAL_GPIO_Init+0x354>)
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	3301      	adds	r3, #1
 8009246:	61fb      	str	r3, [r7, #28]
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	2b0f      	cmp	r3, #15
 800924c:	f67f ae86 	bls.w	8008f5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009250:	bf00      	nop
 8009252:	bf00      	nop
 8009254:	3724      	adds	r7, #36	; 0x24
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	40023800 	.word	0x40023800
 8009264:	40013800 	.word	0x40013800
 8009268:	40020000 	.word	0x40020000
 800926c:	40020400 	.word	0x40020400
 8009270:	40020800 	.word	0x40020800
 8009274:	40020c00 	.word	0x40020c00
 8009278:	40021000 	.word	0x40021000
 800927c:	40021400 	.word	0x40021400
 8009280:	40021800 	.word	0x40021800
 8009284:	40021c00 	.word	0x40021c00
 8009288:	40022000 	.word	0x40022000
 800928c:	40022400 	.word	0x40022400
 8009290:	40013c00 	.word	0x40013c00

08009294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	691a      	ldr	r2, [r3, #16]
 80092a4:	887b      	ldrh	r3, [r7, #2]
 80092a6:	4013      	ands	r3, r2
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80092ac:	2301      	movs	r3, #1
 80092ae:	73fb      	strb	r3, [r7, #15]
 80092b0:	e001      	b.n	80092b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80092b2:	2300      	movs	r3, #0
 80092b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	460b      	mov	r3, r1
 80092ce:	807b      	strh	r3, [r7, #2]
 80092d0:	4613      	mov	r3, r2
 80092d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80092d4:	787b      	ldrb	r3, [r7, #1]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d003      	beq.n	80092e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80092da:	887a      	ldrh	r2, [r7, #2]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80092e0:	e003      	b.n	80092ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80092e2:	887b      	ldrh	r3, [r7, #2]
 80092e4:	041a      	lsls	r2, r3, #16
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	619a      	str	r2, [r3, #24]
}
 80092ea:	bf00      	nop
 80092ec:	370c      	adds	r7, #12
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
	...

080092f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	4603      	mov	r3, r0
 8009300:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009302:	4b08      	ldr	r3, [pc, #32]	; (8009324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009304:	695a      	ldr	r2, [r3, #20]
 8009306:	88fb      	ldrh	r3, [r7, #6]
 8009308:	4013      	ands	r3, r2
 800930a:	2b00      	cmp	r3, #0
 800930c:	d006      	beq.n	800931c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800930e:	4a05      	ldr	r2, [pc, #20]	; (8009324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009310:	88fb      	ldrh	r3, [r7, #6]
 8009312:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009314:	88fb      	ldrh	r3, [r7, #6]
 8009316:	4618      	mov	r0, r3
 8009318:	f7fc fe20 	bl	8005f5c <HAL_GPIO_EXTI_Callback>
  }
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	40013c00 	.word	0x40013c00

08009328 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009328:	b480      	push	{r7}
 800932a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800932c:	4b05      	ldr	r3, [pc, #20]	; (8009344 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a04      	ldr	r2, [pc, #16]	; (8009344 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009336:	6013      	str	r3, [r2, #0]
}
 8009338:	bf00      	nop
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	40007000 	.word	0x40007000

08009348 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009352:	4b23      	ldr	r3, [pc, #140]	; (80093e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009356:	4a22      	ldr	r2, [pc, #136]	; (80093e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800935c:	6413      	str	r3, [r2, #64]	; 0x40
 800935e:	4b20      	ldr	r3, [pc, #128]	; (80093e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009366:	603b      	str	r3, [r7, #0]
 8009368:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800936a:	4b1e      	ldr	r3, [pc, #120]	; (80093e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a1d      	ldr	r2, [pc, #116]	; (80093e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009374:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009376:	f7fe fd03 	bl	8007d80 <HAL_GetTick>
 800937a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800937c:	e009      	b.n	8009392 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800937e:	f7fe fcff 	bl	8007d80 <HAL_GetTick>
 8009382:	4602      	mov	r2, r0
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800938c:	d901      	bls.n	8009392 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e022      	b.n	80093d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009392:	4b14      	ldr	r3, [pc, #80]	; (80093e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800939a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800939e:	d1ee      	bne.n	800937e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80093a0:	4b10      	ldr	r3, [pc, #64]	; (80093e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a0f      	ldr	r2, [pc, #60]	; (80093e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80093a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80093ac:	f7fe fce8 	bl	8007d80 <HAL_GetTick>
 80093b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80093b2:	e009      	b.n	80093c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80093b4:	f7fe fce4 	bl	8007d80 <HAL_GetTick>
 80093b8:	4602      	mov	r2, r0
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093c2:	d901      	bls.n	80093c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e007      	b.n	80093d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80093c8:	4b06      	ldr	r3, [pc, #24]	; (80093e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093d4:	d1ee      	bne.n	80093b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	40023800 	.word	0x40023800
 80093e4:	40007000 	.word	0x40007000

080093e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80093f0:	2300      	movs	r3, #0
 80093f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e29b      	b.n	8009936 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 0301 	and.w	r3, r3, #1
 8009406:	2b00      	cmp	r3, #0
 8009408:	f000 8087 	beq.w	800951a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800940c:	4b96      	ldr	r3, [pc, #600]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	f003 030c 	and.w	r3, r3, #12
 8009414:	2b04      	cmp	r3, #4
 8009416:	d00c      	beq.n	8009432 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009418:	4b93      	ldr	r3, [pc, #588]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	f003 030c 	and.w	r3, r3, #12
 8009420:	2b08      	cmp	r3, #8
 8009422:	d112      	bne.n	800944a <HAL_RCC_OscConfig+0x62>
 8009424:	4b90      	ldr	r3, [pc, #576]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800942c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009430:	d10b      	bne.n	800944a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009432:	4b8d      	ldr	r3, [pc, #564]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d06c      	beq.n	8009518 <HAL_RCC_OscConfig+0x130>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d168      	bne.n	8009518 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e275      	b.n	8009936 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009452:	d106      	bne.n	8009462 <HAL_RCC_OscConfig+0x7a>
 8009454:	4b84      	ldr	r3, [pc, #528]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a83      	ldr	r2, [pc, #524]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 800945a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	e02e      	b.n	80094c0 <HAL_RCC_OscConfig+0xd8>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10c      	bne.n	8009484 <HAL_RCC_OscConfig+0x9c>
 800946a:	4b7f      	ldr	r3, [pc, #508]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a7e      	ldr	r2, [pc, #504]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009474:	6013      	str	r3, [r2, #0]
 8009476:	4b7c      	ldr	r3, [pc, #496]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a7b      	ldr	r2, [pc, #492]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 800947c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009480:	6013      	str	r3, [r2, #0]
 8009482:	e01d      	b.n	80094c0 <HAL_RCC_OscConfig+0xd8>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800948c:	d10c      	bne.n	80094a8 <HAL_RCC_OscConfig+0xc0>
 800948e:	4b76      	ldr	r3, [pc, #472]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a75      	ldr	r2, [pc, #468]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009498:	6013      	str	r3, [r2, #0]
 800949a:	4b73      	ldr	r3, [pc, #460]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a72      	ldr	r2, [pc, #456]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 80094a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094a4:	6013      	str	r3, [r2, #0]
 80094a6:	e00b      	b.n	80094c0 <HAL_RCC_OscConfig+0xd8>
 80094a8:	4b6f      	ldr	r3, [pc, #444]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a6e      	ldr	r2, [pc, #440]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 80094ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094b2:	6013      	str	r3, [r2, #0]
 80094b4:	4b6c      	ldr	r3, [pc, #432]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a6b      	ldr	r2, [pc, #428]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 80094ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d013      	beq.n	80094f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094c8:	f7fe fc5a 	bl	8007d80 <HAL_GetTick>
 80094cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094ce:	e008      	b.n	80094e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094d0:	f7fe fc56 	bl	8007d80 <HAL_GetTick>
 80094d4:	4602      	mov	r2, r0
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	2b64      	cmp	r3, #100	; 0x64
 80094dc:	d901      	bls.n	80094e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e229      	b.n	8009936 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094e2:	4b61      	ldr	r3, [pc, #388]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d0f0      	beq.n	80094d0 <HAL_RCC_OscConfig+0xe8>
 80094ee:	e014      	b.n	800951a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094f0:	f7fe fc46 	bl	8007d80 <HAL_GetTick>
 80094f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094f6:	e008      	b.n	800950a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094f8:	f7fe fc42 	bl	8007d80 <HAL_GetTick>
 80094fc:	4602      	mov	r2, r0
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	2b64      	cmp	r3, #100	; 0x64
 8009504:	d901      	bls.n	800950a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e215      	b.n	8009936 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800950a:	4b57      	ldr	r3, [pc, #348]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1f0      	bne.n	80094f8 <HAL_RCC_OscConfig+0x110>
 8009516:	e000      	b.n	800951a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0302 	and.w	r3, r3, #2
 8009522:	2b00      	cmp	r3, #0
 8009524:	d069      	beq.n	80095fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009526:	4b50      	ldr	r3, [pc, #320]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f003 030c 	and.w	r3, r3, #12
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00b      	beq.n	800954a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009532:	4b4d      	ldr	r3, [pc, #308]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f003 030c 	and.w	r3, r3, #12
 800953a:	2b08      	cmp	r3, #8
 800953c:	d11c      	bne.n	8009578 <HAL_RCC_OscConfig+0x190>
 800953e:	4b4a      	ldr	r3, [pc, #296]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d116      	bne.n	8009578 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800954a:	4b47      	ldr	r3, [pc, #284]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0302 	and.w	r3, r3, #2
 8009552:	2b00      	cmp	r3, #0
 8009554:	d005      	beq.n	8009562 <HAL_RCC_OscConfig+0x17a>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d001      	beq.n	8009562 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e1e9      	b.n	8009936 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009562:	4b41      	ldr	r3, [pc, #260]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	00db      	lsls	r3, r3, #3
 8009570:	493d      	ldr	r1, [pc, #244]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009572:	4313      	orrs	r3, r2
 8009574:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009576:	e040      	b.n	80095fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d023      	beq.n	80095c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009580:	4b39      	ldr	r3, [pc, #228]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a38      	ldr	r2, [pc, #224]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009586:	f043 0301 	orr.w	r3, r3, #1
 800958a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800958c:	f7fe fbf8 	bl	8007d80 <HAL_GetTick>
 8009590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009592:	e008      	b.n	80095a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009594:	f7fe fbf4 	bl	8007d80 <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d901      	bls.n	80095a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e1c7      	b.n	8009936 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095a6:	4b30      	ldr	r3, [pc, #192]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0302 	and.w	r3, r3, #2
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0f0      	beq.n	8009594 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095b2:	4b2d      	ldr	r3, [pc, #180]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	4929      	ldr	r1, [pc, #164]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	600b      	str	r3, [r1, #0]
 80095c6:	e018      	b.n	80095fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80095c8:	4b27      	ldr	r3, [pc, #156]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a26      	ldr	r2, [pc, #152]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 80095ce:	f023 0301 	bic.w	r3, r3, #1
 80095d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095d4:	f7fe fbd4 	bl	8007d80 <HAL_GetTick>
 80095d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095da:	e008      	b.n	80095ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095dc:	f7fe fbd0 	bl	8007d80 <HAL_GetTick>
 80095e0:	4602      	mov	r2, r0
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d901      	bls.n	80095ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80095ea:	2303      	movs	r3, #3
 80095ec:	e1a3      	b.n	8009936 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095ee:	4b1e      	ldr	r3, [pc, #120]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 0302 	and.w	r3, r3, #2
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1f0      	bne.n	80095dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0308 	and.w	r3, r3, #8
 8009602:	2b00      	cmp	r3, #0
 8009604:	d038      	beq.n	8009678 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d019      	beq.n	8009642 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800960e:	4b16      	ldr	r3, [pc, #88]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009612:	4a15      	ldr	r2, [pc, #84]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009614:	f043 0301 	orr.w	r3, r3, #1
 8009618:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800961a:	f7fe fbb1 	bl	8007d80 <HAL_GetTick>
 800961e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009620:	e008      	b.n	8009634 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009622:	f7fe fbad 	bl	8007d80 <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	2b02      	cmp	r3, #2
 800962e:	d901      	bls.n	8009634 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e180      	b.n	8009936 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009634:	4b0c      	ldr	r3, [pc, #48]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009638:	f003 0302 	and.w	r3, r3, #2
 800963c:	2b00      	cmp	r3, #0
 800963e:	d0f0      	beq.n	8009622 <HAL_RCC_OscConfig+0x23a>
 8009640:	e01a      	b.n	8009678 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009642:	4b09      	ldr	r3, [pc, #36]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009646:	4a08      	ldr	r2, [pc, #32]	; (8009668 <HAL_RCC_OscConfig+0x280>)
 8009648:	f023 0301 	bic.w	r3, r3, #1
 800964c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800964e:	f7fe fb97 	bl	8007d80 <HAL_GetTick>
 8009652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009654:	e00a      	b.n	800966c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009656:	f7fe fb93 	bl	8007d80 <HAL_GetTick>
 800965a:	4602      	mov	r2, r0
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	2b02      	cmp	r3, #2
 8009662:	d903      	bls.n	800966c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	e166      	b.n	8009936 <HAL_RCC_OscConfig+0x54e>
 8009668:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800966c:	4b92      	ldr	r3, [pc, #584]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 800966e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009670:	f003 0302 	and.w	r3, r3, #2
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1ee      	bne.n	8009656 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0304 	and.w	r3, r3, #4
 8009680:	2b00      	cmp	r3, #0
 8009682:	f000 80a4 	beq.w	80097ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009686:	4b8c      	ldr	r3, [pc, #560]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 8009688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10d      	bne.n	80096ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009692:	4b89      	ldr	r3, [pc, #548]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 8009694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009696:	4a88      	ldr	r2, [pc, #544]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 8009698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800969c:	6413      	str	r3, [r2, #64]	; 0x40
 800969e:	4b86      	ldr	r3, [pc, #536]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 80096a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096a6:	60bb      	str	r3, [r7, #8]
 80096a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096aa:	2301      	movs	r3, #1
 80096ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80096ae:	4b83      	ldr	r3, [pc, #524]	; (80098bc <HAL_RCC_OscConfig+0x4d4>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d118      	bne.n	80096ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80096ba:	4b80      	ldr	r3, [pc, #512]	; (80098bc <HAL_RCC_OscConfig+0x4d4>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a7f      	ldr	r2, [pc, #508]	; (80098bc <HAL_RCC_OscConfig+0x4d4>)
 80096c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80096c6:	f7fe fb5b 	bl	8007d80 <HAL_GetTick>
 80096ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80096cc:	e008      	b.n	80096e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096ce:	f7fe fb57 	bl	8007d80 <HAL_GetTick>
 80096d2:	4602      	mov	r2, r0
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	1ad3      	subs	r3, r2, r3
 80096d8:	2b64      	cmp	r3, #100	; 0x64
 80096da:	d901      	bls.n	80096e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e12a      	b.n	8009936 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80096e0:	4b76      	ldr	r3, [pc, #472]	; (80098bc <HAL_RCC_OscConfig+0x4d4>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d0f0      	beq.n	80096ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d106      	bne.n	8009702 <HAL_RCC_OscConfig+0x31a>
 80096f4:	4b70      	ldr	r3, [pc, #448]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 80096f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f8:	4a6f      	ldr	r2, [pc, #444]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 80096fa:	f043 0301 	orr.w	r3, r3, #1
 80096fe:	6713      	str	r3, [r2, #112]	; 0x70
 8009700:	e02d      	b.n	800975e <HAL_RCC_OscConfig+0x376>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10c      	bne.n	8009724 <HAL_RCC_OscConfig+0x33c>
 800970a:	4b6b      	ldr	r3, [pc, #428]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 800970c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800970e:	4a6a      	ldr	r2, [pc, #424]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 8009710:	f023 0301 	bic.w	r3, r3, #1
 8009714:	6713      	str	r3, [r2, #112]	; 0x70
 8009716:	4b68      	ldr	r3, [pc, #416]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 8009718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971a:	4a67      	ldr	r2, [pc, #412]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 800971c:	f023 0304 	bic.w	r3, r3, #4
 8009720:	6713      	str	r3, [r2, #112]	; 0x70
 8009722:	e01c      	b.n	800975e <HAL_RCC_OscConfig+0x376>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	2b05      	cmp	r3, #5
 800972a:	d10c      	bne.n	8009746 <HAL_RCC_OscConfig+0x35e>
 800972c:	4b62      	ldr	r3, [pc, #392]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 800972e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009730:	4a61      	ldr	r2, [pc, #388]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 8009732:	f043 0304 	orr.w	r3, r3, #4
 8009736:	6713      	str	r3, [r2, #112]	; 0x70
 8009738:	4b5f      	ldr	r3, [pc, #380]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 800973a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973c:	4a5e      	ldr	r2, [pc, #376]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 800973e:	f043 0301 	orr.w	r3, r3, #1
 8009742:	6713      	str	r3, [r2, #112]	; 0x70
 8009744:	e00b      	b.n	800975e <HAL_RCC_OscConfig+0x376>
 8009746:	4b5c      	ldr	r3, [pc, #368]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 8009748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800974a:	4a5b      	ldr	r2, [pc, #364]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 800974c:	f023 0301 	bic.w	r3, r3, #1
 8009750:	6713      	str	r3, [r2, #112]	; 0x70
 8009752:	4b59      	ldr	r3, [pc, #356]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 8009754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009756:	4a58      	ldr	r2, [pc, #352]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 8009758:	f023 0304 	bic.w	r3, r3, #4
 800975c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d015      	beq.n	8009792 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009766:	f7fe fb0b 	bl	8007d80 <HAL_GetTick>
 800976a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800976c:	e00a      	b.n	8009784 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800976e:	f7fe fb07 	bl	8007d80 <HAL_GetTick>
 8009772:	4602      	mov	r2, r0
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	f241 3288 	movw	r2, #5000	; 0x1388
 800977c:	4293      	cmp	r3, r2
 800977e:	d901      	bls.n	8009784 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009780:	2303      	movs	r3, #3
 8009782:	e0d8      	b.n	8009936 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009784:	4b4c      	ldr	r3, [pc, #304]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 8009786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009788:	f003 0302 	and.w	r3, r3, #2
 800978c:	2b00      	cmp	r3, #0
 800978e:	d0ee      	beq.n	800976e <HAL_RCC_OscConfig+0x386>
 8009790:	e014      	b.n	80097bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009792:	f7fe faf5 	bl	8007d80 <HAL_GetTick>
 8009796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009798:	e00a      	b.n	80097b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800979a:	f7fe faf1 	bl	8007d80 <HAL_GetTick>
 800979e:	4602      	mov	r2, r0
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d901      	bls.n	80097b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80097ac:	2303      	movs	r3, #3
 80097ae:	e0c2      	b.n	8009936 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097b0:	4b41      	ldr	r3, [pc, #260]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 80097b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097b4:	f003 0302 	and.w	r3, r3, #2
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1ee      	bne.n	800979a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d105      	bne.n	80097ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097c2:	4b3d      	ldr	r3, [pc, #244]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 80097c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c6:	4a3c      	ldr	r2, [pc, #240]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 80097c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	699b      	ldr	r3, [r3, #24]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f000 80ae 	beq.w	8009934 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80097d8:	4b37      	ldr	r3, [pc, #220]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f003 030c 	and.w	r3, r3, #12
 80097e0:	2b08      	cmp	r3, #8
 80097e2:	d06d      	beq.n	80098c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	699b      	ldr	r3, [r3, #24]
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d14b      	bne.n	8009884 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097ec:	4b32      	ldr	r3, [pc, #200]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a31      	ldr	r2, [pc, #196]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 80097f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097f8:	f7fe fac2 	bl	8007d80 <HAL_GetTick>
 80097fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097fe:	e008      	b.n	8009812 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009800:	f7fe fabe 	bl	8007d80 <HAL_GetTick>
 8009804:	4602      	mov	r2, r0
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	2b02      	cmp	r3, #2
 800980c:	d901      	bls.n	8009812 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	e091      	b.n	8009936 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009812:	4b29      	ldr	r3, [pc, #164]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1f0      	bne.n	8009800 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	69da      	ldr	r2, [r3, #28]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	431a      	orrs	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982c:	019b      	lsls	r3, r3, #6
 800982e:	431a      	orrs	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009834:	085b      	lsrs	r3, r3, #1
 8009836:	3b01      	subs	r3, #1
 8009838:	041b      	lsls	r3, r3, #16
 800983a:	431a      	orrs	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009840:	061b      	lsls	r3, r3, #24
 8009842:	431a      	orrs	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009848:	071b      	lsls	r3, r3, #28
 800984a:	491b      	ldr	r1, [pc, #108]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 800984c:	4313      	orrs	r3, r2
 800984e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009850:	4b19      	ldr	r3, [pc, #100]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a18      	ldr	r2, [pc, #96]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 8009856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800985a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800985c:	f7fe fa90 	bl	8007d80 <HAL_GetTick>
 8009860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009862:	e008      	b.n	8009876 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009864:	f7fe fa8c 	bl	8007d80 <HAL_GetTick>
 8009868:	4602      	mov	r2, r0
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	2b02      	cmp	r3, #2
 8009870:	d901      	bls.n	8009876 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8009872:	2303      	movs	r3, #3
 8009874:	e05f      	b.n	8009936 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009876:	4b10      	ldr	r3, [pc, #64]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800987e:	2b00      	cmp	r3, #0
 8009880:	d0f0      	beq.n	8009864 <HAL_RCC_OscConfig+0x47c>
 8009882:	e057      	b.n	8009934 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009884:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a0b      	ldr	r2, [pc, #44]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 800988a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800988e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009890:	f7fe fa76 	bl	8007d80 <HAL_GetTick>
 8009894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009896:	e008      	b.n	80098aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009898:	f7fe fa72 	bl	8007d80 <HAL_GetTick>
 800989c:	4602      	mov	r2, r0
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d901      	bls.n	80098aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80098a6:	2303      	movs	r3, #3
 80098a8:	e045      	b.n	8009936 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098aa:	4b03      	ldr	r3, [pc, #12]	; (80098b8 <HAL_RCC_OscConfig+0x4d0>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1f0      	bne.n	8009898 <HAL_RCC_OscConfig+0x4b0>
 80098b6:	e03d      	b.n	8009934 <HAL_RCC_OscConfig+0x54c>
 80098b8:	40023800 	.word	0x40023800
 80098bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80098c0:	4b1f      	ldr	r3, [pc, #124]	; (8009940 <HAL_RCC_OscConfig+0x558>)
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d030      	beq.n	8009930 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098d8:	429a      	cmp	r2, r3
 80098da:	d129      	bne.n	8009930 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d122      	bne.n	8009930 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80098f0:	4013      	ands	r3, r2
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80098f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d119      	bne.n	8009930 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009906:	085b      	lsrs	r3, r3, #1
 8009908:	3b01      	subs	r3, #1
 800990a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800990c:	429a      	cmp	r2, r3
 800990e:	d10f      	bne.n	8009930 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800991c:	429a      	cmp	r2, r3
 800991e:	d107      	bne.n	8009930 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800992c:	429a      	cmp	r2, r3
 800992e:	d001      	beq.n	8009934 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e000      	b.n	8009936 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	40023800 	.word	0x40023800

08009944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d101      	bne.n	800995c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	e0d0      	b.n	8009afe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800995c:	4b6a      	ldr	r3, [pc, #424]	; (8009b08 <HAL_RCC_ClockConfig+0x1c4>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 030f 	and.w	r3, r3, #15
 8009964:	683a      	ldr	r2, [r7, #0]
 8009966:	429a      	cmp	r2, r3
 8009968:	d910      	bls.n	800998c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800996a:	4b67      	ldr	r3, [pc, #412]	; (8009b08 <HAL_RCC_ClockConfig+0x1c4>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f023 020f 	bic.w	r2, r3, #15
 8009972:	4965      	ldr	r1, [pc, #404]	; (8009b08 <HAL_RCC_ClockConfig+0x1c4>)
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	4313      	orrs	r3, r2
 8009978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800997a:	4b63      	ldr	r3, [pc, #396]	; (8009b08 <HAL_RCC_ClockConfig+0x1c4>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f003 030f 	and.w	r3, r3, #15
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	429a      	cmp	r2, r3
 8009986:	d001      	beq.n	800998c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e0b8      	b.n	8009afe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 0302 	and.w	r3, r3, #2
 8009994:	2b00      	cmp	r3, #0
 8009996:	d020      	beq.n	80099da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 0304 	and.w	r3, r3, #4
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d005      	beq.n	80099b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80099a4:	4b59      	ldr	r3, [pc, #356]	; (8009b0c <HAL_RCC_ClockConfig+0x1c8>)
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	4a58      	ldr	r2, [pc, #352]	; (8009b0c <HAL_RCC_ClockConfig+0x1c8>)
 80099aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80099ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0308 	and.w	r3, r3, #8
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d005      	beq.n	80099c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80099bc:	4b53      	ldr	r3, [pc, #332]	; (8009b0c <HAL_RCC_ClockConfig+0x1c8>)
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	4a52      	ldr	r2, [pc, #328]	; (8009b0c <HAL_RCC_ClockConfig+0x1c8>)
 80099c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80099c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099c8:	4b50      	ldr	r3, [pc, #320]	; (8009b0c <HAL_RCC_ClockConfig+0x1c8>)
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	494d      	ldr	r1, [pc, #308]	; (8009b0c <HAL_RCC_ClockConfig+0x1c8>)
 80099d6:	4313      	orrs	r3, r2
 80099d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d040      	beq.n	8009a68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d107      	bne.n	80099fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099ee:	4b47      	ldr	r3, [pc, #284]	; (8009b0c <HAL_RCC_ClockConfig+0x1c8>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d115      	bne.n	8009a26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e07f      	b.n	8009afe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d107      	bne.n	8009a16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a06:	4b41      	ldr	r3, [pc, #260]	; (8009b0c <HAL_RCC_ClockConfig+0x1c8>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d109      	bne.n	8009a26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e073      	b.n	8009afe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a16:	4b3d      	ldr	r3, [pc, #244]	; (8009b0c <HAL_RCC_ClockConfig+0x1c8>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f003 0302 	and.w	r3, r3, #2
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d101      	bne.n	8009a26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e06b      	b.n	8009afe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a26:	4b39      	ldr	r3, [pc, #228]	; (8009b0c <HAL_RCC_ClockConfig+0x1c8>)
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	f023 0203 	bic.w	r2, r3, #3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	4936      	ldr	r1, [pc, #216]	; (8009b0c <HAL_RCC_ClockConfig+0x1c8>)
 8009a34:	4313      	orrs	r3, r2
 8009a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a38:	f7fe f9a2 	bl	8007d80 <HAL_GetTick>
 8009a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a3e:	e00a      	b.n	8009a56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a40:	f7fe f99e 	bl	8007d80 <HAL_GetTick>
 8009a44:	4602      	mov	r2, r0
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d901      	bls.n	8009a56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e053      	b.n	8009afe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a56:	4b2d      	ldr	r3, [pc, #180]	; (8009b0c <HAL_RCC_ClockConfig+0x1c8>)
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	f003 020c 	and.w	r2, r3, #12
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d1eb      	bne.n	8009a40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a68:	4b27      	ldr	r3, [pc, #156]	; (8009b08 <HAL_RCC_ClockConfig+0x1c4>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 030f 	and.w	r3, r3, #15
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d210      	bcs.n	8009a98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a76:	4b24      	ldr	r3, [pc, #144]	; (8009b08 <HAL_RCC_ClockConfig+0x1c4>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f023 020f 	bic.w	r2, r3, #15
 8009a7e:	4922      	ldr	r1, [pc, #136]	; (8009b08 <HAL_RCC_ClockConfig+0x1c4>)
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a86:	4b20      	ldr	r3, [pc, #128]	; (8009b08 <HAL_RCC_ClockConfig+0x1c4>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 030f 	and.w	r3, r3, #15
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d001      	beq.n	8009a98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	e032      	b.n	8009afe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 0304 	and.w	r3, r3, #4
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d008      	beq.n	8009ab6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009aa4:	4b19      	ldr	r3, [pc, #100]	; (8009b0c <HAL_RCC_ClockConfig+0x1c8>)
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	4916      	ldr	r1, [pc, #88]	; (8009b0c <HAL_RCC_ClockConfig+0x1c8>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 0308 	and.w	r3, r3, #8
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d009      	beq.n	8009ad6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009ac2:	4b12      	ldr	r3, [pc, #72]	; (8009b0c <HAL_RCC_ClockConfig+0x1c8>)
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	00db      	lsls	r3, r3, #3
 8009ad0:	490e      	ldr	r1, [pc, #56]	; (8009b0c <HAL_RCC_ClockConfig+0x1c8>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009ad6:	f000 f821 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 8009ada:	4602      	mov	r2, r0
 8009adc:	4b0b      	ldr	r3, [pc, #44]	; (8009b0c <HAL_RCC_ClockConfig+0x1c8>)
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	091b      	lsrs	r3, r3, #4
 8009ae2:	f003 030f 	and.w	r3, r3, #15
 8009ae6:	490a      	ldr	r1, [pc, #40]	; (8009b10 <HAL_RCC_ClockConfig+0x1cc>)
 8009ae8:	5ccb      	ldrb	r3, [r1, r3]
 8009aea:	fa22 f303 	lsr.w	r3, r2, r3
 8009aee:	4a09      	ldr	r2, [pc, #36]	; (8009b14 <HAL_RCC_ClockConfig+0x1d0>)
 8009af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009af2:	4b09      	ldr	r3, [pc, #36]	; (8009b18 <HAL_RCC_ClockConfig+0x1d4>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fe f8fe 	bl	8007cf8 <HAL_InitTick>

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	40023c00 	.word	0x40023c00
 8009b0c:	40023800 	.word	0x40023800
 8009b10:	0808f9cc 	.word	0x0808f9cc
 8009b14:	2000097c 	.word	0x2000097c
 8009b18:	20000984 	.word	0x20000984

08009b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b20:	b094      	sub	sp, #80	; 0x50
 8009b22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	647b      	str	r3, [r7, #68]	; 0x44
 8009b28:	2300      	movs	r3, #0
 8009b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8009b30:	2300      	movs	r3, #0
 8009b32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b34:	4b79      	ldr	r3, [pc, #484]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	f003 030c 	and.w	r3, r3, #12
 8009b3c:	2b08      	cmp	r3, #8
 8009b3e:	d00d      	beq.n	8009b5c <HAL_RCC_GetSysClockFreq+0x40>
 8009b40:	2b08      	cmp	r3, #8
 8009b42:	f200 80e1 	bhi.w	8009d08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d002      	beq.n	8009b50 <HAL_RCC_GetSysClockFreq+0x34>
 8009b4a:	2b04      	cmp	r3, #4
 8009b4c:	d003      	beq.n	8009b56 <HAL_RCC_GetSysClockFreq+0x3a>
 8009b4e:	e0db      	b.n	8009d08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009b50:	4b73      	ldr	r3, [pc, #460]	; (8009d20 <HAL_RCC_GetSysClockFreq+0x204>)
 8009b52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009b54:	e0db      	b.n	8009d0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009b56:	4b73      	ldr	r3, [pc, #460]	; (8009d24 <HAL_RCC_GetSysClockFreq+0x208>)
 8009b58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009b5a:	e0d8      	b.n	8009d0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009b5c:	4b6f      	ldr	r3, [pc, #444]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b64:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009b66:	4b6d      	ldr	r3, [pc, #436]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d063      	beq.n	8009c3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b72:	4b6a      	ldr	r3, [pc, #424]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	099b      	lsrs	r3, r3, #6
 8009b78:	2200      	movs	r2, #0
 8009b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b84:	633b      	str	r3, [r7, #48]	; 0x30
 8009b86:	2300      	movs	r3, #0
 8009b88:	637b      	str	r3, [r7, #52]	; 0x34
 8009b8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009b8e:	4622      	mov	r2, r4
 8009b90:	462b      	mov	r3, r5
 8009b92:	f04f 0000 	mov.w	r0, #0
 8009b96:	f04f 0100 	mov.w	r1, #0
 8009b9a:	0159      	lsls	r1, r3, #5
 8009b9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009ba0:	0150      	lsls	r0, r2, #5
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	1a51      	subs	r1, r2, r1
 8009baa:	6139      	str	r1, [r7, #16]
 8009bac:	4629      	mov	r1, r5
 8009bae:	eb63 0301 	sbc.w	r3, r3, r1
 8009bb2:	617b      	str	r3, [r7, #20]
 8009bb4:	f04f 0200 	mov.w	r2, #0
 8009bb8:	f04f 0300 	mov.w	r3, #0
 8009bbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009bc0:	4659      	mov	r1, fp
 8009bc2:	018b      	lsls	r3, r1, #6
 8009bc4:	4651      	mov	r1, sl
 8009bc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009bca:	4651      	mov	r1, sl
 8009bcc:	018a      	lsls	r2, r1, #6
 8009bce:	4651      	mov	r1, sl
 8009bd0:	ebb2 0801 	subs.w	r8, r2, r1
 8009bd4:	4659      	mov	r1, fp
 8009bd6:	eb63 0901 	sbc.w	r9, r3, r1
 8009bda:	f04f 0200 	mov.w	r2, #0
 8009bde:	f04f 0300 	mov.w	r3, #0
 8009be2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009be6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009bea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009bee:	4690      	mov	r8, r2
 8009bf0:	4699      	mov	r9, r3
 8009bf2:	4623      	mov	r3, r4
 8009bf4:	eb18 0303 	adds.w	r3, r8, r3
 8009bf8:	60bb      	str	r3, [r7, #8]
 8009bfa:	462b      	mov	r3, r5
 8009bfc:	eb49 0303 	adc.w	r3, r9, r3
 8009c00:	60fb      	str	r3, [r7, #12]
 8009c02:	f04f 0200 	mov.w	r2, #0
 8009c06:	f04f 0300 	mov.w	r3, #0
 8009c0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009c0e:	4629      	mov	r1, r5
 8009c10:	024b      	lsls	r3, r1, #9
 8009c12:	4621      	mov	r1, r4
 8009c14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009c18:	4621      	mov	r1, r4
 8009c1a:	024a      	lsls	r2, r1, #9
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c22:	2200      	movs	r2, #0
 8009c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c2c:	f7f6 fb60 	bl	80002f0 <__aeabi_uldivmod>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	4613      	mov	r3, r2
 8009c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c38:	e058      	b.n	8009cec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c3a:	4b38      	ldr	r3, [pc, #224]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	099b      	lsrs	r3, r3, #6
 8009c40:	2200      	movs	r2, #0
 8009c42:	4618      	mov	r0, r3
 8009c44:	4611      	mov	r1, r2
 8009c46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009c4a:	623b      	str	r3, [r7, #32]
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009c54:	4642      	mov	r2, r8
 8009c56:	464b      	mov	r3, r9
 8009c58:	f04f 0000 	mov.w	r0, #0
 8009c5c:	f04f 0100 	mov.w	r1, #0
 8009c60:	0159      	lsls	r1, r3, #5
 8009c62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c66:	0150      	lsls	r0, r2, #5
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4641      	mov	r1, r8
 8009c6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8009c72:	4649      	mov	r1, r9
 8009c74:	eb63 0b01 	sbc.w	fp, r3, r1
 8009c78:	f04f 0200 	mov.w	r2, #0
 8009c7c:	f04f 0300 	mov.w	r3, #0
 8009c80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009c84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009c88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009c8c:	ebb2 040a 	subs.w	r4, r2, sl
 8009c90:	eb63 050b 	sbc.w	r5, r3, fp
 8009c94:	f04f 0200 	mov.w	r2, #0
 8009c98:	f04f 0300 	mov.w	r3, #0
 8009c9c:	00eb      	lsls	r3, r5, #3
 8009c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ca2:	00e2      	lsls	r2, r4, #3
 8009ca4:	4614      	mov	r4, r2
 8009ca6:	461d      	mov	r5, r3
 8009ca8:	4643      	mov	r3, r8
 8009caa:	18e3      	adds	r3, r4, r3
 8009cac:	603b      	str	r3, [r7, #0]
 8009cae:	464b      	mov	r3, r9
 8009cb0:	eb45 0303 	adc.w	r3, r5, r3
 8009cb4:	607b      	str	r3, [r7, #4]
 8009cb6:	f04f 0200 	mov.w	r2, #0
 8009cba:	f04f 0300 	mov.w	r3, #0
 8009cbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	028b      	lsls	r3, r1, #10
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009ccc:	4621      	mov	r1, r4
 8009cce:	028a      	lsls	r2, r1, #10
 8009cd0:	4610      	mov	r0, r2
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	61bb      	str	r3, [r7, #24]
 8009cda:	61fa      	str	r2, [r7, #28]
 8009cdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ce0:	f7f6 fb06 	bl	80002f0 <__aeabi_uldivmod>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	4613      	mov	r3, r2
 8009cea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009cec:	4b0b      	ldr	r3, [pc, #44]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	0c1b      	lsrs	r3, r3, #16
 8009cf2:	f003 0303 	and.w	r3, r3, #3
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	005b      	lsls	r3, r3, #1
 8009cfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8009cfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009d06:	e002      	b.n	8009d0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009d08:	4b05      	ldr	r3, [pc, #20]	; (8009d20 <HAL_RCC_GetSysClockFreq+0x204>)
 8009d0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3750      	adds	r7, #80	; 0x50
 8009d14:	46bd      	mov	sp, r7
 8009d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d1a:	bf00      	nop
 8009d1c:	40023800 	.word	0x40023800
 8009d20:	00f42400 	.word	0x00f42400
 8009d24:	007a1200 	.word	0x007a1200

08009d28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d2c:	4b03      	ldr	r3, [pc, #12]	; (8009d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	2000097c 	.word	0x2000097c

08009d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009d44:	f7ff fff0 	bl	8009d28 <HAL_RCC_GetHCLKFreq>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	0a9b      	lsrs	r3, r3, #10
 8009d50:	f003 0307 	and.w	r3, r3, #7
 8009d54:	4903      	ldr	r1, [pc, #12]	; (8009d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d56:	5ccb      	ldrb	r3, [r1, r3]
 8009d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	40023800 	.word	0x40023800
 8009d64:	0808f9dc 	.word	0x0808f9dc

08009d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009d6c:	f7ff ffdc 	bl	8009d28 <HAL_RCC_GetHCLKFreq>
 8009d70:	4602      	mov	r2, r0
 8009d72:	4b05      	ldr	r3, [pc, #20]	; (8009d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	0b5b      	lsrs	r3, r3, #13
 8009d78:	f003 0307 	and.w	r3, r3, #7
 8009d7c:	4903      	ldr	r1, [pc, #12]	; (8009d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d7e:	5ccb      	ldrb	r3, [r1, r3]
 8009d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	40023800 	.word	0x40023800
 8009d8c:	0808f9dc 	.word	0x0808f9dc

08009d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b088      	sub	sp, #32
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009da4:	2300      	movs	r3, #0
 8009da6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0301 	and.w	r3, r3, #1
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d012      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009db8:	4b69      	ldr	r3, [pc, #420]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	4a68      	ldr	r2, [pc, #416]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009dbe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009dc2:	6093      	str	r3, [r2, #8]
 8009dc4:	4b66      	ldr	r3, [pc, #408]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009dc6:	689a      	ldr	r2, [r3, #8]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dcc:	4964      	ldr	r1, [pc, #400]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d017      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009dea:	4b5d      	ldr	r3, [pc, #372]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009df0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df8:	4959      	ldr	r1, [pc, #356]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e08:	d101      	bne.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d101      	bne.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009e16:	2301      	movs	r3, #1
 8009e18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d017      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009e26:	4b4e      	ldr	r3, [pc, #312]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e34:	494a      	ldr	r1, [pc, #296]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e44:	d101      	bne.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009e46:	2301      	movs	r3, #1
 8009e48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d101      	bne.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009e52:	2301      	movs	r3, #1
 8009e54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009e62:	2301      	movs	r3, #1
 8009e64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 0320 	and.w	r3, r3, #32
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f000 808b 	beq.w	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009e74:	4b3a      	ldr	r3, [pc, #232]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e78:	4a39      	ldr	r2, [pc, #228]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8009e80:	4b37      	ldr	r3, [pc, #220]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e88:	60bb      	str	r3, [r7, #8]
 8009e8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009e8c:	4b35      	ldr	r3, [pc, #212]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a34      	ldr	r2, [pc, #208]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e98:	f7fd ff72 	bl	8007d80 <HAL_GetTick>
 8009e9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009e9e:	e008      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ea0:	f7fd ff6e 	bl	8007d80 <HAL_GetTick>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	2b64      	cmp	r3, #100	; 0x64
 8009eac:	d901      	bls.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e38f      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009eb2:	4b2c      	ldr	r3, [pc, #176]	; (8009f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d0f0      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009ebe:	4b28      	ldr	r3, [pc, #160]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ec6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d035      	beq.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d02e      	beq.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009edc:	4b20      	ldr	r3, [pc, #128]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ee4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009ee6:	4b1e      	ldr	r3, [pc, #120]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eea:	4a1d      	ldr	r2, [pc, #116]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ef0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009ef2:	4b1b      	ldr	r3, [pc, #108]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef6:	4a1a      	ldr	r2, [pc, #104]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009efc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009efe:	4a18      	ldr	r2, [pc, #96]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009f04:	4b16      	ldr	r3, [pc, #88]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f08:	f003 0301 	and.w	r3, r3, #1
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d114      	bne.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f10:	f7fd ff36 	bl	8007d80 <HAL_GetTick>
 8009f14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f16:	e00a      	b.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f18:	f7fd ff32 	bl	8007d80 <HAL_GetTick>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d901      	bls.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e351      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f2e:	4b0c      	ldr	r3, [pc, #48]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f32:	f003 0302 	and.w	r3, r3, #2
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d0ee      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f46:	d111      	bne.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009f48:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009f54:	4b04      	ldr	r3, [pc, #16]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009f56:	400b      	ands	r3, r1
 8009f58:	4901      	ldr	r1, [pc, #4]	; (8009f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	608b      	str	r3, [r1, #8]
 8009f5e:	e00b      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009f60:	40023800 	.word	0x40023800
 8009f64:	40007000 	.word	0x40007000
 8009f68:	0ffffcff 	.word	0x0ffffcff
 8009f6c:	4bac      	ldr	r3, [pc, #688]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	4aab      	ldr	r2, [pc, #684]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009f72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009f76:	6093      	str	r3, [r2, #8]
 8009f78:	4ba9      	ldr	r3, [pc, #676]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009f7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f84:	49a6      	ldr	r1, [pc, #664]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009f86:	4313      	orrs	r3, r2
 8009f88:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 0310 	and.w	r3, r3, #16
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d010      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f96:	4ba2      	ldr	r3, [pc, #648]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f9c:	4aa0      	ldr	r2, [pc, #640]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fa2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009fa6:	4b9e      	ldr	r3, [pc, #632]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009fa8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb0:	499b      	ldr	r1, [pc, #620]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d00a      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009fc4:	4b96      	ldr	r3, [pc, #600]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fd2:	4993      	ldr	r1, [pc, #588]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00a      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009fe6:	4b8e      	ldr	r3, [pc, #568]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ff4:	498a      	ldr	r1, [pc, #552]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00a      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a008:	4b85      	ldr	r3, [pc, #532]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a00a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a00e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a016:	4982      	ldr	r1, [pc, #520]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a018:	4313      	orrs	r3, r2
 800a01a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00a      	beq.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a02a:	4b7d      	ldr	r3, [pc, #500]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a030:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a038:	4979      	ldr	r1, [pc, #484]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a03a:	4313      	orrs	r3, r2
 800a03c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00a      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a04c:	4b74      	ldr	r3, [pc, #464]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a04e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a052:	f023 0203 	bic.w	r2, r3, #3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a05a:	4971      	ldr	r1, [pc, #452]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a05c:	4313      	orrs	r3, r2
 800a05e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00a      	beq.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a06e:	4b6c      	ldr	r3, [pc, #432]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a074:	f023 020c 	bic.w	r2, r3, #12
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a07c:	4968      	ldr	r1, [pc, #416]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a07e:	4313      	orrs	r3, r2
 800a080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00a      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a090:	4b63      	ldr	r3, [pc, #396]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a096:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a09e:	4960      	ldr	r1, [pc, #384]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00a      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a0b2:	4b5b      	ldr	r3, [pc, #364]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a0b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0c0:	4957      	ldr	r1, [pc, #348]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00a      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a0d4:	4b52      	ldr	r3, [pc, #328]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0e2:	494f      	ldr	r1, [pc, #316]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00a      	beq.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a0f6:	4b4a      	ldr	r3, [pc, #296]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a0f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a104:	4946      	ldr	r1, [pc, #280]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a106:	4313      	orrs	r3, r2
 800a108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00a      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a118:	4b41      	ldr	r3, [pc, #260]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a11a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a11e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a126:	493e      	ldr	r1, [pc, #248]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a128:	4313      	orrs	r3, r2
 800a12a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00a      	beq.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a13a:	4b39      	ldr	r3, [pc, #228]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a13c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a140:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a148:	4935      	ldr	r1, [pc, #212]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a14a:	4313      	orrs	r3, r2
 800a14c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00a      	beq.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a15c:	4b30      	ldr	r3, [pc, #192]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a162:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a16a:	492d      	ldr	r1, [pc, #180]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a16c:	4313      	orrs	r3, r2
 800a16e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d011      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a17e:	4b28      	ldr	r3, [pc, #160]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a184:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a18c:	4924      	ldr	r1, [pc, #144]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a18e:	4313      	orrs	r3, r2
 800a190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a198:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a19c:	d101      	bne.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0308 	and.w	r3, r3, #8
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00a      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a1be:	4b18      	ldr	r3, [pc, #96]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a1c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1cc:	4914      	ldr	r1, [pc, #80]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00b      	beq.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a1e0:	4b0f      	ldr	r3, [pc, #60]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1f0:	490b      	ldr	r1, [pc, #44]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00f      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800a204:	4b06      	ldr	r3, [pc, #24]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a20a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a214:	4902      	ldr	r1, [pc, #8]	; (800a220 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a216:	4313      	orrs	r3, r2
 800a218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a21c:	e002      	b.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800a21e:	bf00      	nop
 800a220:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00b      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a230:	4b8a      	ldr	r3, [pc, #552]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a236:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a240:	4986      	ldr	r1, [pc, #536]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a242:	4313      	orrs	r3, r2
 800a244:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00b      	beq.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a254:	4b81      	ldr	r3, [pc, #516]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a25a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a264:	497d      	ldr	r1, [pc, #500]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a266:	4313      	orrs	r3, r2
 800a268:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d006      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 80d6 	beq.w	800a42c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a280:	4b76      	ldr	r3, [pc, #472]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a75      	ldr	r2, [pc, #468]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a286:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a28a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a28c:	f7fd fd78 	bl	8007d80 <HAL_GetTick>
 800a290:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a292:	e008      	b.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a294:	f7fd fd74 	bl	8007d80 <HAL_GetTick>
 800a298:	4602      	mov	r2, r0
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	2b64      	cmp	r3, #100	; 0x64
 800a2a0:	d901      	bls.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e195      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a2a6:	4b6d      	ldr	r3, [pc, #436]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1f0      	bne.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 0301 	and.w	r3, r3, #1
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d021      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d11d      	bne.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a2c6:	4b65      	ldr	r3, [pc, #404]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a2c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2cc:	0c1b      	lsrs	r3, r3, #16
 800a2ce:	f003 0303 	and.w	r3, r3, #3
 800a2d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a2d4:	4b61      	ldr	r3, [pc, #388]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a2d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2da:	0e1b      	lsrs	r3, r3, #24
 800a2dc:	f003 030f 	and.w	r3, r3, #15
 800a2e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	019a      	lsls	r2, r3, #6
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	041b      	lsls	r3, r3, #16
 800a2ec:	431a      	orrs	r2, r3
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	061b      	lsls	r3, r3, #24
 800a2f2:	431a      	orrs	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	071b      	lsls	r3, r3, #28
 800a2fa:	4958      	ldr	r1, [pc, #352]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d004      	beq.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a316:	d00a      	beq.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a320:	2b00      	cmp	r3, #0
 800a322:	d02e      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a328:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a32c:	d129      	bne.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a32e:	4b4b      	ldr	r3, [pc, #300]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a334:	0c1b      	lsrs	r3, r3, #16
 800a336:	f003 0303 	and.w	r3, r3, #3
 800a33a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a33c:	4b47      	ldr	r3, [pc, #284]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a33e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a342:	0f1b      	lsrs	r3, r3, #28
 800a344:	f003 0307 	and.w	r3, r3, #7
 800a348:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	019a      	lsls	r2, r3, #6
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	041b      	lsls	r3, r3, #16
 800a354:	431a      	orrs	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	061b      	lsls	r3, r3, #24
 800a35c:	431a      	orrs	r2, r3
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	071b      	lsls	r3, r3, #28
 800a362:	493e      	ldr	r1, [pc, #248]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a364:	4313      	orrs	r3, r2
 800a366:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a36a:	4b3c      	ldr	r3, [pc, #240]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a36c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a370:	f023 021f 	bic.w	r2, r3, #31
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a378:	3b01      	subs	r3, #1
 800a37a:	4938      	ldr	r1, [pc, #224]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a37c:	4313      	orrs	r3, r2
 800a37e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d01d      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a38e:	4b33      	ldr	r3, [pc, #204]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a394:	0e1b      	lsrs	r3, r3, #24
 800a396:	f003 030f 	and.w	r3, r3, #15
 800a39a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a39c:	4b2f      	ldr	r3, [pc, #188]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a39e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3a2:	0f1b      	lsrs	r3, r3, #28
 800a3a4:	f003 0307 	and.w	r3, r3, #7
 800a3a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	019a      	lsls	r2, r3, #6
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	041b      	lsls	r3, r3, #16
 800a3b6:	431a      	orrs	r2, r3
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	061b      	lsls	r3, r3, #24
 800a3bc:	431a      	orrs	r2, r3
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	071b      	lsls	r3, r3, #28
 800a3c2:	4926      	ldr	r1, [pc, #152]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d011      	beq.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	019a      	lsls	r2, r3, #6
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	041b      	lsls	r3, r3, #16
 800a3e2:	431a      	orrs	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	061b      	lsls	r3, r3, #24
 800a3ea:	431a      	orrs	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	071b      	lsls	r3, r3, #28
 800a3f2:	491a      	ldr	r1, [pc, #104]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a3fa:	4b18      	ldr	r3, [pc, #96]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a17      	ldr	r2, [pc, #92]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a400:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a406:	f7fd fcbb 	bl	8007d80 <HAL_GetTick>
 800a40a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a40c:	e008      	b.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a40e:	f7fd fcb7 	bl	8007d80 <HAL_GetTick>
 800a412:	4602      	mov	r2, r0
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	2b64      	cmp	r3, #100	; 0x64
 800a41a:	d901      	bls.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a41c:	2303      	movs	r3, #3
 800a41e:	e0d8      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a420:	4b0e      	ldr	r3, [pc, #56]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d0f0      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	2b01      	cmp	r3, #1
 800a430:	f040 80ce 	bne.w	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a434:	4b09      	ldr	r3, [pc, #36]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a08      	ldr	r2, [pc, #32]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800a43a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a43e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a440:	f7fd fc9e 	bl	8007d80 <HAL_GetTick>
 800a444:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a446:	e00b      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a448:	f7fd fc9a 	bl	8007d80 <HAL_GetTick>
 800a44c:	4602      	mov	r2, r0
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	2b64      	cmp	r3, #100	; 0x64
 800a454:	d904      	bls.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a456:	2303      	movs	r3, #3
 800a458:	e0bb      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800a45a:	bf00      	nop
 800a45c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a460:	4b5e      	ldr	r3, [pc, #376]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a46c:	d0ec      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a476:	2b00      	cmp	r3, #0
 800a478:	d003      	beq.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d009      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d02e      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a492:	2b00      	cmp	r3, #0
 800a494:	d12a      	bne.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a496:	4b51      	ldr	r3, [pc, #324]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a49c:	0c1b      	lsrs	r3, r3, #16
 800a49e:	f003 0303 	and.w	r3, r3, #3
 800a4a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a4a4:	4b4d      	ldr	r3, [pc, #308]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4aa:	0f1b      	lsrs	r3, r3, #28
 800a4ac:	f003 0307 	and.w	r3, r3, #7
 800a4b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	019a      	lsls	r2, r3, #6
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	041b      	lsls	r3, r3, #16
 800a4bc:	431a      	orrs	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	061b      	lsls	r3, r3, #24
 800a4c4:	431a      	orrs	r2, r3
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	071b      	lsls	r3, r3, #28
 800a4ca:	4944      	ldr	r1, [pc, #272]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a4d2:	4b42      	ldr	r3, [pc, #264]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a4d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	021b      	lsls	r3, r3, #8
 800a4e4:	493d      	ldr	r1, [pc, #244]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d022      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a500:	d11d      	bne.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a502:	4b36      	ldr	r3, [pc, #216]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a508:	0e1b      	lsrs	r3, r3, #24
 800a50a:	f003 030f 	and.w	r3, r3, #15
 800a50e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a510:	4b32      	ldr	r3, [pc, #200]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a516:	0f1b      	lsrs	r3, r3, #28
 800a518:	f003 0307 	and.w	r3, r3, #7
 800a51c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	019a      	lsls	r2, r3, #6
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a1b      	ldr	r3, [r3, #32]
 800a528:	041b      	lsls	r3, r3, #16
 800a52a:	431a      	orrs	r2, r3
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	061b      	lsls	r3, r3, #24
 800a530:	431a      	orrs	r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	071b      	lsls	r3, r3, #28
 800a536:	4929      	ldr	r1, [pc, #164]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a538:	4313      	orrs	r3, r2
 800a53a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 0308 	and.w	r3, r3, #8
 800a546:	2b00      	cmp	r3, #0
 800a548:	d028      	beq.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a54a:	4b24      	ldr	r3, [pc, #144]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a550:	0e1b      	lsrs	r3, r3, #24
 800a552:	f003 030f 	and.w	r3, r3, #15
 800a556:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a558:	4b20      	ldr	r3, [pc, #128]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a55a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a55e:	0c1b      	lsrs	r3, r3, #16
 800a560:	f003 0303 	and.w	r3, r3, #3
 800a564:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	019a      	lsls	r2, r3, #6
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	041b      	lsls	r3, r3, #16
 800a570:	431a      	orrs	r2, r3
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	061b      	lsls	r3, r3, #24
 800a576:	431a      	orrs	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	69db      	ldr	r3, [r3, #28]
 800a57c:	071b      	lsls	r3, r3, #28
 800a57e:	4917      	ldr	r1, [pc, #92]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a580:	4313      	orrs	r3, r2
 800a582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a586:	4b15      	ldr	r3, [pc, #84]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a58c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a594:	4911      	ldr	r1, [pc, #68]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a596:	4313      	orrs	r3, r2
 800a598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a59c:	4b0f      	ldr	r3, [pc, #60]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a0e      	ldr	r2, [pc, #56]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a5a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5a8:	f7fd fbea 	bl	8007d80 <HAL_GetTick>
 800a5ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a5ae:	e008      	b.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a5b0:	f7fd fbe6 	bl	8007d80 <HAL_GetTick>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	2b64      	cmp	r3, #100	; 0x64
 800a5bc:	d901      	bls.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	e007      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a5c2:	4b06      	ldr	r3, [pc, #24]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5ce:	d1ef      	bne.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3720      	adds	r7, #32
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	40023800 	.word	0x40023800

0800a5e0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d101      	bne.n	800a5f2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e01c      	b.n	800a62c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	795b      	ldrb	r3, [r3, #5]
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d105      	bne.n	800a608 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f7fb ff00 	bl	8006408 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2202      	movs	r2, #2
 800a60c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f042 0204 	orr.w	r2, r2, #4
 800a61c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d101      	bne.n	800a646 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	e09d      	b.n	800a782 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d108      	bne.n	800a660 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a656:	d009      	beq.n	800a66c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	61da      	str	r2, [r3, #28]
 800a65e:	e005      	b.n	800a66c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d106      	bne.n	800a68c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7fb ff30 	bl	80064ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2202      	movs	r2, #2
 800a690:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6ac:	d902      	bls.n	800a6b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	60fb      	str	r3, [r7, #12]
 800a6b2:	e002      	b.n	800a6ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a6b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a6c2:	d007      	beq.n	800a6d4 <HAL_SPI_Init+0xa0>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6cc:	d002      	beq.n	800a6d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a6e4:	431a      	orrs	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	f003 0302 	and.w	r3, r3, #2
 800a6ee:	431a      	orrs	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	695b      	ldr	r3, [r3, #20]
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	431a      	orrs	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a702:	431a      	orrs	r2, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	69db      	ldr	r3, [r3, #28]
 800a708:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a70c:	431a      	orrs	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a716:	ea42 0103 	orr.w	r1, r2, r3
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	430a      	orrs	r2, r1
 800a728:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	0c1b      	lsrs	r3, r3, #16
 800a730:	f003 0204 	and.w	r2, r3, #4
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a738:	f003 0310 	and.w	r3, r3, #16
 800a73c:	431a      	orrs	r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a742:	f003 0308 	and.w	r3, r3, #8
 800a746:	431a      	orrs	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a750:	ea42 0103 	orr.w	r1, r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	430a      	orrs	r2, r1
 800a760:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	69da      	ldr	r2, [r3, #28]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a770:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b088      	sub	sp, #32
 800a78e:	af00      	add	r7, sp, #0
 800a790:	60f8      	str	r0, [r7, #12]
 800a792:	60b9      	str	r1, [r7, #8]
 800a794:	603b      	str	r3, [r7, #0]
 800a796:	4613      	mov	r3, r2
 800a798:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d101      	bne.n	800a7ac <HAL_SPI_Transmit+0x22>
 800a7a8:	2302      	movs	r3, #2
 800a7aa:	e158      	b.n	800aa5e <HAL_SPI_Transmit+0x2d4>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a7b4:	f7fd fae4 	bl	8007d80 <HAL_GetTick>
 800a7b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a7ba:	88fb      	ldrh	r3, [r7, #6]
 800a7bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d002      	beq.n	800a7d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a7ca:	2302      	movs	r3, #2
 800a7cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a7ce:	e13d      	b.n	800aa4c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d002      	beq.n	800a7dc <HAL_SPI_Transmit+0x52>
 800a7d6:	88fb      	ldrh	r3, [r7, #6]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d102      	bne.n	800a7e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a7e0:	e134      	b.n	800aa4c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2203      	movs	r2, #3
 800a7e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	88fa      	ldrh	r2, [r7, #6]
 800a7fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	88fa      	ldrh	r2, [r7, #6]
 800a800:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2200      	movs	r2, #0
 800a81c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a82c:	d10f      	bne.n	800a84e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a83c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a84c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a858:	2b40      	cmp	r3, #64	; 0x40
 800a85a:	d007      	beq.n	800a86c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a86a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a874:	d94b      	bls.n	800a90e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d002      	beq.n	800a884 <HAL_SPI_Transmit+0xfa>
 800a87e:	8afb      	ldrh	r3, [r7, #22]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d13e      	bne.n	800a902 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a888:	881a      	ldrh	r2, [r3, #0]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a894:	1c9a      	adds	r2, r3, #2
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a8a8:	e02b      	b.n	800a902 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	f003 0302 	and.w	r3, r3, #2
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d112      	bne.n	800a8de <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8bc:	881a      	ldrh	r2, [r3, #0]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c8:	1c9a      	adds	r2, r3, #2
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a8dc:	e011      	b.n	800a902 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8de:	f7fd fa4f 	bl	8007d80 <HAL_GetTick>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	69bb      	ldr	r3, [r7, #24]
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d803      	bhi.n	800a8f6 <HAL_SPI_Transmit+0x16c>
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8f4:	d102      	bne.n	800a8fc <HAL_SPI_Transmit+0x172>
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d102      	bne.n	800a902 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800a8fc:	2303      	movs	r3, #3
 800a8fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a900:	e0a4      	b.n	800aa4c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a906:	b29b      	uxth	r3, r3
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1ce      	bne.n	800a8aa <HAL_SPI_Transmit+0x120>
 800a90c:	e07c      	b.n	800aa08 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d002      	beq.n	800a91c <HAL_SPI_Transmit+0x192>
 800a916:	8afb      	ldrh	r3, [r7, #22]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d170      	bne.n	800a9fe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a920:	b29b      	uxth	r3, r3
 800a922:	2b01      	cmp	r3, #1
 800a924:	d912      	bls.n	800a94c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92a:	881a      	ldrh	r2, [r3, #0]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a936:	1c9a      	adds	r2, r3, #2
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a940:	b29b      	uxth	r3, r3
 800a942:	3b02      	subs	r3, #2
 800a944:	b29a      	uxth	r2, r3
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a94a:	e058      	b.n	800a9fe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	330c      	adds	r3, #12
 800a956:	7812      	ldrb	r2, [r2, #0]
 800a958:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95e:	1c5a      	adds	r2, r3, #1
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a968:	b29b      	uxth	r3, r3
 800a96a:	3b01      	subs	r3, #1
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a972:	e044      	b.n	800a9fe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	f003 0302 	and.w	r3, r3, #2
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d12b      	bne.n	800a9da <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a986:	b29b      	uxth	r3, r3
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d912      	bls.n	800a9b2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a990:	881a      	ldrh	r2, [r3, #0]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a99c:	1c9a      	adds	r2, r3, #2
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	3b02      	subs	r3, #2
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a9b0:	e025      	b.n	800a9fe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	330c      	adds	r3, #12
 800a9bc:	7812      	ldrb	r2, [r2, #0]
 800a9be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c4:	1c5a      	adds	r2, r3, #1
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a9d8:	e011      	b.n	800a9fe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9da:	f7fd f9d1 	bl	8007d80 <HAL_GetTick>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	683a      	ldr	r2, [r7, #0]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d803      	bhi.n	800a9f2 <HAL_SPI_Transmit+0x268>
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9f0:	d102      	bne.n	800a9f8 <HAL_SPI_Transmit+0x26e>
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d102      	bne.n	800a9fe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a9fc:	e026      	b.n	800aa4c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1b5      	bne.n	800a974 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aa08:	69ba      	ldr	r2, [r7, #24]
 800aa0a:	6839      	ldr	r1, [r7, #0]
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f000 f949 	bl	800aca4 <SPI_EndRxTxTransaction>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d002      	beq.n	800aa1e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2220      	movs	r2, #32
 800aa1c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d10a      	bne.n	800aa3c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa26:	2300      	movs	r3, #0
 800aa28:	613b      	str	r3, [r7, #16]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	613b      	str	r3, [r7, #16]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	613b      	str	r3, [r7, #16]
 800aa3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	77fb      	strb	r3, [r7, #31]
 800aa48:	e000      	b.n	800aa4c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800aa4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800aa5c:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3720      	adds	r7, #32
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
	...

0800aa68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b088      	sub	sp, #32
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	603b      	str	r3, [r7, #0]
 800aa74:	4613      	mov	r3, r2
 800aa76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800aa78:	f7fd f982 	bl	8007d80 <HAL_GetTick>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa80:	1a9b      	subs	r3, r3, r2
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	4413      	add	r3, r2
 800aa86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800aa88:	f7fd f97a 	bl	8007d80 <HAL_GetTick>
 800aa8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800aa8e:	4b39      	ldr	r3, [pc, #228]	; (800ab74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	015b      	lsls	r3, r3, #5
 800aa94:	0d1b      	lsrs	r3, r3, #20
 800aa96:	69fa      	ldr	r2, [r7, #28]
 800aa98:	fb02 f303 	mul.w	r3, r2, r3
 800aa9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aa9e:	e054      	b.n	800ab4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaa6:	d050      	beq.n	800ab4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aaa8:	f7fd f96a 	bl	8007d80 <HAL_GetTick>
 800aaac:	4602      	mov	r2, r0
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	1ad3      	subs	r3, r2, r3
 800aab2:	69fa      	ldr	r2, [r7, #28]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d902      	bls.n	800aabe <SPI_WaitFlagStateUntilTimeout+0x56>
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d13d      	bne.n	800ab3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	685a      	ldr	r2, [r3, #4]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aacc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aad6:	d111      	bne.n	800aafc <SPI_WaitFlagStateUntilTimeout+0x94>
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aae0:	d004      	beq.n	800aaec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaea:	d107      	bne.n	800aafc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aafa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab04:	d10f      	bne.n	800ab26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ab14:	601a      	str	r2, [r3, #0]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e017      	b.n	800ab6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d101      	bne.n	800ab44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ab40:	2300      	movs	r3, #0
 800ab42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	3b01      	subs	r3, #1
 800ab48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	689a      	ldr	r2, [r3, #8]
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	4013      	ands	r3, r2
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	bf0c      	ite	eq
 800ab5a:	2301      	moveq	r3, #1
 800ab5c:	2300      	movne	r3, #0
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	461a      	mov	r2, r3
 800ab62:	79fb      	ldrb	r3, [r7, #7]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d19b      	bne.n	800aaa0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3720      	adds	r7, #32
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	2000097c 	.word	0x2000097c

0800ab78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b08a      	sub	sp, #40	; 0x28
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
 800ab84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ab8a:	f7fd f8f9 	bl	8007d80 <HAL_GetTick>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab92:	1a9b      	subs	r3, r3, r2
 800ab94:	683a      	ldr	r2, [r7, #0]
 800ab96:	4413      	add	r3, r2
 800ab98:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ab9a:	f7fd f8f1 	bl	8007d80 <HAL_GetTick>
 800ab9e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	330c      	adds	r3, #12
 800aba6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800aba8:	4b3d      	ldr	r3, [pc, #244]	; (800aca0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	4613      	mov	r3, r2
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	4413      	add	r3, r2
 800abb2:	00da      	lsls	r2, r3, #3
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	0d1b      	lsrs	r3, r3, #20
 800abb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abba:	fb02 f303 	mul.w	r3, r2, r3
 800abbe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800abc0:	e060      	b.n	800ac84 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800abc8:	d107      	bne.n	800abda <SPI_WaitFifoStateUntilTimeout+0x62>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d104      	bne.n	800abda <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800abd8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abe0:	d050      	beq.n	800ac84 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800abe2:	f7fd f8cd 	bl	8007d80 <HAL_GetTick>
 800abe6:	4602      	mov	r2, r0
 800abe8:	6a3b      	ldr	r3, [r7, #32]
 800abea:	1ad3      	subs	r3, r2, r3
 800abec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abee:	429a      	cmp	r2, r3
 800abf0:	d902      	bls.n	800abf8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800abf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d13d      	bne.n	800ac74 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	685a      	ldr	r2, [r3, #4]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ac06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac10:	d111      	bne.n	800ac36 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac1a:	d004      	beq.n	800ac26 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac24:	d107      	bne.n	800ac36 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac3e:	d10f      	bne.n	800ac60 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac4e:	601a      	str	r2, [r3, #0]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ac70:	2303      	movs	r3, #3
 800ac72:	e010      	b.n	800ac96 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d101      	bne.n	800ac7e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	689a      	ldr	r2, [r3, #8]
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d196      	bne.n	800abc2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ac94:	2300      	movs	r3, #0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3728      	adds	r7, #40	; 0x28
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	2000097c 	.word	0x2000097c

0800aca4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b088      	sub	sp, #32
 800aca8:	af02      	add	r7, sp, #8
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f7ff ff5b 	bl	800ab78 <SPI_WaitFifoStateUntilTimeout>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d007      	beq.n	800acd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800accc:	f043 0220 	orr.w	r2, r3, #32
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800acd4:	2303      	movs	r3, #3
 800acd6:	e046      	b.n	800ad66 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800acd8:	4b25      	ldr	r3, [pc, #148]	; (800ad70 <SPI_EndRxTxTransaction+0xcc>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a25      	ldr	r2, [pc, #148]	; (800ad74 <SPI_EndRxTxTransaction+0xd0>)
 800acde:	fba2 2303 	umull	r2, r3, r2, r3
 800ace2:	0d5b      	lsrs	r3, r3, #21
 800ace4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ace8:	fb02 f303 	mul.w	r3, r2, r3
 800acec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800acf6:	d112      	bne.n	800ad1e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	2200      	movs	r2, #0
 800ad00:	2180      	movs	r1, #128	; 0x80
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	f7ff feb0 	bl	800aa68 <SPI_WaitFlagStateUntilTimeout>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d016      	beq.n	800ad3c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad12:	f043 0220 	orr.w	r2, r3, #32
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ad1a:	2303      	movs	r3, #3
 800ad1c:	e023      	b.n	800ad66 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00a      	beq.n	800ad3a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad34:	2b80      	cmp	r3, #128	; 0x80
 800ad36:	d0f2      	beq.n	800ad1e <SPI_EndRxTxTransaction+0x7a>
 800ad38:	e000      	b.n	800ad3c <SPI_EndRxTxTransaction+0x98>
        break;
 800ad3a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f7ff ff15 	bl	800ab78 <SPI_WaitFifoStateUntilTimeout>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d007      	beq.n	800ad64 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad58:	f043 0220 	orr.w	r2, r3, #32
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ad60:	2303      	movs	r3, #3
 800ad62:	e000      	b.n	800ad66 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3718      	adds	r7, #24
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	2000097c 	.word	0x2000097c
 800ad74:	165e9f81 	.word	0x165e9f81

0800ad78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d101      	bne.n	800ad8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e049      	b.n	800ae1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d106      	bne.n	800ada4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f7fb fde8 	bl	8006974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2202      	movs	r2, #2
 800ada8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	3304      	adds	r3, #4
 800adb4:	4619      	mov	r1, r3
 800adb6:	4610      	mov	r0, r2
 800adb8:	f000 faee 	bl	800b398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3708      	adds	r7, #8
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
	...

0800ae28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d001      	beq.n	800ae40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e054      	b.n	800aeea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2202      	movs	r2, #2
 800ae44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	68da      	ldr	r2, [r3, #12]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f042 0201 	orr.w	r2, r2, #1
 800ae56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a26      	ldr	r2, [pc, #152]	; (800aef8 <HAL_TIM_Base_Start_IT+0xd0>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d022      	beq.n	800aea8 <HAL_TIM_Base_Start_IT+0x80>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae6a:	d01d      	beq.n	800aea8 <HAL_TIM_Base_Start_IT+0x80>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a22      	ldr	r2, [pc, #136]	; (800aefc <HAL_TIM_Base_Start_IT+0xd4>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d018      	beq.n	800aea8 <HAL_TIM_Base_Start_IT+0x80>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a21      	ldr	r2, [pc, #132]	; (800af00 <HAL_TIM_Base_Start_IT+0xd8>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d013      	beq.n	800aea8 <HAL_TIM_Base_Start_IT+0x80>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a1f      	ldr	r2, [pc, #124]	; (800af04 <HAL_TIM_Base_Start_IT+0xdc>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d00e      	beq.n	800aea8 <HAL_TIM_Base_Start_IT+0x80>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a1e      	ldr	r2, [pc, #120]	; (800af08 <HAL_TIM_Base_Start_IT+0xe0>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d009      	beq.n	800aea8 <HAL_TIM_Base_Start_IT+0x80>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a1c      	ldr	r2, [pc, #112]	; (800af0c <HAL_TIM_Base_Start_IT+0xe4>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d004      	beq.n	800aea8 <HAL_TIM_Base_Start_IT+0x80>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a1b      	ldr	r2, [pc, #108]	; (800af10 <HAL_TIM_Base_Start_IT+0xe8>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d115      	bne.n	800aed4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	689a      	ldr	r2, [r3, #8]
 800aeae:	4b19      	ldr	r3, [pc, #100]	; (800af14 <HAL_TIM_Base_Start_IT+0xec>)
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2b06      	cmp	r3, #6
 800aeb8:	d015      	beq.n	800aee6 <HAL_TIM_Base_Start_IT+0xbe>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aec0:	d011      	beq.n	800aee6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f042 0201 	orr.w	r2, r2, #1
 800aed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aed2:	e008      	b.n	800aee6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f042 0201 	orr.w	r2, r2, #1
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	e000      	b.n	800aee8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aee6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3714      	adds	r7, #20
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	40010000 	.word	0x40010000
 800aefc:	40000400 	.word	0x40000400
 800af00:	40000800 	.word	0x40000800
 800af04:	40000c00 	.word	0x40000c00
 800af08:	40010400 	.word	0x40010400
 800af0c:	40014000 	.word	0x40014000
 800af10:	40001800 	.word	0x40001800
 800af14:	00010007 	.word	0x00010007

0800af18 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68da      	ldr	r2, [r3, #12]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f022 0201 	bic.w	r2, r2, #1
 800af2e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	6a1a      	ldr	r2, [r3, #32]
 800af36:	f241 1311 	movw	r3, #4369	; 0x1111
 800af3a:	4013      	ands	r3, r2
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d10f      	bne.n	800af60 <HAL_TIM_Base_Stop_IT+0x48>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	6a1a      	ldr	r2, [r3, #32]
 800af46:	f240 4344 	movw	r3, #1092	; 0x444
 800af4a:	4013      	ands	r3, r2
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d107      	bne.n	800af60 <HAL_TIM_Base_Stop_IT+0x48>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f022 0201 	bic.w	r2, r2, #1
 800af5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	370c      	adds	r7, #12
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b082      	sub	sp, #8
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	f003 0302 	and.w	r3, r3, #2
 800af88:	2b02      	cmp	r3, #2
 800af8a:	d122      	bne.n	800afd2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	f003 0302 	and.w	r3, r3, #2
 800af96:	2b02      	cmp	r3, #2
 800af98:	d11b      	bne.n	800afd2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f06f 0202 	mvn.w	r2, #2
 800afa2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	699b      	ldr	r3, [r3, #24]
 800afb0:	f003 0303 	and.w	r3, r3, #3
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d003      	beq.n	800afc0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 f9cf 	bl	800b35c <HAL_TIM_IC_CaptureCallback>
 800afbe:	e005      	b.n	800afcc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f9c1 	bl	800b348 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 f9d2 	bl	800b370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	f003 0304 	and.w	r3, r3, #4
 800afdc:	2b04      	cmp	r3, #4
 800afde:	d122      	bne.n	800b026 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	f003 0304 	and.w	r3, r3, #4
 800afea:	2b04      	cmp	r3, #4
 800afec:	d11b      	bne.n	800b026 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f06f 0204 	mvn.w	r2, #4
 800aff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2202      	movs	r2, #2
 800affc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	699b      	ldr	r3, [r3, #24]
 800b004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d003      	beq.n	800b014 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 f9a5 	bl	800b35c <HAL_TIM_IC_CaptureCallback>
 800b012:	e005      	b.n	800b020 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f997 	bl	800b348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 f9a8 	bl	800b370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	f003 0308 	and.w	r3, r3, #8
 800b030:	2b08      	cmp	r3, #8
 800b032:	d122      	bne.n	800b07a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	f003 0308 	and.w	r3, r3, #8
 800b03e:	2b08      	cmp	r3, #8
 800b040:	d11b      	bne.n	800b07a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f06f 0208 	mvn.w	r2, #8
 800b04a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2204      	movs	r2, #4
 800b050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	69db      	ldr	r3, [r3, #28]
 800b058:	f003 0303 	and.w	r3, r3, #3
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d003      	beq.n	800b068 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 f97b 	bl	800b35c <HAL_TIM_IC_CaptureCallback>
 800b066:	e005      	b.n	800b074 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 f96d 	bl	800b348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 f97e 	bl	800b370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	f003 0310 	and.w	r3, r3, #16
 800b084:	2b10      	cmp	r3, #16
 800b086:	d122      	bne.n	800b0ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	f003 0310 	and.w	r3, r3, #16
 800b092:	2b10      	cmp	r3, #16
 800b094:	d11b      	bne.n	800b0ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f06f 0210 	mvn.w	r2, #16
 800b09e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2208      	movs	r2, #8
 800b0a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	69db      	ldr	r3, [r3, #28]
 800b0ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d003      	beq.n	800b0bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f951 	bl	800b35c <HAL_TIM_IC_CaptureCallback>
 800b0ba:	e005      	b.n	800b0c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 f943 	bl	800b348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 f954 	bl	800b370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	f003 0301 	and.w	r3, r3, #1
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d10e      	bne.n	800b0fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	f003 0301 	and.w	r3, r3, #1
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d107      	bne.n	800b0fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f06f 0201 	mvn.w	r2, #1
 800b0f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f7fa fd17 	bl	8005b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b104:	2b80      	cmp	r3, #128	; 0x80
 800b106:	d10e      	bne.n	800b126 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b112:	2b80      	cmp	r3, #128	; 0x80
 800b114:	d107      	bne.n	800b126 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b11e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 fb0b 	bl	800b73c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	691b      	ldr	r3, [r3, #16]
 800b12c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b134:	d10e      	bne.n	800b154 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b140:	2b80      	cmp	r3, #128	; 0x80
 800b142:	d107      	bne.n	800b154 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b14c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fafe 	bl	800b750 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	691b      	ldr	r3, [r3, #16]
 800b15a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b15e:	2b40      	cmp	r3, #64	; 0x40
 800b160:	d10e      	bne.n	800b180 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b16c:	2b40      	cmp	r3, #64	; 0x40
 800b16e:	d107      	bne.n	800b180 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 f902 	bl	800b384 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	f003 0320 	and.w	r3, r3, #32
 800b18a:	2b20      	cmp	r3, #32
 800b18c:	d10e      	bne.n	800b1ac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	f003 0320 	and.w	r3, r3, #32
 800b198:	2b20      	cmp	r3, #32
 800b19a:	d107      	bne.n	800b1ac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f06f 0220 	mvn.w	r2, #32
 800b1a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fabe 	bl	800b728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b1ac:	bf00      	nop
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d101      	bne.n	800b1d0 <HAL_TIM_ConfigClockSource+0x1c>
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	e0b4      	b.n	800b33a <HAL_TIM_ConfigClockSource+0x186>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2202      	movs	r2, #2
 800b1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b1e8:	68ba      	ldr	r2, [r7, #8]
 800b1ea:	4b56      	ldr	r3, [pc, #344]	; (800b344 <HAL_TIM_ConfigClockSource+0x190>)
 800b1ec:	4013      	ands	r3, r2
 800b1ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b208:	d03e      	beq.n	800b288 <HAL_TIM_ConfigClockSource+0xd4>
 800b20a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b20e:	f200 8087 	bhi.w	800b320 <HAL_TIM_ConfigClockSource+0x16c>
 800b212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b216:	f000 8086 	beq.w	800b326 <HAL_TIM_ConfigClockSource+0x172>
 800b21a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b21e:	d87f      	bhi.n	800b320 <HAL_TIM_ConfigClockSource+0x16c>
 800b220:	2b70      	cmp	r3, #112	; 0x70
 800b222:	d01a      	beq.n	800b25a <HAL_TIM_ConfigClockSource+0xa6>
 800b224:	2b70      	cmp	r3, #112	; 0x70
 800b226:	d87b      	bhi.n	800b320 <HAL_TIM_ConfigClockSource+0x16c>
 800b228:	2b60      	cmp	r3, #96	; 0x60
 800b22a:	d050      	beq.n	800b2ce <HAL_TIM_ConfigClockSource+0x11a>
 800b22c:	2b60      	cmp	r3, #96	; 0x60
 800b22e:	d877      	bhi.n	800b320 <HAL_TIM_ConfigClockSource+0x16c>
 800b230:	2b50      	cmp	r3, #80	; 0x50
 800b232:	d03c      	beq.n	800b2ae <HAL_TIM_ConfigClockSource+0xfa>
 800b234:	2b50      	cmp	r3, #80	; 0x50
 800b236:	d873      	bhi.n	800b320 <HAL_TIM_ConfigClockSource+0x16c>
 800b238:	2b40      	cmp	r3, #64	; 0x40
 800b23a:	d058      	beq.n	800b2ee <HAL_TIM_ConfigClockSource+0x13a>
 800b23c:	2b40      	cmp	r3, #64	; 0x40
 800b23e:	d86f      	bhi.n	800b320 <HAL_TIM_ConfigClockSource+0x16c>
 800b240:	2b30      	cmp	r3, #48	; 0x30
 800b242:	d064      	beq.n	800b30e <HAL_TIM_ConfigClockSource+0x15a>
 800b244:	2b30      	cmp	r3, #48	; 0x30
 800b246:	d86b      	bhi.n	800b320 <HAL_TIM_ConfigClockSource+0x16c>
 800b248:	2b20      	cmp	r3, #32
 800b24a:	d060      	beq.n	800b30e <HAL_TIM_ConfigClockSource+0x15a>
 800b24c:	2b20      	cmp	r3, #32
 800b24e:	d867      	bhi.n	800b320 <HAL_TIM_ConfigClockSource+0x16c>
 800b250:	2b00      	cmp	r3, #0
 800b252:	d05c      	beq.n	800b30e <HAL_TIM_ConfigClockSource+0x15a>
 800b254:	2b10      	cmp	r3, #16
 800b256:	d05a      	beq.n	800b30e <HAL_TIM_ConfigClockSource+0x15a>
 800b258:	e062      	b.n	800b320 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b26a:	f000 f9af 	bl	800b5cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b27c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	609a      	str	r2, [r3, #8]
      break;
 800b286:	e04f      	b.n	800b328 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b298:	f000 f998 	bl	800b5cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	689a      	ldr	r2, [r3, #8]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b2aa:	609a      	str	r2, [r3, #8]
      break;
 800b2ac:	e03c      	b.n	800b328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	f000 f90c 	bl	800b4d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2150      	movs	r1, #80	; 0x50
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 f965 	bl	800b596 <TIM_ITRx_SetConfig>
      break;
 800b2cc:	e02c      	b.n	800b328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2da:	461a      	mov	r2, r3
 800b2dc:	f000 f92b 	bl	800b536 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2160      	movs	r1, #96	; 0x60
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f000 f955 	bl	800b596 <TIM_ITRx_SetConfig>
      break;
 800b2ec:	e01c      	b.n	800b328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	f000 f8ec 	bl	800b4d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2140      	movs	r1, #64	; 0x40
 800b306:	4618      	mov	r0, r3
 800b308:	f000 f945 	bl	800b596 <TIM_ITRx_SetConfig>
      break;
 800b30c:	e00c      	b.n	800b328 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4619      	mov	r1, r3
 800b318:	4610      	mov	r0, r2
 800b31a:	f000 f93c 	bl	800b596 <TIM_ITRx_SetConfig>
      break;
 800b31e:	e003      	b.n	800b328 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b320:	2301      	movs	r3, #1
 800b322:	73fb      	strb	r3, [r7, #15]
      break;
 800b324:	e000      	b.n	800b328 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b326:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b338:	7bfb      	ldrb	r3, [r7, #15]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	fffeff88 	.word	0xfffeff88

0800b348 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b364:	bf00      	nop
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b378:	bf00      	nop
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a40      	ldr	r2, [pc, #256]	; (800b4ac <TIM_Base_SetConfig+0x114>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d013      	beq.n	800b3d8 <TIM_Base_SetConfig+0x40>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3b6:	d00f      	beq.n	800b3d8 <TIM_Base_SetConfig+0x40>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a3d      	ldr	r2, [pc, #244]	; (800b4b0 <TIM_Base_SetConfig+0x118>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d00b      	beq.n	800b3d8 <TIM_Base_SetConfig+0x40>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4a3c      	ldr	r2, [pc, #240]	; (800b4b4 <TIM_Base_SetConfig+0x11c>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d007      	beq.n	800b3d8 <TIM_Base_SetConfig+0x40>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a3b      	ldr	r2, [pc, #236]	; (800b4b8 <TIM_Base_SetConfig+0x120>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d003      	beq.n	800b3d8 <TIM_Base_SetConfig+0x40>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a3a      	ldr	r2, [pc, #232]	; (800b4bc <TIM_Base_SetConfig+0x124>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d108      	bne.n	800b3ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a2f      	ldr	r2, [pc, #188]	; (800b4ac <TIM_Base_SetConfig+0x114>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d02b      	beq.n	800b44a <TIM_Base_SetConfig+0xb2>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3f8:	d027      	beq.n	800b44a <TIM_Base_SetConfig+0xb2>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4a2c      	ldr	r2, [pc, #176]	; (800b4b0 <TIM_Base_SetConfig+0x118>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d023      	beq.n	800b44a <TIM_Base_SetConfig+0xb2>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4a2b      	ldr	r2, [pc, #172]	; (800b4b4 <TIM_Base_SetConfig+0x11c>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d01f      	beq.n	800b44a <TIM_Base_SetConfig+0xb2>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4a2a      	ldr	r2, [pc, #168]	; (800b4b8 <TIM_Base_SetConfig+0x120>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d01b      	beq.n	800b44a <TIM_Base_SetConfig+0xb2>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4a29      	ldr	r2, [pc, #164]	; (800b4bc <TIM_Base_SetConfig+0x124>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d017      	beq.n	800b44a <TIM_Base_SetConfig+0xb2>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4a28      	ldr	r2, [pc, #160]	; (800b4c0 <TIM_Base_SetConfig+0x128>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d013      	beq.n	800b44a <TIM_Base_SetConfig+0xb2>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4a27      	ldr	r2, [pc, #156]	; (800b4c4 <TIM_Base_SetConfig+0x12c>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d00f      	beq.n	800b44a <TIM_Base_SetConfig+0xb2>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a26      	ldr	r2, [pc, #152]	; (800b4c8 <TIM_Base_SetConfig+0x130>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d00b      	beq.n	800b44a <TIM_Base_SetConfig+0xb2>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4a25      	ldr	r2, [pc, #148]	; (800b4cc <TIM_Base_SetConfig+0x134>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d007      	beq.n	800b44a <TIM_Base_SetConfig+0xb2>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4a24      	ldr	r2, [pc, #144]	; (800b4d0 <TIM_Base_SetConfig+0x138>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d003      	beq.n	800b44a <TIM_Base_SetConfig+0xb2>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4a23      	ldr	r2, [pc, #140]	; (800b4d4 <TIM_Base_SetConfig+0x13c>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d108      	bne.n	800b45c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	4313      	orrs	r3, r2
 800b45a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	4313      	orrs	r3, r2
 800b468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	689a      	ldr	r2, [r3, #8]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a0a      	ldr	r2, [pc, #40]	; (800b4ac <TIM_Base_SetConfig+0x114>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d003      	beq.n	800b490 <TIM_Base_SetConfig+0xf8>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4a0c      	ldr	r2, [pc, #48]	; (800b4bc <TIM_Base_SetConfig+0x124>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d103      	bne.n	800b498 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	691a      	ldr	r2, [r3, #16]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	615a      	str	r2, [r3, #20]
}
 800b49e:	bf00      	nop
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	40010000 	.word	0x40010000
 800b4b0:	40000400 	.word	0x40000400
 800b4b4:	40000800 	.word	0x40000800
 800b4b8:	40000c00 	.word	0x40000c00
 800b4bc:	40010400 	.word	0x40010400
 800b4c0:	40014000 	.word	0x40014000
 800b4c4:	40014400 	.word	0x40014400
 800b4c8:	40014800 	.word	0x40014800
 800b4cc:	40001800 	.word	0x40001800
 800b4d0:	40001c00 	.word	0x40001c00
 800b4d4:	40002000 	.word	0x40002000

0800b4d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b087      	sub	sp, #28
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6a1b      	ldr	r3, [r3, #32]
 800b4e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	6a1b      	ldr	r3, [r3, #32]
 800b4ee:	f023 0201 	bic.w	r2, r3, #1
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	699b      	ldr	r3, [r3, #24]
 800b4fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	011b      	lsls	r3, r3, #4
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	f023 030a 	bic.w	r3, r3, #10
 800b514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b516:	697a      	ldr	r2, [r7, #20]
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	693a      	ldr	r2, [r7, #16]
 800b522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	621a      	str	r2, [r3, #32]
}
 800b52a:	bf00      	nop
 800b52c:	371c      	adds	r7, #28
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr

0800b536 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b536:	b480      	push	{r7}
 800b538:	b087      	sub	sp, #28
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	60f8      	str	r0, [r7, #12]
 800b53e:	60b9      	str	r1, [r7, #8]
 800b540:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	f023 0210 	bic.w	r2, r3, #16
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	699b      	ldr	r3, [r3, #24]
 800b552:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6a1b      	ldr	r3, [r3, #32]
 800b558:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b560:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	031b      	lsls	r3, r3, #12
 800b566:	697a      	ldr	r2, [r7, #20]
 800b568:	4313      	orrs	r3, r2
 800b56a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b572:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	011b      	lsls	r3, r3, #4
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	697a      	ldr	r2, [r7, #20]
 800b582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	693a      	ldr	r2, [r7, #16]
 800b588:	621a      	str	r2, [r3, #32]
}
 800b58a:	bf00      	nop
 800b58c:	371c      	adds	r7, #28
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b596:	b480      	push	{r7}
 800b598:	b085      	sub	sp, #20
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
 800b59e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b5ae:	683a      	ldr	r2, [r7, #0]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	f043 0307 	orr.w	r3, r3, #7
 800b5b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	609a      	str	r2, [r3, #8]
}
 800b5c0:	bf00      	nop
 800b5c2:	3714      	adds	r7, #20
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b087      	sub	sp, #28
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
 800b5d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b5e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	021a      	lsls	r2, r3, #8
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	431a      	orrs	r2, r3
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	697a      	ldr	r2, [r7, #20]
 800b5fe:	609a      	str	r2, [r3, #8]
}
 800b600:	bf00      	nop
 800b602:	371c      	adds	r7, #28
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d101      	bne.n	800b624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b620:	2302      	movs	r3, #2
 800b622:	e06d      	b.n	800b700 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2201      	movs	r2, #1
 800b628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2202      	movs	r2, #2
 800b630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a30      	ldr	r2, [pc, #192]	; (800b70c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d004      	beq.n	800b658 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a2f      	ldr	r2, [pc, #188]	; (800b710 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d108      	bne.n	800b66a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b65e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	4313      	orrs	r3, r2
 800b668:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b670:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	4313      	orrs	r3, r2
 800b67a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a20      	ldr	r2, [pc, #128]	; (800b70c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d022      	beq.n	800b6d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b696:	d01d      	beq.n	800b6d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a1d      	ldr	r2, [pc, #116]	; (800b714 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d018      	beq.n	800b6d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4a1c      	ldr	r2, [pc, #112]	; (800b718 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d013      	beq.n	800b6d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a1a      	ldr	r2, [pc, #104]	; (800b71c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d00e      	beq.n	800b6d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a15      	ldr	r2, [pc, #84]	; (800b710 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d009      	beq.n	800b6d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a16      	ldr	r2, [pc, #88]	; (800b720 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d004      	beq.n	800b6d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a15      	ldr	r2, [pc, #84]	; (800b724 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d10c      	bne.n	800b6ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68ba      	ldr	r2, [r7, #8]
 800b6ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3714      	adds	r7, #20
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	40010000 	.word	0x40010000
 800b710:	40010400 	.word	0x40010400
 800b714:	40000400 	.word	0x40000400
 800b718:	40000800 	.word	0x40000800
 800b71c:	40000c00 	.word	0x40000c00
 800b720:	40014000 	.word	0x40014000
 800b724:	40001800 	.word	0x40001800

0800b728 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b744:	bf00      	nop
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d101      	bne.n	800b776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	e040      	b.n	800b7f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d106      	bne.n	800b78c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7fb f964 	bl	8006a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2224      	movs	r2, #36	; 0x24
 800b790:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f022 0201 	bic.w	r2, r2, #1
 800b7a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 f8b0 	bl	800b908 <UART_SetConfig>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d101      	bne.n	800b7b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e022      	b.n	800b7f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d002      	beq.n	800b7c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 fb08 	bl	800bdd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	685a      	ldr	r2, [r3, #4]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	689a      	ldr	r2, [r3, #8]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b7de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f042 0201 	orr.w	r2, r2, #1
 800b7ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 fb8f 	bl	800bf14 <UART_CheckIdleState>
 800b7f6:	4603      	mov	r3, r0
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3708      	adds	r7, #8
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b08a      	sub	sp, #40	; 0x28
 800b804:	af02      	add	r7, sp, #8
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	603b      	str	r3, [r7, #0]
 800b80c:	4613      	mov	r3, r2
 800b80e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b814:	2b20      	cmp	r3, #32
 800b816:	d171      	bne.n	800b8fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d002      	beq.n	800b824 <HAL_UART_Transmit+0x24>
 800b81e:	88fb      	ldrh	r3, [r7, #6]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b824:	2301      	movs	r3, #1
 800b826:	e06a      	b.n	800b8fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2200      	movs	r2, #0
 800b82c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2221      	movs	r2, #33	; 0x21
 800b834:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b836:	f7fc faa3 	bl	8007d80 <HAL_GetTick>
 800b83a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	88fa      	ldrh	r2, [r7, #6]
 800b840:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	88fa      	ldrh	r2, [r7, #6]
 800b848:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b854:	d108      	bne.n	800b868 <HAL_UART_Transmit+0x68>
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d104      	bne.n	800b868 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800b85e:	2300      	movs	r3, #0
 800b860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	61bb      	str	r3, [r7, #24]
 800b866:	e003      	b.n	800b870 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b86c:	2300      	movs	r3, #0
 800b86e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b870:	e02c      	b.n	800b8cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	9300      	str	r3, [sp, #0]
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	2200      	movs	r2, #0
 800b87a:	2180      	movs	r1, #128	; 0x80
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f000 fb96 	bl	800bfae <UART_WaitOnFlagUntilTimeout>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d001      	beq.n	800b88c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800b888:	2303      	movs	r3, #3
 800b88a:	e038      	b.n	800b8fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d10b      	bne.n	800b8aa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	881b      	ldrh	r3, [r3, #0]
 800b896:	461a      	mov	r2, r3
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b8a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	3302      	adds	r3, #2
 800b8a6:	61bb      	str	r3, [r7, #24]
 800b8a8:	e007      	b.n	800b8ba <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	781a      	ldrb	r2, [r3, #0]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	b29a      	uxth	r2, r3
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1cc      	bne.n	800b872 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	9300      	str	r3, [sp, #0]
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	2140      	movs	r1, #64	; 0x40
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f000 fb63 	bl	800bfae <UART_WaitOnFlagUntilTimeout>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d001      	beq.n	800b8f2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800b8ee:	2303      	movs	r3, #3
 800b8f0:	e005      	b.n	800b8fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2220      	movs	r2, #32
 800b8f6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	e000      	b.n	800b8fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800b8fc:	2302      	movs	r3, #2
  }
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3720      	adds	r7, #32
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
	...

0800b908 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b088      	sub	sp, #32
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b910:	2300      	movs	r3, #0
 800b912:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	689a      	ldr	r2, [r3, #8]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	691b      	ldr	r3, [r3, #16]
 800b91c:	431a      	orrs	r2, r3
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	695b      	ldr	r3, [r3, #20]
 800b922:	431a      	orrs	r2, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	69db      	ldr	r3, [r3, #28]
 800b928:	4313      	orrs	r3, r2
 800b92a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	4ba6      	ldr	r3, [pc, #664]	; (800bbcc <UART_SetConfig+0x2c4>)
 800b934:	4013      	ands	r3, r2
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	6812      	ldr	r2, [r2, #0]
 800b93a:	6979      	ldr	r1, [r7, #20]
 800b93c:	430b      	orrs	r3, r1
 800b93e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	68da      	ldr	r2, [r3, #12]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	430a      	orrs	r2, r1
 800b954:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6a1b      	ldr	r3, [r3, #32]
 800b960:	697a      	ldr	r2, [r7, #20]
 800b962:	4313      	orrs	r3, r2
 800b964:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	697a      	ldr	r2, [r7, #20]
 800b976:	430a      	orrs	r2, r1
 800b978:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a94      	ldr	r2, [pc, #592]	; (800bbd0 <UART_SetConfig+0x2c8>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d120      	bne.n	800b9c6 <UART_SetConfig+0xbe>
 800b984:	4b93      	ldr	r3, [pc, #588]	; (800bbd4 <UART_SetConfig+0x2cc>)
 800b986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b98a:	f003 0303 	and.w	r3, r3, #3
 800b98e:	2b03      	cmp	r3, #3
 800b990:	d816      	bhi.n	800b9c0 <UART_SetConfig+0xb8>
 800b992:	a201      	add	r2, pc, #4	; (adr r2, 800b998 <UART_SetConfig+0x90>)
 800b994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b998:	0800b9a9 	.word	0x0800b9a9
 800b99c:	0800b9b5 	.word	0x0800b9b5
 800b9a0:	0800b9af 	.word	0x0800b9af
 800b9a4:	0800b9bb 	.word	0x0800b9bb
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	77fb      	strb	r3, [r7, #31]
 800b9ac:	e150      	b.n	800bc50 <UART_SetConfig+0x348>
 800b9ae:	2302      	movs	r3, #2
 800b9b0:	77fb      	strb	r3, [r7, #31]
 800b9b2:	e14d      	b.n	800bc50 <UART_SetConfig+0x348>
 800b9b4:	2304      	movs	r3, #4
 800b9b6:	77fb      	strb	r3, [r7, #31]
 800b9b8:	e14a      	b.n	800bc50 <UART_SetConfig+0x348>
 800b9ba:	2308      	movs	r3, #8
 800b9bc:	77fb      	strb	r3, [r7, #31]
 800b9be:	e147      	b.n	800bc50 <UART_SetConfig+0x348>
 800b9c0:	2310      	movs	r3, #16
 800b9c2:	77fb      	strb	r3, [r7, #31]
 800b9c4:	e144      	b.n	800bc50 <UART_SetConfig+0x348>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a83      	ldr	r2, [pc, #524]	; (800bbd8 <UART_SetConfig+0x2d0>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d132      	bne.n	800ba36 <UART_SetConfig+0x12e>
 800b9d0:	4b80      	ldr	r3, [pc, #512]	; (800bbd4 <UART_SetConfig+0x2cc>)
 800b9d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9d6:	f003 030c 	and.w	r3, r3, #12
 800b9da:	2b0c      	cmp	r3, #12
 800b9dc:	d828      	bhi.n	800ba30 <UART_SetConfig+0x128>
 800b9de:	a201      	add	r2, pc, #4	; (adr r2, 800b9e4 <UART_SetConfig+0xdc>)
 800b9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e4:	0800ba19 	.word	0x0800ba19
 800b9e8:	0800ba31 	.word	0x0800ba31
 800b9ec:	0800ba31 	.word	0x0800ba31
 800b9f0:	0800ba31 	.word	0x0800ba31
 800b9f4:	0800ba25 	.word	0x0800ba25
 800b9f8:	0800ba31 	.word	0x0800ba31
 800b9fc:	0800ba31 	.word	0x0800ba31
 800ba00:	0800ba31 	.word	0x0800ba31
 800ba04:	0800ba1f 	.word	0x0800ba1f
 800ba08:	0800ba31 	.word	0x0800ba31
 800ba0c:	0800ba31 	.word	0x0800ba31
 800ba10:	0800ba31 	.word	0x0800ba31
 800ba14:	0800ba2b 	.word	0x0800ba2b
 800ba18:	2300      	movs	r3, #0
 800ba1a:	77fb      	strb	r3, [r7, #31]
 800ba1c:	e118      	b.n	800bc50 <UART_SetConfig+0x348>
 800ba1e:	2302      	movs	r3, #2
 800ba20:	77fb      	strb	r3, [r7, #31]
 800ba22:	e115      	b.n	800bc50 <UART_SetConfig+0x348>
 800ba24:	2304      	movs	r3, #4
 800ba26:	77fb      	strb	r3, [r7, #31]
 800ba28:	e112      	b.n	800bc50 <UART_SetConfig+0x348>
 800ba2a:	2308      	movs	r3, #8
 800ba2c:	77fb      	strb	r3, [r7, #31]
 800ba2e:	e10f      	b.n	800bc50 <UART_SetConfig+0x348>
 800ba30:	2310      	movs	r3, #16
 800ba32:	77fb      	strb	r3, [r7, #31]
 800ba34:	e10c      	b.n	800bc50 <UART_SetConfig+0x348>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a68      	ldr	r2, [pc, #416]	; (800bbdc <UART_SetConfig+0x2d4>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d120      	bne.n	800ba82 <UART_SetConfig+0x17a>
 800ba40:	4b64      	ldr	r3, [pc, #400]	; (800bbd4 <UART_SetConfig+0x2cc>)
 800ba42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ba4a:	2b30      	cmp	r3, #48	; 0x30
 800ba4c:	d013      	beq.n	800ba76 <UART_SetConfig+0x16e>
 800ba4e:	2b30      	cmp	r3, #48	; 0x30
 800ba50:	d814      	bhi.n	800ba7c <UART_SetConfig+0x174>
 800ba52:	2b20      	cmp	r3, #32
 800ba54:	d009      	beq.n	800ba6a <UART_SetConfig+0x162>
 800ba56:	2b20      	cmp	r3, #32
 800ba58:	d810      	bhi.n	800ba7c <UART_SetConfig+0x174>
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d002      	beq.n	800ba64 <UART_SetConfig+0x15c>
 800ba5e:	2b10      	cmp	r3, #16
 800ba60:	d006      	beq.n	800ba70 <UART_SetConfig+0x168>
 800ba62:	e00b      	b.n	800ba7c <UART_SetConfig+0x174>
 800ba64:	2300      	movs	r3, #0
 800ba66:	77fb      	strb	r3, [r7, #31]
 800ba68:	e0f2      	b.n	800bc50 <UART_SetConfig+0x348>
 800ba6a:	2302      	movs	r3, #2
 800ba6c:	77fb      	strb	r3, [r7, #31]
 800ba6e:	e0ef      	b.n	800bc50 <UART_SetConfig+0x348>
 800ba70:	2304      	movs	r3, #4
 800ba72:	77fb      	strb	r3, [r7, #31]
 800ba74:	e0ec      	b.n	800bc50 <UART_SetConfig+0x348>
 800ba76:	2308      	movs	r3, #8
 800ba78:	77fb      	strb	r3, [r7, #31]
 800ba7a:	e0e9      	b.n	800bc50 <UART_SetConfig+0x348>
 800ba7c:	2310      	movs	r3, #16
 800ba7e:	77fb      	strb	r3, [r7, #31]
 800ba80:	e0e6      	b.n	800bc50 <UART_SetConfig+0x348>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a56      	ldr	r2, [pc, #344]	; (800bbe0 <UART_SetConfig+0x2d8>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d120      	bne.n	800bace <UART_SetConfig+0x1c6>
 800ba8c:	4b51      	ldr	r3, [pc, #324]	; (800bbd4 <UART_SetConfig+0x2cc>)
 800ba8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ba96:	2bc0      	cmp	r3, #192	; 0xc0
 800ba98:	d013      	beq.n	800bac2 <UART_SetConfig+0x1ba>
 800ba9a:	2bc0      	cmp	r3, #192	; 0xc0
 800ba9c:	d814      	bhi.n	800bac8 <UART_SetConfig+0x1c0>
 800ba9e:	2b80      	cmp	r3, #128	; 0x80
 800baa0:	d009      	beq.n	800bab6 <UART_SetConfig+0x1ae>
 800baa2:	2b80      	cmp	r3, #128	; 0x80
 800baa4:	d810      	bhi.n	800bac8 <UART_SetConfig+0x1c0>
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d002      	beq.n	800bab0 <UART_SetConfig+0x1a8>
 800baaa:	2b40      	cmp	r3, #64	; 0x40
 800baac:	d006      	beq.n	800babc <UART_SetConfig+0x1b4>
 800baae:	e00b      	b.n	800bac8 <UART_SetConfig+0x1c0>
 800bab0:	2300      	movs	r3, #0
 800bab2:	77fb      	strb	r3, [r7, #31]
 800bab4:	e0cc      	b.n	800bc50 <UART_SetConfig+0x348>
 800bab6:	2302      	movs	r3, #2
 800bab8:	77fb      	strb	r3, [r7, #31]
 800baba:	e0c9      	b.n	800bc50 <UART_SetConfig+0x348>
 800babc:	2304      	movs	r3, #4
 800babe:	77fb      	strb	r3, [r7, #31]
 800bac0:	e0c6      	b.n	800bc50 <UART_SetConfig+0x348>
 800bac2:	2308      	movs	r3, #8
 800bac4:	77fb      	strb	r3, [r7, #31]
 800bac6:	e0c3      	b.n	800bc50 <UART_SetConfig+0x348>
 800bac8:	2310      	movs	r3, #16
 800baca:	77fb      	strb	r3, [r7, #31]
 800bacc:	e0c0      	b.n	800bc50 <UART_SetConfig+0x348>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a44      	ldr	r2, [pc, #272]	; (800bbe4 <UART_SetConfig+0x2dc>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d125      	bne.n	800bb24 <UART_SetConfig+0x21c>
 800bad8:	4b3e      	ldr	r3, [pc, #248]	; (800bbd4 <UART_SetConfig+0x2cc>)
 800bada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bae2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bae6:	d017      	beq.n	800bb18 <UART_SetConfig+0x210>
 800bae8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800baec:	d817      	bhi.n	800bb1e <UART_SetConfig+0x216>
 800baee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baf2:	d00b      	beq.n	800bb0c <UART_SetConfig+0x204>
 800baf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baf8:	d811      	bhi.n	800bb1e <UART_SetConfig+0x216>
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d003      	beq.n	800bb06 <UART_SetConfig+0x1fe>
 800bafe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb02:	d006      	beq.n	800bb12 <UART_SetConfig+0x20a>
 800bb04:	e00b      	b.n	800bb1e <UART_SetConfig+0x216>
 800bb06:	2300      	movs	r3, #0
 800bb08:	77fb      	strb	r3, [r7, #31]
 800bb0a:	e0a1      	b.n	800bc50 <UART_SetConfig+0x348>
 800bb0c:	2302      	movs	r3, #2
 800bb0e:	77fb      	strb	r3, [r7, #31]
 800bb10:	e09e      	b.n	800bc50 <UART_SetConfig+0x348>
 800bb12:	2304      	movs	r3, #4
 800bb14:	77fb      	strb	r3, [r7, #31]
 800bb16:	e09b      	b.n	800bc50 <UART_SetConfig+0x348>
 800bb18:	2308      	movs	r3, #8
 800bb1a:	77fb      	strb	r3, [r7, #31]
 800bb1c:	e098      	b.n	800bc50 <UART_SetConfig+0x348>
 800bb1e:	2310      	movs	r3, #16
 800bb20:	77fb      	strb	r3, [r7, #31]
 800bb22:	e095      	b.n	800bc50 <UART_SetConfig+0x348>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a2f      	ldr	r2, [pc, #188]	; (800bbe8 <UART_SetConfig+0x2e0>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d125      	bne.n	800bb7a <UART_SetConfig+0x272>
 800bb2e:	4b29      	ldr	r3, [pc, #164]	; (800bbd4 <UART_SetConfig+0x2cc>)
 800bb30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bb38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb3c:	d017      	beq.n	800bb6e <UART_SetConfig+0x266>
 800bb3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb42:	d817      	bhi.n	800bb74 <UART_SetConfig+0x26c>
 800bb44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb48:	d00b      	beq.n	800bb62 <UART_SetConfig+0x25a>
 800bb4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb4e:	d811      	bhi.n	800bb74 <UART_SetConfig+0x26c>
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d003      	beq.n	800bb5c <UART_SetConfig+0x254>
 800bb54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb58:	d006      	beq.n	800bb68 <UART_SetConfig+0x260>
 800bb5a:	e00b      	b.n	800bb74 <UART_SetConfig+0x26c>
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	77fb      	strb	r3, [r7, #31]
 800bb60:	e076      	b.n	800bc50 <UART_SetConfig+0x348>
 800bb62:	2302      	movs	r3, #2
 800bb64:	77fb      	strb	r3, [r7, #31]
 800bb66:	e073      	b.n	800bc50 <UART_SetConfig+0x348>
 800bb68:	2304      	movs	r3, #4
 800bb6a:	77fb      	strb	r3, [r7, #31]
 800bb6c:	e070      	b.n	800bc50 <UART_SetConfig+0x348>
 800bb6e:	2308      	movs	r3, #8
 800bb70:	77fb      	strb	r3, [r7, #31]
 800bb72:	e06d      	b.n	800bc50 <UART_SetConfig+0x348>
 800bb74:	2310      	movs	r3, #16
 800bb76:	77fb      	strb	r3, [r7, #31]
 800bb78:	e06a      	b.n	800bc50 <UART_SetConfig+0x348>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a1b      	ldr	r2, [pc, #108]	; (800bbec <UART_SetConfig+0x2e4>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d138      	bne.n	800bbf6 <UART_SetConfig+0x2ee>
 800bb84:	4b13      	ldr	r3, [pc, #76]	; (800bbd4 <UART_SetConfig+0x2cc>)
 800bb86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb8a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bb8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb92:	d017      	beq.n	800bbc4 <UART_SetConfig+0x2bc>
 800bb94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb98:	d82a      	bhi.n	800bbf0 <UART_SetConfig+0x2e8>
 800bb9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb9e:	d00b      	beq.n	800bbb8 <UART_SetConfig+0x2b0>
 800bba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bba4:	d824      	bhi.n	800bbf0 <UART_SetConfig+0x2e8>
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <UART_SetConfig+0x2aa>
 800bbaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbae:	d006      	beq.n	800bbbe <UART_SetConfig+0x2b6>
 800bbb0:	e01e      	b.n	800bbf0 <UART_SetConfig+0x2e8>
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	77fb      	strb	r3, [r7, #31]
 800bbb6:	e04b      	b.n	800bc50 <UART_SetConfig+0x348>
 800bbb8:	2302      	movs	r3, #2
 800bbba:	77fb      	strb	r3, [r7, #31]
 800bbbc:	e048      	b.n	800bc50 <UART_SetConfig+0x348>
 800bbbe:	2304      	movs	r3, #4
 800bbc0:	77fb      	strb	r3, [r7, #31]
 800bbc2:	e045      	b.n	800bc50 <UART_SetConfig+0x348>
 800bbc4:	2308      	movs	r3, #8
 800bbc6:	77fb      	strb	r3, [r7, #31]
 800bbc8:	e042      	b.n	800bc50 <UART_SetConfig+0x348>
 800bbca:	bf00      	nop
 800bbcc:	efff69f3 	.word	0xefff69f3
 800bbd0:	40011000 	.word	0x40011000
 800bbd4:	40023800 	.word	0x40023800
 800bbd8:	40004400 	.word	0x40004400
 800bbdc:	40004800 	.word	0x40004800
 800bbe0:	40004c00 	.word	0x40004c00
 800bbe4:	40005000 	.word	0x40005000
 800bbe8:	40011400 	.word	0x40011400
 800bbec:	40007800 	.word	0x40007800
 800bbf0:	2310      	movs	r3, #16
 800bbf2:	77fb      	strb	r3, [r7, #31]
 800bbf4:	e02c      	b.n	800bc50 <UART_SetConfig+0x348>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a72      	ldr	r2, [pc, #456]	; (800bdc4 <UART_SetConfig+0x4bc>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d125      	bne.n	800bc4c <UART_SetConfig+0x344>
 800bc00:	4b71      	ldr	r3, [pc, #452]	; (800bdc8 <UART_SetConfig+0x4c0>)
 800bc02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bc0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bc0e:	d017      	beq.n	800bc40 <UART_SetConfig+0x338>
 800bc10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bc14:	d817      	bhi.n	800bc46 <UART_SetConfig+0x33e>
 800bc16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc1a:	d00b      	beq.n	800bc34 <UART_SetConfig+0x32c>
 800bc1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc20:	d811      	bhi.n	800bc46 <UART_SetConfig+0x33e>
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d003      	beq.n	800bc2e <UART_SetConfig+0x326>
 800bc26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc2a:	d006      	beq.n	800bc3a <UART_SetConfig+0x332>
 800bc2c:	e00b      	b.n	800bc46 <UART_SetConfig+0x33e>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	77fb      	strb	r3, [r7, #31]
 800bc32:	e00d      	b.n	800bc50 <UART_SetConfig+0x348>
 800bc34:	2302      	movs	r3, #2
 800bc36:	77fb      	strb	r3, [r7, #31]
 800bc38:	e00a      	b.n	800bc50 <UART_SetConfig+0x348>
 800bc3a:	2304      	movs	r3, #4
 800bc3c:	77fb      	strb	r3, [r7, #31]
 800bc3e:	e007      	b.n	800bc50 <UART_SetConfig+0x348>
 800bc40:	2308      	movs	r3, #8
 800bc42:	77fb      	strb	r3, [r7, #31]
 800bc44:	e004      	b.n	800bc50 <UART_SetConfig+0x348>
 800bc46:	2310      	movs	r3, #16
 800bc48:	77fb      	strb	r3, [r7, #31]
 800bc4a:	e001      	b.n	800bc50 <UART_SetConfig+0x348>
 800bc4c:	2310      	movs	r3, #16
 800bc4e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	69db      	ldr	r3, [r3, #28]
 800bc54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc58:	d15b      	bne.n	800bd12 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800bc5a:	7ffb      	ldrb	r3, [r7, #31]
 800bc5c:	2b08      	cmp	r3, #8
 800bc5e:	d828      	bhi.n	800bcb2 <UART_SetConfig+0x3aa>
 800bc60:	a201      	add	r2, pc, #4	; (adr r2, 800bc68 <UART_SetConfig+0x360>)
 800bc62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc66:	bf00      	nop
 800bc68:	0800bc8d 	.word	0x0800bc8d
 800bc6c:	0800bc95 	.word	0x0800bc95
 800bc70:	0800bc9d 	.word	0x0800bc9d
 800bc74:	0800bcb3 	.word	0x0800bcb3
 800bc78:	0800bca3 	.word	0x0800bca3
 800bc7c:	0800bcb3 	.word	0x0800bcb3
 800bc80:	0800bcb3 	.word	0x0800bcb3
 800bc84:	0800bcb3 	.word	0x0800bcb3
 800bc88:	0800bcab 	.word	0x0800bcab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc8c:	f7fe f858 	bl	8009d40 <HAL_RCC_GetPCLK1Freq>
 800bc90:	61b8      	str	r0, [r7, #24]
        break;
 800bc92:	e013      	b.n	800bcbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc94:	f7fe f868 	bl	8009d68 <HAL_RCC_GetPCLK2Freq>
 800bc98:	61b8      	str	r0, [r7, #24]
        break;
 800bc9a:	e00f      	b.n	800bcbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc9c:	4b4b      	ldr	r3, [pc, #300]	; (800bdcc <UART_SetConfig+0x4c4>)
 800bc9e:	61bb      	str	r3, [r7, #24]
        break;
 800bca0:	e00c      	b.n	800bcbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bca2:	f7fd ff3b 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800bca6:	61b8      	str	r0, [r7, #24]
        break;
 800bca8:	e008      	b.n	800bcbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcae:	61bb      	str	r3, [r7, #24]
        break;
 800bcb0:	e004      	b.n	800bcbc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	77bb      	strb	r3, [r7, #30]
        break;
 800bcba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d074      	beq.n	800bdac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	005a      	lsls	r2, r3, #1
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	085b      	lsrs	r3, r3, #1
 800bccc:	441a      	add	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcd6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	2b0f      	cmp	r3, #15
 800bcdc:	d916      	bls.n	800bd0c <UART_SetConfig+0x404>
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bce4:	d212      	bcs.n	800bd0c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	f023 030f 	bic.w	r3, r3, #15
 800bcee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	085b      	lsrs	r3, r3, #1
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	f003 0307 	and.w	r3, r3, #7
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	89fb      	ldrh	r3, [r7, #14]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	89fa      	ldrh	r2, [r7, #14]
 800bd08:	60da      	str	r2, [r3, #12]
 800bd0a:	e04f      	b.n	800bdac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	77bb      	strb	r3, [r7, #30]
 800bd10:	e04c      	b.n	800bdac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd12:	7ffb      	ldrb	r3, [r7, #31]
 800bd14:	2b08      	cmp	r3, #8
 800bd16:	d828      	bhi.n	800bd6a <UART_SetConfig+0x462>
 800bd18:	a201      	add	r2, pc, #4	; (adr r2, 800bd20 <UART_SetConfig+0x418>)
 800bd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd1e:	bf00      	nop
 800bd20:	0800bd45 	.word	0x0800bd45
 800bd24:	0800bd4d 	.word	0x0800bd4d
 800bd28:	0800bd55 	.word	0x0800bd55
 800bd2c:	0800bd6b 	.word	0x0800bd6b
 800bd30:	0800bd5b 	.word	0x0800bd5b
 800bd34:	0800bd6b 	.word	0x0800bd6b
 800bd38:	0800bd6b 	.word	0x0800bd6b
 800bd3c:	0800bd6b 	.word	0x0800bd6b
 800bd40:	0800bd63 	.word	0x0800bd63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd44:	f7fd fffc 	bl	8009d40 <HAL_RCC_GetPCLK1Freq>
 800bd48:	61b8      	str	r0, [r7, #24]
        break;
 800bd4a:	e013      	b.n	800bd74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd4c:	f7fe f80c 	bl	8009d68 <HAL_RCC_GetPCLK2Freq>
 800bd50:	61b8      	str	r0, [r7, #24]
        break;
 800bd52:	e00f      	b.n	800bd74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd54:	4b1d      	ldr	r3, [pc, #116]	; (800bdcc <UART_SetConfig+0x4c4>)
 800bd56:	61bb      	str	r3, [r7, #24]
        break;
 800bd58:	e00c      	b.n	800bd74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd5a:	f7fd fedf 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 800bd5e:	61b8      	str	r0, [r7, #24]
        break;
 800bd60:	e008      	b.n	800bd74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd66:	61bb      	str	r3, [r7, #24]
        break;
 800bd68:	e004      	b.n	800bd74 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	77bb      	strb	r3, [r7, #30]
        break;
 800bd72:	bf00      	nop
    }

    if (pclk != 0U)
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d018      	beq.n	800bdac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	085a      	lsrs	r2, r3, #1
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	441a      	add	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	2b0f      	cmp	r3, #15
 800bd92:	d909      	bls.n	800bda8 <UART_SetConfig+0x4a0>
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd9a:	d205      	bcs.n	800bda8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	60da      	str	r2, [r3, #12]
 800bda6:	e001      	b.n	800bdac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800bdb8:	7fbb      	ldrb	r3, [r7, #30]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3720      	adds	r7, #32
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	40007c00 	.word	0x40007c00
 800bdc8:	40023800 	.word	0x40023800
 800bdcc:	00f42400 	.word	0x00f42400

0800bdd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bddc:	f003 0301 	and.w	r3, r3, #1
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00a      	beq.n	800bdfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	430a      	orrs	r2, r1
 800bdf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfe:	f003 0302 	and.w	r3, r3, #2
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00a      	beq.n	800be1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	430a      	orrs	r2, r1
 800be1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be20:	f003 0304 	and.w	r3, r3, #4
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00a      	beq.n	800be3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	430a      	orrs	r2, r1
 800be3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be42:	f003 0308 	and.w	r3, r3, #8
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00a      	beq.n	800be60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	430a      	orrs	r2, r1
 800be5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be64:	f003 0310 	and.w	r3, r3, #16
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00a      	beq.n	800be82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	430a      	orrs	r2, r1
 800be80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be86:	f003 0320 	and.w	r3, r3, #32
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00a      	beq.n	800bea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	430a      	orrs	r2, r1
 800bea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beac:	2b00      	cmp	r3, #0
 800beae:	d01a      	beq.n	800bee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	430a      	orrs	r2, r1
 800bec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bece:	d10a      	bne.n	800bee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	430a      	orrs	r2, r1
 800bee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00a      	beq.n	800bf08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	430a      	orrs	r2, r1
 800bf06:	605a      	str	r2, [r3, #4]
  }
}
 800bf08:	bf00      	nop
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b086      	sub	sp, #24
 800bf18:	af02      	add	r7, sp, #8
 800bf1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf24:	f7fb ff2c 	bl	8007d80 <HAL_GetTick>
 800bf28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f003 0308 	and.w	r3, r3, #8
 800bf34:	2b08      	cmp	r3, #8
 800bf36:	d10e      	bne.n	800bf56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 f831 	bl	800bfae <UART_WaitOnFlagUntilTimeout>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d001      	beq.n	800bf56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf52:	2303      	movs	r3, #3
 800bf54:	e027      	b.n	800bfa6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f003 0304 	and.w	r3, r3, #4
 800bf60:	2b04      	cmp	r3, #4
 800bf62:	d10e      	bne.n	800bf82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f81b 	bl	800bfae <UART_WaitOnFlagUntilTimeout>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d001      	beq.n	800bf82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf7e:	2303      	movs	r3, #3
 800bf80:	e011      	b.n	800bfa6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2220      	movs	r2, #32
 800bf86:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2220      	movs	r2, #32
 800bf8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800bfa4:	2300      	movs	r3, #0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b09c      	sub	sp, #112	; 0x70
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	60f8      	str	r0, [r7, #12]
 800bfb6:	60b9      	str	r1, [r7, #8]
 800bfb8:	603b      	str	r3, [r7, #0]
 800bfba:	4613      	mov	r3, r2
 800bfbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfbe:	e0a7      	b.n	800c110 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfc6:	f000 80a3 	beq.w	800c110 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfca:	f7fb fed9 	bl	8007d80 <HAL_GetTick>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	1ad3      	subs	r3, r2, r3
 800bfd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d302      	bcc.n	800bfe0 <UART_WaitOnFlagUntilTimeout+0x32>
 800bfda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d13f      	bne.n	800c060 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfe8:	e853 3f00 	ldrex	r3, [r3]
 800bfec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bfee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bff4:	667b      	str	r3, [r7, #100]	; 0x64
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	461a      	mov	r2, r3
 800bffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bffe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c000:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c002:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c004:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c006:	e841 2300 	strex	r3, r2, [r1]
 800c00a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c00c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d1e6      	bne.n	800bfe0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	3308      	adds	r3, #8
 800c018:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c01c:	e853 3f00 	ldrex	r3, [r3]
 800c020:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c024:	f023 0301 	bic.w	r3, r3, #1
 800c028:	663b      	str	r3, [r7, #96]	; 0x60
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	3308      	adds	r3, #8
 800c030:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c032:	64ba      	str	r2, [r7, #72]	; 0x48
 800c034:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c036:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c038:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c03a:	e841 2300 	strex	r3, r2, [r1]
 800c03e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c042:	2b00      	cmp	r3, #0
 800c044:	d1e5      	bne.n	800c012 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2220      	movs	r2, #32
 800c04a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2220      	movs	r2, #32
 800c050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2200      	movs	r2, #0
 800c058:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800c05c:	2303      	movs	r3, #3
 800c05e:	e068      	b.n	800c132 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f003 0304 	and.w	r3, r3, #4
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d050      	beq.n	800c110 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	69db      	ldr	r3, [r3, #28]
 800c074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c07c:	d148      	bne.n	800c110 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c086:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c090:	e853 3f00 	ldrex	r3, [r3]
 800c094:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c098:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c09c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0a6:	637b      	str	r3, [r7, #52]	; 0x34
 800c0a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0ae:	e841 2300 	strex	r3, r2, [r1]
 800c0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1e6      	bne.n	800c088 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	3308      	adds	r3, #8
 800c0c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	e853 3f00 	ldrex	r3, [r3]
 800c0c8:	613b      	str	r3, [r7, #16]
   return(result);
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	f023 0301 	bic.w	r3, r3, #1
 800c0d0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	3308      	adds	r3, #8
 800c0d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c0da:	623a      	str	r2, [r7, #32]
 800c0dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0de:	69f9      	ldr	r1, [r7, #28]
 800c0e0:	6a3a      	ldr	r2, [r7, #32]
 800c0e2:	e841 2300 	strex	r3, r2, [r1]
 800c0e6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0e8:	69bb      	ldr	r3, [r7, #24]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1e5      	bne.n	800c0ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2220      	movs	r2, #32
 800c0f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2220      	movs	r2, #32
 800c0f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2220      	movs	r2, #32
 800c100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2200      	movs	r2, #0
 800c108:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800c10c:	2303      	movs	r3, #3
 800c10e:	e010      	b.n	800c132 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	69da      	ldr	r2, [r3, #28]
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	4013      	ands	r3, r2
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	bf0c      	ite	eq
 800c120:	2301      	moveq	r3, #1
 800c122:	2300      	movne	r3, #0
 800c124:	b2db      	uxtb	r3, r3
 800c126:	461a      	mov	r2, r3
 800c128:	79fb      	ldrb	r3, [r7, #7]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	f43f af48 	beq.w	800bfc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3770      	adds	r7, #112	; 0x70
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
	...

0800c13c <calloc>:
 800c13c:	4b02      	ldr	r3, [pc, #8]	; (800c148 <calloc+0xc>)
 800c13e:	460a      	mov	r2, r1
 800c140:	4601      	mov	r1, r0
 800c142:	6818      	ldr	r0, [r3, #0]
 800c144:	f000 b802 	b.w	800c14c <_calloc_r>
 800c148:	200009e4 	.word	0x200009e4

0800c14c <_calloc_r>:
 800c14c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c14e:	fba1 2402 	umull	r2, r4, r1, r2
 800c152:	b94c      	cbnz	r4, 800c168 <_calloc_r+0x1c>
 800c154:	4611      	mov	r1, r2
 800c156:	9201      	str	r2, [sp, #4]
 800c158:	f000 fae8 	bl	800c72c <_malloc_r>
 800c15c:	9a01      	ldr	r2, [sp, #4]
 800c15e:	4605      	mov	r5, r0
 800c160:	b930      	cbnz	r0, 800c170 <_calloc_r+0x24>
 800c162:	4628      	mov	r0, r5
 800c164:	b003      	add	sp, #12
 800c166:	bd30      	pop	{r4, r5, pc}
 800c168:	220c      	movs	r2, #12
 800c16a:	6002      	str	r2, [r0, #0]
 800c16c:	2500      	movs	r5, #0
 800c16e:	e7f8      	b.n	800c162 <_calloc_r+0x16>
 800c170:	4621      	mov	r1, r4
 800c172:	f000 fe33 	bl	800cddc <memset>
 800c176:	e7f4      	b.n	800c162 <_calloc_r+0x16>

0800c178 <__cvt>:
 800c178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c17a:	ed2d 8b02 	vpush	{d8}
 800c17e:	eeb0 8b40 	vmov.f64	d8, d0
 800c182:	b085      	sub	sp, #20
 800c184:	4617      	mov	r7, r2
 800c186:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c188:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c18a:	ee18 2a90 	vmov	r2, s17
 800c18e:	f025 0520 	bic.w	r5, r5, #32
 800c192:	2a00      	cmp	r2, #0
 800c194:	bfb6      	itet	lt
 800c196:	222d      	movlt	r2, #45	; 0x2d
 800c198:	2200      	movge	r2, #0
 800c19a:	eeb1 8b40 	vneglt.f64	d8, d0
 800c19e:	2d46      	cmp	r5, #70	; 0x46
 800c1a0:	460c      	mov	r4, r1
 800c1a2:	701a      	strb	r2, [r3, #0]
 800c1a4:	d004      	beq.n	800c1b0 <__cvt+0x38>
 800c1a6:	2d45      	cmp	r5, #69	; 0x45
 800c1a8:	d100      	bne.n	800c1ac <__cvt+0x34>
 800c1aa:	3401      	adds	r4, #1
 800c1ac:	2102      	movs	r1, #2
 800c1ae:	e000      	b.n	800c1b2 <__cvt+0x3a>
 800c1b0:	2103      	movs	r1, #3
 800c1b2:	ab03      	add	r3, sp, #12
 800c1b4:	9301      	str	r3, [sp, #4]
 800c1b6:	ab02      	add	r3, sp, #8
 800c1b8:	9300      	str	r3, [sp, #0]
 800c1ba:	4622      	mov	r2, r4
 800c1bc:	4633      	mov	r3, r6
 800c1be:	eeb0 0b48 	vmov.f64	d0, d8
 800c1c2:	f000 ff09 	bl	800cfd8 <_dtoa_r>
 800c1c6:	2d47      	cmp	r5, #71	; 0x47
 800c1c8:	d101      	bne.n	800c1ce <__cvt+0x56>
 800c1ca:	07fb      	lsls	r3, r7, #31
 800c1cc:	d51a      	bpl.n	800c204 <__cvt+0x8c>
 800c1ce:	2d46      	cmp	r5, #70	; 0x46
 800c1d0:	eb00 0204 	add.w	r2, r0, r4
 800c1d4:	d10c      	bne.n	800c1f0 <__cvt+0x78>
 800c1d6:	7803      	ldrb	r3, [r0, #0]
 800c1d8:	2b30      	cmp	r3, #48	; 0x30
 800c1da:	d107      	bne.n	800c1ec <__cvt+0x74>
 800c1dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e4:	bf1c      	itt	ne
 800c1e6:	f1c4 0401 	rsbne	r4, r4, #1
 800c1ea:	6034      	strne	r4, [r6, #0]
 800c1ec:	6833      	ldr	r3, [r6, #0]
 800c1ee:	441a      	add	r2, r3
 800c1f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f8:	bf08      	it	eq
 800c1fa:	9203      	streq	r2, [sp, #12]
 800c1fc:	2130      	movs	r1, #48	; 0x30
 800c1fe:	9b03      	ldr	r3, [sp, #12]
 800c200:	4293      	cmp	r3, r2
 800c202:	d307      	bcc.n	800c214 <__cvt+0x9c>
 800c204:	9b03      	ldr	r3, [sp, #12]
 800c206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c208:	1a1b      	subs	r3, r3, r0
 800c20a:	6013      	str	r3, [r2, #0]
 800c20c:	b005      	add	sp, #20
 800c20e:	ecbd 8b02 	vpop	{d8}
 800c212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c214:	1c5c      	adds	r4, r3, #1
 800c216:	9403      	str	r4, [sp, #12]
 800c218:	7019      	strb	r1, [r3, #0]
 800c21a:	e7f0      	b.n	800c1fe <__cvt+0x86>

0800c21c <__exponent>:
 800c21c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c21e:	4603      	mov	r3, r0
 800c220:	2900      	cmp	r1, #0
 800c222:	bfb8      	it	lt
 800c224:	4249      	neglt	r1, r1
 800c226:	f803 2b02 	strb.w	r2, [r3], #2
 800c22a:	bfb4      	ite	lt
 800c22c:	222d      	movlt	r2, #45	; 0x2d
 800c22e:	222b      	movge	r2, #43	; 0x2b
 800c230:	2909      	cmp	r1, #9
 800c232:	7042      	strb	r2, [r0, #1]
 800c234:	dd2a      	ble.n	800c28c <__exponent+0x70>
 800c236:	f10d 0207 	add.w	r2, sp, #7
 800c23a:	4617      	mov	r7, r2
 800c23c:	260a      	movs	r6, #10
 800c23e:	4694      	mov	ip, r2
 800c240:	fb91 f5f6 	sdiv	r5, r1, r6
 800c244:	fb06 1415 	mls	r4, r6, r5, r1
 800c248:	3430      	adds	r4, #48	; 0x30
 800c24a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c24e:	460c      	mov	r4, r1
 800c250:	2c63      	cmp	r4, #99	; 0x63
 800c252:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800c256:	4629      	mov	r1, r5
 800c258:	dcf1      	bgt.n	800c23e <__exponent+0x22>
 800c25a:	3130      	adds	r1, #48	; 0x30
 800c25c:	f1ac 0402 	sub.w	r4, ip, #2
 800c260:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c264:	1c41      	adds	r1, r0, #1
 800c266:	4622      	mov	r2, r4
 800c268:	42ba      	cmp	r2, r7
 800c26a:	d30a      	bcc.n	800c282 <__exponent+0x66>
 800c26c:	f10d 0209 	add.w	r2, sp, #9
 800c270:	eba2 020c 	sub.w	r2, r2, ip
 800c274:	42bc      	cmp	r4, r7
 800c276:	bf88      	it	hi
 800c278:	2200      	movhi	r2, #0
 800c27a:	4413      	add	r3, r2
 800c27c:	1a18      	subs	r0, r3, r0
 800c27e:	b003      	add	sp, #12
 800c280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c282:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c286:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c28a:	e7ed      	b.n	800c268 <__exponent+0x4c>
 800c28c:	2330      	movs	r3, #48	; 0x30
 800c28e:	3130      	adds	r1, #48	; 0x30
 800c290:	7083      	strb	r3, [r0, #2]
 800c292:	70c1      	strb	r1, [r0, #3]
 800c294:	1d03      	adds	r3, r0, #4
 800c296:	e7f1      	b.n	800c27c <__exponent+0x60>

0800c298 <_printf_float>:
 800c298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c29c:	b08b      	sub	sp, #44	; 0x2c
 800c29e:	460c      	mov	r4, r1
 800c2a0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c2a4:	4616      	mov	r6, r2
 800c2a6:	461f      	mov	r7, r3
 800c2a8:	4605      	mov	r5, r0
 800c2aa:	f000 fd9f 	bl	800cdec <_localeconv_r>
 800c2ae:	f8d0 b000 	ldr.w	fp, [r0]
 800c2b2:	4658      	mov	r0, fp
 800c2b4:	f7f4 f814 	bl	80002e0 <strlen>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	9308      	str	r3, [sp, #32]
 800c2bc:	f8d8 3000 	ldr.w	r3, [r8]
 800c2c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c2c4:	6822      	ldr	r2, [r4, #0]
 800c2c6:	3307      	adds	r3, #7
 800c2c8:	f023 0307 	bic.w	r3, r3, #7
 800c2cc:	f103 0108 	add.w	r1, r3, #8
 800c2d0:	f8c8 1000 	str.w	r1, [r8]
 800c2d4:	ed93 0b00 	vldr	d0, [r3]
 800c2d8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800c538 <_printf_float+0x2a0>
 800c2dc:	eeb0 7bc0 	vabs.f64	d7, d0
 800c2e0:	eeb4 7b46 	vcmp.f64	d7, d6
 800c2e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2e8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800c2ec:	4682      	mov	sl, r0
 800c2ee:	dd24      	ble.n	800c33a <_printf_float+0xa2>
 800c2f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2f8:	d502      	bpl.n	800c300 <_printf_float+0x68>
 800c2fa:	232d      	movs	r3, #45	; 0x2d
 800c2fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c300:	498f      	ldr	r1, [pc, #572]	; (800c540 <_printf_float+0x2a8>)
 800c302:	4b90      	ldr	r3, [pc, #576]	; (800c544 <_printf_float+0x2ac>)
 800c304:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c308:	bf94      	ite	ls
 800c30a:	4688      	movls	r8, r1
 800c30c:	4698      	movhi	r8, r3
 800c30e:	2303      	movs	r3, #3
 800c310:	6123      	str	r3, [r4, #16]
 800c312:	f022 0204 	bic.w	r2, r2, #4
 800c316:	2300      	movs	r3, #0
 800c318:	6022      	str	r2, [r4, #0]
 800c31a:	9304      	str	r3, [sp, #16]
 800c31c:	9700      	str	r7, [sp, #0]
 800c31e:	4633      	mov	r3, r6
 800c320:	aa09      	add	r2, sp, #36	; 0x24
 800c322:	4621      	mov	r1, r4
 800c324:	4628      	mov	r0, r5
 800c326:	f000 fa81 	bl	800c82c <_printf_common>
 800c32a:	3001      	adds	r0, #1
 800c32c:	f040 808a 	bne.w	800c444 <_printf_float+0x1ac>
 800c330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c334:	b00b      	add	sp, #44	; 0x2c
 800c336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33a:	eeb4 0b40 	vcmp.f64	d0, d0
 800c33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c342:	d709      	bvc.n	800c358 <_printf_float+0xc0>
 800c344:	ee10 3a90 	vmov	r3, s1
 800c348:	2b00      	cmp	r3, #0
 800c34a:	bfbc      	itt	lt
 800c34c:	232d      	movlt	r3, #45	; 0x2d
 800c34e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c352:	497d      	ldr	r1, [pc, #500]	; (800c548 <_printf_float+0x2b0>)
 800c354:	4b7d      	ldr	r3, [pc, #500]	; (800c54c <_printf_float+0x2b4>)
 800c356:	e7d5      	b.n	800c304 <_printf_float+0x6c>
 800c358:	6863      	ldr	r3, [r4, #4]
 800c35a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c35e:	9104      	str	r1, [sp, #16]
 800c360:	1c59      	adds	r1, r3, #1
 800c362:	d13c      	bne.n	800c3de <_printf_float+0x146>
 800c364:	2306      	movs	r3, #6
 800c366:	6063      	str	r3, [r4, #4]
 800c368:	2300      	movs	r3, #0
 800c36a:	9303      	str	r3, [sp, #12]
 800c36c:	ab08      	add	r3, sp, #32
 800c36e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c372:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c376:	ab07      	add	r3, sp, #28
 800c378:	6861      	ldr	r1, [r4, #4]
 800c37a:	9300      	str	r3, [sp, #0]
 800c37c:	6022      	str	r2, [r4, #0]
 800c37e:	f10d 031b 	add.w	r3, sp, #27
 800c382:	4628      	mov	r0, r5
 800c384:	f7ff fef8 	bl	800c178 <__cvt>
 800c388:	9b04      	ldr	r3, [sp, #16]
 800c38a:	9907      	ldr	r1, [sp, #28]
 800c38c:	2b47      	cmp	r3, #71	; 0x47
 800c38e:	4680      	mov	r8, r0
 800c390:	d108      	bne.n	800c3a4 <_printf_float+0x10c>
 800c392:	1cc8      	adds	r0, r1, #3
 800c394:	db02      	blt.n	800c39c <_printf_float+0x104>
 800c396:	6863      	ldr	r3, [r4, #4]
 800c398:	4299      	cmp	r1, r3
 800c39a:	dd41      	ble.n	800c420 <_printf_float+0x188>
 800c39c:	f1a9 0902 	sub.w	r9, r9, #2
 800c3a0:	fa5f f989 	uxtb.w	r9, r9
 800c3a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c3a8:	d820      	bhi.n	800c3ec <_printf_float+0x154>
 800c3aa:	3901      	subs	r1, #1
 800c3ac:	464a      	mov	r2, r9
 800c3ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c3b2:	9107      	str	r1, [sp, #28]
 800c3b4:	f7ff ff32 	bl	800c21c <__exponent>
 800c3b8:	9a08      	ldr	r2, [sp, #32]
 800c3ba:	9004      	str	r0, [sp, #16]
 800c3bc:	1813      	adds	r3, r2, r0
 800c3be:	2a01      	cmp	r2, #1
 800c3c0:	6123      	str	r3, [r4, #16]
 800c3c2:	dc02      	bgt.n	800c3ca <_printf_float+0x132>
 800c3c4:	6822      	ldr	r2, [r4, #0]
 800c3c6:	07d2      	lsls	r2, r2, #31
 800c3c8:	d501      	bpl.n	800c3ce <_printf_float+0x136>
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	6123      	str	r3, [r4, #16]
 800c3ce:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d0a2      	beq.n	800c31c <_printf_float+0x84>
 800c3d6:	232d      	movs	r3, #45	; 0x2d
 800c3d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3dc:	e79e      	b.n	800c31c <_printf_float+0x84>
 800c3de:	9904      	ldr	r1, [sp, #16]
 800c3e0:	2947      	cmp	r1, #71	; 0x47
 800c3e2:	d1c1      	bne.n	800c368 <_printf_float+0xd0>
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1bf      	bne.n	800c368 <_printf_float+0xd0>
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	e7bc      	b.n	800c366 <_printf_float+0xce>
 800c3ec:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c3f0:	d118      	bne.n	800c424 <_printf_float+0x18c>
 800c3f2:	2900      	cmp	r1, #0
 800c3f4:	6863      	ldr	r3, [r4, #4]
 800c3f6:	dd0b      	ble.n	800c410 <_printf_float+0x178>
 800c3f8:	6121      	str	r1, [r4, #16]
 800c3fa:	b913      	cbnz	r3, 800c402 <_printf_float+0x16a>
 800c3fc:	6822      	ldr	r2, [r4, #0]
 800c3fe:	07d0      	lsls	r0, r2, #31
 800c400:	d502      	bpl.n	800c408 <_printf_float+0x170>
 800c402:	3301      	adds	r3, #1
 800c404:	440b      	add	r3, r1
 800c406:	6123      	str	r3, [r4, #16]
 800c408:	2300      	movs	r3, #0
 800c40a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c40c:	9304      	str	r3, [sp, #16]
 800c40e:	e7de      	b.n	800c3ce <_printf_float+0x136>
 800c410:	b913      	cbnz	r3, 800c418 <_printf_float+0x180>
 800c412:	6822      	ldr	r2, [r4, #0]
 800c414:	07d2      	lsls	r2, r2, #31
 800c416:	d501      	bpl.n	800c41c <_printf_float+0x184>
 800c418:	3302      	adds	r3, #2
 800c41a:	e7f4      	b.n	800c406 <_printf_float+0x16e>
 800c41c:	2301      	movs	r3, #1
 800c41e:	e7f2      	b.n	800c406 <_printf_float+0x16e>
 800c420:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c424:	9b08      	ldr	r3, [sp, #32]
 800c426:	4299      	cmp	r1, r3
 800c428:	db05      	blt.n	800c436 <_printf_float+0x19e>
 800c42a:	6823      	ldr	r3, [r4, #0]
 800c42c:	6121      	str	r1, [r4, #16]
 800c42e:	07d8      	lsls	r0, r3, #31
 800c430:	d5ea      	bpl.n	800c408 <_printf_float+0x170>
 800c432:	1c4b      	adds	r3, r1, #1
 800c434:	e7e7      	b.n	800c406 <_printf_float+0x16e>
 800c436:	2900      	cmp	r1, #0
 800c438:	bfd4      	ite	le
 800c43a:	f1c1 0202 	rsble	r2, r1, #2
 800c43e:	2201      	movgt	r2, #1
 800c440:	4413      	add	r3, r2
 800c442:	e7e0      	b.n	800c406 <_printf_float+0x16e>
 800c444:	6823      	ldr	r3, [r4, #0]
 800c446:	055a      	lsls	r2, r3, #21
 800c448:	d407      	bmi.n	800c45a <_printf_float+0x1c2>
 800c44a:	6923      	ldr	r3, [r4, #16]
 800c44c:	4642      	mov	r2, r8
 800c44e:	4631      	mov	r1, r6
 800c450:	4628      	mov	r0, r5
 800c452:	47b8      	blx	r7
 800c454:	3001      	adds	r0, #1
 800c456:	d12a      	bne.n	800c4ae <_printf_float+0x216>
 800c458:	e76a      	b.n	800c330 <_printf_float+0x98>
 800c45a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c45e:	f240 80e0 	bls.w	800c622 <_printf_float+0x38a>
 800c462:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c466:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c46e:	d133      	bne.n	800c4d8 <_printf_float+0x240>
 800c470:	4a37      	ldr	r2, [pc, #220]	; (800c550 <_printf_float+0x2b8>)
 800c472:	2301      	movs	r3, #1
 800c474:	4631      	mov	r1, r6
 800c476:	4628      	mov	r0, r5
 800c478:	47b8      	blx	r7
 800c47a:	3001      	adds	r0, #1
 800c47c:	f43f af58 	beq.w	800c330 <_printf_float+0x98>
 800c480:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c484:	429a      	cmp	r2, r3
 800c486:	db02      	blt.n	800c48e <_printf_float+0x1f6>
 800c488:	6823      	ldr	r3, [r4, #0]
 800c48a:	07d8      	lsls	r0, r3, #31
 800c48c:	d50f      	bpl.n	800c4ae <_printf_float+0x216>
 800c48e:	4653      	mov	r3, sl
 800c490:	465a      	mov	r2, fp
 800c492:	4631      	mov	r1, r6
 800c494:	4628      	mov	r0, r5
 800c496:	47b8      	blx	r7
 800c498:	3001      	adds	r0, #1
 800c49a:	f43f af49 	beq.w	800c330 <_printf_float+0x98>
 800c49e:	f04f 0800 	mov.w	r8, #0
 800c4a2:	f104 091a 	add.w	r9, r4, #26
 800c4a6:	9b08      	ldr	r3, [sp, #32]
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	4543      	cmp	r3, r8
 800c4ac:	dc09      	bgt.n	800c4c2 <_printf_float+0x22a>
 800c4ae:	6823      	ldr	r3, [r4, #0]
 800c4b0:	079b      	lsls	r3, r3, #30
 800c4b2:	f100 8106 	bmi.w	800c6c2 <_printf_float+0x42a>
 800c4b6:	68e0      	ldr	r0, [r4, #12]
 800c4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4ba:	4298      	cmp	r0, r3
 800c4bc:	bfb8      	it	lt
 800c4be:	4618      	movlt	r0, r3
 800c4c0:	e738      	b.n	800c334 <_printf_float+0x9c>
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	464a      	mov	r2, r9
 800c4c6:	4631      	mov	r1, r6
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	47b8      	blx	r7
 800c4cc:	3001      	adds	r0, #1
 800c4ce:	f43f af2f 	beq.w	800c330 <_printf_float+0x98>
 800c4d2:	f108 0801 	add.w	r8, r8, #1
 800c4d6:	e7e6      	b.n	800c4a6 <_printf_float+0x20e>
 800c4d8:	9b07      	ldr	r3, [sp, #28]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	dc3a      	bgt.n	800c554 <_printf_float+0x2bc>
 800c4de:	4a1c      	ldr	r2, [pc, #112]	; (800c550 <_printf_float+0x2b8>)
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	4631      	mov	r1, r6
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	47b8      	blx	r7
 800c4e8:	3001      	adds	r0, #1
 800c4ea:	f43f af21 	beq.w	800c330 <_printf_float+0x98>
 800c4ee:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	d102      	bne.n	800c4fc <_printf_float+0x264>
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	07d9      	lsls	r1, r3, #31
 800c4fa:	d5d8      	bpl.n	800c4ae <_printf_float+0x216>
 800c4fc:	4653      	mov	r3, sl
 800c4fe:	465a      	mov	r2, fp
 800c500:	4631      	mov	r1, r6
 800c502:	4628      	mov	r0, r5
 800c504:	47b8      	blx	r7
 800c506:	3001      	adds	r0, #1
 800c508:	f43f af12 	beq.w	800c330 <_printf_float+0x98>
 800c50c:	f04f 0900 	mov.w	r9, #0
 800c510:	f104 0a1a 	add.w	sl, r4, #26
 800c514:	9b07      	ldr	r3, [sp, #28]
 800c516:	425b      	negs	r3, r3
 800c518:	454b      	cmp	r3, r9
 800c51a:	dc01      	bgt.n	800c520 <_printf_float+0x288>
 800c51c:	9b08      	ldr	r3, [sp, #32]
 800c51e:	e795      	b.n	800c44c <_printf_float+0x1b4>
 800c520:	2301      	movs	r3, #1
 800c522:	4652      	mov	r2, sl
 800c524:	4631      	mov	r1, r6
 800c526:	4628      	mov	r0, r5
 800c528:	47b8      	blx	r7
 800c52a:	3001      	adds	r0, #1
 800c52c:	f43f af00 	beq.w	800c330 <_printf_float+0x98>
 800c530:	f109 0901 	add.w	r9, r9, #1
 800c534:	e7ee      	b.n	800c514 <_printf_float+0x27c>
 800c536:	bf00      	nop
 800c538:	ffffffff 	.word	0xffffffff
 800c53c:	7fefffff 	.word	0x7fefffff
 800c540:	0808fc2c 	.word	0x0808fc2c
 800c544:	0808fc30 	.word	0x0808fc30
 800c548:	0808fc34 	.word	0x0808fc34
 800c54c:	0808fc38 	.word	0x0808fc38
 800c550:	0808fc3c 	.word	0x0808fc3c
 800c554:	9a08      	ldr	r2, [sp, #32]
 800c556:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c558:	429a      	cmp	r2, r3
 800c55a:	bfa8      	it	ge
 800c55c:	461a      	movge	r2, r3
 800c55e:	2a00      	cmp	r2, #0
 800c560:	4691      	mov	r9, r2
 800c562:	dc38      	bgt.n	800c5d6 <_printf_float+0x33e>
 800c564:	2300      	movs	r3, #0
 800c566:	9305      	str	r3, [sp, #20]
 800c568:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c56c:	f104 021a 	add.w	r2, r4, #26
 800c570:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c572:	9905      	ldr	r1, [sp, #20]
 800c574:	9304      	str	r3, [sp, #16]
 800c576:	eba3 0309 	sub.w	r3, r3, r9
 800c57a:	428b      	cmp	r3, r1
 800c57c:	dc33      	bgt.n	800c5e6 <_printf_float+0x34e>
 800c57e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c582:	429a      	cmp	r2, r3
 800c584:	db3c      	blt.n	800c600 <_printf_float+0x368>
 800c586:	6823      	ldr	r3, [r4, #0]
 800c588:	07da      	lsls	r2, r3, #31
 800c58a:	d439      	bmi.n	800c600 <_printf_float+0x368>
 800c58c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c590:	eba2 0903 	sub.w	r9, r2, r3
 800c594:	9b04      	ldr	r3, [sp, #16]
 800c596:	1ad2      	subs	r2, r2, r3
 800c598:	4591      	cmp	r9, r2
 800c59a:	bfa8      	it	ge
 800c59c:	4691      	movge	r9, r2
 800c59e:	f1b9 0f00 	cmp.w	r9, #0
 800c5a2:	dc35      	bgt.n	800c610 <_printf_float+0x378>
 800c5a4:	f04f 0800 	mov.w	r8, #0
 800c5a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5ac:	f104 0a1a 	add.w	sl, r4, #26
 800c5b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c5b4:	1a9b      	subs	r3, r3, r2
 800c5b6:	eba3 0309 	sub.w	r3, r3, r9
 800c5ba:	4543      	cmp	r3, r8
 800c5bc:	f77f af77 	ble.w	800c4ae <_printf_float+0x216>
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	4652      	mov	r2, sl
 800c5c4:	4631      	mov	r1, r6
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	47b8      	blx	r7
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	f43f aeb0 	beq.w	800c330 <_printf_float+0x98>
 800c5d0:	f108 0801 	add.w	r8, r8, #1
 800c5d4:	e7ec      	b.n	800c5b0 <_printf_float+0x318>
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	4631      	mov	r1, r6
 800c5da:	4642      	mov	r2, r8
 800c5dc:	4628      	mov	r0, r5
 800c5de:	47b8      	blx	r7
 800c5e0:	3001      	adds	r0, #1
 800c5e2:	d1bf      	bne.n	800c564 <_printf_float+0x2cc>
 800c5e4:	e6a4      	b.n	800c330 <_printf_float+0x98>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	4631      	mov	r1, r6
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	9204      	str	r2, [sp, #16]
 800c5ee:	47b8      	blx	r7
 800c5f0:	3001      	adds	r0, #1
 800c5f2:	f43f ae9d 	beq.w	800c330 <_printf_float+0x98>
 800c5f6:	9b05      	ldr	r3, [sp, #20]
 800c5f8:	9a04      	ldr	r2, [sp, #16]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	9305      	str	r3, [sp, #20]
 800c5fe:	e7b7      	b.n	800c570 <_printf_float+0x2d8>
 800c600:	4653      	mov	r3, sl
 800c602:	465a      	mov	r2, fp
 800c604:	4631      	mov	r1, r6
 800c606:	4628      	mov	r0, r5
 800c608:	47b8      	blx	r7
 800c60a:	3001      	adds	r0, #1
 800c60c:	d1be      	bne.n	800c58c <_printf_float+0x2f4>
 800c60e:	e68f      	b.n	800c330 <_printf_float+0x98>
 800c610:	9a04      	ldr	r2, [sp, #16]
 800c612:	464b      	mov	r3, r9
 800c614:	4442      	add	r2, r8
 800c616:	4631      	mov	r1, r6
 800c618:	4628      	mov	r0, r5
 800c61a:	47b8      	blx	r7
 800c61c:	3001      	adds	r0, #1
 800c61e:	d1c1      	bne.n	800c5a4 <_printf_float+0x30c>
 800c620:	e686      	b.n	800c330 <_printf_float+0x98>
 800c622:	9a08      	ldr	r2, [sp, #32]
 800c624:	2a01      	cmp	r2, #1
 800c626:	dc01      	bgt.n	800c62c <_printf_float+0x394>
 800c628:	07db      	lsls	r3, r3, #31
 800c62a:	d537      	bpl.n	800c69c <_printf_float+0x404>
 800c62c:	2301      	movs	r3, #1
 800c62e:	4642      	mov	r2, r8
 800c630:	4631      	mov	r1, r6
 800c632:	4628      	mov	r0, r5
 800c634:	47b8      	blx	r7
 800c636:	3001      	adds	r0, #1
 800c638:	f43f ae7a 	beq.w	800c330 <_printf_float+0x98>
 800c63c:	4653      	mov	r3, sl
 800c63e:	465a      	mov	r2, fp
 800c640:	4631      	mov	r1, r6
 800c642:	4628      	mov	r0, r5
 800c644:	47b8      	blx	r7
 800c646:	3001      	adds	r0, #1
 800c648:	f43f ae72 	beq.w	800c330 <_printf_float+0x98>
 800c64c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c650:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c658:	9b08      	ldr	r3, [sp, #32]
 800c65a:	d01a      	beq.n	800c692 <_printf_float+0x3fa>
 800c65c:	3b01      	subs	r3, #1
 800c65e:	f108 0201 	add.w	r2, r8, #1
 800c662:	4631      	mov	r1, r6
 800c664:	4628      	mov	r0, r5
 800c666:	47b8      	blx	r7
 800c668:	3001      	adds	r0, #1
 800c66a:	d10e      	bne.n	800c68a <_printf_float+0x3f2>
 800c66c:	e660      	b.n	800c330 <_printf_float+0x98>
 800c66e:	2301      	movs	r3, #1
 800c670:	464a      	mov	r2, r9
 800c672:	4631      	mov	r1, r6
 800c674:	4628      	mov	r0, r5
 800c676:	47b8      	blx	r7
 800c678:	3001      	adds	r0, #1
 800c67a:	f43f ae59 	beq.w	800c330 <_printf_float+0x98>
 800c67e:	f108 0801 	add.w	r8, r8, #1
 800c682:	9b08      	ldr	r3, [sp, #32]
 800c684:	3b01      	subs	r3, #1
 800c686:	4543      	cmp	r3, r8
 800c688:	dcf1      	bgt.n	800c66e <_printf_float+0x3d6>
 800c68a:	9b04      	ldr	r3, [sp, #16]
 800c68c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c690:	e6dd      	b.n	800c44e <_printf_float+0x1b6>
 800c692:	f04f 0800 	mov.w	r8, #0
 800c696:	f104 091a 	add.w	r9, r4, #26
 800c69a:	e7f2      	b.n	800c682 <_printf_float+0x3ea>
 800c69c:	2301      	movs	r3, #1
 800c69e:	4642      	mov	r2, r8
 800c6a0:	e7df      	b.n	800c662 <_printf_float+0x3ca>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	464a      	mov	r2, r9
 800c6a6:	4631      	mov	r1, r6
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	47b8      	blx	r7
 800c6ac:	3001      	adds	r0, #1
 800c6ae:	f43f ae3f 	beq.w	800c330 <_printf_float+0x98>
 800c6b2:	f108 0801 	add.w	r8, r8, #1
 800c6b6:	68e3      	ldr	r3, [r4, #12]
 800c6b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6ba:	1a5b      	subs	r3, r3, r1
 800c6bc:	4543      	cmp	r3, r8
 800c6be:	dcf0      	bgt.n	800c6a2 <_printf_float+0x40a>
 800c6c0:	e6f9      	b.n	800c4b6 <_printf_float+0x21e>
 800c6c2:	f04f 0800 	mov.w	r8, #0
 800c6c6:	f104 0919 	add.w	r9, r4, #25
 800c6ca:	e7f4      	b.n	800c6b6 <_printf_float+0x41e>

0800c6cc <malloc>:
 800c6cc:	4b02      	ldr	r3, [pc, #8]	; (800c6d8 <malloc+0xc>)
 800c6ce:	4601      	mov	r1, r0
 800c6d0:	6818      	ldr	r0, [r3, #0]
 800c6d2:	f000 b82b 	b.w	800c72c <_malloc_r>
 800c6d6:	bf00      	nop
 800c6d8:	200009e4 	.word	0x200009e4

0800c6dc <free>:
 800c6dc:	4b02      	ldr	r3, [pc, #8]	; (800c6e8 <free+0xc>)
 800c6de:	4601      	mov	r1, r0
 800c6e0:	6818      	ldr	r0, [r3, #0]
 800c6e2:	f001 b9e5 	b.w	800dab0 <_free_r>
 800c6e6:	bf00      	nop
 800c6e8:	200009e4 	.word	0x200009e4

0800c6ec <sbrk_aligned>:
 800c6ec:	b570      	push	{r4, r5, r6, lr}
 800c6ee:	4e0e      	ldr	r6, [pc, #56]	; (800c728 <sbrk_aligned+0x3c>)
 800c6f0:	460c      	mov	r4, r1
 800c6f2:	6831      	ldr	r1, [r6, #0]
 800c6f4:	4605      	mov	r5, r0
 800c6f6:	b911      	cbnz	r1, 800c6fe <sbrk_aligned+0x12>
 800c6f8:	f000 fb7c 	bl	800cdf4 <_sbrk_r>
 800c6fc:	6030      	str	r0, [r6, #0]
 800c6fe:	4621      	mov	r1, r4
 800c700:	4628      	mov	r0, r5
 800c702:	f000 fb77 	bl	800cdf4 <_sbrk_r>
 800c706:	1c43      	adds	r3, r0, #1
 800c708:	d00a      	beq.n	800c720 <sbrk_aligned+0x34>
 800c70a:	1cc4      	adds	r4, r0, #3
 800c70c:	f024 0403 	bic.w	r4, r4, #3
 800c710:	42a0      	cmp	r0, r4
 800c712:	d007      	beq.n	800c724 <sbrk_aligned+0x38>
 800c714:	1a21      	subs	r1, r4, r0
 800c716:	4628      	mov	r0, r5
 800c718:	f000 fb6c 	bl	800cdf4 <_sbrk_r>
 800c71c:	3001      	adds	r0, #1
 800c71e:	d101      	bne.n	800c724 <sbrk_aligned+0x38>
 800c720:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c724:	4620      	mov	r0, r4
 800c726:	bd70      	pop	{r4, r5, r6, pc}
 800c728:	20002f54 	.word	0x20002f54

0800c72c <_malloc_r>:
 800c72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c730:	1ccd      	adds	r5, r1, #3
 800c732:	f025 0503 	bic.w	r5, r5, #3
 800c736:	3508      	adds	r5, #8
 800c738:	2d0c      	cmp	r5, #12
 800c73a:	bf38      	it	cc
 800c73c:	250c      	movcc	r5, #12
 800c73e:	2d00      	cmp	r5, #0
 800c740:	4607      	mov	r7, r0
 800c742:	db01      	blt.n	800c748 <_malloc_r+0x1c>
 800c744:	42a9      	cmp	r1, r5
 800c746:	d905      	bls.n	800c754 <_malloc_r+0x28>
 800c748:	230c      	movs	r3, #12
 800c74a:	603b      	str	r3, [r7, #0]
 800c74c:	2600      	movs	r6, #0
 800c74e:	4630      	mov	r0, r6
 800c750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c754:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c828 <_malloc_r+0xfc>
 800c758:	f000 f9f8 	bl	800cb4c <__malloc_lock>
 800c75c:	f8d8 3000 	ldr.w	r3, [r8]
 800c760:	461c      	mov	r4, r3
 800c762:	bb5c      	cbnz	r4, 800c7bc <_malloc_r+0x90>
 800c764:	4629      	mov	r1, r5
 800c766:	4638      	mov	r0, r7
 800c768:	f7ff ffc0 	bl	800c6ec <sbrk_aligned>
 800c76c:	1c43      	adds	r3, r0, #1
 800c76e:	4604      	mov	r4, r0
 800c770:	d155      	bne.n	800c81e <_malloc_r+0xf2>
 800c772:	f8d8 4000 	ldr.w	r4, [r8]
 800c776:	4626      	mov	r6, r4
 800c778:	2e00      	cmp	r6, #0
 800c77a:	d145      	bne.n	800c808 <_malloc_r+0xdc>
 800c77c:	2c00      	cmp	r4, #0
 800c77e:	d048      	beq.n	800c812 <_malloc_r+0xe6>
 800c780:	6823      	ldr	r3, [r4, #0]
 800c782:	4631      	mov	r1, r6
 800c784:	4638      	mov	r0, r7
 800c786:	eb04 0903 	add.w	r9, r4, r3
 800c78a:	f000 fb33 	bl	800cdf4 <_sbrk_r>
 800c78e:	4581      	cmp	r9, r0
 800c790:	d13f      	bne.n	800c812 <_malloc_r+0xe6>
 800c792:	6821      	ldr	r1, [r4, #0]
 800c794:	1a6d      	subs	r5, r5, r1
 800c796:	4629      	mov	r1, r5
 800c798:	4638      	mov	r0, r7
 800c79a:	f7ff ffa7 	bl	800c6ec <sbrk_aligned>
 800c79e:	3001      	adds	r0, #1
 800c7a0:	d037      	beq.n	800c812 <_malloc_r+0xe6>
 800c7a2:	6823      	ldr	r3, [r4, #0]
 800c7a4:	442b      	add	r3, r5
 800c7a6:	6023      	str	r3, [r4, #0]
 800c7a8:	f8d8 3000 	ldr.w	r3, [r8]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d038      	beq.n	800c822 <_malloc_r+0xf6>
 800c7b0:	685a      	ldr	r2, [r3, #4]
 800c7b2:	42a2      	cmp	r2, r4
 800c7b4:	d12b      	bne.n	800c80e <_malloc_r+0xe2>
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	605a      	str	r2, [r3, #4]
 800c7ba:	e00f      	b.n	800c7dc <_malloc_r+0xb0>
 800c7bc:	6822      	ldr	r2, [r4, #0]
 800c7be:	1b52      	subs	r2, r2, r5
 800c7c0:	d41f      	bmi.n	800c802 <_malloc_r+0xd6>
 800c7c2:	2a0b      	cmp	r2, #11
 800c7c4:	d917      	bls.n	800c7f6 <_malloc_r+0xca>
 800c7c6:	1961      	adds	r1, r4, r5
 800c7c8:	42a3      	cmp	r3, r4
 800c7ca:	6025      	str	r5, [r4, #0]
 800c7cc:	bf18      	it	ne
 800c7ce:	6059      	strne	r1, [r3, #4]
 800c7d0:	6863      	ldr	r3, [r4, #4]
 800c7d2:	bf08      	it	eq
 800c7d4:	f8c8 1000 	streq.w	r1, [r8]
 800c7d8:	5162      	str	r2, [r4, r5]
 800c7da:	604b      	str	r3, [r1, #4]
 800c7dc:	4638      	mov	r0, r7
 800c7de:	f104 060b 	add.w	r6, r4, #11
 800c7e2:	f000 f9b9 	bl	800cb58 <__malloc_unlock>
 800c7e6:	f026 0607 	bic.w	r6, r6, #7
 800c7ea:	1d23      	adds	r3, r4, #4
 800c7ec:	1af2      	subs	r2, r6, r3
 800c7ee:	d0ae      	beq.n	800c74e <_malloc_r+0x22>
 800c7f0:	1b9b      	subs	r3, r3, r6
 800c7f2:	50a3      	str	r3, [r4, r2]
 800c7f4:	e7ab      	b.n	800c74e <_malloc_r+0x22>
 800c7f6:	42a3      	cmp	r3, r4
 800c7f8:	6862      	ldr	r2, [r4, #4]
 800c7fa:	d1dd      	bne.n	800c7b8 <_malloc_r+0x8c>
 800c7fc:	f8c8 2000 	str.w	r2, [r8]
 800c800:	e7ec      	b.n	800c7dc <_malloc_r+0xb0>
 800c802:	4623      	mov	r3, r4
 800c804:	6864      	ldr	r4, [r4, #4]
 800c806:	e7ac      	b.n	800c762 <_malloc_r+0x36>
 800c808:	4634      	mov	r4, r6
 800c80a:	6876      	ldr	r6, [r6, #4]
 800c80c:	e7b4      	b.n	800c778 <_malloc_r+0x4c>
 800c80e:	4613      	mov	r3, r2
 800c810:	e7cc      	b.n	800c7ac <_malloc_r+0x80>
 800c812:	230c      	movs	r3, #12
 800c814:	603b      	str	r3, [r7, #0]
 800c816:	4638      	mov	r0, r7
 800c818:	f000 f99e 	bl	800cb58 <__malloc_unlock>
 800c81c:	e797      	b.n	800c74e <_malloc_r+0x22>
 800c81e:	6025      	str	r5, [r4, #0]
 800c820:	e7dc      	b.n	800c7dc <_malloc_r+0xb0>
 800c822:	605b      	str	r3, [r3, #4]
 800c824:	deff      	udf	#255	; 0xff
 800c826:	bf00      	nop
 800c828:	20002f50 	.word	0x20002f50

0800c82c <_printf_common>:
 800c82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c830:	4616      	mov	r6, r2
 800c832:	4699      	mov	r9, r3
 800c834:	688a      	ldr	r2, [r1, #8]
 800c836:	690b      	ldr	r3, [r1, #16]
 800c838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c83c:	4293      	cmp	r3, r2
 800c83e:	bfb8      	it	lt
 800c840:	4613      	movlt	r3, r2
 800c842:	6033      	str	r3, [r6, #0]
 800c844:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c848:	4607      	mov	r7, r0
 800c84a:	460c      	mov	r4, r1
 800c84c:	b10a      	cbz	r2, 800c852 <_printf_common+0x26>
 800c84e:	3301      	adds	r3, #1
 800c850:	6033      	str	r3, [r6, #0]
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	0699      	lsls	r1, r3, #26
 800c856:	bf42      	ittt	mi
 800c858:	6833      	ldrmi	r3, [r6, #0]
 800c85a:	3302      	addmi	r3, #2
 800c85c:	6033      	strmi	r3, [r6, #0]
 800c85e:	6825      	ldr	r5, [r4, #0]
 800c860:	f015 0506 	ands.w	r5, r5, #6
 800c864:	d106      	bne.n	800c874 <_printf_common+0x48>
 800c866:	f104 0a19 	add.w	sl, r4, #25
 800c86a:	68e3      	ldr	r3, [r4, #12]
 800c86c:	6832      	ldr	r2, [r6, #0]
 800c86e:	1a9b      	subs	r3, r3, r2
 800c870:	42ab      	cmp	r3, r5
 800c872:	dc26      	bgt.n	800c8c2 <_printf_common+0x96>
 800c874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c878:	1e13      	subs	r3, r2, #0
 800c87a:	6822      	ldr	r2, [r4, #0]
 800c87c:	bf18      	it	ne
 800c87e:	2301      	movne	r3, #1
 800c880:	0692      	lsls	r2, r2, #26
 800c882:	d42b      	bmi.n	800c8dc <_printf_common+0xb0>
 800c884:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c888:	4649      	mov	r1, r9
 800c88a:	4638      	mov	r0, r7
 800c88c:	47c0      	blx	r8
 800c88e:	3001      	adds	r0, #1
 800c890:	d01e      	beq.n	800c8d0 <_printf_common+0xa4>
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	6922      	ldr	r2, [r4, #16]
 800c896:	f003 0306 	and.w	r3, r3, #6
 800c89a:	2b04      	cmp	r3, #4
 800c89c:	bf02      	ittt	eq
 800c89e:	68e5      	ldreq	r5, [r4, #12]
 800c8a0:	6833      	ldreq	r3, [r6, #0]
 800c8a2:	1aed      	subeq	r5, r5, r3
 800c8a4:	68a3      	ldr	r3, [r4, #8]
 800c8a6:	bf0c      	ite	eq
 800c8a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8ac:	2500      	movne	r5, #0
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	bfc4      	itt	gt
 800c8b2:	1a9b      	subgt	r3, r3, r2
 800c8b4:	18ed      	addgt	r5, r5, r3
 800c8b6:	2600      	movs	r6, #0
 800c8b8:	341a      	adds	r4, #26
 800c8ba:	42b5      	cmp	r5, r6
 800c8bc:	d11a      	bne.n	800c8f4 <_printf_common+0xc8>
 800c8be:	2000      	movs	r0, #0
 800c8c0:	e008      	b.n	800c8d4 <_printf_common+0xa8>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	4652      	mov	r2, sl
 800c8c6:	4649      	mov	r1, r9
 800c8c8:	4638      	mov	r0, r7
 800c8ca:	47c0      	blx	r8
 800c8cc:	3001      	adds	r0, #1
 800c8ce:	d103      	bne.n	800c8d8 <_printf_common+0xac>
 800c8d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d8:	3501      	adds	r5, #1
 800c8da:	e7c6      	b.n	800c86a <_printf_common+0x3e>
 800c8dc:	18e1      	adds	r1, r4, r3
 800c8de:	1c5a      	adds	r2, r3, #1
 800c8e0:	2030      	movs	r0, #48	; 0x30
 800c8e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8e6:	4422      	add	r2, r4
 800c8e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8f0:	3302      	adds	r3, #2
 800c8f2:	e7c7      	b.n	800c884 <_printf_common+0x58>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	4622      	mov	r2, r4
 800c8f8:	4649      	mov	r1, r9
 800c8fa:	4638      	mov	r0, r7
 800c8fc:	47c0      	blx	r8
 800c8fe:	3001      	adds	r0, #1
 800c900:	d0e6      	beq.n	800c8d0 <_printf_common+0xa4>
 800c902:	3601      	adds	r6, #1
 800c904:	e7d9      	b.n	800c8ba <_printf_common+0x8e>
	...

0800c908 <_printf_i>:
 800c908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c90c:	7e0f      	ldrb	r7, [r1, #24]
 800c90e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c910:	2f78      	cmp	r7, #120	; 0x78
 800c912:	4691      	mov	r9, r2
 800c914:	4680      	mov	r8, r0
 800c916:	460c      	mov	r4, r1
 800c918:	469a      	mov	sl, r3
 800c91a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c91e:	d807      	bhi.n	800c930 <_printf_i+0x28>
 800c920:	2f62      	cmp	r7, #98	; 0x62
 800c922:	d80a      	bhi.n	800c93a <_printf_i+0x32>
 800c924:	2f00      	cmp	r7, #0
 800c926:	f000 80d4 	beq.w	800cad2 <_printf_i+0x1ca>
 800c92a:	2f58      	cmp	r7, #88	; 0x58
 800c92c:	f000 80c0 	beq.w	800cab0 <_printf_i+0x1a8>
 800c930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c934:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c938:	e03a      	b.n	800c9b0 <_printf_i+0xa8>
 800c93a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c93e:	2b15      	cmp	r3, #21
 800c940:	d8f6      	bhi.n	800c930 <_printf_i+0x28>
 800c942:	a101      	add	r1, pc, #4	; (adr r1, 800c948 <_printf_i+0x40>)
 800c944:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c948:	0800c9a1 	.word	0x0800c9a1
 800c94c:	0800c9b5 	.word	0x0800c9b5
 800c950:	0800c931 	.word	0x0800c931
 800c954:	0800c931 	.word	0x0800c931
 800c958:	0800c931 	.word	0x0800c931
 800c95c:	0800c931 	.word	0x0800c931
 800c960:	0800c9b5 	.word	0x0800c9b5
 800c964:	0800c931 	.word	0x0800c931
 800c968:	0800c931 	.word	0x0800c931
 800c96c:	0800c931 	.word	0x0800c931
 800c970:	0800c931 	.word	0x0800c931
 800c974:	0800cab9 	.word	0x0800cab9
 800c978:	0800c9e1 	.word	0x0800c9e1
 800c97c:	0800ca73 	.word	0x0800ca73
 800c980:	0800c931 	.word	0x0800c931
 800c984:	0800c931 	.word	0x0800c931
 800c988:	0800cadb 	.word	0x0800cadb
 800c98c:	0800c931 	.word	0x0800c931
 800c990:	0800c9e1 	.word	0x0800c9e1
 800c994:	0800c931 	.word	0x0800c931
 800c998:	0800c931 	.word	0x0800c931
 800c99c:	0800ca7b 	.word	0x0800ca7b
 800c9a0:	682b      	ldr	r3, [r5, #0]
 800c9a2:	1d1a      	adds	r2, r3, #4
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	602a      	str	r2, [r5, #0]
 800c9a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	e09f      	b.n	800caf4 <_printf_i+0x1ec>
 800c9b4:	6820      	ldr	r0, [r4, #0]
 800c9b6:	682b      	ldr	r3, [r5, #0]
 800c9b8:	0607      	lsls	r7, r0, #24
 800c9ba:	f103 0104 	add.w	r1, r3, #4
 800c9be:	6029      	str	r1, [r5, #0]
 800c9c0:	d501      	bpl.n	800c9c6 <_printf_i+0xbe>
 800c9c2:	681e      	ldr	r6, [r3, #0]
 800c9c4:	e003      	b.n	800c9ce <_printf_i+0xc6>
 800c9c6:	0646      	lsls	r6, r0, #25
 800c9c8:	d5fb      	bpl.n	800c9c2 <_printf_i+0xba>
 800c9ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c9ce:	2e00      	cmp	r6, #0
 800c9d0:	da03      	bge.n	800c9da <_printf_i+0xd2>
 800c9d2:	232d      	movs	r3, #45	; 0x2d
 800c9d4:	4276      	negs	r6, r6
 800c9d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9da:	485a      	ldr	r0, [pc, #360]	; (800cb44 <_printf_i+0x23c>)
 800c9dc:	230a      	movs	r3, #10
 800c9de:	e012      	b.n	800ca06 <_printf_i+0xfe>
 800c9e0:	682b      	ldr	r3, [r5, #0]
 800c9e2:	6820      	ldr	r0, [r4, #0]
 800c9e4:	1d19      	adds	r1, r3, #4
 800c9e6:	6029      	str	r1, [r5, #0]
 800c9e8:	0605      	lsls	r5, r0, #24
 800c9ea:	d501      	bpl.n	800c9f0 <_printf_i+0xe8>
 800c9ec:	681e      	ldr	r6, [r3, #0]
 800c9ee:	e002      	b.n	800c9f6 <_printf_i+0xee>
 800c9f0:	0641      	lsls	r1, r0, #25
 800c9f2:	d5fb      	bpl.n	800c9ec <_printf_i+0xe4>
 800c9f4:	881e      	ldrh	r6, [r3, #0]
 800c9f6:	4853      	ldr	r0, [pc, #332]	; (800cb44 <_printf_i+0x23c>)
 800c9f8:	2f6f      	cmp	r7, #111	; 0x6f
 800c9fa:	bf0c      	ite	eq
 800c9fc:	2308      	moveq	r3, #8
 800c9fe:	230a      	movne	r3, #10
 800ca00:	2100      	movs	r1, #0
 800ca02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca06:	6865      	ldr	r5, [r4, #4]
 800ca08:	60a5      	str	r5, [r4, #8]
 800ca0a:	2d00      	cmp	r5, #0
 800ca0c:	bfa2      	ittt	ge
 800ca0e:	6821      	ldrge	r1, [r4, #0]
 800ca10:	f021 0104 	bicge.w	r1, r1, #4
 800ca14:	6021      	strge	r1, [r4, #0]
 800ca16:	b90e      	cbnz	r6, 800ca1c <_printf_i+0x114>
 800ca18:	2d00      	cmp	r5, #0
 800ca1a:	d04b      	beq.n	800cab4 <_printf_i+0x1ac>
 800ca1c:	4615      	mov	r5, r2
 800ca1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca22:	fb03 6711 	mls	r7, r3, r1, r6
 800ca26:	5dc7      	ldrb	r7, [r0, r7]
 800ca28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca2c:	4637      	mov	r7, r6
 800ca2e:	42bb      	cmp	r3, r7
 800ca30:	460e      	mov	r6, r1
 800ca32:	d9f4      	bls.n	800ca1e <_printf_i+0x116>
 800ca34:	2b08      	cmp	r3, #8
 800ca36:	d10b      	bne.n	800ca50 <_printf_i+0x148>
 800ca38:	6823      	ldr	r3, [r4, #0]
 800ca3a:	07de      	lsls	r6, r3, #31
 800ca3c:	d508      	bpl.n	800ca50 <_printf_i+0x148>
 800ca3e:	6923      	ldr	r3, [r4, #16]
 800ca40:	6861      	ldr	r1, [r4, #4]
 800ca42:	4299      	cmp	r1, r3
 800ca44:	bfde      	ittt	le
 800ca46:	2330      	movle	r3, #48	; 0x30
 800ca48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca4c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ca50:	1b52      	subs	r2, r2, r5
 800ca52:	6122      	str	r2, [r4, #16]
 800ca54:	f8cd a000 	str.w	sl, [sp]
 800ca58:	464b      	mov	r3, r9
 800ca5a:	aa03      	add	r2, sp, #12
 800ca5c:	4621      	mov	r1, r4
 800ca5e:	4640      	mov	r0, r8
 800ca60:	f7ff fee4 	bl	800c82c <_printf_common>
 800ca64:	3001      	adds	r0, #1
 800ca66:	d14a      	bne.n	800cafe <_printf_i+0x1f6>
 800ca68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca6c:	b004      	add	sp, #16
 800ca6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca72:	6823      	ldr	r3, [r4, #0]
 800ca74:	f043 0320 	orr.w	r3, r3, #32
 800ca78:	6023      	str	r3, [r4, #0]
 800ca7a:	4833      	ldr	r0, [pc, #204]	; (800cb48 <_printf_i+0x240>)
 800ca7c:	2778      	movs	r7, #120	; 0x78
 800ca7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	6829      	ldr	r1, [r5, #0]
 800ca86:	061f      	lsls	r7, r3, #24
 800ca88:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca8c:	d402      	bmi.n	800ca94 <_printf_i+0x18c>
 800ca8e:	065f      	lsls	r7, r3, #25
 800ca90:	bf48      	it	mi
 800ca92:	b2b6      	uxthmi	r6, r6
 800ca94:	07df      	lsls	r7, r3, #31
 800ca96:	bf48      	it	mi
 800ca98:	f043 0320 	orrmi.w	r3, r3, #32
 800ca9c:	6029      	str	r1, [r5, #0]
 800ca9e:	bf48      	it	mi
 800caa0:	6023      	strmi	r3, [r4, #0]
 800caa2:	b91e      	cbnz	r6, 800caac <_printf_i+0x1a4>
 800caa4:	6823      	ldr	r3, [r4, #0]
 800caa6:	f023 0320 	bic.w	r3, r3, #32
 800caaa:	6023      	str	r3, [r4, #0]
 800caac:	2310      	movs	r3, #16
 800caae:	e7a7      	b.n	800ca00 <_printf_i+0xf8>
 800cab0:	4824      	ldr	r0, [pc, #144]	; (800cb44 <_printf_i+0x23c>)
 800cab2:	e7e4      	b.n	800ca7e <_printf_i+0x176>
 800cab4:	4615      	mov	r5, r2
 800cab6:	e7bd      	b.n	800ca34 <_printf_i+0x12c>
 800cab8:	682b      	ldr	r3, [r5, #0]
 800caba:	6826      	ldr	r6, [r4, #0]
 800cabc:	6961      	ldr	r1, [r4, #20]
 800cabe:	1d18      	adds	r0, r3, #4
 800cac0:	6028      	str	r0, [r5, #0]
 800cac2:	0635      	lsls	r5, r6, #24
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	d501      	bpl.n	800cacc <_printf_i+0x1c4>
 800cac8:	6019      	str	r1, [r3, #0]
 800caca:	e002      	b.n	800cad2 <_printf_i+0x1ca>
 800cacc:	0670      	lsls	r0, r6, #25
 800cace:	d5fb      	bpl.n	800cac8 <_printf_i+0x1c0>
 800cad0:	8019      	strh	r1, [r3, #0]
 800cad2:	2300      	movs	r3, #0
 800cad4:	6123      	str	r3, [r4, #16]
 800cad6:	4615      	mov	r5, r2
 800cad8:	e7bc      	b.n	800ca54 <_printf_i+0x14c>
 800cada:	682b      	ldr	r3, [r5, #0]
 800cadc:	1d1a      	adds	r2, r3, #4
 800cade:	602a      	str	r2, [r5, #0]
 800cae0:	681d      	ldr	r5, [r3, #0]
 800cae2:	6862      	ldr	r2, [r4, #4]
 800cae4:	2100      	movs	r1, #0
 800cae6:	4628      	mov	r0, r5
 800cae8:	f7f3 fbaa 	bl	8000240 <memchr>
 800caec:	b108      	cbz	r0, 800caf2 <_printf_i+0x1ea>
 800caee:	1b40      	subs	r0, r0, r5
 800caf0:	6060      	str	r0, [r4, #4]
 800caf2:	6863      	ldr	r3, [r4, #4]
 800caf4:	6123      	str	r3, [r4, #16]
 800caf6:	2300      	movs	r3, #0
 800caf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cafc:	e7aa      	b.n	800ca54 <_printf_i+0x14c>
 800cafe:	6923      	ldr	r3, [r4, #16]
 800cb00:	462a      	mov	r2, r5
 800cb02:	4649      	mov	r1, r9
 800cb04:	4640      	mov	r0, r8
 800cb06:	47d0      	blx	sl
 800cb08:	3001      	adds	r0, #1
 800cb0a:	d0ad      	beq.n	800ca68 <_printf_i+0x160>
 800cb0c:	6823      	ldr	r3, [r4, #0]
 800cb0e:	079b      	lsls	r3, r3, #30
 800cb10:	d413      	bmi.n	800cb3a <_printf_i+0x232>
 800cb12:	68e0      	ldr	r0, [r4, #12]
 800cb14:	9b03      	ldr	r3, [sp, #12]
 800cb16:	4298      	cmp	r0, r3
 800cb18:	bfb8      	it	lt
 800cb1a:	4618      	movlt	r0, r3
 800cb1c:	e7a6      	b.n	800ca6c <_printf_i+0x164>
 800cb1e:	2301      	movs	r3, #1
 800cb20:	4632      	mov	r2, r6
 800cb22:	4649      	mov	r1, r9
 800cb24:	4640      	mov	r0, r8
 800cb26:	47d0      	blx	sl
 800cb28:	3001      	adds	r0, #1
 800cb2a:	d09d      	beq.n	800ca68 <_printf_i+0x160>
 800cb2c:	3501      	adds	r5, #1
 800cb2e:	68e3      	ldr	r3, [r4, #12]
 800cb30:	9903      	ldr	r1, [sp, #12]
 800cb32:	1a5b      	subs	r3, r3, r1
 800cb34:	42ab      	cmp	r3, r5
 800cb36:	dcf2      	bgt.n	800cb1e <_printf_i+0x216>
 800cb38:	e7eb      	b.n	800cb12 <_printf_i+0x20a>
 800cb3a:	2500      	movs	r5, #0
 800cb3c:	f104 0619 	add.w	r6, r4, #25
 800cb40:	e7f5      	b.n	800cb2e <_printf_i+0x226>
 800cb42:	bf00      	nop
 800cb44:	0808fc3e 	.word	0x0808fc3e
 800cb48:	0808fc4f 	.word	0x0808fc4f

0800cb4c <__malloc_lock>:
 800cb4c:	4801      	ldr	r0, [pc, #4]	; (800cb54 <__malloc_lock+0x8>)
 800cb4e:	f000 b98b 	b.w	800ce68 <__retarget_lock_acquire_recursive>
 800cb52:	bf00      	nop
 800cb54:	20003094 	.word	0x20003094

0800cb58 <__malloc_unlock>:
 800cb58:	4801      	ldr	r0, [pc, #4]	; (800cb60 <__malloc_unlock+0x8>)
 800cb5a:	f000 b986 	b.w	800ce6a <__retarget_lock_release_recursive>
 800cb5e:	bf00      	nop
 800cb60:	20003094 	.word	0x20003094

0800cb64 <siprintf>:
 800cb64:	b40e      	push	{r1, r2, r3}
 800cb66:	b500      	push	{lr}
 800cb68:	b09c      	sub	sp, #112	; 0x70
 800cb6a:	ab1d      	add	r3, sp, #116	; 0x74
 800cb6c:	9002      	str	r0, [sp, #8]
 800cb6e:	9006      	str	r0, [sp, #24]
 800cb70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cb74:	4809      	ldr	r0, [pc, #36]	; (800cb9c <siprintf+0x38>)
 800cb76:	9107      	str	r1, [sp, #28]
 800cb78:	9104      	str	r1, [sp, #16]
 800cb7a:	4909      	ldr	r1, [pc, #36]	; (800cba0 <siprintf+0x3c>)
 800cb7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb80:	9105      	str	r1, [sp, #20]
 800cb82:	6800      	ldr	r0, [r0, #0]
 800cb84:	9301      	str	r3, [sp, #4]
 800cb86:	a902      	add	r1, sp, #8
 800cb88:	f001 f838 	bl	800dbfc <_svfiprintf_r>
 800cb8c:	9b02      	ldr	r3, [sp, #8]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	701a      	strb	r2, [r3, #0]
 800cb92:	b01c      	add	sp, #112	; 0x70
 800cb94:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb98:	b003      	add	sp, #12
 800cb9a:	4770      	bx	lr
 800cb9c:	200009e4 	.word	0x200009e4
 800cba0:	ffff0208 	.word	0xffff0208

0800cba4 <srand>:
 800cba4:	b538      	push	{r3, r4, r5, lr}
 800cba6:	4b10      	ldr	r3, [pc, #64]	; (800cbe8 <srand+0x44>)
 800cba8:	681d      	ldr	r5, [r3, #0]
 800cbaa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800cbac:	4604      	mov	r4, r0
 800cbae:	b9b3      	cbnz	r3, 800cbde <srand+0x3a>
 800cbb0:	2018      	movs	r0, #24
 800cbb2:	f7ff fd8b 	bl	800c6cc <malloc>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	6328      	str	r0, [r5, #48]	; 0x30
 800cbba:	b920      	cbnz	r0, 800cbc6 <srand+0x22>
 800cbbc:	4b0b      	ldr	r3, [pc, #44]	; (800cbec <srand+0x48>)
 800cbbe:	480c      	ldr	r0, [pc, #48]	; (800cbf0 <srand+0x4c>)
 800cbc0:	2146      	movs	r1, #70	; 0x46
 800cbc2:	f000 f961 	bl	800ce88 <__assert_func>
 800cbc6:	490b      	ldr	r1, [pc, #44]	; (800cbf4 <srand+0x50>)
 800cbc8:	4b0b      	ldr	r3, [pc, #44]	; (800cbf8 <srand+0x54>)
 800cbca:	e9c0 1300 	strd	r1, r3, [r0]
 800cbce:	4b0b      	ldr	r3, [pc, #44]	; (800cbfc <srand+0x58>)
 800cbd0:	6083      	str	r3, [r0, #8]
 800cbd2:	230b      	movs	r3, #11
 800cbd4:	8183      	strh	r3, [r0, #12]
 800cbd6:	2100      	movs	r1, #0
 800cbd8:	2001      	movs	r0, #1
 800cbda:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800cbde:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	611c      	str	r4, [r3, #16]
 800cbe4:	615a      	str	r2, [r3, #20]
 800cbe6:	bd38      	pop	{r3, r4, r5, pc}
 800cbe8:	200009e4 	.word	0x200009e4
 800cbec:	0808fc60 	.word	0x0808fc60
 800cbf0:	0808fc77 	.word	0x0808fc77
 800cbf4:	abcd330e 	.word	0xabcd330e
 800cbf8:	e66d1234 	.word	0xe66d1234
 800cbfc:	0005deec 	.word	0x0005deec

0800cc00 <rand>:
 800cc00:	4b16      	ldr	r3, [pc, #88]	; (800cc5c <rand+0x5c>)
 800cc02:	b510      	push	{r4, lr}
 800cc04:	681c      	ldr	r4, [r3, #0]
 800cc06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cc08:	b9b3      	cbnz	r3, 800cc38 <rand+0x38>
 800cc0a:	2018      	movs	r0, #24
 800cc0c:	f7ff fd5e 	bl	800c6cc <malloc>
 800cc10:	4602      	mov	r2, r0
 800cc12:	6320      	str	r0, [r4, #48]	; 0x30
 800cc14:	b920      	cbnz	r0, 800cc20 <rand+0x20>
 800cc16:	4b12      	ldr	r3, [pc, #72]	; (800cc60 <rand+0x60>)
 800cc18:	4812      	ldr	r0, [pc, #72]	; (800cc64 <rand+0x64>)
 800cc1a:	2152      	movs	r1, #82	; 0x52
 800cc1c:	f000 f934 	bl	800ce88 <__assert_func>
 800cc20:	4911      	ldr	r1, [pc, #68]	; (800cc68 <rand+0x68>)
 800cc22:	4b12      	ldr	r3, [pc, #72]	; (800cc6c <rand+0x6c>)
 800cc24:	e9c0 1300 	strd	r1, r3, [r0]
 800cc28:	4b11      	ldr	r3, [pc, #68]	; (800cc70 <rand+0x70>)
 800cc2a:	6083      	str	r3, [r0, #8]
 800cc2c:	230b      	movs	r3, #11
 800cc2e:	8183      	strh	r3, [r0, #12]
 800cc30:	2100      	movs	r1, #0
 800cc32:	2001      	movs	r0, #1
 800cc34:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800cc38:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cc3a:	480e      	ldr	r0, [pc, #56]	; (800cc74 <rand+0x74>)
 800cc3c:	690b      	ldr	r3, [r1, #16]
 800cc3e:	694c      	ldr	r4, [r1, #20]
 800cc40:	4a0d      	ldr	r2, [pc, #52]	; (800cc78 <rand+0x78>)
 800cc42:	4358      	muls	r0, r3
 800cc44:	fb02 0004 	mla	r0, r2, r4, r0
 800cc48:	fba3 3202 	umull	r3, r2, r3, r2
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	eb40 0002 	adc.w	r0, r0, r2
 800cc52:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800cc56:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800cc5a:	bd10      	pop	{r4, pc}
 800cc5c:	200009e4 	.word	0x200009e4
 800cc60:	0808fc60 	.word	0x0808fc60
 800cc64:	0808fc77 	.word	0x0808fc77
 800cc68:	abcd330e 	.word	0xabcd330e
 800cc6c:	e66d1234 	.word	0xe66d1234
 800cc70:	0005deec 	.word	0x0005deec
 800cc74:	5851f42d 	.word	0x5851f42d
 800cc78:	4c957f2d 	.word	0x4c957f2d

0800cc7c <std>:
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	b510      	push	{r4, lr}
 800cc80:	4604      	mov	r4, r0
 800cc82:	e9c0 3300 	strd	r3, r3, [r0]
 800cc86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc8a:	6083      	str	r3, [r0, #8]
 800cc8c:	8181      	strh	r1, [r0, #12]
 800cc8e:	6643      	str	r3, [r0, #100]	; 0x64
 800cc90:	81c2      	strh	r2, [r0, #14]
 800cc92:	6183      	str	r3, [r0, #24]
 800cc94:	4619      	mov	r1, r3
 800cc96:	2208      	movs	r2, #8
 800cc98:	305c      	adds	r0, #92	; 0x5c
 800cc9a:	f000 f89f 	bl	800cddc <memset>
 800cc9e:	4b05      	ldr	r3, [pc, #20]	; (800ccb4 <std+0x38>)
 800cca0:	6263      	str	r3, [r4, #36]	; 0x24
 800cca2:	4b05      	ldr	r3, [pc, #20]	; (800ccb8 <std+0x3c>)
 800cca4:	62a3      	str	r3, [r4, #40]	; 0x28
 800cca6:	4b05      	ldr	r3, [pc, #20]	; (800ccbc <std+0x40>)
 800cca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ccaa:	4b05      	ldr	r3, [pc, #20]	; (800ccc0 <std+0x44>)
 800ccac:	6224      	str	r4, [r4, #32]
 800ccae:	6323      	str	r3, [r4, #48]	; 0x30
 800ccb0:	bd10      	pop	{r4, pc}
 800ccb2:	bf00      	nop
 800ccb4:	0800e64d 	.word	0x0800e64d
 800ccb8:	0800e66f 	.word	0x0800e66f
 800ccbc:	0800e6a7 	.word	0x0800e6a7
 800ccc0:	0800e6cb 	.word	0x0800e6cb

0800ccc4 <stdio_exit_handler>:
 800ccc4:	4a02      	ldr	r2, [pc, #8]	; (800ccd0 <stdio_exit_handler+0xc>)
 800ccc6:	4903      	ldr	r1, [pc, #12]	; (800ccd4 <stdio_exit_handler+0x10>)
 800ccc8:	4803      	ldr	r0, [pc, #12]	; (800ccd8 <stdio_exit_handler+0x14>)
 800ccca:	f000 b869 	b.w	800cda0 <_fwalk_sglue>
 800ccce:	bf00      	nop
 800ccd0:	2000098c 	.word	0x2000098c
 800ccd4:	0800df05 	.word	0x0800df05
 800ccd8:	20000998 	.word	0x20000998

0800ccdc <cleanup_stdio>:
 800ccdc:	6841      	ldr	r1, [r0, #4]
 800ccde:	4b0c      	ldr	r3, [pc, #48]	; (800cd10 <cleanup_stdio+0x34>)
 800cce0:	4299      	cmp	r1, r3
 800cce2:	b510      	push	{r4, lr}
 800cce4:	4604      	mov	r4, r0
 800cce6:	d001      	beq.n	800ccec <cleanup_stdio+0x10>
 800cce8:	f001 f90c 	bl	800df04 <_fflush_r>
 800ccec:	68a1      	ldr	r1, [r4, #8]
 800ccee:	4b09      	ldr	r3, [pc, #36]	; (800cd14 <cleanup_stdio+0x38>)
 800ccf0:	4299      	cmp	r1, r3
 800ccf2:	d002      	beq.n	800ccfa <cleanup_stdio+0x1e>
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f001 f905 	bl	800df04 <_fflush_r>
 800ccfa:	68e1      	ldr	r1, [r4, #12]
 800ccfc:	4b06      	ldr	r3, [pc, #24]	; (800cd18 <cleanup_stdio+0x3c>)
 800ccfe:	4299      	cmp	r1, r3
 800cd00:	d004      	beq.n	800cd0c <cleanup_stdio+0x30>
 800cd02:	4620      	mov	r0, r4
 800cd04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd08:	f001 b8fc 	b.w	800df04 <_fflush_r>
 800cd0c:	bd10      	pop	{r4, pc}
 800cd0e:	bf00      	nop
 800cd10:	20002f58 	.word	0x20002f58
 800cd14:	20002fc0 	.word	0x20002fc0
 800cd18:	20003028 	.word	0x20003028

0800cd1c <global_stdio_init.part.0>:
 800cd1c:	b510      	push	{r4, lr}
 800cd1e:	4b0b      	ldr	r3, [pc, #44]	; (800cd4c <global_stdio_init.part.0+0x30>)
 800cd20:	4c0b      	ldr	r4, [pc, #44]	; (800cd50 <global_stdio_init.part.0+0x34>)
 800cd22:	4a0c      	ldr	r2, [pc, #48]	; (800cd54 <global_stdio_init.part.0+0x38>)
 800cd24:	601a      	str	r2, [r3, #0]
 800cd26:	4620      	mov	r0, r4
 800cd28:	2200      	movs	r2, #0
 800cd2a:	2104      	movs	r1, #4
 800cd2c:	f7ff ffa6 	bl	800cc7c <std>
 800cd30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cd34:	2201      	movs	r2, #1
 800cd36:	2109      	movs	r1, #9
 800cd38:	f7ff ffa0 	bl	800cc7c <std>
 800cd3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cd40:	2202      	movs	r2, #2
 800cd42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd46:	2112      	movs	r1, #18
 800cd48:	f7ff bf98 	b.w	800cc7c <std>
 800cd4c:	20003090 	.word	0x20003090
 800cd50:	20002f58 	.word	0x20002f58
 800cd54:	0800ccc5 	.word	0x0800ccc5

0800cd58 <__sfp_lock_acquire>:
 800cd58:	4801      	ldr	r0, [pc, #4]	; (800cd60 <__sfp_lock_acquire+0x8>)
 800cd5a:	f000 b885 	b.w	800ce68 <__retarget_lock_acquire_recursive>
 800cd5e:	bf00      	nop
 800cd60:	20003095 	.word	0x20003095

0800cd64 <__sfp_lock_release>:
 800cd64:	4801      	ldr	r0, [pc, #4]	; (800cd6c <__sfp_lock_release+0x8>)
 800cd66:	f000 b880 	b.w	800ce6a <__retarget_lock_release_recursive>
 800cd6a:	bf00      	nop
 800cd6c:	20003095 	.word	0x20003095

0800cd70 <__sinit>:
 800cd70:	b510      	push	{r4, lr}
 800cd72:	4604      	mov	r4, r0
 800cd74:	f7ff fff0 	bl	800cd58 <__sfp_lock_acquire>
 800cd78:	6a23      	ldr	r3, [r4, #32]
 800cd7a:	b11b      	cbz	r3, 800cd84 <__sinit+0x14>
 800cd7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd80:	f7ff bff0 	b.w	800cd64 <__sfp_lock_release>
 800cd84:	4b04      	ldr	r3, [pc, #16]	; (800cd98 <__sinit+0x28>)
 800cd86:	6223      	str	r3, [r4, #32]
 800cd88:	4b04      	ldr	r3, [pc, #16]	; (800cd9c <__sinit+0x2c>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d1f5      	bne.n	800cd7c <__sinit+0xc>
 800cd90:	f7ff ffc4 	bl	800cd1c <global_stdio_init.part.0>
 800cd94:	e7f2      	b.n	800cd7c <__sinit+0xc>
 800cd96:	bf00      	nop
 800cd98:	0800ccdd 	.word	0x0800ccdd
 800cd9c:	20003090 	.word	0x20003090

0800cda0 <_fwalk_sglue>:
 800cda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cda4:	4607      	mov	r7, r0
 800cda6:	4688      	mov	r8, r1
 800cda8:	4614      	mov	r4, r2
 800cdaa:	2600      	movs	r6, #0
 800cdac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cdb0:	f1b9 0901 	subs.w	r9, r9, #1
 800cdb4:	d505      	bpl.n	800cdc2 <_fwalk_sglue+0x22>
 800cdb6:	6824      	ldr	r4, [r4, #0]
 800cdb8:	2c00      	cmp	r4, #0
 800cdba:	d1f7      	bne.n	800cdac <_fwalk_sglue+0xc>
 800cdbc:	4630      	mov	r0, r6
 800cdbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdc2:	89ab      	ldrh	r3, [r5, #12]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d907      	bls.n	800cdd8 <_fwalk_sglue+0x38>
 800cdc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	d003      	beq.n	800cdd8 <_fwalk_sglue+0x38>
 800cdd0:	4629      	mov	r1, r5
 800cdd2:	4638      	mov	r0, r7
 800cdd4:	47c0      	blx	r8
 800cdd6:	4306      	orrs	r6, r0
 800cdd8:	3568      	adds	r5, #104	; 0x68
 800cdda:	e7e9      	b.n	800cdb0 <_fwalk_sglue+0x10>

0800cddc <memset>:
 800cddc:	4402      	add	r2, r0
 800cdde:	4603      	mov	r3, r0
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d100      	bne.n	800cde6 <memset+0xa>
 800cde4:	4770      	bx	lr
 800cde6:	f803 1b01 	strb.w	r1, [r3], #1
 800cdea:	e7f9      	b.n	800cde0 <memset+0x4>

0800cdec <_localeconv_r>:
 800cdec:	4800      	ldr	r0, [pc, #0]	; (800cdf0 <_localeconv_r+0x4>)
 800cdee:	4770      	bx	lr
 800cdf0:	20000ad8 	.word	0x20000ad8

0800cdf4 <_sbrk_r>:
 800cdf4:	b538      	push	{r3, r4, r5, lr}
 800cdf6:	4d06      	ldr	r5, [pc, #24]	; (800ce10 <_sbrk_r+0x1c>)
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	4604      	mov	r4, r0
 800cdfc:	4608      	mov	r0, r1
 800cdfe:	602b      	str	r3, [r5, #0]
 800ce00:	f7f9 fca6 	bl	8006750 <_sbrk>
 800ce04:	1c43      	adds	r3, r0, #1
 800ce06:	d102      	bne.n	800ce0e <_sbrk_r+0x1a>
 800ce08:	682b      	ldr	r3, [r5, #0]
 800ce0a:	b103      	cbz	r3, 800ce0e <_sbrk_r+0x1a>
 800ce0c:	6023      	str	r3, [r4, #0]
 800ce0e:	bd38      	pop	{r3, r4, r5, pc}
 800ce10:	20003098 	.word	0x20003098

0800ce14 <__errno>:
 800ce14:	4b01      	ldr	r3, [pc, #4]	; (800ce1c <__errno+0x8>)
 800ce16:	6818      	ldr	r0, [r3, #0]
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	200009e4 	.word	0x200009e4

0800ce20 <__libc_init_array>:
 800ce20:	b570      	push	{r4, r5, r6, lr}
 800ce22:	4d0d      	ldr	r5, [pc, #52]	; (800ce58 <__libc_init_array+0x38>)
 800ce24:	4c0d      	ldr	r4, [pc, #52]	; (800ce5c <__libc_init_array+0x3c>)
 800ce26:	1b64      	subs	r4, r4, r5
 800ce28:	10a4      	asrs	r4, r4, #2
 800ce2a:	2600      	movs	r6, #0
 800ce2c:	42a6      	cmp	r6, r4
 800ce2e:	d109      	bne.n	800ce44 <__libc_init_array+0x24>
 800ce30:	4d0b      	ldr	r5, [pc, #44]	; (800ce60 <__libc_init_array+0x40>)
 800ce32:	4c0c      	ldr	r4, [pc, #48]	; (800ce64 <__libc_init_array+0x44>)
 800ce34:	f001 ffc0 	bl	800edb8 <_init>
 800ce38:	1b64      	subs	r4, r4, r5
 800ce3a:	10a4      	asrs	r4, r4, #2
 800ce3c:	2600      	movs	r6, #0
 800ce3e:	42a6      	cmp	r6, r4
 800ce40:	d105      	bne.n	800ce4e <__libc_init_array+0x2e>
 800ce42:	bd70      	pop	{r4, r5, r6, pc}
 800ce44:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce48:	4798      	blx	r3
 800ce4a:	3601      	adds	r6, #1
 800ce4c:	e7ee      	b.n	800ce2c <__libc_init_array+0xc>
 800ce4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce52:	4798      	blx	r3
 800ce54:	3601      	adds	r6, #1
 800ce56:	e7f2      	b.n	800ce3e <__libc_init_array+0x1e>
 800ce58:	08090000 	.word	0x08090000
 800ce5c:	08090000 	.word	0x08090000
 800ce60:	08090000 	.word	0x08090000
 800ce64:	08090004 	.word	0x08090004

0800ce68 <__retarget_lock_acquire_recursive>:
 800ce68:	4770      	bx	lr

0800ce6a <__retarget_lock_release_recursive>:
 800ce6a:	4770      	bx	lr

0800ce6c <memcpy>:
 800ce6c:	440a      	add	r2, r1
 800ce6e:	4291      	cmp	r1, r2
 800ce70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ce74:	d100      	bne.n	800ce78 <memcpy+0xc>
 800ce76:	4770      	bx	lr
 800ce78:	b510      	push	{r4, lr}
 800ce7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce82:	4291      	cmp	r1, r2
 800ce84:	d1f9      	bne.n	800ce7a <memcpy+0xe>
 800ce86:	bd10      	pop	{r4, pc}

0800ce88 <__assert_func>:
 800ce88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce8a:	4614      	mov	r4, r2
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	4b09      	ldr	r3, [pc, #36]	; (800ceb4 <__assert_func+0x2c>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4605      	mov	r5, r0
 800ce94:	68d8      	ldr	r0, [r3, #12]
 800ce96:	b14c      	cbz	r4, 800ceac <__assert_func+0x24>
 800ce98:	4b07      	ldr	r3, [pc, #28]	; (800ceb8 <__assert_func+0x30>)
 800ce9a:	9100      	str	r1, [sp, #0]
 800ce9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cea0:	4906      	ldr	r1, [pc, #24]	; (800cebc <__assert_func+0x34>)
 800cea2:	462b      	mov	r3, r5
 800cea4:	f001 fc16 	bl	800e6d4 <fiprintf>
 800cea8:	f001 fcb6 	bl	800e818 <abort>
 800ceac:	4b04      	ldr	r3, [pc, #16]	; (800cec0 <__assert_func+0x38>)
 800ceae:	461c      	mov	r4, r3
 800ceb0:	e7f3      	b.n	800ce9a <__assert_func+0x12>
 800ceb2:	bf00      	nop
 800ceb4:	200009e4 	.word	0x200009e4
 800ceb8:	0808fccf 	.word	0x0808fccf
 800cebc:	0808fcdc 	.word	0x0808fcdc
 800cec0:	0808fd0a 	.word	0x0808fd0a

0800cec4 <quorem>:
 800cec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec8:	6903      	ldr	r3, [r0, #16]
 800ceca:	690c      	ldr	r4, [r1, #16]
 800cecc:	42a3      	cmp	r3, r4
 800cece:	4607      	mov	r7, r0
 800ced0:	db7e      	blt.n	800cfd0 <quorem+0x10c>
 800ced2:	3c01      	subs	r4, #1
 800ced4:	f101 0814 	add.w	r8, r1, #20
 800ced8:	f100 0514 	add.w	r5, r0, #20
 800cedc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cee0:	9301      	str	r3, [sp, #4]
 800cee2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cee6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ceea:	3301      	adds	r3, #1
 800ceec:	429a      	cmp	r2, r3
 800ceee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cef2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cef6:	fbb2 f6f3 	udiv	r6, r2, r3
 800cefa:	d331      	bcc.n	800cf60 <quorem+0x9c>
 800cefc:	f04f 0e00 	mov.w	lr, #0
 800cf00:	4640      	mov	r0, r8
 800cf02:	46ac      	mov	ip, r5
 800cf04:	46f2      	mov	sl, lr
 800cf06:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf0a:	b293      	uxth	r3, r2
 800cf0c:	fb06 e303 	mla	r3, r6, r3, lr
 800cf10:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf14:	0c1a      	lsrs	r2, r3, #16
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	ebaa 0303 	sub.w	r3, sl, r3
 800cf1c:	f8dc a000 	ldr.w	sl, [ip]
 800cf20:	fa13 f38a 	uxtah	r3, r3, sl
 800cf24:	fb06 220e 	mla	r2, r6, lr, r2
 800cf28:	9300      	str	r3, [sp, #0]
 800cf2a:	9b00      	ldr	r3, [sp, #0]
 800cf2c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf30:	b292      	uxth	r2, r2
 800cf32:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cf36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf3a:	f8bd 3000 	ldrh.w	r3, [sp]
 800cf3e:	4581      	cmp	r9, r0
 800cf40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf44:	f84c 3b04 	str.w	r3, [ip], #4
 800cf48:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cf4c:	d2db      	bcs.n	800cf06 <quorem+0x42>
 800cf4e:	f855 300b 	ldr.w	r3, [r5, fp]
 800cf52:	b92b      	cbnz	r3, 800cf60 <quorem+0x9c>
 800cf54:	9b01      	ldr	r3, [sp, #4]
 800cf56:	3b04      	subs	r3, #4
 800cf58:	429d      	cmp	r5, r3
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	d32c      	bcc.n	800cfb8 <quorem+0xf4>
 800cf5e:	613c      	str	r4, [r7, #16]
 800cf60:	4638      	mov	r0, r7
 800cf62:	f001 fa73 	bl	800e44c <__mcmp>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	db22      	blt.n	800cfb0 <quorem+0xec>
 800cf6a:	3601      	adds	r6, #1
 800cf6c:	4629      	mov	r1, r5
 800cf6e:	2000      	movs	r0, #0
 800cf70:	f858 2b04 	ldr.w	r2, [r8], #4
 800cf74:	f8d1 c000 	ldr.w	ip, [r1]
 800cf78:	b293      	uxth	r3, r2
 800cf7a:	1ac3      	subs	r3, r0, r3
 800cf7c:	0c12      	lsrs	r2, r2, #16
 800cf7e:	fa13 f38c 	uxtah	r3, r3, ip
 800cf82:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800cf86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf90:	45c1      	cmp	r9, r8
 800cf92:	f841 3b04 	str.w	r3, [r1], #4
 800cf96:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cf9a:	d2e9      	bcs.n	800cf70 <quorem+0xac>
 800cf9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfa0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cfa4:	b922      	cbnz	r2, 800cfb0 <quorem+0xec>
 800cfa6:	3b04      	subs	r3, #4
 800cfa8:	429d      	cmp	r5, r3
 800cfaa:	461a      	mov	r2, r3
 800cfac:	d30a      	bcc.n	800cfc4 <quorem+0x100>
 800cfae:	613c      	str	r4, [r7, #16]
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	b003      	add	sp, #12
 800cfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb8:	6812      	ldr	r2, [r2, #0]
 800cfba:	3b04      	subs	r3, #4
 800cfbc:	2a00      	cmp	r2, #0
 800cfbe:	d1ce      	bne.n	800cf5e <quorem+0x9a>
 800cfc0:	3c01      	subs	r4, #1
 800cfc2:	e7c9      	b.n	800cf58 <quorem+0x94>
 800cfc4:	6812      	ldr	r2, [r2, #0]
 800cfc6:	3b04      	subs	r3, #4
 800cfc8:	2a00      	cmp	r2, #0
 800cfca:	d1f0      	bne.n	800cfae <quorem+0xea>
 800cfcc:	3c01      	subs	r4, #1
 800cfce:	e7eb      	b.n	800cfa8 <quorem+0xe4>
 800cfd0:	2000      	movs	r0, #0
 800cfd2:	e7ee      	b.n	800cfb2 <quorem+0xee>
 800cfd4:	0000      	movs	r0, r0
	...

0800cfd8 <_dtoa_r>:
 800cfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfdc:	ed2d 8b02 	vpush	{d8}
 800cfe0:	69c5      	ldr	r5, [r0, #28]
 800cfe2:	b091      	sub	sp, #68	; 0x44
 800cfe4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cfe8:	ec59 8b10 	vmov	r8, r9, d0
 800cfec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800cfee:	9106      	str	r1, [sp, #24]
 800cff0:	4606      	mov	r6, r0
 800cff2:	9208      	str	r2, [sp, #32]
 800cff4:	930c      	str	r3, [sp, #48]	; 0x30
 800cff6:	b975      	cbnz	r5, 800d016 <_dtoa_r+0x3e>
 800cff8:	2010      	movs	r0, #16
 800cffa:	f7ff fb67 	bl	800c6cc <malloc>
 800cffe:	4602      	mov	r2, r0
 800d000:	61f0      	str	r0, [r6, #28]
 800d002:	b920      	cbnz	r0, 800d00e <_dtoa_r+0x36>
 800d004:	4ba6      	ldr	r3, [pc, #664]	; (800d2a0 <_dtoa_r+0x2c8>)
 800d006:	21ef      	movs	r1, #239	; 0xef
 800d008:	48a6      	ldr	r0, [pc, #664]	; (800d2a4 <_dtoa_r+0x2cc>)
 800d00a:	f7ff ff3d 	bl	800ce88 <__assert_func>
 800d00e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d012:	6005      	str	r5, [r0, #0]
 800d014:	60c5      	str	r5, [r0, #12]
 800d016:	69f3      	ldr	r3, [r6, #28]
 800d018:	6819      	ldr	r1, [r3, #0]
 800d01a:	b151      	cbz	r1, 800d032 <_dtoa_r+0x5a>
 800d01c:	685a      	ldr	r2, [r3, #4]
 800d01e:	604a      	str	r2, [r1, #4]
 800d020:	2301      	movs	r3, #1
 800d022:	4093      	lsls	r3, r2
 800d024:	608b      	str	r3, [r1, #8]
 800d026:	4630      	mov	r0, r6
 800d028:	f000 ffd4 	bl	800dfd4 <_Bfree>
 800d02c:	69f3      	ldr	r3, [r6, #28]
 800d02e:	2200      	movs	r2, #0
 800d030:	601a      	str	r2, [r3, #0]
 800d032:	f1b9 0300 	subs.w	r3, r9, #0
 800d036:	bfbb      	ittet	lt
 800d038:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d03c:	9303      	strlt	r3, [sp, #12]
 800d03e:	2300      	movge	r3, #0
 800d040:	2201      	movlt	r2, #1
 800d042:	bfac      	ite	ge
 800d044:	6023      	strge	r3, [r4, #0]
 800d046:	6022      	strlt	r2, [r4, #0]
 800d048:	4b97      	ldr	r3, [pc, #604]	; (800d2a8 <_dtoa_r+0x2d0>)
 800d04a:	9c03      	ldr	r4, [sp, #12]
 800d04c:	43a3      	bics	r3, r4
 800d04e:	d11c      	bne.n	800d08a <_dtoa_r+0xb2>
 800d050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d052:	f242 730f 	movw	r3, #9999	; 0x270f
 800d056:	6013      	str	r3, [r2, #0]
 800d058:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d05c:	ea53 0308 	orrs.w	r3, r3, r8
 800d060:	f000 84fb 	beq.w	800da5a <_dtoa_r+0xa82>
 800d064:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d066:	b963      	cbnz	r3, 800d082 <_dtoa_r+0xaa>
 800d068:	4b90      	ldr	r3, [pc, #576]	; (800d2ac <_dtoa_r+0x2d4>)
 800d06a:	e020      	b.n	800d0ae <_dtoa_r+0xd6>
 800d06c:	4b90      	ldr	r3, [pc, #576]	; (800d2b0 <_dtoa_r+0x2d8>)
 800d06e:	9301      	str	r3, [sp, #4]
 800d070:	3308      	adds	r3, #8
 800d072:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d074:	6013      	str	r3, [r2, #0]
 800d076:	9801      	ldr	r0, [sp, #4]
 800d078:	b011      	add	sp, #68	; 0x44
 800d07a:	ecbd 8b02 	vpop	{d8}
 800d07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d082:	4b8a      	ldr	r3, [pc, #552]	; (800d2ac <_dtoa_r+0x2d4>)
 800d084:	9301      	str	r3, [sp, #4]
 800d086:	3303      	adds	r3, #3
 800d088:	e7f3      	b.n	800d072 <_dtoa_r+0x9a>
 800d08a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d08e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d096:	d10c      	bne.n	800d0b2 <_dtoa_r+0xda>
 800d098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d09a:	2301      	movs	r3, #1
 800d09c:	6013      	str	r3, [r2, #0]
 800d09e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f000 84d7 	beq.w	800da54 <_dtoa_r+0xa7c>
 800d0a6:	4b83      	ldr	r3, [pc, #524]	; (800d2b4 <_dtoa_r+0x2dc>)
 800d0a8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d0aa:	6013      	str	r3, [r2, #0]
 800d0ac:	3b01      	subs	r3, #1
 800d0ae:	9301      	str	r3, [sp, #4]
 800d0b0:	e7e1      	b.n	800d076 <_dtoa_r+0x9e>
 800d0b2:	aa0e      	add	r2, sp, #56	; 0x38
 800d0b4:	a90f      	add	r1, sp, #60	; 0x3c
 800d0b6:	4630      	mov	r0, r6
 800d0b8:	eeb0 0b48 	vmov.f64	d0, d8
 800d0bc:	f001 fa6c 	bl	800e598 <__d2b>
 800d0c0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800d0c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0c6:	4605      	mov	r5, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d046      	beq.n	800d15a <_dtoa_r+0x182>
 800d0cc:	eeb0 7b48 	vmov.f64	d7, d8
 800d0d0:	ee18 1a90 	vmov	r1, s17
 800d0d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d0d8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800d0dc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d0e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	ee07 1a90 	vmov	s15, r1
 800d0ea:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800d0ee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d288 <_dtoa_r+0x2b0>
 800d0f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d0f6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800d290 <_dtoa_r+0x2b8>
 800d0fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d0fe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d298 <_dtoa_r+0x2c0>
 800d102:	ee07 3a90 	vmov	s15, r3
 800d106:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d10a:	eeb0 7b46 	vmov.f64	d7, d6
 800d10e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d112:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d116:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d11e:	ee16 ba90 	vmov	fp, s13
 800d122:	9009      	str	r0, [sp, #36]	; 0x24
 800d124:	d508      	bpl.n	800d138 <_dtoa_r+0x160>
 800d126:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d12a:	eeb4 6b47 	vcmp.f64	d6, d7
 800d12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d132:	bf18      	it	ne
 800d134:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800d138:	f1bb 0f16 	cmp.w	fp, #22
 800d13c:	d82b      	bhi.n	800d196 <_dtoa_r+0x1be>
 800d13e:	495e      	ldr	r1, [pc, #376]	; (800d2b8 <_dtoa_r+0x2e0>)
 800d140:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800d144:	ed91 7b00 	vldr	d7, [r1]
 800d148:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d150:	d501      	bpl.n	800d156 <_dtoa_r+0x17e>
 800d152:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d156:	2100      	movs	r1, #0
 800d158:	e01e      	b.n	800d198 <_dtoa_r+0x1c0>
 800d15a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d15c:	4413      	add	r3, r2
 800d15e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800d162:	2920      	cmp	r1, #32
 800d164:	bfc1      	itttt	gt
 800d166:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800d16a:	408c      	lslgt	r4, r1
 800d16c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800d170:	fa28 f101 	lsrgt.w	r1, r8, r1
 800d174:	bfd6      	itet	le
 800d176:	f1c1 0120 	rsble	r1, r1, #32
 800d17a:	4321      	orrgt	r1, r4
 800d17c:	fa08 f101 	lslle.w	r1, r8, r1
 800d180:	ee07 1a90 	vmov	s15, r1
 800d184:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d188:	3b01      	subs	r3, #1
 800d18a:	ee17 1a90 	vmov	r1, s15
 800d18e:	2001      	movs	r0, #1
 800d190:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d194:	e7a7      	b.n	800d0e6 <_dtoa_r+0x10e>
 800d196:	2101      	movs	r1, #1
 800d198:	1ad2      	subs	r2, r2, r3
 800d19a:	1e53      	subs	r3, r2, #1
 800d19c:	9305      	str	r3, [sp, #20]
 800d19e:	bf45      	ittet	mi
 800d1a0:	f1c2 0301 	rsbmi	r3, r2, #1
 800d1a4:	9304      	strmi	r3, [sp, #16]
 800d1a6:	2300      	movpl	r3, #0
 800d1a8:	2300      	movmi	r3, #0
 800d1aa:	bf4c      	ite	mi
 800d1ac:	9305      	strmi	r3, [sp, #20]
 800d1ae:	9304      	strpl	r3, [sp, #16]
 800d1b0:	f1bb 0f00 	cmp.w	fp, #0
 800d1b4:	910b      	str	r1, [sp, #44]	; 0x2c
 800d1b6:	db18      	blt.n	800d1ea <_dtoa_r+0x212>
 800d1b8:	9b05      	ldr	r3, [sp, #20]
 800d1ba:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d1be:	445b      	add	r3, fp
 800d1c0:	9305      	str	r3, [sp, #20]
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	9a06      	ldr	r2, [sp, #24]
 800d1c6:	2a09      	cmp	r2, #9
 800d1c8:	d848      	bhi.n	800d25c <_dtoa_r+0x284>
 800d1ca:	2a05      	cmp	r2, #5
 800d1cc:	bfc4      	itt	gt
 800d1ce:	3a04      	subgt	r2, #4
 800d1d0:	9206      	strgt	r2, [sp, #24]
 800d1d2:	9a06      	ldr	r2, [sp, #24]
 800d1d4:	f1a2 0202 	sub.w	r2, r2, #2
 800d1d8:	bfcc      	ite	gt
 800d1da:	2400      	movgt	r4, #0
 800d1dc:	2401      	movle	r4, #1
 800d1de:	2a03      	cmp	r2, #3
 800d1e0:	d847      	bhi.n	800d272 <_dtoa_r+0x29a>
 800d1e2:	e8df f002 	tbb	[pc, r2]
 800d1e6:	2d0b      	.short	0x2d0b
 800d1e8:	392b      	.short	0x392b
 800d1ea:	9b04      	ldr	r3, [sp, #16]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	eba3 030b 	sub.w	r3, r3, fp
 800d1f2:	9304      	str	r3, [sp, #16]
 800d1f4:	920a      	str	r2, [sp, #40]	; 0x28
 800d1f6:	f1cb 0300 	rsb	r3, fp, #0
 800d1fa:	e7e3      	b.n	800d1c4 <_dtoa_r+0x1ec>
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	9207      	str	r2, [sp, #28]
 800d200:	9a08      	ldr	r2, [sp, #32]
 800d202:	2a00      	cmp	r2, #0
 800d204:	dc38      	bgt.n	800d278 <_dtoa_r+0x2a0>
 800d206:	f04f 0a01 	mov.w	sl, #1
 800d20a:	46d1      	mov	r9, sl
 800d20c:	4652      	mov	r2, sl
 800d20e:	f8cd a020 	str.w	sl, [sp, #32]
 800d212:	69f7      	ldr	r7, [r6, #28]
 800d214:	2100      	movs	r1, #0
 800d216:	2004      	movs	r0, #4
 800d218:	f100 0c14 	add.w	ip, r0, #20
 800d21c:	4594      	cmp	ip, r2
 800d21e:	d930      	bls.n	800d282 <_dtoa_r+0x2aa>
 800d220:	6079      	str	r1, [r7, #4]
 800d222:	4630      	mov	r0, r6
 800d224:	930d      	str	r3, [sp, #52]	; 0x34
 800d226:	f000 fe95 	bl	800df54 <_Balloc>
 800d22a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d22c:	9001      	str	r0, [sp, #4]
 800d22e:	4602      	mov	r2, r0
 800d230:	2800      	cmp	r0, #0
 800d232:	d145      	bne.n	800d2c0 <_dtoa_r+0x2e8>
 800d234:	4b21      	ldr	r3, [pc, #132]	; (800d2bc <_dtoa_r+0x2e4>)
 800d236:	f240 11af 	movw	r1, #431	; 0x1af
 800d23a:	e6e5      	b.n	800d008 <_dtoa_r+0x30>
 800d23c:	2201      	movs	r2, #1
 800d23e:	e7de      	b.n	800d1fe <_dtoa_r+0x226>
 800d240:	2200      	movs	r2, #0
 800d242:	9207      	str	r2, [sp, #28]
 800d244:	9a08      	ldr	r2, [sp, #32]
 800d246:	eb0b 0a02 	add.w	sl, fp, r2
 800d24a:	f10a 0901 	add.w	r9, sl, #1
 800d24e:	464a      	mov	r2, r9
 800d250:	2a01      	cmp	r2, #1
 800d252:	bfb8      	it	lt
 800d254:	2201      	movlt	r2, #1
 800d256:	e7dc      	b.n	800d212 <_dtoa_r+0x23a>
 800d258:	2201      	movs	r2, #1
 800d25a:	e7f2      	b.n	800d242 <_dtoa_r+0x26a>
 800d25c:	2401      	movs	r4, #1
 800d25e:	2200      	movs	r2, #0
 800d260:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800d264:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d268:	2100      	movs	r1, #0
 800d26a:	46d1      	mov	r9, sl
 800d26c:	2212      	movs	r2, #18
 800d26e:	9108      	str	r1, [sp, #32]
 800d270:	e7cf      	b.n	800d212 <_dtoa_r+0x23a>
 800d272:	2201      	movs	r2, #1
 800d274:	9207      	str	r2, [sp, #28]
 800d276:	e7f5      	b.n	800d264 <_dtoa_r+0x28c>
 800d278:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d27c:	46d1      	mov	r9, sl
 800d27e:	4652      	mov	r2, sl
 800d280:	e7c7      	b.n	800d212 <_dtoa_r+0x23a>
 800d282:	3101      	adds	r1, #1
 800d284:	0040      	lsls	r0, r0, #1
 800d286:	e7c7      	b.n	800d218 <_dtoa_r+0x240>
 800d288:	636f4361 	.word	0x636f4361
 800d28c:	3fd287a7 	.word	0x3fd287a7
 800d290:	8b60c8b3 	.word	0x8b60c8b3
 800d294:	3fc68a28 	.word	0x3fc68a28
 800d298:	509f79fb 	.word	0x509f79fb
 800d29c:	3fd34413 	.word	0x3fd34413
 800d2a0:	0808fc60 	.word	0x0808fc60
 800d2a4:	0808fd18 	.word	0x0808fd18
 800d2a8:	7ff00000 	.word	0x7ff00000
 800d2ac:	0808fd14 	.word	0x0808fd14
 800d2b0:	0808fd0b 	.word	0x0808fd0b
 800d2b4:	0808fc3d 	.word	0x0808fc3d
 800d2b8:	0808fe18 	.word	0x0808fe18
 800d2bc:	0808fd70 	.word	0x0808fd70
 800d2c0:	69f2      	ldr	r2, [r6, #28]
 800d2c2:	9901      	ldr	r1, [sp, #4]
 800d2c4:	6011      	str	r1, [r2, #0]
 800d2c6:	f1b9 0f0e 	cmp.w	r9, #14
 800d2ca:	d86c      	bhi.n	800d3a6 <_dtoa_r+0x3ce>
 800d2cc:	2c00      	cmp	r4, #0
 800d2ce:	d06a      	beq.n	800d3a6 <_dtoa_r+0x3ce>
 800d2d0:	f1bb 0f00 	cmp.w	fp, #0
 800d2d4:	f340 80a0 	ble.w	800d418 <_dtoa_r+0x440>
 800d2d8:	4ac1      	ldr	r2, [pc, #772]	; (800d5e0 <_dtoa_r+0x608>)
 800d2da:	f00b 010f 	and.w	r1, fp, #15
 800d2de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d2e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d2e6:	ed92 7b00 	vldr	d7, [r2]
 800d2ea:	ea4f 122b 	mov.w	r2, fp, asr #4
 800d2ee:	f000 8087 	beq.w	800d400 <_dtoa_r+0x428>
 800d2f2:	49bc      	ldr	r1, [pc, #752]	; (800d5e4 <_dtoa_r+0x60c>)
 800d2f4:	ed91 6b08 	vldr	d6, [r1, #32]
 800d2f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d2fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d300:	f002 020f 	and.w	r2, r2, #15
 800d304:	2103      	movs	r1, #3
 800d306:	48b7      	ldr	r0, [pc, #732]	; (800d5e4 <_dtoa_r+0x60c>)
 800d308:	2a00      	cmp	r2, #0
 800d30a:	d17b      	bne.n	800d404 <_dtoa_r+0x42c>
 800d30c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d310:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d314:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d318:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d31a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d31e:	2a00      	cmp	r2, #0
 800d320:	f000 80a0 	beq.w	800d464 <_dtoa_r+0x48c>
 800d324:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d328:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d330:	f140 8098 	bpl.w	800d464 <_dtoa_r+0x48c>
 800d334:	f1b9 0f00 	cmp.w	r9, #0
 800d338:	f000 8094 	beq.w	800d464 <_dtoa_r+0x48c>
 800d33c:	f1ba 0f00 	cmp.w	sl, #0
 800d340:	dd2f      	ble.n	800d3a2 <_dtoa_r+0x3ca>
 800d342:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d346:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d34a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d34e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800d352:	3101      	adds	r1, #1
 800d354:	4654      	mov	r4, sl
 800d356:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d35a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d35e:	ee07 1a90 	vmov	s15, r1
 800d362:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d366:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d36a:	ee15 7a90 	vmov	r7, s11
 800d36e:	ec51 0b15 	vmov	r0, r1, d5
 800d372:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800d376:	2c00      	cmp	r4, #0
 800d378:	d177      	bne.n	800d46a <_dtoa_r+0x492>
 800d37a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d37e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d382:	ec41 0b17 	vmov	d7, r0, r1
 800d386:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d38e:	f300 826a 	bgt.w	800d866 <_dtoa_r+0x88e>
 800d392:	eeb1 7b47 	vneg.f64	d7, d7
 800d396:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d39e:	f100 8260 	bmi.w	800d862 <_dtoa_r+0x88a>
 800d3a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d3a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d3a8:	2a00      	cmp	r2, #0
 800d3aa:	f2c0 811d 	blt.w	800d5e8 <_dtoa_r+0x610>
 800d3ae:	f1bb 0f0e 	cmp.w	fp, #14
 800d3b2:	f300 8119 	bgt.w	800d5e8 <_dtoa_r+0x610>
 800d3b6:	4b8a      	ldr	r3, [pc, #552]	; (800d5e0 <_dtoa_r+0x608>)
 800d3b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d3bc:	ed93 6b00 	vldr	d6, [r3]
 800d3c0:	9b08      	ldr	r3, [sp, #32]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f280 80b7 	bge.w	800d536 <_dtoa_r+0x55e>
 800d3c8:	f1b9 0f00 	cmp.w	r9, #0
 800d3cc:	f300 80b3 	bgt.w	800d536 <_dtoa_r+0x55e>
 800d3d0:	f040 8246 	bne.w	800d860 <_dtoa_r+0x888>
 800d3d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d3d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d3dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d3e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3e8:	464c      	mov	r4, r9
 800d3ea:	464f      	mov	r7, r9
 800d3ec:	f280 821c 	bge.w	800d828 <_dtoa_r+0x850>
 800d3f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d3f4:	2331      	movs	r3, #49	; 0x31
 800d3f6:	f808 3b01 	strb.w	r3, [r8], #1
 800d3fa:	f10b 0b01 	add.w	fp, fp, #1
 800d3fe:	e218      	b.n	800d832 <_dtoa_r+0x85a>
 800d400:	2102      	movs	r1, #2
 800d402:	e780      	b.n	800d306 <_dtoa_r+0x32e>
 800d404:	07d4      	lsls	r4, r2, #31
 800d406:	d504      	bpl.n	800d412 <_dtoa_r+0x43a>
 800d408:	ed90 6b00 	vldr	d6, [r0]
 800d40c:	3101      	adds	r1, #1
 800d40e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d412:	1052      	asrs	r2, r2, #1
 800d414:	3008      	adds	r0, #8
 800d416:	e777      	b.n	800d308 <_dtoa_r+0x330>
 800d418:	d022      	beq.n	800d460 <_dtoa_r+0x488>
 800d41a:	f1cb 0200 	rsb	r2, fp, #0
 800d41e:	4970      	ldr	r1, [pc, #448]	; (800d5e0 <_dtoa_r+0x608>)
 800d420:	f002 000f 	and.w	r0, r2, #15
 800d424:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d428:	ed91 7b00 	vldr	d7, [r1]
 800d42c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d430:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d434:	486b      	ldr	r0, [pc, #428]	; (800d5e4 <_dtoa_r+0x60c>)
 800d436:	1112      	asrs	r2, r2, #4
 800d438:	2400      	movs	r4, #0
 800d43a:	2102      	movs	r1, #2
 800d43c:	b92a      	cbnz	r2, 800d44a <_dtoa_r+0x472>
 800d43e:	2c00      	cmp	r4, #0
 800d440:	f43f af6a 	beq.w	800d318 <_dtoa_r+0x340>
 800d444:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d448:	e766      	b.n	800d318 <_dtoa_r+0x340>
 800d44a:	07d7      	lsls	r7, r2, #31
 800d44c:	d505      	bpl.n	800d45a <_dtoa_r+0x482>
 800d44e:	ed90 6b00 	vldr	d6, [r0]
 800d452:	3101      	adds	r1, #1
 800d454:	2401      	movs	r4, #1
 800d456:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d45a:	1052      	asrs	r2, r2, #1
 800d45c:	3008      	adds	r0, #8
 800d45e:	e7ed      	b.n	800d43c <_dtoa_r+0x464>
 800d460:	2102      	movs	r1, #2
 800d462:	e759      	b.n	800d318 <_dtoa_r+0x340>
 800d464:	465a      	mov	r2, fp
 800d466:	464c      	mov	r4, r9
 800d468:	e775      	b.n	800d356 <_dtoa_r+0x37e>
 800d46a:	ec41 0b17 	vmov	d7, r0, r1
 800d46e:	495c      	ldr	r1, [pc, #368]	; (800d5e0 <_dtoa_r+0x608>)
 800d470:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800d474:	ed11 4b02 	vldr	d4, [r1, #-8]
 800d478:	9901      	ldr	r1, [sp, #4]
 800d47a:	440c      	add	r4, r1
 800d47c:	9907      	ldr	r1, [sp, #28]
 800d47e:	b351      	cbz	r1, 800d4d6 <_dtoa_r+0x4fe>
 800d480:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d484:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d488:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d48c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d490:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d494:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d498:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d49c:	ee14 1a90 	vmov	r1, s9
 800d4a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d4a4:	3130      	adds	r1, #48	; 0x30
 800d4a6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d4aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4b2:	f808 1b01 	strb.w	r1, [r8], #1
 800d4b6:	d439      	bmi.n	800d52c <_dtoa_r+0x554>
 800d4b8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d4bc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4c4:	d472      	bmi.n	800d5ac <_dtoa_r+0x5d4>
 800d4c6:	45a0      	cmp	r8, r4
 800d4c8:	f43f af6b 	beq.w	800d3a2 <_dtoa_r+0x3ca>
 800d4cc:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d4d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d4d4:	e7e0      	b.n	800d498 <_dtoa_r+0x4c0>
 800d4d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d4da:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d4de:	4620      	mov	r0, r4
 800d4e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d4e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d4e8:	ee14 1a90 	vmov	r1, s9
 800d4ec:	3130      	adds	r1, #48	; 0x30
 800d4ee:	f808 1b01 	strb.w	r1, [r8], #1
 800d4f2:	45a0      	cmp	r8, r4
 800d4f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d4f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d4fc:	d118      	bne.n	800d530 <_dtoa_r+0x558>
 800d4fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d502:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d506:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d50e:	dc4d      	bgt.n	800d5ac <_dtoa_r+0x5d4>
 800d510:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d514:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d51c:	f57f af41 	bpl.w	800d3a2 <_dtoa_r+0x3ca>
 800d520:	4680      	mov	r8, r0
 800d522:	3801      	subs	r0, #1
 800d524:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d528:	2b30      	cmp	r3, #48	; 0x30
 800d52a:	d0f9      	beq.n	800d520 <_dtoa_r+0x548>
 800d52c:	4693      	mov	fp, r2
 800d52e:	e02a      	b.n	800d586 <_dtoa_r+0x5ae>
 800d530:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d534:	e7d6      	b.n	800d4e4 <_dtoa_r+0x50c>
 800d536:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d53a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d53e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d542:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d546:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d54a:	ee15 3a10 	vmov	r3, s10
 800d54e:	3330      	adds	r3, #48	; 0x30
 800d550:	f808 3b01 	strb.w	r3, [r8], #1
 800d554:	9b01      	ldr	r3, [sp, #4]
 800d556:	eba8 0303 	sub.w	r3, r8, r3
 800d55a:	4599      	cmp	r9, r3
 800d55c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d560:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d564:	d133      	bne.n	800d5ce <_dtoa_r+0x5f6>
 800d566:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d56a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d572:	dc1a      	bgt.n	800d5aa <_dtoa_r+0x5d2>
 800d574:	eeb4 7b46 	vcmp.f64	d7, d6
 800d578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d57c:	d103      	bne.n	800d586 <_dtoa_r+0x5ae>
 800d57e:	ee15 3a10 	vmov	r3, s10
 800d582:	07d9      	lsls	r1, r3, #31
 800d584:	d411      	bmi.n	800d5aa <_dtoa_r+0x5d2>
 800d586:	4629      	mov	r1, r5
 800d588:	4630      	mov	r0, r6
 800d58a:	f000 fd23 	bl	800dfd4 <_Bfree>
 800d58e:	2300      	movs	r3, #0
 800d590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d592:	f888 3000 	strb.w	r3, [r8]
 800d596:	f10b 0301 	add.w	r3, fp, #1
 800d59a:	6013      	str	r3, [r2, #0]
 800d59c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f43f ad69 	beq.w	800d076 <_dtoa_r+0x9e>
 800d5a4:	f8c3 8000 	str.w	r8, [r3]
 800d5a8:	e565      	b.n	800d076 <_dtoa_r+0x9e>
 800d5aa:	465a      	mov	r2, fp
 800d5ac:	4643      	mov	r3, r8
 800d5ae:	4698      	mov	r8, r3
 800d5b0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800d5b4:	2939      	cmp	r1, #57	; 0x39
 800d5b6:	d106      	bne.n	800d5c6 <_dtoa_r+0x5ee>
 800d5b8:	9901      	ldr	r1, [sp, #4]
 800d5ba:	4299      	cmp	r1, r3
 800d5bc:	d1f7      	bne.n	800d5ae <_dtoa_r+0x5d6>
 800d5be:	9801      	ldr	r0, [sp, #4]
 800d5c0:	2130      	movs	r1, #48	; 0x30
 800d5c2:	3201      	adds	r2, #1
 800d5c4:	7001      	strb	r1, [r0, #0]
 800d5c6:	7819      	ldrb	r1, [r3, #0]
 800d5c8:	3101      	adds	r1, #1
 800d5ca:	7019      	strb	r1, [r3, #0]
 800d5cc:	e7ae      	b.n	800d52c <_dtoa_r+0x554>
 800d5ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d5d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5da:	d1b2      	bne.n	800d542 <_dtoa_r+0x56a>
 800d5dc:	e7d3      	b.n	800d586 <_dtoa_r+0x5ae>
 800d5de:	bf00      	nop
 800d5e0:	0808fe18 	.word	0x0808fe18
 800d5e4:	0808fdf0 	.word	0x0808fdf0
 800d5e8:	9907      	ldr	r1, [sp, #28]
 800d5ea:	2900      	cmp	r1, #0
 800d5ec:	f000 80d0 	beq.w	800d790 <_dtoa_r+0x7b8>
 800d5f0:	9906      	ldr	r1, [sp, #24]
 800d5f2:	2901      	cmp	r1, #1
 800d5f4:	f300 80b4 	bgt.w	800d760 <_dtoa_r+0x788>
 800d5f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d5fa:	2900      	cmp	r1, #0
 800d5fc:	f000 80ac 	beq.w	800d758 <_dtoa_r+0x780>
 800d600:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d604:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d608:	461c      	mov	r4, r3
 800d60a:	9309      	str	r3, [sp, #36]	; 0x24
 800d60c:	9b04      	ldr	r3, [sp, #16]
 800d60e:	4413      	add	r3, r2
 800d610:	9304      	str	r3, [sp, #16]
 800d612:	9b05      	ldr	r3, [sp, #20]
 800d614:	2101      	movs	r1, #1
 800d616:	4413      	add	r3, r2
 800d618:	4630      	mov	r0, r6
 800d61a:	9305      	str	r3, [sp, #20]
 800d61c:	f000 fd90 	bl	800e140 <__i2b>
 800d620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d622:	4607      	mov	r7, r0
 800d624:	f1b8 0f00 	cmp.w	r8, #0
 800d628:	d00d      	beq.n	800d646 <_dtoa_r+0x66e>
 800d62a:	9a05      	ldr	r2, [sp, #20]
 800d62c:	2a00      	cmp	r2, #0
 800d62e:	dd0a      	ble.n	800d646 <_dtoa_r+0x66e>
 800d630:	4542      	cmp	r2, r8
 800d632:	9904      	ldr	r1, [sp, #16]
 800d634:	bfa8      	it	ge
 800d636:	4642      	movge	r2, r8
 800d638:	1a89      	subs	r1, r1, r2
 800d63a:	9104      	str	r1, [sp, #16]
 800d63c:	9905      	ldr	r1, [sp, #20]
 800d63e:	eba8 0802 	sub.w	r8, r8, r2
 800d642:	1a8a      	subs	r2, r1, r2
 800d644:	9205      	str	r2, [sp, #20]
 800d646:	b303      	cbz	r3, 800d68a <_dtoa_r+0x6b2>
 800d648:	9a07      	ldr	r2, [sp, #28]
 800d64a:	2a00      	cmp	r2, #0
 800d64c:	f000 80a5 	beq.w	800d79a <_dtoa_r+0x7c2>
 800d650:	2c00      	cmp	r4, #0
 800d652:	dd13      	ble.n	800d67c <_dtoa_r+0x6a4>
 800d654:	4639      	mov	r1, r7
 800d656:	4622      	mov	r2, r4
 800d658:	4630      	mov	r0, r6
 800d65a:	930d      	str	r3, [sp, #52]	; 0x34
 800d65c:	f000 fe30 	bl	800e2c0 <__pow5mult>
 800d660:	462a      	mov	r2, r5
 800d662:	4601      	mov	r1, r0
 800d664:	4607      	mov	r7, r0
 800d666:	4630      	mov	r0, r6
 800d668:	f000 fd80 	bl	800e16c <__multiply>
 800d66c:	4629      	mov	r1, r5
 800d66e:	9009      	str	r0, [sp, #36]	; 0x24
 800d670:	4630      	mov	r0, r6
 800d672:	f000 fcaf 	bl	800dfd4 <_Bfree>
 800d676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d678:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d67a:	4615      	mov	r5, r2
 800d67c:	1b1a      	subs	r2, r3, r4
 800d67e:	d004      	beq.n	800d68a <_dtoa_r+0x6b2>
 800d680:	4629      	mov	r1, r5
 800d682:	4630      	mov	r0, r6
 800d684:	f000 fe1c 	bl	800e2c0 <__pow5mult>
 800d688:	4605      	mov	r5, r0
 800d68a:	2101      	movs	r1, #1
 800d68c:	4630      	mov	r0, r6
 800d68e:	f000 fd57 	bl	800e140 <__i2b>
 800d692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d694:	2b00      	cmp	r3, #0
 800d696:	4604      	mov	r4, r0
 800d698:	f340 8081 	ble.w	800d79e <_dtoa_r+0x7c6>
 800d69c:	461a      	mov	r2, r3
 800d69e:	4601      	mov	r1, r0
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	f000 fe0d 	bl	800e2c0 <__pow5mult>
 800d6a6:	9b06      	ldr	r3, [sp, #24]
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	dd7a      	ble.n	800d7a4 <_dtoa_r+0x7cc>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	9309      	str	r3, [sp, #36]	; 0x24
 800d6b2:	6922      	ldr	r2, [r4, #16]
 800d6b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d6b8:	6910      	ldr	r0, [r2, #16]
 800d6ba:	f000 fcf3 	bl	800e0a4 <__hi0bits>
 800d6be:	f1c0 0020 	rsb	r0, r0, #32
 800d6c2:	9b05      	ldr	r3, [sp, #20]
 800d6c4:	4418      	add	r0, r3
 800d6c6:	f010 001f 	ands.w	r0, r0, #31
 800d6ca:	f000 8093 	beq.w	800d7f4 <_dtoa_r+0x81c>
 800d6ce:	f1c0 0220 	rsb	r2, r0, #32
 800d6d2:	2a04      	cmp	r2, #4
 800d6d4:	f340 8085 	ble.w	800d7e2 <_dtoa_r+0x80a>
 800d6d8:	9b04      	ldr	r3, [sp, #16]
 800d6da:	f1c0 001c 	rsb	r0, r0, #28
 800d6de:	4403      	add	r3, r0
 800d6e0:	9304      	str	r3, [sp, #16]
 800d6e2:	9b05      	ldr	r3, [sp, #20]
 800d6e4:	4480      	add	r8, r0
 800d6e6:	4403      	add	r3, r0
 800d6e8:	9305      	str	r3, [sp, #20]
 800d6ea:	9b04      	ldr	r3, [sp, #16]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	dd05      	ble.n	800d6fc <_dtoa_r+0x724>
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	4630      	mov	r0, r6
 800d6f6:	f000 fe3d 	bl	800e374 <__lshift>
 800d6fa:	4605      	mov	r5, r0
 800d6fc:	9b05      	ldr	r3, [sp, #20]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	dd05      	ble.n	800d70e <_dtoa_r+0x736>
 800d702:	4621      	mov	r1, r4
 800d704:	461a      	mov	r2, r3
 800d706:	4630      	mov	r0, r6
 800d708:	f000 fe34 	bl	800e374 <__lshift>
 800d70c:	4604      	mov	r4, r0
 800d70e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d710:	2b00      	cmp	r3, #0
 800d712:	d071      	beq.n	800d7f8 <_dtoa_r+0x820>
 800d714:	4621      	mov	r1, r4
 800d716:	4628      	mov	r0, r5
 800d718:	f000 fe98 	bl	800e44c <__mcmp>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	da6b      	bge.n	800d7f8 <_dtoa_r+0x820>
 800d720:	2300      	movs	r3, #0
 800d722:	4629      	mov	r1, r5
 800d724:	220a      	movs	r2, #10
 800d726:	4630      	mov	r0, r6
 800d728:	f000 fc76 	bl	800e018 <__multadd>
 800d72c:	9b07      	ldr	r3, [sp, #28]
 800d72e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d732:	4605      	mov	r5, r0
 800d734:	2b00      	cmp	r3, #0
 800d736:	f000 8197 	beq.w	800da68 <_dtoa_r+0xa90>
 800d73a:	4639      	mov	r1, r7
 800d73c:	2300      	movs	r3, #0
 800d73e:	220a      	movs	r2, #10
 800d740:	4630      	mov	r0, r6
 800d742:	f000 fc69 	bl	800e018 <__multadd>
 800d746:	f1ba 0f00 	cmp.w	sl, #0
 800d74a:	4607      	mov	r7, r0
 800d74c:	f300 8093 	bgt.w	800d876 <_dtoa_r+0x89e>
 800d750:	9b06      	ldr	r3, [sp, #24]
 800d752:	2b02      	cmp	r3, #2
 800d754:	dc57      	bgt.n	800d806 <_dtoa_r+0x82e>
 800d756:	e08e      	b.n	800d876 <_dtoa_r+0x89e>
 800d758:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d75a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d75e:	e751      	b.n	800d604 <_dtoa_r+0x62c>
 800d760:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800d764:	42a3      	cmp	r3, r4
 800d766:	bfbf      	itttt	lt
 800d768:	1ae2      	sublt	r2, r4, r3
 800d76a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d76c:	189b      	addlt	r3, r3, r2
 800d76e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d770:	bfae      	itee	ge
 800d772:	1b1c      	subge	r4, r3, r4
 800d774:	4623      	movlt	r3, r4
 800d776:	2400      	movlt	r4, #0
 800d778:	f1b9 0f00 	cmp.w	r9, #0
 800d77c:	bfb5      	itete	lt
 800d77e:	9a04      	ldrlt	r2, [sp, #16]
 800d780:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800d784:	eba2 0809 	sublt.w	r8, r2, r9
 800d788:	464a      	movge	r2, r9
 800d78a:	bfb8      	it	lt
 800d78c:	2200      	movlt	r2, #0
 800d78e:	e73c      	b.n	800d60a <_dtoa_r+0x632>
 800d790:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d794:	9f07      	ldr	r7, [sp, #28]
 800d796:	461c      	mov	r4, r3
 800d798:	e744      	b.n	800d624 <_dtoa_r+0x64c>
 800d79a:	461a      	mov	r2, r3
 800d79c:	e770      	b.n	800d680 <_dtoa_r+0x6a8>
 800d79e:	9b06      	ldr	r3, [sp, #24]
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	dc18      	bgt.n	800d7d6 <_dtoa_r+0x7fe>
 800d7a4:	9b02      	ldr	r3, [sp, #8]
 800d7a6:	b9b3      	cbnz	r3, 800d7d6 <_dtoa_r+0x7fe>
 800d7a8:	9b03      	ldr	r3, [sp, #12]
 800d7aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d7ae:	b9a2      	cbnz	r2, 800d7da <_dtoa_r+0x802>
 800d7b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d7b4:	0d12      	lsrs	r2, r2, #20
 800d7b6:	0512      	lsls	r2, r2, #20
 800d7b8:	b18a      	cbz	r2, 800d7de <_dtoa_r+0x806>
 800d7ba:	9b04      	ldr	r3, [sp, #16]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	9304      	str	r3, [sp, #16]
 800d7c0:	9b05      	ldr	r3, [sp, #20]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	9305      	str	r3, [sp, #20]
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d7ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	f47f af70 	bne.w	800d6b2 <_dtoa_r+0x6da>
 800d7d2:	2001      	movs	r0, #1
 800d7d4:	e775      	b.n	800d6c2 <_dtoa_r+0x6ea>
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	e7f6      	b.n	800d7c8 <_dtoa_r+0x7f0>
 800d7da:	9b02      	ldr	r3, [sp, #8]
 800d7dc:	e7f4      	b.n	800d7c8 <_dtoa_r+0x7f0>
 800d7de:	9209      	str	r2, [sp, #36]	; 0x24
 800d7e0:	e7f3      	b.n	800d7ca <_dtoa_r+0x7f2>
 800d7e2:	d082      	beq.n	800d6ea <_dtoa_r+0x712>
 800d7e4:	9b04      	ldr	r3, [sp, #16]
 800d7e6:	321c      	adds	r2, #28
 800d7e8:	4413      	add	r3, r2
 800d7ea:	9304      	str	r3, [sp, #16]
 800d7ec:	9b05      	ldr	r3, [sp, #20]
 800d7ee:	4490      	add	r8, r2
 800d7f0:	4413      	add	r3, r2
 800d7f2:	e779      	b.n	800d6e8 <_dtoa_r+0x710>
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	e7f5      	b.n	800d7e4 <_dtoa_r+0x80c>
 800d7f8:	f1b9 0f00 	cmp.w	r9, #0
 800d7fc:	dc36      	bgt.n	800d86c <_dtoa_r+0x894>
 800d7fe:	9b06      	ldr	r3, [sp, #24]
 800d800:	2b02      	cmp	r3, #2
 800d802:	dd33      	ble.n	800d86c <_dtoa_r+0x894>
 800d804:	46ca      	mov	sl, r9
 800d806:	f1ba 0f00 	cmp.w	sl, #0
 800d80a:	d10d      	bne.n	800d828 <_dtoa_r+0x850>
 800d80c:	4621      	mov	r1, r4
 800d80e:	4653      	mov	r3, sl
 800d810:	2205      	movs	r2, #5
 800d812:	4630      	mov	r0, r6
 800d814:	f000 fc00 	bl	800e018 <__multadd>
 800d818:	4601      	mov	r1, r0
 800d81a:	4604      	mov	r4, r0
 800d81c:	4628      	mov	r0, r5
 800d81e:	f000 fe15 	bl	800e44c <__mcmp>
 800d822:	2800      	cmp	r0, #0
 800d824:	f73f ade4 	bgt.w	800d3f0 <_dtoa_r+0x418>
 800d828:	9b08      	ldr	r3, [sp, #32]
 800d82a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d82e:	ea6f 0b03 	mvn.w	fp, r3
 800d832:	f04f 0900 	mov.w	r9, #0
 800d836:	4621      	mov	r1, r4
 800d838:	4630      	mov	r0, r6
 800d83a:	f000 fbcb 	bl	800dfd4 <_Bfree>
 800d83e:	2f00      	cmp	r7, #0
 800d840:	f43f aea1 	beq.w	800d586 <_dtoa_r+0x5ae>
 800d844:	f1b9 0f00 	cmp.w	r9, #0
 800d848:	d005      	beq.n	800d856 <_dtoa_r+0x87e>
 800d84a:	45b9      	cmp	r9, r7
 800d84c:	d003      	beq.n	800d856 <_dtoa_r+0x87e>
 800d84e:	4649      	mov	r1, r9
 800d850:	4630      	mov	r0, r6
 800d852:	f000 fbbf 	bl	800dfd4 <_Bfree>
 800d856:	4639      	mov	r1, r7
 800d858:	4630      	mov	r0, r6
 800d85a:	f000 fbbb 	bl	800dfd4 <_Bfree>
 800d85e:	e692      	b.n	800d586 <_dtoa_r+0x5ae>
 800d860:	2400      	movs	r4, #0
 800d862:	4627      	mov	r7, r4
 800d864:	e7e0      	b.n	800d828 <_dtoa_r+0x850>
 800d866:	4693      	mov	fp, r2
 800d868:	4627      	mov	r7, r4
 800d86a:	e5c1      	b.n	800d3f0 <_dtoa_r+0x418>
 800d86c:	9b07      	ldr	r3, [sp, #28]
 800d86e:	46ca      	mov	sl, r9
 800d870:	2b00      	cmp	r3, #0
 800d872:	f000 8100 	beq.w	800da76 <_dtoa_r+0xa9e>
 800d876:	f1b8 0f00 	cmp.w	r8, #0
 800d87a:	dd05      	ble.n	800d888 <_dtoa_r+0x8b0>
 800d87c:	4639      	mov	r1, r7
 800d87e:	4642      	mov	r2, r8
 800d880:	4630      	mov	r0, r6
 800d882:	f000 fd77 	bl	800e374 <__lshift>
 800d886:	4607      	mov	r7, r0
 800d888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d05d      	beq.n	800d94a <_dtoa_r+0x972>
 800d88e:	6879      	ldr	r1, [r7, #4]
 800d890:	4630      	mov	r0, r6
 800d892:	f000 fb5f 	bl	800df54 <_Balloc>
 800d896:	4680      	mov	r8, r0
 800d898:	b928      	cbnz	r0, 800d8a6 <_dtoa_r+0x8ce>
 800d89a:	4b82      	ldr	r3, [pc, #520]	; (800daa4 <_dtoa_r+0xacc>)
 800d89c:	4602      	mov	r2, r0
 800d89e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d8a2:	f7ff bbb1 	b.w	800d008 <_dtoa_r+0x30>
 800d8a6:	693a      	ldr	r2, [r7, #16]
 800d8a8:	3202      	adds	r2, #2
 800d8aa:	0092      	lsls	r2, r2, #2
 800d8ac:	f107 010c 	add.w	r1, r7, #12
 800d8b0:	300c      	adds	r0, #12
 800d8b2:	f7ff fadb 	bl	800ce6c <memcpy>
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	4641      	mov	r1, r8
 800d8ba:	4630      	mov	r0, r6
 800d8bc:	f000 fd5a 	bl	800e374 <__lshift>
 800d8c0:	9b01      	ldr	r3, [sp, #4]
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	9304      	str	r3, [sp, #16]
 800d8c6:	9b01      	ldr	r3, [sp, #4]
 800d8c8:	4453      	add	r3, sl
 800d8ca:	9308      	str	r3, [sp, #32]
 800d8cc:	9b02      	ldr	r3, [sp, #8]
 800d8ce:	f003 0301 	and.w	r3, r3, #1
 800d8d2:	46b9      	mov	r9, r7
 800d8d4:	9307      	str	r3, [sp, #28]
 800d8d6:	4607      	mov	r7, r0
 800d8d8:	9b04      	ldr	r3, [sp, #16]
 800d8da:	4621      	mov	r1, r4
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	4628      	mov	r0, r5
 800d8e0:	9302      	str	r3, [sp, #8]
 800d8e2:	f7ff faef 	bl	800cec4 <quorem>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	3330      	adds	r3, #48	; 0x30
 800d8ea:	9005      	str	r0, [sp, #20]
 800d8ec:	4649      	mov	r1, r9
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	9309      	str	r3, [sp, #36]	; 0x24
 800d8f2:	f000 fdab 	bl	800e44c <__mcmp>
 800d8f6:	463a      	mov	r2, r7
 800d8f8:	4682      	mov	sl, r0
 800d8fa:	4621      	mov	r1, r4
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	f000 fdc1 	bl	800e484 <__mdiff>
 800d902:	68c2      	ldr	r2, [r0, #12]
 800d904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d906:	4680      	mov	r8, r0
 800d908:	bb0a      	cbnz	r2, 800d94e <_dtoa_r+0x976>
 800d90a:	4601      	mov	r1, r0
 800d90c:	4628      	mov	r0, r5
 800d90e:	f000 fd9d 	bl	800e44c <__mcmp>
 800d912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d914:	4602      	mov	r2, r0
 800d916:	4641      	mov	r1, r8
 800d918:	4630      	mov	r0, r6
 800d91a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800d91e:	f000 fb59 	bl	800dfd4 <_Bfree>
 800d922:	9b06      	ldr	r3, [sp, #24]
 800d924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d926:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d92a:	ea43 0102 	orr.w	r1, r3, r2
 800d92e:	9b07      	ldr	r3, [sp, #28]
 800d930:	4319      	orrs	r1, r3
 800d932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d934:	d10d      	bne.n	800d952 <_dtoa_r+0x97a>
 800d936:	2b39      	cmp	r3, #57	; 0x39
 800d938:	d029      	beq.n	800d98e <_dtoa_r+0x9b6>
 800d93a:	f1ba 0f00 	cmp.w	sl, #0
 800d93e:	dd01      	ble.n	800d944 <_dtoa_r+0x96c>
 800d940:	9b05      	ldr	r3, [sp, #20]
 800d942:	3331      	adds	r3, #49	; 0x31
 800d944:	9a02      	ldr	r2, [sp, #8]
 800d946:	7013      	strb	r3, [r2, #0]
 800d948:	e775      	b.n	800d836 <_dtoa_r+0x85e>
 800d94a:	4638      	mov	r0, r7
 800d94c:	e7b8      	b.n	800d8c0 <_dtoa_r+0x8e8>
 800d94e:	2201      	movs	r2, #1
 800d950:	e7e1      	b.n	800d916 <_dtoa_r+0x93e>
 800d952:	f1ba 0f00 	cmp.w	sl, #0
 800d956:	db06      	blt.n	800d966 <_dtoa_r+0x98e>
 800d958:	9906      	ldr	r1, [sp, #24]
 800d95a:	ea41 0a0a 	orr.w	sl, r1, sl
 800d95e:	9907      	ldr	r1, [sp, #28]
 800d960:	ea5a 0a01 	orrs.w	sl, sl, r1
 800d964:	d120      	bne.n	800d9a8 <_dtoa_r+0x9d0>
 800d966:	2a00      	cmp	r2, #0
 800d968:	ddec      	ble.n	800d944 <_dtoa_r+0x96c>
 800d96a:	4629      	mov	r1, r5
 800d96c:	2201      	movs	r2, #1
 800d96e:	4630      	mov	r0, r6
 800d970:	9304      	str	r3, [sp, #16]
 800d972:	f000 fcff 	bl	800e374 <__lshift>
 800d976:	4621      	mov	r1, r4
 800d978:	4605      	mov	r5, r0
 800d97a:	f000 fd67 	bl	800e44c <__mcmp>
 800d97e:	2800      	cmp	r0, #0
 800d980:	9b04      	ldr	r3, [sp, #16]
 800d982:	dc02      	bgt.n	800d98a <_dtoa_r+0x9b2>
 800d984:	d1de      	bne.n	800d944 <_dtoa_r+0x96c>
 800d986:	07da      	lsls	r2, r3, #31
 800d988:	d5dc      	bpl.n	800d944 <_dtoa_r+0x96c>
 800d98a:	2b39      	cmp	r3, #57	; 0x39
 800d98c:	d1d8      	bne.n	800d940 <_dtoa_r+0x968>
 800d98e:	9a02      	ldr	r2, [sp, #8]
 800d990:	2339      	movs	r3, #57	; 0x39
 800d992:	7013      	strb	r3, [r2, #0]
 800d994:	4643      	mov	r3, r8
 800d996:	4698      	mov	r8, r3
 800d998:	3b01      	subs	r3, #1
 800d99a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d99e:	2a39      	cmp	r2, #57	; 0x39
 800d9a0:	d051      	beq.n	800da46 <_dtoa_r+0xa6e>
 800d9a2:	3201      	adds	r2, #1
 800d9a4:	701a      	strb	r2, [r3, #0]
 800d9a6:	e746      	b.n	800d836 <_dtoa_r+0x85e>
 800d9a8:	2a00      	cmp	r2, #0
 800d9aa:	dd03      	ble.n	800d9b4 <_dtoa_r+0x9dc>
 800d9ac:	2b39      	cmp	r3, #57	; 0x39
 800d9ae:	d0ee      	beq.n	800d98e <_dtoa_r+0x9b6>
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	e7c7      	b.n	800d944 <_dtoa_r+0x96c>
 800d9b4:	9a04      	ldr	r2, [sp, #16]
 800d9b6:	9908      	ldr	r1, [sp, #32]
 800d9b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d9bc:	428a      	cmp	r2, r1
 800d9be:	d02b      	beq.n	800da18 <_dtoa_r+0xa40>
 800d9c0:	4629      	mov	r1, r5
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	220a      	movs	r2, #10
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	f000 fb26 	bl	800e018 <__multadd>
 800d9cc:	45b9      	cmp	r9, r7
 800d9ce:	4605      	mov	r5, r0
 800d9d0:	f04f 0300 	mov.w	r3, #0
 800d9d4:	f04f 020a 	mov.w	r2, #10
 800d9d8:	4649      	mov	r1, r9
 800d9da:	4630      	mov	r0, r6
 800d9dc:	d107      	bne.n	800d9ee <_dtoa_r+0xa16>
 800d9de:	f000 fb1b 	bl	800e018 <__multadd>
 800d9e2:	4681      	mov	r9, r0
 800d9e4:	4607      	mov	r7, r0
 800d9e6:	9b04      	ldr	r3, [sp, #16]
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	9304      	str	r3, [sp, #16]
 800d9ec:	e774      	b.n	800d8d8 <_dtoa_r+0x900>
 800d9ee:	f000 fb13 	bl	800e018 <__multadd>
 800d9f2:	4639      	mov	r1, r7
 800d9f4:	4681      	mov	r9, r0
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	220a      	movs	r2, #10
 800d9fa:	4630      	mov	r0, r6
 800d9fc:	f000 fb0c 	bl	800e018 <__multadd>
 800da00:	4607      	mov	r7, r0
 800da02:	e7f0      	b.n	800d9e6 <_dtoa_r+0xa0e>
 800da04:	f1ba 0f00 	cmp.w	sl, #0
 800da08:	9a01      	ldr	r2, [sp, #4]
 800da0a:	bfcc      	ite	gt
 800da0c:	46d0      	movgt	r8, sl
 800da0e:	f04f 0801 	movle.w	r8, #1
 800da12:	4490      	add	r8, r2
 800da14:	f04f 0900 	mov.w	r9, #0
 800da18:	4629      	mov	r1, r5
 800da1a:	2201      	movs	r2, #1
 800da1c:	4630      	mov	r0, r6
 800da1e:	9302      	str	r3, [sp, #8]
 800da20:	f000 fca8 	bl	800e374 <__lshift>
 800da24:	4621      	mov	r1, r4
 800da26:	4605      	mov	r5, r0
 800da28:	f000 fd10 	bl	800e44c <__mcmp>
 800da2c:	2800      	cmp	r0, #0
 800da2e:	dcb1      	bgt.n	800d994 <_dtoa_r+0x9bc>
 800da30:	d102      	bne.n	800da38 <_dtoa_r+0xa60>
 800da32:	9b02      	ldr	r3, [sp, #8]
 800da34:	07db      	lsls	r3, r3, #31
 800da36:	d4ad      	bmi.n	800d994 <_dtoa_r+0x9bc>
 800da38:	4643      	mov	r3, r8
 800da3a:	4698      	mov	r8, r3
 800da3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da40:	2a30      	cmp	r2, #48	; 0x30
 800da42:	d0fa      	beq.n	800da3a <_dtoa_r+0xa62>
 800da44:	e6f7      	b.n	800d836 <_dtoa_r+0x85e>
 800da46:	9a01      	ldr	r2, [sp, #4]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d1a4      	bne.n	800d996 <_dtoa_r+0x9be>
 800da4c:	f10b 0b01 	add.w	fp, fp, #1
 800da50:	2331      	movs	r3, #49	; 0x31
 800da52:	e778      	b.n	800d946 <_dtoa_r+0x96e>
 800da54:	4b14      	ldr	r3, [pc, #80]	; (800daa8 <_dtoa_r+0xad0>)
 800da56:	f7ff bb2a 	b.w	800d0ae <_dtoa_r+0xd6>
 800da5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	f47f ab05 	bne.w	800d06c <_dtoa_r+0x94>
 800da62:	4b12      	ldr	r3, [pc, #72]	; (800daac <_dtoa_r+0xad4>)
 800da64:	f7ff bb23 	b.w	800d0ae <_dtoa_r+0xd6>
 800da68:	f1ba 0f00 	cmp.w	sl, #0
 800da6c:	dc03      	bgt.n	800da76 <_dtoa_r+0xa9e>
 800da6e:	9b06      	ldr	r3, [sp, #24]
 800da70:	2b02      	cmp	r3, #2
 800da72:	f73f aec8 	bgt.w	800d806 <_dtoa_r+0x82e>
 800da76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800da7a:	4621      	mov	r1, r4
 800da7c:	4628      	mov	r0, r5
 800da7e:	f7ff fa21 	bl	800cec4 <quorem>
 800da82:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800da86:	f808 3b01 	strb.w	r3, [r8], #1
 800da8a:	9a01      	ldr	r2, [sp, #4]
 800da8c:	eba8 0202 	sub.w	r2, r8, r2
 800da90:	4592      	cmp	sl, r2
 800da92:	ddb7      	ble.n	800da04 <_dtoa_r+0xa2c>
 800da94:	4629      	mov	r1, r5
 800da96:	2300      	movs	r3, #0
 800da98:	220a      	movs	r2, #10
 800da9a:	4630      	mov	r0, r6
 800da9c:	f000 fabc 	bl	800e018 <__multadd>
 800daa0:	4605      	mov	r5, r0
 800daa2:	e7ea      	b.n	800da7a <_dtoa_r+0xaa2>
 800daa4:	0808fd70 	.word	0x0808fd70
 800daa8:	0808fc3c 	.word	0x0808fc3c
 800daac:	0808fd0b 	.word	0x0808fd0b

0800dab0 <_free_r>:
 800dab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dab2:	2900      	cmp	r1, #0
 800dab4:	d044      	beq.n	800db40 <_free_r+0x90>
 800dab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daba:	9001      	str	r0, [sp, #4]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	f1a1 0404 	sub.w	r4, r1, #4
 800dac2:	bfb8      	it	lt
 800dac4:	18e4      	addlt	r4, r4, r3
 800dac6:	f7ff f841 	bl	800cb4c <__malloc_lock>
 800daca:	4a1e      	ldr	r2, [pc, #120]	; (800db44 <_free_r+0x94>)
 800dacc:	9801      	ldr	r0, [sp, #4]
 800dace:	6813      	ldr	r3, [r2, #0]
 800dad0:	b933      	cbnz	r3, 800dae0 <_free_r+0x30>
 800dad2:	6063      	str	r3, [r4, #4]
 800dad4:	6014      	str	r4, [r2, #0]
 800dad6:	b003      	add	sp, #12
 800dad8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dadc:	f7ff b83c 	b.w	800cb58 <__malloc_unlock>
 800dae0:	42a3      	cmp	r3, r4
 800dae2:	d908      	bls.n	800daf6 <_free_r+0x46>
 800dae4:	6825      	ldr	r5, [r4, #0]
 800dae6:	1961      	adds	r1, r4, r5
 800dae8:	428b      	cmp	r3, r1
 800daea:	bf01      	itttt	eq
 800daec:	6819      	ldreq	r1, [r3, #0]
 800daee:	685b      	ldreq	r3, [r3, #4]
 800daf0:	1949      	addeq	r1, r1, r5
 800daf2:	6021      	streq	r1, [r4, #0]
 800daf4:	e7ed      	b.n	800dad2 <_free_r+0x22>
 800daf6:	461a      	mov	r2, r3
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	b10b      	cbz	r3, 800db00 <_free_r+0x50>
 800dafc:	42a3      	cmp	r3, r4
 800dafe:	d9fa      	bls.n	800daf6 <_free_r+0x46>
 800db00:	6811      	ldr	r1, [r2, #0]
 800db02:	1855      	adds	r5, r2, r1
 800db04:	42a5      	cmp	r5, r4
 800db06:	d10b      	bne.n	800db20 <_free_r+0x70>
 800db08:	6824      	ldr	r4, [r4, #0]
 800db0a:	4421      	add	r1, r4
 800db0c:	1854      	adds	r4, r2, r1
 800db0e:	42a3      	cmp	r3, r4
 800db10:	6011      	str	r1, [r2, #0]
 800db12:	d1e0      	bne.n	800dad6 <_free_r+0x26>
 800db14:	681c      	ldr	r4, [r3, #0]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	6053      	str	r3, [r2, #4]
 800db1a:	440c      	add	r4, r1
 800db1c:	6014      	str	r4, [r2, #0]
 800db1e:	e7da      	b.n	800dad6 <_free_r+0x26>
 800db20:	d902      	bls.n	800db28 <_free_r+0x78>
 800db22:	230c      	movs	r3, #12
 800db24:	6003      	str	r3, [r0, #0]
 800db26:	e7d6      	b.n	800dad6 <_free_r+0x26>
 800db28:	6825      	ldr	r5, [r4, #0]
 800db2a:	1961      	adds	r1, r4, r5
 800db2c:	428b      	cmp	r3, r1
 800db2e:	bf04      	itt	eq
 800db30:	6819      	ldreq	r1, [r3, #0]
 800db32:	685b      	ldreq	r3, [r3, #4]
 800db34:	6063      	str	r3, [r4, #4]
 800db36:	bf04      	itt	eq
 800db38:	1949      	addeq	r1, r1, r5
 800db3a:	6021      	streq	r1, [r4, #0]
 800db3c:	6054      	str	r4, [r2, #4]
 800db3e:	e7ca      	b.n	800dad6 <_free_r+0x26>
 800db40:	b003      	add	sp, #12
 800db42:	bd30      	pop	{r4, r5, pc}
 800db44:	20002f50 	.word	0x20002f50

0800db48 <__ssputs_r>:
 800db48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db4c:	688e      	ldr	r6, [r1, #8]
 800db4e:	461f      	mov	r7, r3
 800db50:	42be      	cmp	r6, r7
 800db52:	680b      	ldr	r3, [r1, #0]
 800db54:	4682      	mov	sl, r0
 800db56:	460c      	mov	r4, r1
 800db58:	4690      	mov	r8, r2
 800db5a:	d82c      	bhi.n	800dbb6 <__ssputs_r+0x6e>
 800db5c:	898a      	ldrh	r2, [r1, #12]
 800db5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db62:	d026      	beq.n	800dbb2 <__ssputs_r+0x6a>
 800db64:	6965      	ldr	r5, [r4, #20]
 800db66:	6909      	ldr	r1, [r1, #16]
 800db68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db6c:	eba3 0901 	sub.w	r9, r3, r1
 800db70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db74:	1c7b      	adds	r3, r7, #1
 800db76:	444b      	add	r3, r9
 800db78:	106d      	asrs	r5, r5, #1
 800db7a:	429d      	cmp	r5, r3
 800db7c:	bf38      	it	cc
 800db7e:	461d      	movcc	r5, r3
 800db80:	0553      	lsls	r3, r2, #21
 800db82:	d527      	bpl.n	800dbd4 <__ssputs_r+0x8c>
 800db84:	4629      	mov	r1, r5
 800db86:	f7fe fdd1 	bl	800c72c <_malloc_r>
 800db8a:	4606      	mov	r6, r0
 800db8c:	b360      	cbz	r0, 800dbe8 <__ssputs_r+0xa0>
 800db8e:	6921      	ldr	r1, [r4, #16]
 800db90:	464a      	mov	r2, r9
 800db92:	f7ff f96b 	bl	800ce6c <memcpy>
 800db96:	89a3      	ldrh	r3, [r4, #12]
 800db98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dba0:	81a3      	strh	r3, [r4, #12]
 800dba2:	6126      	str	r6, [r4, #16]
 800dba4:	6165      	str	r5, [r4, #20]
 800dba6:	444e      	add	r6, r9
 800dba8:	eba5 0509 	sub.w	r5, r5, r9
 800dbac:	6026      	str	r6, [r4, #0]
 800dbae:	60a5      	str	r5, [r4, #8]
 800dbb0:	463e      	mov	r6, r7
 800dbb2:	42be      	cmp	r6, r7
 800dbb4:	d900      	bls.n	800dbb8 <__ssputs_r+0x70>
 800dbb6:	463e      	mov	r6, r7
 800dbb8:	6820      	ldr	r0, [r4, #0]
 800dbba:	4632      	mov	r2, r6
 800dbbc:	4641      	mov	r1, r8
 800dbbe:	f000 fdca 	bl	800e756 <memmove>
 800dbc2:	68a3      	ldr	r3, [r4, #8]
 800dbc4:	1b9b      	subs	r3, r3, r6
 800dbc6:	60a3      	str	r3, [r4, #8]
 800dbc8:	6823      	ldr	r3, [r4, #0]
 800dbca:	4433      	add	r3, r6
 800dbcc:	6023      	str	r3, [r4, #0]
 800dbce:	2000      	movs	r0, #0
 800dbd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbd4:	462a      	mov	r2, r5
 800dbd6:	f000 fd8f 	bl	800e6f8 <_realloc_r>
 800dbda:	4606      	mov	r6, r0
 800dbdc:	2800      	cmp	r0, #0
 800dbde:	d1e0      	bne.n	800dba2 <__ssputs_r+0x5a>
 800dbe0:	6921      	ldr	r1, [r4, #16]
 800dbe2:	4650      	mov	r0, sl
 800dbe4:	f7ff ff64 	bl	800dab0 <_free_r>
 800dbe8:	230c      	movs	r3, #12
 800dbea:	f8ca 3000 	str.w	r3, [sl]
 800dbee:	89a3      	ldrh	r3, [r4, #12]
 800dbf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbf4:	81a3      	strh	r3, [r4, #12]
 800dbf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbfa:	e7e9      	b.n	800dbd0 <__ssputs_r+0x88>

0800dbfc <_svfiprintf_r>:
 800dbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc00:	4698      	mov	r8, r3
 800dc02:	898b      	ldrh	r3, [r1, #12]
 800dc04:	061b      	lsls	r3, r3, #24
 800dc06:	b09d      	sub	sp, #116	; 0x74
 800dc08:	4607      	mov	r7, r0
 800dc0a:	460d      	mov	r5, r1
 800dc0c:	4614      	mov	r4, r2
 800dc0e:	d50e      	bpl.n	800dc2e <_svfiprintf_r+0x32>
 800dc10:	690b      	ldr	r3, [r1, #16]
 800dc12:	b963      	cbnz	r3, 800dc2e <_svfiprintf_r+0x32>
 800dc14:	2140      	movs	r1, #64	; 0x40
 800dc16:	f7fe fd89 	bl	800c72c <_malloc_r>
 800dc1a:	6028      	str	r0, [r5, #0]
 800dc1c:	6128      	str	r0, [r5, #16]
 800dc1e:	b920      	cbnz	r0, 800dc2a <_svfiprintf_r+0x2e>
 800dc20:	230c      	movs	r3, #12
 800dc22:	603b      	str	r3, [r7, #0]
 800dc24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc28:	e0d0      	b.n	800ddcc <_svfiprintf_r+0x1d0>
 800dc2a:	2340      	movs	r3, #64	; 0x40
 800dc2c:	616b      	str	r3, [r5, #20]
 800dc2e:	2300      	movs	r3, #0
 800dc30:	9309      	str	r3, [sp, #36]	; 0x24
 800dc32:	2320      	movs	r3, #32
 800dc34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc38:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc3c:	2330      	movs	r3, #48	; 0x30
 800dc3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dde4 <_svfiprintf_r+0x1e8>
 800dc42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc46:	f04f 0901 	mov.w	r9, #1
 800dc4a:	4623      	mov	r3, r4
 800dc4c:	469a      	mov	sl, r3
 800dc4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc52:	b10a      	cbz	r2, 800dc58 <_svfiprintf_r+0x5c>
 800dc54:	2a25      	cmp	r2, #37	; 0x25
 800dc56:	d1f9      	bne.n	800dc4c <_svfiprintf_r+0x50>
 800dc58:	ebba 0b04 	subs.w	fp, sl, r4
 800dc5c:	d00b      	beq.n	800dc76 <_svfiprintf_r+0x7a>
 800dc5e:	465b      	mov	r3, fp
 800dc60:	4622      	mov	r2, r4
 800dc62:	4629      	mov	r1, r5
 800dc64:	4638      	mov	r0, r7
 800dc66:	f7ff ff6f 	bl	800db48 <__ssputs_r>
 800dc6a:	3001      	adds	r0, #1
 800dc6c:	f000 80a9 	beq.w	800ddc2 <_svfiprintf_r+0x1c6>
 800dc70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc72:	445a      	add	r2, fp
 800dc74:	9209      	str	r2, [sp, #36]	; 0x24
 800dc76:	f89a 3000 	ldrb.w	r3, [sl]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	f000 80a1 	beq.w	800ddc2 <_svfiprintf_r+0x1c6>
 800dc80:	2300      	movs	r3, #0
 800dc82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc8a:	f10a 0a01 	add.w	sl, sl, #1
 800dc8e:	9304      	str	r3, [sp, #16]
 800dc90:	9307      	str	r3, [sp, #28]
 800dc92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc96:	931a      	str	r3, [sp, #104]	; 0x68
 800dc98:	4654      	mov	r4, sl
 800dc9a:	2205      	movs	r2, #5
 800dc9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dca0:	4850      	ldr	r0, [pc, #320]	; (800dde4 <_svfiprintf_r+0x1e8>)
 800dca2:	f7f2 facd 	bl	8000240 <memchr>
 800dca6:	9a04      	ldr	r2, [sp, #16]
 800dca8:	b9d8      	cbnz	r0, 800dce2 <_svfiprintf_r+0xe6>
 800dcaa:	06d0      	lsls	r0, r2, #27
 800dcac:	bf44      	itt	mi
 800dcae:	2320      	movmi	r3, #32
 800dcb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcb4:	0711      	lsls	r1, r2, #28
 800dcb6:	bf44      	itt	mi
 800dcb8:	232b      	movmi	r3, #43	; 0x2b
 800dcba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcbe:	f89a 3000 	ldrb.w	r3, [sl]
 800dcc2:	2b2a      	cmp	r3, #42	; 0x2a
 800dcc4:	d015      	beq.n	800dcf2 <_svfiprintf_r+0xf6>
 800dcc6:	9a07      	ldr	r2, [sp, #28]
 800dcc8:	4654      	mov	r4, sl
 800dcca:	2000      	movs	r0, #0
 800dccc:	f04f 0c0a 	mov.w	ip, #10
 800dcd0:	4621      	mov	r1, r4
 800dcd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcd6:	3b30      	subs	r3, #48	; 0x30
 800dcd8:	2b09      	cmp	r3, #9
 800dcda:	d94d      	bls.n	800dd78 <_svfiprintf_r+0x17c>
 800dcdc:	b1b0      	cbz	r0, 800dd0c <_svfiprintf_r+0x110>
 800dcde:	9207      	str	r2, [sp, #28]
 800dce0:	e014      	b.n	800dd0c <_svfiprintf_r+0x110>
 800dce2:	eba0 0308 	sub.w	r3, r0, r8
 800dce6:	fa09 f303 	lsl.w	r3, r9, r3
 800dcea:	4313      	orrs	r3, r2
 800dcec:	9304      	str	r3, [sp, #16]
 800dcee:	46a2      	mov	sl, r4
 800dcf0:	e7d2      	b.n	800dc98 <_svfiprintf_r+0x9c>
 800dcf2:	9b03      	ldr	r3, [sp, #12]
 800dcf4:	1d19      	adds	r1, r3, #4
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	9103      	str	r1, [sp, #12]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	bfbb      	ittet	lt
 800dcfe:	425b      	neglt	r3, r3
 800dd00:	f042 0202 	orrlt.w	r2, r2, #2
 800dd04:	9307      	strge	r3, [sp, #28]
 800dd06:	9307      	strlt	r3, [sp, #28]
 800dd08:	bfb8      	it	lt
 800dd0a:	9204      	strlt	r2, [sp, #16]
 800dd0c:	7823      	ldrb	r3, [r4, #0]
 800dd0e:	2b2e      	cmp	r3, #46	; 0x2e
 800dd10:	d10c      	bne.n	800dd2c <_svfiprintf_r+0x130>
 800dd12:	7863      	ldrb	r3, [r4, #1]
 800dd14:	2b2a      	cmp	r3, #42	; 0x2a
 800dd16:	d134      	bne.n	800dd82 <_svfiprintf_r+0x186>
 800dd18:	9b03      	ldr	r3, [sp, #12]
 800dd1a:	1d1a      	adds	r2, r3, #4
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	9203      	str	r2, [sp, #12]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	bfb8      	it	lt
 800dd24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dd28:	3402      	adds	r4, #2
 800dd2a:	9305      	str	r3, [sp, #20]
 800dd2c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ddf4 <_svfiprintf_r+0x1f8>
 800dd30:	7821      	ldrb	r1, [r4, #0]
 800dd32:	2203      	movs	r2, #3
 800dd34:	4650      	mov	r0, sl
 800dd36:	f7f2 fa83 	bl	8000240 <memchr>
 800dd3a:	b138      	cbz	r0, 800dd4c <_svfiprintf_r+0x150>
 800dd3c:	9b04      	ldr	r3, [sp, #16]
 800dd3e:	eba0 000a 	sub.w	r0, r0, sl
 800dd42:	2240      	movs	r2, #64	; 0x40
 800dd44:	4082      	lsls	r2, r0
 800dd46:	4313      	orrs	r3, r2
 800dd48:	3401      	adds	r4, #1
 800dd4a:	9304      	str	r3, [sp, #16]
 800dd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd50:	4825      	ldr	r0, [pc, #148]	; (800dde8 <_svfiprintf_r+0x1ec>)
 800dd52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd56:	2206      	movs	r2, #6
 800dd58:	f7f2 fa72 	bl	8000240 <memchr>
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	d038      	beq.n	800ddd2 <_svfiprintf_r+0x1d6>
 800dd60:	4b22      	ldr	r3, [pc, #136]	; (800ddec <_svfiprintf_r+0x1f0>)
 800dd62:	bb1b      	cbnz	r3, 800ddac <_svfiprintf_r+0x1b0>
 800dd64:	9b03      	ldr	r3, [sp, #12]
 800dd66:	3307      	adds	r3, #7
 800dd68:	f023 0307 	bic.w	r3, r3, #7
 800dd6c:	3308      	adds	r3, #8
 800dd6e:	9303      	str	r3, [sp, #12]
 800dd70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd72:	4433      	add	r3, r6
 800dd74:	9309      	str	r3, [sp, #36]	; 0x24
 800dd76:	e768      	b.n	800dc4a <_svfiprintf_r+0x4e>
 800dd78:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd7c:	460c      	mov	r4, r1
 800dd7e:	2001      	movs	r0, #1
 800dd80:	e7a6      	b.n	800dcd0 <_svfiprintf_r+0xd4>
 800dd82:	2300      	movs	r3, #0
 800dd84:	3401      	adds	r4, #1
 800dd86:	9305      	str	r3, [sp, #20]
 800dd88:	4619      	mov	r1, r3
 800dd8a:	f04f 0c0a 	mov.w	ip, #10
 800dd8e:	4620      	mov	r0, r4
 800dd90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd94:	3a30      	subs	r2, #48	; 0x30
 800dd96:	2a09      	cmp	r2, #9
 800dd98:	d903      	bls.n	800dda2 <_svfiprintf_r+0x1a6>
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d0c6      	beq.n	800dd2c <_svfiprintf_r+0x130>
 800dd9e:	9105      	str	r1, [sp, #20]
 800dda0:	e7c4      	b.n	800dd2c <_svfiprintf_r+0x130>
 800dda2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dda6:	4604      	mov	r4, r0
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e7f0      	b.n	800dd8e <_svfiprintf_r+0x192>
 800ddac:	ab03      	add	r3, sp, #12
 800ddae:	9300      	str	r3, [sp, #0]
 800ddb0:	462a      	mov	r2, r5
 800ddb2:	4b0f      	ldr	r3, [pc, #60]	; (800ddf0 <_svfiprintf_r+0x1f4>)
 800ddb4:	a904      	add	r1, sp, #16
 800ddb6:	4638      	mov	r0, r7
 800ddb8:	f7fe fa6e 	bl	800c298 <_printf_float>
 800ddbc:	1c42      	adds	r2, r0, #1
 800ddbe:	4606      	mov	r6, r0
 800ddc0:	d1d6      	bne.n	800dd70 <_svfiprintf_r+0x174>
 800ddc2:	89ab      	ldrh	r3, [r5, #12]
 800ddc4:	065b      	lsls	r3, r3, #25
 800ddc6:	f53f af2d 	bmi.w	800dc24 <_svfiprintf_r+0x28>
 800ddca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddcc:	b01d      	add	sp, #116	; 0x74
 800ddce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd2:	ab03      	add	r3, sp, #12
 800ddd4:	9300      	str	r3, [sp, #0]
 800ddd6:	462a      	mov	r2, r5
 800ddd8:	4b05      	ldr	r3, [pc, #20]	; (800ddf0 <_svfiprintf_r+0x1f4>)
 800ddda:	a904      	add	r1, sp, #16
 800dddc:	4638      	mov	r0, r7
 800ddde:	f7fe fd93 	bl	800c908 <_printf_i>
 800dde2:	e7eb      	b.n	800ddbc <_svfiprintf_r+0x1c0>
 800dde4:	0808fd81 	.word	0x0808fd81
 800dde8:	0808fd8b 	.word	0x0808fd8b
 800ddec:	0800c299 	.word	0x0800c299
 800ddf0:	0800db49 	.word	0x0800db49
 800ddf4:	0808fd87 	.word	0x0808fd87

0800ddf8 <__sflush_r>:
 800ddf8:	898a      	ldrh	r2, [r1, #12]
 800ddfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddfe:	4605      	mov	r5, r0
 800de00:	0710      	lsls	r0, r2, #28
 800de02:	460c      	mov	r4, r1
 800de04:	d458      	bmi.n	800deb8 <__sflush_r+0xc0>
 800de06:	684b      	ldr	r3, [r1, #4]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	dc05      	bgt.n	800de18 <__sflush_r+0x20>
 800de0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de0e:	2b00      	cmp	r3, #0
 800de10:	dc02      	bgt.n	800de18 <__sflush_r+0x20>
 800de12:	2000      	movs	r0, #0
 800de14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de1a:	2e00      	cmp	r6, #0
 800de1c:	d0f9      	beq.n	800de12 <__sflush_r+0x1a>
 800de1e:	2300      	movs	r3, #0
 800de20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de24:	682f      	ldr	r7, [r5, #0]
 800de26:	6a21      	ldr	r1, [r4, #32]
 800de28:	602b      	str	r3, [r5, #0]
 800de2a:	d032      	beq.n	800de92 <__sflush_r+0x9a>
 800de2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de2e:	89a3      	ldrh	r3, [r4, #12]
 800de30:	075a      	lsls	r2, r3, #29
 800de32:	d505      	bpl.n	800de40 <__sflush_r+0x48>
 800de34:	6863      	ldr	r3, [r4, #4]
 800de36:	1ac0      	subs	r0, r0, r3
 800de38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de3a:	b10b      	cbz	r3, 800de40 <__sflush_r+0x48>
 800de3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de3e:	1ac0      	subs	r0, r0, r3
 800de40:	2300      	movs	r3, #0
 800de42:	4602      	mov	r2, r0
 800de44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de46:	6a21      	ldr	r1, [r4, #32]
 800de48:	4628      	mov	r0, r5
 800de4a:	47b0      	blx	r6
 800de4c:	1c43      	adds	r3, r0, #1
 800de4e:	89a3      	ldrh	r3, [r4, #12]
 800de50:	d106      	bne.n	800de60 <__sflush_r+0x68>
 800de52:	6829      	ldr	r1, [r5, #0]
 800de54:	291d      	cmp	r1, #29
 800de56:	d82b      	bhi.n	800deb0 <__sflush_r+0xb8>
 800de58:	4a29      	ldr	r2, [pc, #164]	; (800df00 <__sflush_r+0x108>)
 800de5a:	410a      	asrs	r2, r1
 800de5c:	07d6      	lsls	r6, r2, #31
 800de5e:	d427      	bmi.n	800deb0 <__sflush_r+0xb8>
 800de60:	2200      	movs	r2, #0
 800de62:	6062      	str	r2, [r4, #4]
 800de64:	04d9      	lsls	r1, r3, #19
 800de66:	6922      	ldr	r2, [r4, #16]
 800de68:	6022      	str	r2, [r4, #0]
 800de6a:	d504      	bpl.n	800de76 <__sflush_r+0x7e>
 800de6c:	1c42      	adds	r2, r0, #1
 800de6e:	d101      	bne.n	800de74 <__sflush_r+0x7c>
 800de70:	682b      	ldr	r3, [r5, #0]
 800de72:	b903      	cbnz	r3, 800de76 <__sflush_r+0x7e>
 800de74:	6560      	str	r0, [r4, #84]	; 0x54
 800de76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de78:	602f      	str	r7, [r5, #0]
 800de7a:	2900      	cmp	r1, #0
 800de7c:	d0c9      	beq.n	800de12 <__sflush_r+0x1a>
 800de7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de82:	4299      	cmp	r1, r3
 800de84:	d002      	beq.n	800de8c <__sflush_r+0x94>
 800de86:	4628      	mov	r0, r5
 800de88:	f7ff fe12 	bl	800dab0 <_free_r>
 800de8c:	2000      	movs	r0, #0
 800de8e:	6360      	str	r0, [r4, #52]	; 0x34
 800de90:	e7c0      	b.n	800de14 <__sflush_r+0x1c>
 800de92:	2301      	movs	r3, #1
 800de94:	4628      	mov	r0, r5
 800de96:	47b0      	blx	r6
 800de98:	1c41      	adds	r1, r0, #1
 800de9a:	d1c8      	bne.n	800de2e <__sflush_r+0x36>
 800de9c:	682b      	ldr	r3, [r5, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d0c5      	beq.n	800de2e <__sflush_r+0x36>
 800dea2:	2b1d      	cmp	r3, #29
 800dea4:	d001      	beq.n	800deaa <__sflush_r+0xb2>
 800dea6:	2b16      	cmp	r3, #22
 800dea8:	d101      	bne.n	800deae <__sflush_r+0xb6>
 800deaa:	602f      	str	r7, [r5, #0]
 800deac:	e7b1      	b.n	800de12 <__sflush_r+0x1a>
 800deae:	89a3      	ldrh	r3, [r4, #12]
 800deb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800deb4:	81a3      	strh	r3, [r4, #12]
 800deb6:	e7ad      	b.n	800de14 <__sflush_r+0x1c>
 800deb8:	690f      	ldr	r7, [r1, #16]
 800deba:	2f00      	cmp	r7, #0
 800debc:	d0a9      	beq.n	800de12 <__sflush_r+0x1a>
 800debe:	0793      	lsls	r3, r2, #30
 800dec0:	680e      	ldr	r6, [r1, #0]
 800dec2:	bf08      	it	eq
 800dec4:	694b      	ldreq	r3, [r1, #20]
 800dec6:	600f      	str	r7, [r1, #0]
 800dec8:	bf18      	it	ne
 800deca:	2300      	movne	r3, #0
 800decc:	eba6 0807 	sub.w	r8, r6, r7
 800ded0:	608b      	str	r3, [r1, #8]
 800ded2:	f1b8 0f00 	cmp.w	r8, #0
 800ded6:	dd9c      	ble.n	800de12 <__sflush_r+0x1a>
 800ded8:	6a21      	ldr	r1, [r4, #32]
 800deda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dedc:	4643      	mov	r3, r8
 800dede:	463a      	mov	r2, r7
 800dee0:	4628      	mov	r0, r5
 800dee2:	47b0      	blx	r6
 800dee4:	2800      	cmp	r0, #0
 800dee6:	dc06      	bgt.n	800def6 <__sflush_r+0xfe>
 800dee8:	89a3      	ldrh	r3, [r4, #12]
 800deea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800deee:	81a3      	strh	r3, [r4, #12]
 800def0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800def4:	e78e      	b.n	800de14 <__sflush_r+0x1c>
 800def6:	4407      	add	r7, r0
 800def8:	eba8 0800 	sub.w	r8, r8, r0
 800defc:	e7e9      	b.n	800ded2 <__sflush_r+0xda>
 800defe:	bf00      	nop
 800df00:	dfbffffe 	.word	0xdfbffffe

0800df04 <_fflush_r>:
 800df04:	b538      	push	{r3, r4, r5, lr}
 800df06:	690b      	ldr	r3, [r1, #16]
 800df08:	4605      	mov	r5, r0
 800df0a:	460c      	mov	r4, r1
 800df0c:	b913      	cbnz	r3, 800df14 <_fflush_r+0x10>
 800df0e:	2500      	movs	r5, #0
 800df10:	4628      	mov	r0, r5
 800df12:	bd38      	pop	{r3, r4, r5, pc}
 800df14:	b118      	cbz	r0, 800df1e <_fflush_r+0x1a>
 800df16:	6a03      	ldr	r3, [r0, #32]
 800df18:	b90b      	cbnz	r3, 800df1e <_fflush_r+0x1a>
 800df1a:	f7fe ff29 	bl	800cd70 <__sinit>
 800df1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d0f3      	beq.n	800df0e <_fflush_r+0xa>
 800df26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800df28:	07d0      	lsls	r0, r2, #31
 800df2a:	d404      	bmi.n	800df36 <_fflush_r+0x32>
 800df2c:	0599      	lsls	r1, r3, #22
 800df2e:	d402      	bmi.n	800df36 <_fflush_r+0x32>
 800df30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df32:	f7fe ff99 	bl	800ce68 <__retarget_lock_acquire_recursive>
 800df36:	4628      	mov	r0, r5
 800df38:	4621      	mov	r1, r4
 800df3a:	f7ff ff5d 	bl	800ddf8 <__sflush_r>
 800df3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df40:	07da      	lsls	r2, r3, #31
 800df42:	4605      	mov	r5, r0
 800df44:	d4e4      	bmi.n	800df10 <_fflush_r+0xc>
 800df46:	89a3      	ldrh	r3, [r4, #12]
 800df48:	059b      	lsls	r3, r3, #22
 800df4a:	d4e1      	bmi.n	800df10 <_fflush_r+0xc>
 800df4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df4e:	f7fe ff8c 	bl	800ce6a <__retarget_lock_release_recursive>
 800df52:	e7dd      	b.n	800df10 <_fflush_r+0xc>

0800df54 <_Balloc>:
 800df54:	b570      	push	{r4, r5, r6, lr}
 800df56:	69c6      	ldr	r6, [r0, #28]
 800df58:	4604      	mov	r4, r0
 800df5a:	460d      	mov	r5, r1
 800df5c:	b976      	cbnz	r6, 800df7c <_Balloc+0x28>
 800df5e:	2010      	movs	r0, #16
 800df60:	f7fe fbb4 	bl	800c6cc <malloc>
 800df64:	4602      	mov	r2, r0
 800df66:	61e0      	str	r0, [r4, #28]
 800df68:	b920      	cbnz	r0, 800df74 <_Balloc+0x20>
 800df6a:	4b18      	ldr	r3, [pc, #96]	; (800dfcc <_Balloc+0x78>)
 800df6c:	4818      	ldr	r0, [pc, #96]	; (800dfd0 <_Balloc+0x7c>)
 800df6e:	216b      	movs	r1, #107	; 0x6b
 800df70:	f7fe ff8a 	bl	800ce88 <__assert_func>
 800df74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df78:	6006      	str	r6, [r0, #0]
 800df7a:	60c6      	str	r6, [r0, #12]
 800df7c:	69e6      	ldr	r6, [r4, #28]
 800df7e:	68f3      	ldr	r3, [r6, #12]
 800df80:	b183      	cbz	r3, 800dfa4 <_Balloc+0x50>
 800df82:	69e3      	ldr	r3, [r4, #28]
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df8a:	b9b8      	cbnz	r0, 800dfbc <_Balloc+0x68>
 800df8c:	2101      	movs	r1, #1
 800df8e:	fa01 f605 	lsl.w	r6, r1, r5
 800df92:	1d72      	adds	r2, r6, #5
 800df94:	0092      	lsls	r2, r2, #2
 800df96:	4620      	mov	r0, r4
 800df98:	f7fe f8d8 	bl	800c14c <_calloc_r>
 800df9c:	b160      	cbz	r0, 800dfb8 <_Balloc+0x64>
 800df9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dfa2:	e00e      	b.n	800dfc2 <_Balloc+0x6e>
 800dfa4:	2221      	movs	r2, #33	; 0x21
 800dfa6:	2104      	movs	r1, #4
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f7fe f8cf 	bl	800c14c <_calloc_r>
 800dfae:	69e3      	ldr	r3, [r4, #28]
 800dfb0:	60f0      	str	r0, [r6, #12]
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d1e4      	bne.n	800df82 <_Balloc+0x2e>
 800dfb8:	2000      	movs	r0, #0
 800dfba:	bd70      	pop	{r4, r5, r6, pc}
 800dfbc:	6802      	ldr	r2, [r0, #0]
 800dfbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dfc8:	e7f7      	b.n	800dfba <_Balloc+0x66>
 800dfca:	bf00      	nop
 800dfcc:	0808fc60 	.word	0x0808fc60
 800dfd0:	0808fd92 	.word	0x0808fd92

0800dfd4 <_Bfree>:
 800dfd4:	b570      	push	{r4, r5, r6, lr}
 800dfd6:	69c6      	ldr	r6, [r0, #28]
 800dfd8:	4605      	mov	r5, r0
 800dfda:	460c      	mov	r4, r1
 800dfdc:	b976      	cbnz	r6, 800dffc <_Bfree+0x28>
 800dfde:	2010      	movs	r0, #16
 800dfe0:	f7fe fb74 	bl	800c6cc <malloc>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	61e8      	str	r0, [r5, #28]
 800dfe8:	b920      	cbnz	r0, 800dff4 <_Bfree+0x20>
 800dfea:	4b09      	ldr	r3, [pc, #36]	; (800e010 <_Bfree+0x3c>)
 800dfec:	4809      	ldr	r0, [pc, #36]	; (800e014 <_Bfree+0x40>)
 800dfee:	218f      	movs	r1, #143	; 0x8f
 800dff0:	f7fe ff4a 	bl	800ce88 <__assert_func>
 800dff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dff8:	6006      	str	r6, [r0, #0]
 800dffa:	60c6      	str	r6, [r0, #12]
 800dffc:	b13c      	cbz	r4, 800e00e <_Bfree+0x3a>
 800dffe:	69eb      	ldr	r3, [r5, #28]
 800e000:	6862      	ldr	r2, [r4, #4]
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e008:	6021      	str	r1, [r4, #0]
 800e00a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e00e:	bd70      	pop	{r4, r5, r6, pc}
 800e010:	0808fc60 	.word	0x0808fc60
 800e014:	0808fd92 	.word	0x0808fd92

0800e018 <__multadd>:
 800e018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e01c:	690d      	ldr	r5, [r1, #16]
 800e01e:	4607      	mov	r7, r0
 800e020:	460c      	mov	r4, r1
 800e022:	461e      	mov	r6, r3
 800e024:	f101 0c14 	add.w	ip, r1, #20
 800e028:	2000      	movs	r0, #0
 800e02a:	f8dc 3000 	ldr.w	r3, [ip]
 800e02e:	b299      	uxth	r1, r3
 800e030:	fb02 6101 	mla	r1, r2, r1, r6
 800e034:	0c1e      	lsrs	r6, r3, #16
 800e036:	0c0b      	lsrs	r3, r1, #16
 800e038:	fb02 3306 	mla	r3, r2, r6, r3
 800e03c:	b289      	uxth	r1, r1
 800e03e:	3001      	adds	r0, #1
 800e040:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e044:	4285      	cmp	r5, r0
 800e046:	f84c 1b04 	str.w	r1, [ip], #4
 800e04a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e04e:	dcec      	bgt.n	800e02a <__multadd+0x12>
 800e050:	b30e      	cbz	r6, 800e096 <__multadd+0x7e>
 800e052:	68a3      	ldr	r3, [r4, #8]
 800e054:	42ab      	cmp	r3, r5
 800e056:	dc19      	bgt.n	800e08c <__multadd+0x74>
 800e058:	6861      	ldr	r1, [r4, #4]
 800e05a:	4638      	mov	r0, r7
 800e05c:	3101      	adds	r1, #1
 800e05e:	f7ff ff79 	bl	800df54 <_Balloc>
 800e062:	4680      	mov	r8, r0
 800e064:	b928      	cbnz	r0, 800e072 <__multadd+0x5a>
 800e066:	4602      	mov	r2, r0
 800e068:	4b0c      	ldr	r3, [pc, #48]	; (800e09c <__multadd+0x84>)
 800e06a:	480d      	ldr	r0, [pc, #52]	; (800e0a0 <__multadd+0x88>)
 800e06c:	21ba      	movs	r1, #186	; 0xba
 800e06e:	f7fe ff0b 	bl	800ce88 <__assert_func>
 800e072:	6922      	ldr	r2, [r4, #16]
 800e074:	3202      	adds	r2, #2
 800e076:	f104 010c 	add.w	r1, r4, #12
 800e07a:	0092      	lsls	r2, r2, #2
 800e07c:	300c      	adds	r0, #12
 800e07e:	f7fe fef5 	bl	800ce6c <memcpy>
 800e082:	4621      	mov	r1, r4
 800e084:	4638      	mov	r0, r7
 800e086:	f7ff ffa5 	bl	800dfd4 <_Bfree>
 800e08a:	4644      	mov	r4, r8
 800e08c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e090:	3501      	adds	r5, #1
 800e092:	615e      	str	r6, [r3, #20]
 800e094:	6125      	str	r5, [r4, #16]
 800e096:	4620      	mov	r0, r4
 800e098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e09c:	0808fd70 	.word	0x0808fd70
 800e0a0:	0808fd92 	.word	0x0808fd92

0800e0a4 <__hi0bits>:
 800e0a4:	0c03      	lsrs	r3, r0, #16
 800e0a6:	041b      	lsls	r3, r3, #16
 800e0a8:	b9d3      	cbnz	r3, 800e0e0 <__hi0bits+0x3c>
 800e0aa:	0400      	lsls	r0, r0, #16
 800e0ac:	2310      	movs	r3, #16
 800e0ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e0b2:	bf04      	itt	eq
 800e0b4:	0200      	lsleq	r0, r0, #8
 800e0b6:	3308      	addeq	r3, #8
 800e0b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e0bc:	bf04      	itt	eq
 800e0be:	0100      	lsleq	r0, r0, #4
 800e0c0:	3304      	addeq	r3, #4
 800e0c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e0c6:	bf04      	itt	eq
 800e0c8:	0080      	lsleq	r0, r0, #2
 800e0ca:	3302      	addeq	r3, #2
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	db05      	blt.n	800e0dc <__hi0bits+0x38>
 800e0d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e0d4:	f103 0301 	add.w	r3, r3, #1
 800e0d8:	bf08      	it	eq
 800e0da:	2320      	moveq	r3, #32
 800e0dc:	4618      	mov	r0, r3
 800e0de:	4770      	bx	lr
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	e7e4      	b.n	800e0ae <__hi0bits+0xa>

0800e0e4 <__lo0bits>:
 800e0e4:	6803      	ldr	r3, [r0, #0]
 800e0e6:	f013 0207 	ands.w	r2, r3, #7
 800e0ea:	d00c      	beq.n	800e106 <__lo0bits+0x22>
 800e0ec:	07d9      	lsls	r1, r3, #31
 800e0ee:	d422      	bmi.n	800e136 <__lo0bits+0x52>
 800e0f0:	079a      	lsls	r2, r3, #30
 800e0f2:	bf49      	itett	mi
 800e0f4:	085b      	lsrmi	r3, r3, #1
 800e0f6:	089b      	lsrpl	r3, r3, #2
 800e0f8:	6003      	strmi	r3, [r0, #0]
 800e0fa:	2201      	movmi	r2, #1
 800e0fc:	bf5c      	itt	pl
 800e0fe:	6003      	strpl	r3, [r0, #0]
 800e100:	2202      	movpl	r2, #2
 800e102:	4610      	mov	r0, r2
 800e104:	4770      	bx	lr
 800e106:	b299      	uxth	r1, r3
 800e108:	b909      	cbnz	r1, 800e10e <__lo0bits+0x2a>
 800e10a:	0c1b      	lsrs	r3, r3, #16
 800e10c:	2210      	movs	r2, #16
 800e10e:	b2d9      	uxtb	r1, r3
 800e110:	b909      	cbnz	r1, 800e116 <__lo0bits+0x32>
 800e112:	3208      	adds	r2, #8
 800e114:	0a1b      	lsrs	r3, r3, #8
 800e116:	0719      	lsls	r1, r3, #28
 800e118:	bf04      	itt	eq
 800e11a:	091b      	lsreq	r3, r3, #4
 800e11c:	3204      	addeq	r2, #4
 800e11e:	0799      	lsls	r1, r3, #30
 800e120:	bf04      	itt	eq
 800e122:	089b      	lsreq	r3, r3, #2
 800e124:	3202      	addeq	r2, #2
 800e126:	07d9      	lsls	r1, r3, #31
 800e128:	d403      	bmi.n	800e132 <__lo0bits+0x4e>
 800e12a:	085b      	lsrs	r3, r3, #1
 800e12c:	f102 0201 	add.w	r2, r2, #1
 800e130:	d003      	beq.n	800e13a <__lo0bits+0x56>
 800e132:	6003      	str	r3, [r0, #0]
 800e134:	e7e5      	b.n	800e102 <__lo0bits+0x1e>
 800e136:	2200      	movs	r2, #0
 800e138:	e7e3      	b.n	800e102 <__lo0bits+0x1e>
 800e13a:	2220      	movs	r2, #32
 800e13c:	e7e1      	b.n	800e102 <__lo0bits+0x1e>
	...

0800e140 <__i2b>:
 800e140:	b510      	push	{r4, lr}
 800e142:	460c      	mov	r4, r1
 800e144:	2101      	movs	r1, #1
 800e146:	f7ff ff05 	bl	800df54 <_Balloc>
 800e14a:	4602      	mov	r2, r0
 800e14c:	b928      	cbnz	r0, 800e15a <__i2b+0x1a>
 800e14e:	4b05      	ldr	r3, [pc, #20]	; (800e164 <__i2b+0x24>)
 800e150:	4805      	ldr	r0, [pc, #20]	; (800e168 <__i2b+0x28>)
 800e152:	f240 1145 	movw	r1, #325	; 0x145
 800e156:	f7fe fe97 	bl	800ce88 <__assert_func>
 800e15a:	2301      	movs	r3, #1
 800e15c:	6144      	str	r4, [r0, #20]
 800e15e:	6103      	str	r3, [r0, #16]
 800e160:	bd10      	pop	{r4, pc}
 800e162:	bf00      	nop
 800e164:	0808fd70 	.word	0x0808fd70
 800e168:	0808fd92 	.word	0x0808fd92

0800e16c <__multiply>:
 800e16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e170:	4691      	mov	r9, r2
 800e172:	690a      	ldr	r2, [r1, #16]
 800e174:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e178:	429a      	cmp	r2, r3
 800e17a:	bfb8      	it	lt
 800e17c:	460b      	movlt	r3, r1
 800e17e:	460c      	mov	r4, r1
 800e180:	bfbc      	itt	lt
 800e182:	464c      	movlt	r4, r9
 800e184:	4699      	movlt	r9, r3
 800e186:	6927      	ldr	r7, [r4, #16]
 800e188:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e18c:	68a3      	ldr	r3, [r4, #8]
 800e18e:	6861      	ldr	r1, [r4, #4]
 800e190:	eb07 060a 	add.w	r6, r7, sl
 800e194:	42b3      	cmp	r3, r6
 800e196:	b085      	sub	sp, #20
 800e198:	bfb8      	it	lt
 800e19a:	3101      	addlt	r1, #1
 800e19c:	f7ff feda 	bl	800df54 <_Balloc>
 800e1a0:	b930      	cbnz	r0, 800e1b0 <__multiply+0x44>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	4b44      	ldr	r3, [pc, #272]	; (800e2b8 <__multiply+0x14c>)
 800e1a6:	4845      	ldr	r0, [pc, #276]	; (800e2bc <__multiply+0x150>)
 800e1a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e1ac:	f7fe fe6c 	bl	800ce88 <__assert_func>
 800e1b0:	f100 0514 	add.w	r5, r0, #20
 800e1b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e1b8:	462b      	mov	r3, r5
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	4543      	cmp	r3, r8
 800e1be:	d321      	bcc.n	800e204 <__multiply+0x98>
 800e1c0:	f104 0314 	add.w	r3, r4, #20
 800e1c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e1c8:	f109 0314 	add.w	r3, r9, #20
 800e1cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e1d0:	9202      	str	r2, [sp, #8]
 800e1d2:	1b3a      	subs	r2, r7, r4
 800e1d4:	3a15      	subs	r2, #21
 800e1d6:	f022 0203 	bic.w	r2, r2, #3
 800e1da:	3204      	adds	r2, #4
 800e1dc:	f104 0115 	add.w	r1, r4, #21
 800e1e0:	428f      	cmp	r7, r1
 800e1e2:	bf38      	it	cc
 800e1e4:	2204      	movcc	r2, #4
 800e1e6:	9201      	str	r2, [sp, #4]
 800e1e8:	9a02      	ldr	r2, [sp, #8]
 800e1ea:	9303      	str	r3, [sp, #12]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d80c      	bhi.n	800e20a <__multiply+0x9e>
 800e1f0:	2e00      	cmp	r6, #0
 800e1f2:	dd03      	ble.n	800e1fc <__multiply+0x90>
 800e1f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d05b      	beq.n	800e2b4 <__multiply+0x148>
 800e1fc:	6106      	str	r6, [r0, #16]
 800e1fe:	b005      	add	sp, #20
 800e200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e204:	f843 2b04 	str.w	r2, [r3], #4
 800e208:	e7d8      	b.n	800e1bc <__multiply+0x50>
 800e20a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e20e:	f1ba 0f00 	cmp.w	sl, #0
 800e212:	d024      	beq.n	800e25e <__multiply+0xf2>
 800e214:	f104 0e14 	add.w	lr, r4, #20
 800e218:	46a9      	mov	r9, r5
 800e21a:	f04f 0c00 	mov.w	ip, #0
 800e21e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e222:	f8d9 1000 	ldr.w	r1, [r9]
 800e226:	fa1f fb82 	uxth.w	fp, r2
 800e22a:	b289      	uxth	r1, r1
 800e22c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e230:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e234:	f8d9 2000 	ldr.w	r2, [r9]
 800e238:	4461      	add	r1, ip
 800e23a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e23e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e242:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e246:	b289      	uxth	r1, r1
 800e248:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e24c:	4577      	cmp	r7, lr
 800e24e:	f849 1b04 	str.w	r1, [r9], #4
 800e252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e256:	d8e2      	bhi.n	800e21e <__multiply+0xb2>
 800e258:	9a01      	ldr	r2, [sp, #4]
 800e25a:	f845 c002 	str.w	ip, [r5, r2]
 800e25e:	9a03      	ldr	r2, [sp, #12]
 800e260:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e264:	3304      	adds	r3, #4
 800e266:	f1b9 0f00 	cmp.w	r9, #0
 800e26a:	d021      	beq.n	800e2b0 <__multiply+0x144>
 800e26c:	6829      	ldr	r1, [r5, #0]
 800e26e:	f104 0c14 	add.w	ip, r4, #20
 800e272:	46ae      	mov	lr, r5
 800e274:	f04f 0a00 	mov.w	sl, #0
 800e278:	f8bc b000 	ldrh.w	fp, [ip]
 800e27c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e280:	fb09 220b 	mla	r2, r9, fp, r2
 800e284:	4452      	add	r2, sl
 800e286:	b289      	uxth	r1, r1
 800e288:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e28c:	f84e 1b04 	str.w	r1, [lr], #4
 800e290:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e294:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e298:	f8be 1000 	ldrh.w	r1, [lr]
 800e29c:	fb09 110a 	mla	r1, r9, sl, r1
 800e2a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e2a4:	4567      	cmp	r7, ip
 800e2a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e2aa:	d8e5      	bhi.n	800e278 <__multiply+0x10c>
 800e2ac:	9a01      	ldr	r2, [sp, #4]
 800e2ae:	50a9      	str	r1, [r5, r2]
 800e2b0:	3504      	adds	r5, #4
 800e2b2:	e799      	b.n	800e1e8 <__multiply+0x7c>
 800e2b4:	3e01      	subs	r6, #1
 800e2b6:	e79b      	b.n	800e1f0 <__multiply+0x84>
 800e2b8:	0808fd70 	.word	0x0808fd70
 800e2bc:	0808fd92 	.word	0x0808fd92

0800e2c0 <__pow5mult>:
 800e2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2c4:	4615      	mov	r5, r2
 800e2c6:	f012 0203 	ands.w	r2, r2, #3
 800e2ca:	4606      	mov	r6, r0
 800e2cc:	460f      	mov	r7, r1
 800e2ce:	d007      	beq.n	800e2e0 <__pow5mult+0x20>
 800e2d0:	4c25      	ldr	r4, [pc, #148]	; (800e368 <__pow5mult+0xa8>)
 800e2d2:	3a01      	subs	r2, #1
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2da:	f7ff fe9d 	bl	800e018 <__multadd>
 800e2de:	4607      	mov	r7, r0
 800e2e0:	10ad      	asrs	r5, r5, #2
 800e2e2:	d03d      	beq.n	800e360 <__pow5mult+0xa0>
 800e2e4:	69f4      	ldr	r4, [r6, #28]
 800e2e6:	b97c      	cbnz	r4, 800e308 <__pow5mult+0x48>
 800e2e8:	2010      	movs	r0, #16
 800e2ea:	f7fe f9ef 	bl	800c6cc <malloc>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	61f0      	str	r0, [r6, #28]
 800e2f2:	b928      	cbnz	r0, 800e300 <__pow5mult+0x40>
 800e2f4:	4b1d      	ldr	r3, [pc, #116]	; (800e36c <__pow5mult+0xac>)
 800e2f6:	481e      	ldr	r0, [pc, #120]	; (800e370 <__pow5mult+0xb0>)
 800e2f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e2fc:	f7fe fdc4 	bl	800ce88 <__assert_func>
 800e300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e304:	6004      	str	r4, [r0, #0]
 800e306:	60c4      	str	r4, [r0, #12]
 800e308:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e30c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e310:	b94c      	cbnz	r4, 800e326 <__pow5mult+0x66>
 800e312:	f240 2171 	movw	r1, #625	; 0x271
 800e316:	4630      	mov	r0, r6
 800e318:	f7ff ff12 	bl	800e140 <__i2b>
 800e31c:	2300      	movs	r3, #0
 800e31e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e322:	4604      	mov	r4, r0
 800e324:	6003      	str	r3, [r0, #0]
 800e326:	f04f 0900 	mov.w	r9, #0
 800e32a:	07eb      	lsls	r3, r5, #31
 800e32c:	d50a      	bpl.n	800e344 <__pow5mult+0x84>
 800e32e:	4639      	mov	r1, r7
 800e330:	4622      	mov	r2, r4
 800e332:	4630      	mov	r0, r6
 800e334:	f7ff ff1a 	bl	800e16c <__multiply>
 800e338:	4639      	mov	r1, r7
 800e33a:	4680      	mov	r8, r0
 800e33c:	4630      	mov	r0, r6
 800e33e:	f7ff fe49 	bl	800dfd4 <_Bfree>
 800e342:	4647      	mov	r7, r8
 800e344:	106d      	asrs	r5, r5, #1
 800e346:	d00b      	beq.n	800e360 <__pow5mult+0xa0>
 800e348:	6820      	ldr	r0, [r4, #0]
 800e34a:	b938      	cbnz	r0, 800e35c <__pow5mult+0x9c>
 800e34c:	4622      	mov	r2, r4
 800e34e:	4621      	mov	r1, r4
 800e350:	4630      	mov	r0, r6
 800e352:	f7ff ff0b 	bl	800e16c <__multiply>
 800e356:	6020      	str	r0, [r4, #0]
 800e358:	f8c0 9000 	str.w	r9, [r0]
 800e35c:	4604      	mov	r4, r0
 800e35e:	e7e4      	b.n	800e32a <__pow5mult+0x6a>
 800e360:	4638      	mov	r0, r7
 800e362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e366:	bf00      	nop
 800e368:	0808fee0 	.word	0x0808fee0
 800e36c:	0808fc60 	.word	0x0808fc60
 800e370:	0808fd92 	.word	0x0808fd92

0800e374 <__lshift>:
 800e374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e378:	460c      	mov	r4, r1
 800e37a:	6849      	ldr	r1, [r1, #4]
 800e37c:	6923      	ldr	r3, [r4, #16]
 800e37e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e382:	68a3      	ldr	r3, [r4, #8]
 800e384:	4607      	mov	r7, r0
 800e386:	4691      	mov	r9, r2
 800e388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e38c:	f108 0601 	add.w	r6, r8, #1
 800e390:	42b3      	cmp	r3, r6
 800e392:	db0b      	blt.n	800e3ac <__lshift+0x38>
 800e394:	4638      	mov	r0, r7
 800e396:	f7ff fddd 	bl	800df54 <_Balloc>
 800e39a:	4605      	mov	r5, r0
 800e39c:	b948      	cbnz	r0, 800e3b2 <__lshift+0x3e>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	4b28      	ldr	r3, [pc, #160]	; (800e444 <__lshift+0xd0>)
 800e3a2:	4829      	ldr	r0, [pc, #164]	; (800e448 <__lshift+0xd4>)
 800e3a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e3a8:	f7fe fd6e 	bl	800ce88 <__assert_func>
 800e3ac:	3101      	adds	r1, #1
 800e3ae:	005b      	lsls	r3, r3, #1
 800e3b0:	e7ee      	b.n	800e390 <__lshift+0x1c>
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	f100 0114 	add.w	r1, r0, #20
 800e3b8:	f100 0210 	add.w	r2, r0, #16
 800e3bc:	4618      	mov	r0, r3
 800e3be:	4553      	cmp	r3, sl
 800e3c0:	db33      	blt.n	800e42a <__lshift+0xb6>
 800e3c2:	6920      	ldr	r0, [r4, #16]
 800e3c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3c8:	f104 0314 	add.w	r3, r4, #20
 800e3cc:	f019 091f 	ands.w	r9, r9, #31
 800e3d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e3d8:	d02b      	beq.n	800e432 <__lshift+0xbe>
 800e3da:	f1c9 0e20 	rsb	lr, r9, #32
 800e3de:	468a      	mov	sl, r1
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	6818      	ldr	r0, [r3, #0]
 800e3e4:	fa00 f009 	lsl.w	r0, r0, r9
 800e3e8:	4310      	orrs	r0, r2
 800e3ea:	f84a 0b04 	str.w	r0, [sl], #4
 800e3ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3f2:	459c      	cmp	ip, r3
 800e3f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e3f8:	d8f3      	bhi.n	800e3e2 <__lshift+0x6e>
 800e3fa:	ebac 0304 	sub.w	r3, ip, r4
 800e3fe:	3b15      	subs	r3, #21
 800e400:	f023 0303 	bic.w	r3, r3, #3
 800e404:	3304      	adds	r3, #4
 800e406:	f104 0015 	add.w	r0, r4, #21
 800e40a:	4584      	cmp	ip, r0
 800e40c:	bf38      	it	cc
 800e40e:	2304      	movcc	r3, #4
 800e410:	50ca      	str	r2, [r1, r3]
 800e412:	b10a      	cbz	r2, 800e418 <__lshift+0xa4>
 800e414:	f108 0602 	add.w	r6, r8, #2
 800e418:	3e01      	subs	r6, #1
 800e41a:	4638      	mov	r0, r7
 800e41c:	612e      	str	r6, [r5, #16]
 800e41e:	4621      	mov	r1, r4
 800e420:	f7ff fdd8 	bl	800dfd4 <_Bfree>
 800e424:	4628      	mov	r0, r5
 800e426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e42a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e42e:	3301      	adds	r3, #1
 800e430:	e7c5      	b.n	800e3be <__lshift+0x4a>
 800e432:	3904      	subs	r1, #4
 800e434:	f853 2b04 	ldr.w	r2, [r3], #4
 800e438:	f841 2f04 	str.w	r2, [r1, #4]!
 800e43c:	459c      	cmp	ip, r3
 800e43e:	d8f9      	bhi.n	800e434 <__lshift+0xc0>
 800e440:	e7ea      	b.n	800e418 <__lshift+0xa4>
 800e442:	bf00      	nop
 800e444:	0808fd70 	.word	0x0808fd70
 800e448:	0808fd92 	.word	0x0808fd92

0800e44c <__mcmp>:
 800e44c:	b530      	push	{r4, r5, lr}
 800e44e:	6902      	ldr	r2, [r0, #16]
 800e450:	690c      	ldr	r4, [r1, #16]
 800e452:	1b12      	subs	r2, r2, r4
 800e454:	d10e      	bne.n	800e474 <__mcmp+0x28>
 800e456:	f100 0314 	add.w	r3, r0, #20
 800e45a:	3114      	adds	r1, #20
 800e45c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e460:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e464:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e468:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e46c:	42a5      	cmp	r5, r4
 800e46e:	d003      	beq.n	800e478 <__mcmp+0x2c>
 800e470:	d305      	bcc.n	800e47e <__mcmp+0x32>
 800e472:	2201      	movs	r2, #1
 800e474:	4610      	mov	r0, r2
 800e476:	bd30      	pop	{r4, r5, pc}
 800e478:	4283      	cmp	r3, r0
 800e47a:	d3f3      	bcc.n	800e464 <__mcmp+0x18>
 800e47c:	e7fa      	b.n	800e474 <__mcmp+0x28>
 800e47e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e482:	e7f7      	b.n	800e474 <__mcmp+0x28>

0800e484 <__mdiff>:
 800e484:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e488:	460c      	mov	r4, r1
 800e48a:	4606      	mov	r6, r0
 800e48c:	4611      	mov	r1, r2
 800e48e:	4620      	mov	r0, r4
 800e490:	4690      	mov	r8, r2
 800e492:	f7ff ffdb 	bl	800e44c <__mcmp>
 800e496:	1e05      	subs	r5, r0, #0
 800e498:	d110      	bne.n	800e4bc <__mdiff+0x38>
 800e49a:	4629      	mov	r1, r5
 800e49c:	4630      	mov	r0, r6
 800e49e:	f7ff fd59 	bl	800df54 <_Balloc>
 800e4a2:	b930      	cbnz	r0, 800e4b2 <__mdiff+0x2e>
 800e4a4:	4b3a      	ldr	r3, [pc, #232]	; (800e590 <__mdiff+0x10c>)
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	f240 2137 	movw	r1, #567	; 0x237
 800e4ac:	4839      	ldr	r0, [pc, #228]	; (800e594 <__mdiff+0x110>)
 800e4ae:	f7fe fceb 	bl	800ce88 <__assert_func>
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e4b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4bc:	bfa4      	itt	ge
 800e4be:	4643      	movge	r3, r8
 800e4c0:	46a0      	movge	r8, r4
 800e4c2:	4630      	mov	r0, r6
 800e4c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e4c8:	bfa6      	itte	ge
 800e4ca:	461c      	movge	r4, r3
 800e4cc:	2500      	movge	r5, #0
 800e4ce:	2501      	movlt	r5, #1
 800e4d0:	f7ff fd40 	bl	800df54 <_Balloc>
 800e4d4:	b920      	cbnz	r0, 800e4e0 <__mdiff+0x5c>
 800e4d6:	4b2e      	ldr	r3, [pc, #184]	; (800e590 <__mdiff+0x10c>)
 800e4d8:	4602      	mov	r2, r0
 800e4da:	f240 2145 	movw	r1, #581	; 0x245
 800e4de:	e7e5      	b.n	800e4ac <__mdiff+0x28>
 800e4e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e4e4:	6926      	ldr	r6, [r4, #16]
 800e4e6:	60c5      	str	r5, [r0, #12]
 800e4e8:	f104 0914 	add.w	r9, r4, #20
 800e4ec:	f108 0514 	add.w	r5, r8, #20
 800e4f0:	f100 0e14 	add.w	lr, r0, #20
 800e4f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e4f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e4fc:	f108 0210 	add.w	r2, r8, #16
 800e500:	46f2      	mov	sl, lr
 800e502:	2100      	movs	r1, #0
 800e504:	f859 3b04 	ldr.w	r3, [r9], #4
 800e508:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e50c:	fa11 f88b 	uxtah	r8, r1, fp
 800e510:	b299      	uxth	r1, r3
 800e512:	0c1b      	lsrs	r3, r3, #16
 800e514:	eba8 0801 	sub.w	r8, r8, r1
 800e518:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e51c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e520:	fa1f f888 	uxth.w	r8, r8
 800e524:	1419      	asrs	r1, r3, #16
 800e526:	454e      	cmp	r6, r9
 800e528:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e52c:	f84a 3b04 	str.w	r3, [sl], #4
 800e530:	d8e8      	bhi.n	800e504 <__mdiff+0x80>
 800e532:	1b33      	subs	r3, r6, r4
 800e534:	3b15      	subs	r3, #21
 800e536:	f023 0303 	bic.w	r3, r3, #3
 800e53a:	3304      	adds	r3, #4
 800e53c:	3415      	adds	r4, #21
 800e53e:	42a6      	cmp	r6, r4
 800e540:	bf38      	it	cc
 800e542:	2304      	movcc	r3, #4
 800e544:	441d      	add	r5, r3
 800e546:	4473      	add	r3, lr
 800e548:	469e      	mov	lr, r3
 800e54a:	462e      	mov	r6, r5
 800e54c:	4566      	cmp	r6, ip
 800e54e:	d30e      	bcc.n	800e56e <__mdiff+0xea>
 800e550:	f10c 0203 	add.w	r2, ip, #3
 800e554:	1b52      	subs	r2, r2, r5
 800e556:	f022 0203 	bic.w	r2, r2, #3
 800e55a:	3d03      	subs	r5, #3
 800e55c:	45ac      	cmp	ip, r5
 800e55e:	bf38      	it	cc
 800e560:	2200      	movcc	r2, #0
 800e562:	4413      	add	r3, r2
 800e564:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e568:	b17a      	cbz	r2, 800e58a <__mdiff+0x106>
 800e56a:	6107      	str	r7, [r0, #16]
 800e56c:	e7a4      	b.n	800e4b8 <__mdiff+0x34>
 800e56e:	f856 8b04 	ldr.w	r8, [r6], #4
 800e572:	fa11 f288 	uxtah	r2, r1, r8
 800e576:	1414      	asrs	r4, r2, #16
 800e578:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e57c:	b292      	uxth	r2, r2
 800e57e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e582:	f84e 2b04 	str.w	r2, [lr], #4
 800e586:	1421      	asrs	r1, r4, #16
 800e588:	e7e0      	b.n	800e54c <__mdiff+0xc8>
 800e58a:	3f01      	subs	r7, #1
 800e58c:	e7ea      	b.n	800e564 <__mdiff+0xe0>
 800e58e:	bf00      	nop
 800e590:	0808fd70 	.word	0x0808fd70
 800e594:	0808fd92 	.word	0x0808fd92

0800e598 <__d2b>:
 800e598:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e59c:	460f      	mov	r7, r1
 800e59e:	2101      	movs	r1, #1
 800e5a0:	ec59 8b10 	vmov	r8, r9, d0
 800e5a4:	4616      	mov	r6, r2
 800e5a6:	f7ff fcd5 	bl	800df54 <_Balloc>
 800e5aa:	4604      	mov	r4, r0
 800e5ac:	b930      	cbnz	r0, 800e5bc <__d2b+0x24>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	4b24      	ldr	r3, [pc, #144]	; (800e644 <__d2b+0xac>)
 800e5b2:	4825      	ldr	r0, [pc, #148]	; (800e648 <__d2b+0xb0>)
 800e5b4:	f240 310f 	movw	r1, #783	; 0x30f
 800e5b8:	f7fe fc66 	bl	800ce88 <__assert_func>
 800e5bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e5c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5c4:	bb2d      	cbnz	r5, 800e612 <__d2b+0x7a>
 800e5c6:	9301      	str	r3, [sp, #4]
 800e5c8:	f1b8 0300 	subs.w	r3, r8, #0
 800e5cc:	d026      	beq.n	800e61c <__d2b+0x84>
 800e5ce:	4668      	mov	r0, sp
 800e5d0:	9300      	str	r3, [sp, #0]
 800e5d2:	f7ff fd87 	bl	800e0e4 <__lo0bits>
 800e5d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e5da:	b1e8      	cbz	r0, 800e618 <__d2b+0x80>
 800e5dc:	f1c0 0320 	rsb	r3, r0, #32
 800e5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e5e4:	430b      	orrs	r3, r1
 800e5e6:	40c2      	lsrs	r2, r0
 800e5e8:	6163      	str	r3, [r4, #20]
 800e5ea:	9201      	str	r2, [sp, #4]
 800e5ec:	9b01      	ldr	r3, [sp, #4]
 800e5ee:	61a3      	str	r3, [r4, #24]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	bf14      	ite	ne
 800e5f4:	2202      	movne	r2, #2
 800e5f6:	2201      	moveq	r2, #1
 800e5f8:	6122      	str	r2, [r4, #16]
 800e5fa:	b1bd      	cbz	r5, 800e62c <__d2b+0x94>
 800e5fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e600:	4405      	add	r5, r0
 800e602:	603d      	str	r5, [r7, #0]
 800e604:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e608:	6030      	str	r0, [r6, #0]
 800e60a:	4620      	mov	r0, r4
 800e60c:	b003      	add	sp, #12
 800e60e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e616:	e7d6      	b.n	800e5c6 <__d2b+0x2e>
 800e618:	6161      	str	r1, [r4, #20]
 800e61a:	e7e7      	b.n	800e5ec <__d2b+0x54>
 800e61c:	a801      	add	r0, sp, #4
 800e61e:	f7ff fd61 	bl	800e0e4 <__lo0bits>
 800e622:	9b01      	ldr	r3, [sp, #4]
 800e624:	6163      	str	r3, [r4, #20]
 800e626:	3020      	adds	r0, #32
 800e628:	2201      	movs	r2, #1
 800e62a:	e7e5      	b.n	800e5f8 <__d2b+0x60>
 800e62c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e630:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e634:	6038      	str	r0, [r7, #0]
 800e636:	6918      	ldr	r0, [r3, #16]
 800e638:	f7ff fd34 	bl	800e0a4 <__hi0bits>
 800e63c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e640:	e7e2      	b.n	800e608 <__d2b+0x70>
 800e642:	bf00      	nop
 800e644:	0808fd70 	.word	0x0808fd70
 800e648:	0808fd92 	.word	0x0808fd92

0800e64c <__sread>:
 800e64c:	b510      	push	{r4, lr}
 800e64e:	460c      	mov	r4, r1
 800e650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e654:	f000 f8bc 	bl	800e7d0 <_read_r>
 800e658:	2800      	cmp	r0, #0
 800e65a:	bfab      	itete	ge
 800e65c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e65e:	89a3      	ldrhlt	r3, [r4, #12]
 800e660:	181b      	addge	r3, r3, r0
 800e662:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e666:	bfac      	ite	ge
 800e668:	6563      	strge	r3, [r4, #84]	; 0x54
 800e66a:	81a3      	strhlt	r3, [r4, #12]
 800e66c:	bd10      	pop	{r4, pc}

0800e66e <__swrite>:
 800e66e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e672:	461f      	mov	r7, r3
 800e674:	898b      	ldrh	r3, [r1, #12]
 800e676:	05db      	lsls	r3, r3, #23
 800e678:	4605      	mov	r5, r0
 800e67a:	460c      	mov	r4, r1
 800e67c:	4616      	mov	r6, r2
 800e67e:	d505      	bpl.n	800e68c <__swrite+0x1e>
 800e680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e684:	2302      	movs	r3, #2
 800e686:	2200      	movs	r2, #0
 800e688:	f000 f890 	bl	800e7ac <_lseek_r>
 800e68c:	89a3      	ldrh	r3, [r4, #12]
 800e68e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e696:	81a3      	strh	r3, [r4, #12]
 800e698:	4632      	mov	r2, r6
 800e69a:	463b      	mov	r3, r7
 800e69c:	4628      	mov	r0, r5
 800e69e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6a2:	f000 b8a7 	b.w	800e7f4 <_write_r>

0800e6a6 <__sseek>:
 800e6a6:	b510      	push	{r4, lr}
 800e6a8:	460c      	mov	r4, r1
 800e6aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6ae:	f000 f87d 	bl	800e7ac <_lseek_r>
 800e6b2:	1c43      	adds	r3, r0, #1
 800e6b4:	89a3      	ldrh	r3, [r4, #12]
 800e6b6:	bf15      	itete	ne
 800e6b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e6ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e6be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e6c2:	81a3      	strheq	r3, [r4, #12]
 800e6c4:	bf18      	it	ne
 800e6c6:	81a3      	strhne	r3, [r4, #12]
 800e6c8:	bd10      	pop	{r4, pc}

0800e6ca <__sclose>:
 800e6ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6ce:	f000 b85d 	b.w	800e78c <_close_r>
	...

0800e6d4 <fiprintf>:
 800e6d4:	b40e      	push	{r1, r2, r3}
 800e6d6:	b503      	push	{r0, r1, lr}
 800e6d8:	4601      	mov	r1, r0
 800e6da:	ab03      	add	r3, sp, #12
 800e6dc:	4805      	ldr	r0, [pc, #20]	; (800e6f4 <fiprintf+0x20>)
 800e6de:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6e2:	6800      	ldr	r0, [r0, #0]
 800e6e4:	9301      	str	r3, [sp, #4]
 800e6e6:	f000 f8c7 	bl	800e878 <_vfiprintf_r>
 800e6ea:	b002      	add	sp, #8
 800e6ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6f0:	b003      	add	sp, #12
 800e6f2:	4770      	bx	lr
 800e6f4:	200009e4 	.word	0x200009e4

0800e6f8 <_realloc_r>:
 800e6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fc:	4680      	mov	r8, r0
 800e6fe:	4614      	mov	r4, r2
 800e700:	460e      	mov	r6, r1
 800e702:	b921      	cbnz	r1, 800e70e <_realloc_r+0x16>
 800e704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e708:	4611      	mov	r1, r2
 800e70a:	f7fe b80f 	b.w	800c72c <_malloc_r>
 800e70e:	b92a      	cbnz	r2, 800e71c <_realloc_r+0x24>
 800e710:	f7ff f9ce 	bl	800dab0 <_free_r>
 800e714:	4625      	mov	r5, r4
 800e716:	4628      	mov	r0, r5
 800e718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e71c:	f000 f9d8 	bl	800ead0 <_malloc_usable_size_r>
 800e720:	4284      	cmp	r4, r0
 800e722:	4607      	mov	r7, r0
 800e724:	d802      	bhi.n	800e72c <_realloc_r+0x34>
 800e726:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e72a:	d812      	bhi.n	800e752 <_realloc_r+0x5a>
 800e72c:	4621      	mov	r1, r4
 800e72e:	4640      	mov	r0, r8
 800e730:	f7fd fffc 	bl	800c72c <_malloc_r>
 800e734:	4605      	mov	r5, r0
 800e736:	2800      	cmp	r0, #0
 800e738:	d0ed      	beq.n	800e716 <_realloc_r+0x1e>
 800e73a:	42bc      	cmp	r4, r7
 800e73c:	4622      	mov	r2, r4
 800e73e:	4631      	mov	r1, r6
 800e740:	bf28      	it	cs
 800e742:	463a      	movcs	r2, r7
 800e744:	f7fe fb92 	bl	800ce6c <memcpy>
 800e748:	4631      	mov	r1, r6
 800e74a:	4640      	mov	r0, r8
 800e74c:	f7ff f9b0 	bl	800dab0 <_free_r>
 800e750:	e7e1      	b.n	800e716 <_realloc_r+0x1e>
 800e752:	4635      	mov	r5, r6
 800e754:	e7df      	b.n	800e716 <_realloc_r+0x1e>

0800e756 <memmove>:
 800e756:	4288      	cmp	r0, r1
 800e758:	b510      	push	{r4, lr}
 800e75a:	eb01 0402 	add.w	r4, r1, r2
 800e75e:	d902      	bls.n	800e766 <memmove+0x10>
 800e760:	4284      	cmp	r4, r0
 800e762:	4623      	mov	r3, r4
 800e764:	d807      	bhi.n	800e776 <memmove+0x20>
 800e766:	1e43      	subs	r3, r0, #1
 800e768:	42a1      	cmp	r1, r4
 800e76a:	d008      	beq.n	800e77e <memmove+0x28>
 800e76c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e770:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e774:	e7f8      	b.n	800e768 <memmove+0x12>
 800e776:	4402      	add	r2, r0
 800e778:	4601      	mov	r1, r0
 800e77a:	428a      	cmp	r2, r1
 800e77c:	d100      	bne.n	800e780 <memmove+0x2a>
 800e77e:	bd10      	pop	{r4, pc}
 800e780:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e784:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e788:	e7f7      	b.n	800e77a <memmove+0x24>
	...

0800e78c <_close_r>:
 800e78c:	b538      	push	{r3, r4, r5, lr}
 800e78e:	4d06      	ldr	r5, [pc, #24]	; (800e7a8 <_close_r+0x1c>)
 800e790:	2300      	movs	r3, #0
 800e792:	4604      	mov	r4, r0
 800e794:	4608      	mov	r0, r1
 800e796:	602b      	str	r3, [r5, #0]
 800e798:	f7f7 ffa5 	bl	80066e6 <_close>
 800e79c:	1c43      	adds	r3, r0, #1
 800e79e:	d102      	bne.n	800e7a6 <_close_r+0x1a>
 800e7a0:	682b      	ldr	r3, [r5, #0]
 800e7a2:	b103      	cbz	r3, 800e7a6 <_close_r+0x1a>
 800e7a4:	6023      	str	r3, [r4, #0]
 800e7a6:	bd38      	pop	{r3, r4, r5, pc}
 800e7a8:	20003098 	.word	0x20003098

0800e7ac <_lseek_r>:
 800e7ac:	b538      	push	{r3, r4, r5, lr}
 800e7ae:	4d07      	ldr	r5, [pc, #28]	; (800e7cc <_lseek_r+0x20>)
 800e7b0:	4604      	mov	r4, r0
 800e7b2:	4608      	mov	r0, r1
 800e7b4:	4611      	mov	r1, r2
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	602a      	str	r2, [r5, #0]
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	f7f7 ffba 	bl	8006734 <_lseek>
 800e7c0:	1c43      	adds	r3, r0, #1
 800e7c2:	d102      	bne.n	800e7ca <_lseek_r+0x1e>
 800e7c4:	682b      	ldr	r3, [r5, #0]
 800e7c6:	b103      	cbz	r3, 800e7ca <_lseek_r+0x1e>
 800e7c8:	6023      	str	r3, [r4, #0]
 800e7ca:	bd38      	pop	{r3, r4, r5, pc}
 800e7cc:	20003098 	.word	0x20003098

0800e7d0 <_read_r>:
 800e7d0:	b538      	push	{r3, r4, r5, lr}
 800e7d2:	4d07      	ldr	r5, [pc, #28]	; (800e7f0 <_read_r+0x20>)
 800e7d4:	4604      	mov	r4, r0
 800e7d6:	4608      	mov	r0, r1
 800e7d8:	4611      	mov	r1, r2
 800e7da:	2200      	movs	r2, #0
 800e7dc:	602a      	str	r2, [r5, #0]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	f7f7 ff48 	bl	8006674 <_read>
 800e7e4:	1c43      	adds	r3, r0, #1
 800e7e6:	d102      	bne.n	800e7ee <_read_r+0x1e>
 800e7e8:	682b      	ldr	r3, [r5, #0]
 800e7ea:	b103      	cbz	r3, 800e7ee <_read_r+0x1e>
 800e7ec:	6023      	str	r3, [r4, #0]
 800e7ee:	bd38      	pop	{r3, r4, r5, pc}
 800e7f0:	20003098 	.word	0x20003098

0800e7f4 <_write_r>:
 800e7f4:	b538      	push	{r3, r4, r5, lr}
 800e7f6:	4d07      	ldr	r5, [pc, #28]	; (800e814 <_write_r+0x20>)
 800e7f8:	4604      	mov	r4, r0
 800e7fa:	4608      	mov	r0, r1
 800e7fc:	4611      	mov	r1, r2
 800e7fe:	2200      	movs	r2, #0
 800e800:	602a      	str	r2, [r5, #0]
 800e802:	461a      	mov	r2, r3
 800e804:	f7f7 ff53 	bl	80066ae <_write>
 800e808:	1c43      	adds	r3, r0, #1
 800e80a:	d102      	bne.n	800e812 <_write_r+0x1e>
 800e80c:	682b      	ldr	r3, [r5, #0]
 800e80e:	b103      	cbz	r3, 800e812 <_write_r+0x1e>
 800e810:	6023      	str	r3, [r4, #0]
 800e812:	bd38      	pop	{r3, r4, r5, pc}
 800e814:	20003098 	.word	0x20003098

0800e818 <abort>:
 800e818:	b508      	push	{r3, lr}
 800e81a:	2006      	movs	r0, #6
 800e81c:	f000 fab0 	bl	800ed80 <raise>
 800e820:	2001      	movs	r0, #1
 800e822:	f7f7 ff1d 	bl	8006660 <_exit>

0800e826 <__sfputc_r>:
 800e826:	6893      	ldr	r3, [r2, #8]
 800e828:	3b01      	subs	r3, #1
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	b410      	push	{r4}
 800e82e:	6093      	str	r3, [r2, #8]
 800e830:	da08      	bge.n	800e844 <__sfputc_r+0x1e>
 800e832:	6994      	ldr	r4, [r2, #24]
 800e834:	42a3      	cmp	r3, r4
 800e836:	db01      	blt.n	800e83c <__sfputc_r+0x16>
 800e838:	290a      	cmp	r1, #10
 800e83a:	d103      	bne.n	800e844 <__sfputc_r+0x1e>
 800e83c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e840:	f000 b94e 	b.w	800eae0 <__swbuf_r>
 800e844:	6813      	ldr	r3, [r2, #0]
 800e846:	1c58      	adds	r0, r3, #1
 800e848:	6010      	str	r0, [r2, #0]
 800e84a:	7019      	strb	r1, [r3, #0]
 800e84c:	4608      	mov	r0, r1
 800e84e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e852:	4770      	bx	lr

0800e854 <__sfputs_r>:
 800e854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e856:	4606      	mov	r6, r0
 800e858:	460f      	mov	r7, r1
 800e85a:	4614      	mov	r4, r2
 800e85c:	18d5      	adds	r5, r2, r3
 800e85e:	42ac      	cmp	r4, r5
 800e860:	d101      	bne.n	800e866 <__sfputs_r+0x12>
 800e862:	2000      	movs	r0, #0
 800e864:	e007      	b.n	800e876 <__sfputs_r+0x22>
 800e866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e86a:	463a      	mov	r2, r7
 800e86c:	4630      	mov	r0, r6
 800e86e:	f7ff ffda 	bl	800e826 <__sfputc_r>
 800e872:	1c43      	adds	r3, r0, #1
 800e874:	d1f3      	bne.n	800e85e <__sfputs_r+0xa>
 800e876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e878 <_vfiprintf_r>:
 800e878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e87c:	460d      	mov	r5, r1
 800e87e:	b09d      	sub	sp, #116	; 0x74
 800e880:	4614      	mov	r4, r2
 800e882:	4698      	mov	r8, r3
 800e884:	4606      	mov	r6, r0
 800e886:	b118      	cbz	r0, 800e890 <_vfiprintf_r+0x18>
 800e888:	6a03      	ldr	r3, [r0, #32]
 800e88a:	b90b      	cbnz	r3, 800e890 <_vfiprintf_r+0x18>
 800e88c:	f7fe fa70 	bl	800cd70 <__sinit>
 800e890:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e892:	07d9      	lsls	r1, r3, #31
 800e894:	d405      	bmi.n	800e8a2 <_vfiprintf_r+0x2a>
 800e896:	89ab      	ldrh	r3, [r5, #12]
 800e898:	059a      	lsls	r2, r3, #22
 800e89a:	d402      	bmi.n	800e8a2 <_vfiprintf_r+0x2a>
 800e89c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e89e:	f7fe fae3 	bl	800ce68 <__retarget_lock_acquire_recursive>
 800e8a2:	89ab      	ldrh	r3, [r5, #12]
 800e8a4:	071b      	lsls	r3, r3, #28
 800e8a6:	d501      	bpl.n	800e8ac <_vfiprintf_r+0x34>
 800e8a8:	692b      	ldr	r3, [r5, #16]
 800e8aa:	b99b      	cbnz	r3, 800e8d4 <_vfiprintf_r+0x5c>
 800e8ac:	4629      	mov	r1, r5
 800e8ae:	4630      	mov	r0, r6
 800e8b0:	f000 f954 	bl	800eb5c <__swsetup_r>
 800e8b4:	b170      	cbz	r0, 800e8d4 <_vfiprintf_r+0x5c>
 800e8b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8b8:	07dc      	lsls	r4, r3, #31
 800e8ba:	d504      	bpl.n	800e8c6 <_vfiprintf_r+0x4e>
 800e8bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8c0:	b01d      	add	sp, #116	; 0x74
 800e8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8c6:	89ab      	ldrh	r3, [r5, #12]
 800e8c8:	0598      	lsls	r0, r3, #22
 800e8ca:	d4f7      	bmi.n	800e8bc <_vfiprintf_r+0x44>
 800e8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8ce:	f7fe facc 	bl	800ce6a <__retarget_lock_release_recursive>
 800e8d2:	e7f3      	b.n	800e8bc <_vfiprintf_r+0x44>
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e8d8:	2320      	movs	r3, #32
 800e8da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8de:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8e2:	2330      	movs	r3, #48	; 0x30
 800e8e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ea98 <_vfiprintf_r+0x220>
 800e8e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8ec:	f04f 0901 	mov.w	r9, #1
 800e8f0:	4623      	mov	r3, r4
 800e8f2:	469a      	mov	sl, r3
 800e8f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8f8:	b10a      	cbz	r2, 800e8fe <_vfiprintf_r+0x86>
 800e8fa:	2a25      	cmp	r2, #37	; 0x25
 800e8fc:	d1f9      	bne.n	800e8f2 <_vfiprintf_r+0x7a>
 800e8fe:	ebba 0b04 	subs.w	fp, sl, r4
 800e902:	d00b      	beq.n	800e91c <_vfiprintf_r+0xa4>
 800e904:	465b      	mov	r3, fp
 800e906:	4622      	mov	r2, r4
 800e908:	4629      	mov	r1, r5
 800e90a:	4630      	mov	r0, r6
 800e90c:	f7ff ffa2 	bl	800e854 <__sfputs_r>
 800e910:	3001      	adds	r0, #1
 800e912:	f000 80a9 	beq.w	800ea68 <_vfiprintf_r+0x1f0>
 800e916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e918:	445a      	add	r2, fp
 800e91a:	9209      	str	r2, [sp, #36]	; 0x24
 800e91c:	f89a 3000 	ldrb.w	r3, [sl]
 800e920:	2b00      	cmp	r3, #0
 800e922:	f000 80a1 	beq.w	800ea68 <_vfiprintf_r+0x1f0>
 800e926:	2300      	movs	r3, #0
 800e928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e92c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e930:	f10a 0a01 	add.w	sl, sl, #1
 800e934:	9304      	str	r3, [sp, #16]
 800e936:	9307      	str	r3, [sp, #28]
 800e938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e93c:	931a      	str	r3, [sp, #104]	; 0x68
 800e93e:	4654      	mov	r4, sl
 800e940:	2205      	movs	r2, #5
 800e942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e946:	4854      	ldr	r0, [pc, #336]	; (800ea98 <_vfiprintf_r+0x220>)
 800e948:	f7f1 fc7a 	bl	8000240 <memchr>
 800e94c:	9a04      	ldr	r2, [sp, #16]
 800e94e:	b9d8      	cbnz	r0, 800e988 <_vfiprintf_r+0x110>
 800e950:	06d1      	lsls	r1, r2, #27
 800e952:	bf44      	itt	mi
 800e954:	2320      	movmi	r3, #32
 800e956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e95a:	0713      	lsls	r3, r2, #28
 800e95c:	bf44      	itt	mi
 800e95e:	232b      	movmi	r3, #43	; 0x2b
 800e960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e964:	f89a 3000 	ldrb.w	r3, [sl]
 800e968:	2b2a      	cmp	r3, #42	; 0x2a
 800e96a:	d015      	beq.n	800e998 <_vfiprintf_r+0x120>
 800e96c:	9a07      	ldr	r2, [sp, #28]
 800e96e:	4654      	mov	r4, sl
 800e970:	2000      	movs	r0, #0
 800e972:	f04f 0c0a 	mov.w	ip, #10
 800e976:	4621      	mov	r1, r4
 800e978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e97c:	3b30      	subs	r3, #48	; 0x30
 800e97e:	2b09      	cmp	r3, #9
 800e980:	d94d      	bls.n	800ea1e <_vfiprintf_r+0x1a6>
 800e982:	b1b0      	cbz	r0, 800e9b2 <_vfiprintf_r+0x13a>
 800e984:	9207      	str	r2, [sp, #28]
 800e986:	e014      	b.n	800e9b2 <_vfiprintf_r+0x13a>
 800e988:	eba0 0308 	sub.w	r3, r0, r8
 800e98c:	fa09 f303 	lsl.w	r3, r9, r3
 800e990:	4313      	orrs	r3, r2
 800e992:	9304      	str	r3, [sp, #16]
 800e994:	46a2      	mov	sl, r4
 800e996:	e7d2      	b.n	800e93e <_vfiprintf_r+0xc6>
 800e998:	9b03      	ldr	r3, [sp, #12]
 800e99a:	1d19      	adds	r1, r3, #4
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	9103      	str	r1, [sp, #12]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	bfbb      	ittet	lt
 800e9a4:	425b      	neglt	r3, r3
 800e9a6:	f042 0202 	orrlt.w	r2, r2, #2
 800e9aa:	9307      	strge	r3, [sp, #28]
 800e9ac:	9307      	strlt	r3, [sp, #28]
 800e9ae:	bfb8      	it	lt
 800e9b0:	9204      	strlt	r2, [sp, #16]
 800e9b2:	7823      	ldrb	r3, [r4, #0]
 800e9b4:	2b2e      	cmp	r3, #46	; 0x2e
 800e9b6:	d10c      	bne.n	800e9d2 <_vfiprintf_r+0x15a>
 800e9b8:	7863      	ldrb	r3, [r4, #1]
 800e9ba:	2b2a      	cmp	r3, #42	; 0x2a
 800e9bc:	d134      	bne.n	800ea28 <_vfiprintf_r+0x1b0>
 800e9be:	9b03      	ldr	r3, [sp, #12]
 800e9c0:	1d1a      	adds	r2, r3, #4
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	9203      	str	r2, [sp, #12]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	bfb8      	it	lt
 800e9ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e9ce:	3402      	adds	r4, #2
 800e9d0:	9305      	str	r3, [sp, #20]
 800e9d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800eaa8 <_vfiprintf_r+0x230>
 800e9d6:	7821      	ldrb	r1, [r4, #0]
 800e9d8:	2203      	movs	r2, #3
 800e9da:	4650      	mov	r0, sl
 800e9dc:	f7f1 fc30 	bl	8000240 <memchr>
 800e9e0:	b138      	cbz	r0, 800e9f2 <_vfiprintf_r+0x17a>
 800e9e2:	9b04      	ldr	r3, [sp, #16]
 800e9e4:	eba0 000a 	sub.w	r0, r0, sl
 800e9e8:	2240      	movs	r2, #64	; 0x40
 800e9ea:	4082      	lsls	r2, r0
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	3401      	adds	r4, #1
 800e9f0:	9304      	str	r3, [sp, #16]
 800e9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9f6:	4829      	ldr	r0, [pc, #164]	; (800ea9c <_vfiprintf_r+0x224>)
 800e9f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9fc:	2206      	movs	r2, #6
 800e9fe:	f7f1 fc1f 	bl	8000240 <memchr>
 800ea02:	2800      	cmp	r0, #0
 800ea04:	d03f      	beq.n	800ea86 <_vfiprintf_r+0x20e>
 800ea06:	4b26      	ldr	r3, [pc, #152]	; (800eaa0 <_vfiprintf_r+0x228>)
 800ea08:	bb1b      	cbnz	r3, 800ea52 <_vfiprintf_r+0x1da>
 800ea0a:	9b03      	ldr	r3, [sp, #12]
 800ea0c:	3307      	adds	r3, #7
 800ea0e:	f023 0307 	bic.w	r3, r3, #7
 800ea12:	3308      	adds	r3, #8
 800ea14:	9303      	str	r3, [sp, #12]
 800ea16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea18:	443b      	add	r3, r7
 800ea1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea1c:	e768      	b.n	800e8f0 <_vfiprintf_r+0x78>
 800ea1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea22:	460c      	mov	r4, r1
 800ea24:	2001      	movs	r0, #1
 800ea26:	e7a6      	b.n	800e976 <_vfiprintf_r+0xfe>
 800ea28:	2300      	movs	r3, #0
 800ea2a:	3401      	adds	r4, #1
 800ea2c:	9305      	str	r3, [sp, #20]
 800ea2e:	4619      	mov	r1, r3
 800ea30:	f04f 0c0a 	mov.w	ip, #10
 800ea34:	4620      	mov	r0, r4
 800ea36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea3a:	3a30      	subs	r2, #48	; 0x30
 800ea3c:	2a09      	cmp	r2, #9
 800ea3e:	d903      	bls.n	800ea48 <_vfiprintf_r+0x1d0>
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d0c6      	beq.n	800e9d2 <_vfiprintf_r+0x15a>
 800ea44:	9105      	str	r1, [sp, #20]
 800ea46:	e7c4      	b.n	800e9d2 <_vfiprintf_r+0x15a>
 800ea48:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea4c:	4604      	mov	r4, r0
 800ea4e:	2301      	movs	r3, #1
 800ea50:	e7f0      	b.n	800ea34 <_vfiprintf_r+0x1bc>
 800ea52:	ab03      	add	r3, sp, #12
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	462a      	mov	r2, r5
 800ea58:	4b12      	ldr	r3, [pc, #72]	; (800eaa4 <_vfiprintf_r+0x22c>)
 800ea5a:	a904      	add	r1, sp, #16
 800ea5c:	4630      	mov	r0, r6
 800ea5e:	f7fd fc1b 	bl	800c298 <_printf_float>
 800ea62:	4607      	mov	r7, r0
 800ea64:	1c78      	adds	r0, r7, #1
 800ea66:	d1d6      	bne.n	800ea16 <_vfiprintf_r+0x19e>
 800ea68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea6a:	07d9      	lsls	r1, r3, #31
 800ea6c:	d405      	bmi.n	800ea7a <_vfiprintf_r+0x202>
 800ea6e:	89ab      	ldrh	r3, [r5, #12]
 800ea70:	059a      	lsls	r2, r3, #22
 800ea72:	d402      	bmi.n	800ea7a <_vfiprintf_r+0x202>
 800ea74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea76:	f7fe f9f8 	bl	800ce6a <__retarget_lock_release_recursive>
 800ea7a:	89ab      	ldrh	r3, [r5, #12]
 800ea7c:	065b      	lsls	r3, r3, #25
 800ea7e:	f53f af1d 	bmi.w	800e8bc <_vfiprintf_r+0x44>
 800ea82:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea84:	e71c      	b.n	800e8c0 <_vfiprintf_r+0x48>
 800ea86:	ab03      	add	r3, sp, #12
 800ea88:	9300      	str	r3, [sp, #0]
 800ea8a:	462a      	mov	r2, r5
 800ea8c:	4b05      	ldr	r3, [pc, #20]	; (800eaa4 <_vfiprintf_r+0x22c>)
 800ea8e:	a904      	add	r1, sp, #16
 800ea90:	4630      	mov	r0, r6
 800ea92:	f7fd ff39 	bl	800c908 <_printf_i>
 800ea96:	e7e4      	b.n	800ea62 <_vfiprintf_r+0x1ea>
 800ea98:	0808fd81 	.word	0x0808fd81
 800ea9c:	0808fd8b 	.word	0x0808fd8b
 800eaa0:	0800c299 	.word	0x0800c299
 800eaa4:	0800e855 	.word	0x0800e855
 800eaa8:	0808fd87 	.word	0x0808fd87

0800eaac <__ascii_mbtowc>:
 800eaac:	b082      	sub	sp, #8
 800eaae:	b901      	cbnz	r1, 800eab2 <__ascii_mbtowc+0x6>
 800eab0:	a901      	add	r1, sp, #4
 800eab2:	b142      	cbz	r2, 800eac6 <__ascii_mbtowc+0x1a>
 800eab4:	b14b      	cbz	r3, 800eaca <__ascii_mbtowc+0x1e>
 800eab6:	7813      	ldrb	r3, [r2, #0]
 800eab8:	600b      	str	r3, [r1, #0]
 800eaba:	7812      	ldrb	r2, [r2, #0]
 800eabc:	1e10      	subs	r0, r2, #0
 800eabe:	bf18      	it	ne
 800eac0:	2001      	movne	r0, #1
 800eac2:	b002      	add	sp, #8
 800eac4:	4770      	bx	lr
 800eac6:	4610      	mov	r0, r2
 800eac8:	e7fb      	b.n	800eac2 <__ascii_mbtowc+0x16>
 800eaca:	f06f 0001 	mvn.w	r0, #1
 800eace:	e7f8      	b.n	800eac2 <__ascii_mbtowc+0x16>

0800ead0 <_malloc_usable_size_r>:
 800ead0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ead4:	1f18      	subs	r0, r3, #4
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	bfbc      	itt	lt
 800eada:	580b      	ldrlt	r3, [r1, r0]
 800eadc:	18c0      	addlt	r0, r0, r3
 800eade:	4770      	bx	lr

0800eae0 <__swbuf_r>:
 800eae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eae2:	460e      	mov	r6, r1
 800eae4:	4614      	mov	r4, r2
 800eae6:	4605      	mov	r5, r0
 800eae8:	b118      	cbz	r0, 800eaf2 <__swbuf_r+0x12>
 800eaea:	6a03      	ldr	r3, [r0, #32]
 800eaec:	b90b      	cbnz	r3, 800eaf2 <__swbuf_r+0x12>
 800eaee:	f7fe f93f 	bl	800cd70 <__sinit>
 800eaf2:	69a3      	ldr	r3, [r4, #24]
 800eaf4:	60a3      	str	r3, [r4, #8]
 800eaf6:	89a3      	ldrh	r3, [r4, #12]
 800eaf8:	071a      	lsls	r2, r3, #28
 800eafa:	d525      	bpl.n	800eb48 <__swbuf_r+0x68>
 800eafc:	6923      	ldr	r3, [r4, #16]
 800eafe:	b31b      	cbz	r3, 800eb48 <__swbuf_r+0x68>
 800eb00:	6823      	ldr	r3, [r4, #0]
 800eb02:	6922      	ldr	r2, [r4, #16]
 800eb04:	1a98      	subs	r0, r3, r2
 800eb06:	6963      	ldr	r3, [r4, #20]
 800eb08:	b2f6      	uxtb	r6, r6
 800eb0a:	4283      	cmp	r3, r0
 800eb0c:	4637      	mov	r7, r6
 800eb0e:	dc04      	bgt.n	800eb1a <__swbuf_r+0x3a>
 800eb10:	4621      	mov	r1, r4
 800eb12:	4628      	mov	r0, r5
 800eb14:	f7ff f9f6 	bl	800df04 <_fflush_r>
 800eb18:	b9e0      	cbnz	r0, 800eb54 <__swbuf_r+0x74>
 800eb1a:	68a3      	ldr	r3, [r4, #8]
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	60a3      	str	r3, [r4, #8]
 800eb20:	6823      	ldr	r3, [r4, #0]
 800eb22:	1c5a      	adds	r2, r3, #1
 800eb24:	6022      	str	r2, [r4, #0]
 800eb26:	701e      	strb	r6, [r3, #0]
 800eb28:	6962      	ldr	r2, [r4, #20]
 800eb2a:	1c43      	adds	r3, r0, #1
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d004      	beq.n	800eb3a <__swbuf_r+0x5a>
 800eb30:	89a3      	ldrh	r3, [r4, #12]
 800eb32:	07db      	lsls	r3, r3, #31
 800eb34:	d506      	bpl.n	800eb44 <__swbuf_r+0x64>
 800eb36:	2e0a      	cmp	r6, #10
 800eb38:	d104      	bne.n	800eb44 <__swbuf_r+0x64>
 800eb3a:	4621      	mov	r1, r4
 800eb3c:	4628      	mov	r0, r5
 800eb3e:	f7ff f9e1 	bl	800df04 <_fflush_r>
 800eb42:	b938      	cbnz	r0, 800eb54 <__swbuf_r+0x74>
 800eb44:	4638      	mov	r0, r7
 800eb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb48:	4621      	mov	r1, r4
 800eb4a:	4628      	mov	r0, r5
 800eb4c:	f000 f806 	bl	800eb5c <__swsetup_r>
 800eb50:	2800      	cmp	r0, #0
 800eb52:	d0d5      	beq.n	800eb00 <__swbuf_r+0x20>
 800eb54:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800eb58:	e7f4      	b.n	800eb44 <__swbuf_r+0x64>
	...

0800eb5c <__swsetup_r>:
 800eb5c:	b538      	push	{r3, r4, r5, lr}
 800eb5e:	4b2a      	ldr	r3, [pc, #168]	; (800ec08 <__swsetup_r+0xac>)
 800eb60:	4605      	mov	r5, r0
 800eb62:	6818      	ldr	r0, [r3, #0]
 800eb64:	460c      	mov	r4, r1
 800eb66:	b118      	cbz	r0, 800eb70 <__swsetup_r+0x14>
 800eb68:	6a03      	ldr	r3, [r0, #32]
 800eb6a:	b90b      	cbnz	r3, 800eb70 <__swsetup_r+0x14>
 800eb6c:	f7fe f900 	bl	800cd70 <__sinit>
 800eb70:	89a3      	ldrh	r3, [r4, #12]
 800eb72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb76:	0718      	lsls	r0, r3, #28
 800eb78:	d422      	bmi.n	800ebc0 <__swsetup_r+0x64>
 800eb7a:	06d9      	lsls	r1, r3, #27
 800eb7c:	d407      	bmi.n	800eb8e <__swsetup_r+0x32>
 800eb7e:	2309      	movs	r3, #9
 800eb80:	602b      	str	r3, [r5, #0]
 800eb82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eb86:	81a3      	strh	r3, [r4, #12]
 800eb88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb8c:	e034      	b.n	800ebf8 <__swsetup_r+0x9c>
 800eb8e:	0758      	lsls	r0, r3, #29
 800eb90:	d512      	bpl.n	800ebb8 <__swsetup_r+0x5c>
 800eb92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb94:	b141      	cbz	r1, 800eba8 <__swsetup_r+0x4c>
 800eb96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb9a:	4299      	cmp	r1, r3
 800eb9c:	d002      	beq.n	800eba4 <__swsetup_r+0x48>
 800eb9e:	4628      	mov	r0, r5
 800eba0:	f7fe ff86 	bl	800dab0 <_free_r>
 800eba4:	2300      	movs	r3, #0
 800eba6:	6363      	str	r3, [r4, #52]	; 0x34
 800eba8:	89a3      	ldrh	r3, [r4, #12]
 800ebaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ebae:	81a3      	strh	r3, [r4, #12]
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	6063      	str	r3, [r4, #4]
 800ebb4:	6923      	ldr	r3, [r4, #16]
 800ebb6:	6023      	str	r3, [r4, #0]
 800ebb8:	89a3      	ldrh	r3, [r4, #12]
 800ebba:	f043 0308 	orr.w	r3, r3, #8
 800ebbe:	81a3      	strh	r3, [r4, #12]
 800ebc0:	6923      	ldr	r3, [r4, #16]
 800ebc2:	b94b      	cbnz	r3, 800ebd8 <__swsetup_r+0x7c>
 800ebc4:	89a3      	ldrh	r3, [r4, #12]
 800ebc6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ebca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebce:	d003      	beq.n	800ebd8 <__swsetup_r+0x7c>
 800ebd0:	4621      	mov	r1, r4
 800ebd2:	4628      	mov	r0, r5
 800ebd4:	f000 f84d 	bl	800ec72 <__smakebuf_r>
 800ebd8:	89a0      	ldrh	r0, [r4, #12]
 800ebda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ebde:	f010 0301 	ands.w	r3, r0, #1
 800ebe2:	d00a      	beq.n	800ebfa <__swsetup_r+0x9e>
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	60a3      	str	r3, [r4, #8]
 800ebe8:	6963      	ldr	r3, [r4, #20]
 800ebea:	425b      	negs	r3, r3
 800ebec:	61a3      	str	r3, [r4, #24]
 800ebee:	6923      	ldr	r3, [r4, #16]
 800ebf0:	b943      	cbnz	r3, 800ec04 <__swsetup_r+0xa8>
 800ebf2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ebf6:	d1c4      	bne.n	800eb82 <__swsetup_r+0x26>
 800ebf8:	bd38      	pop	{r3, r4, r5, pc}
 800ebfa:	0781      	lsls	r1, r0, #30
 800ebfc:	bf58      	it	pl
 800ebfe:	6963      	ldrpl	r3, [r4, #20]
 800ec00:	60a3      	str	r3, [r4, #8]
 800ec02:	e7f4      	b.n	800ebee <__swsetup_r+0x92>
 800ec04:	2000      	movs	r0, #0
 800ec06:	e7f7      	b.n	800ebf8 <__swsetup_r+0x9c>
 800ec08:	200009e4 	.word	0x200009e4

0800ec0c <__ascii_wctomb>:
 800ec0c:	b149      	cbz	r1, 800ec22 <__ascii_wctomb+0x16>
 800ec0e:	2aff      	cmp	r2, #255	; 0xff
 800ec10:	bf85      	ittet	hi
 800ec12:	238a      	movhi	r3, #138	; 0x8a
 800ec14:	6003      	strhi	r3, [r0, #0]
 800ec16:	700a      	strbls	r2, [r1, #0]
 800ec18:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ec1c:	bf98      	it	ls
 800ec1e:	2001      	movls	r0, #1
 800ec20:	4770      	bx	lr
 800ec22:	4608      	mov	r0, r1
 800ec24:	4770      	bx	lr

0800ec26 <__swhatbuf_r>:
 800ec26:	b570      	push	{r4, r5, r6, lr}
 800ec28:	460c      	mov	r4, r1
 800ec2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec2e:	2900      	cmp	r1, #0
 800ec30:	b096      	sub	sp, #88	; 0x58
 800ec32:	4615      	mov	r5, r2
 800ec34:	461e      	mov	r6, r3
 800ec36:	da0d      	bge.n	800ec54 <__swhatbuf_r+0x2e>
 800ec38:	89a3      	ldrh	r3, [r4, #12]
 800ec3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ec3e:	f04f 0100 	mov.w	r1, #0
 800ec42:	bf0c      	ite	eq
 800ec44:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ec48:	2340      	movne	r3, #64	; 0x40
 800ec4a:	2000      	movs	r0, #0
 800ec4c:	6031      	str	r1, [r6, #0]
 800ec4e:	602b      	str	r3, [r5, #0]
 800ec50:	b016      	add	sp, #88	; 0x58
 800ec52:	bd70      	pop	{r4, r5, r6, pc}
 800ec54:	466a      	mov	r2, sp
 800ec56:	f000 f849 	bl	800ecec <_fstat_r>
 800ec5a:	2800      	cmp	r0, #0
 800ec5c:	dbec      	blt.n	800ec38 <__swhatbuf_r+0x12>
 800ec5e:	9901      	ldr	r1, [sp, #4]
 800ec60:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ec64:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ec68:	4259      	negs	r1, r3
 800ec6a:	4159      	adcs	r1, r3
 800ec6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec70:	e7eb      	b.n	800ec4a <__swhatbuf_r+0x24>

0800ec72 <__smakebuf_r>:
 800ec72:	898b      	ldrh	r3, [r1, #12]
 800ec74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec76:	079d      	lsls	r5, r3, #30
 800ec78:	4606      	mov	r6, r0
 800ec7a:	460c      	mov	r4, r1
 800ec7c:	d507      	bpl.n	800ec8e <__smakebuf_r+0x1c>
 800ec7e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ec82:	6023      	str	r3, [r4, #0]
 800ec84:	6123      	str	r3, [r4, #16]
 800ec86:	2301      	movs	r3, #1
 800ec88:	6163      	str	r3, [r4, #20]
 800ec8a:	b002      	add	sp, #8
 800ec8c:	bd70      	pop	{r4, r5, r6, pc}
 800ec8e:	ab01      	add	r3, sp, #4
 800ec90:	466a      	mov	r2, sp
 800ec92:	f7ff ffc8 	bl	800ec26 <__swhatbuf_r>
 800ec96:	9900      	ldr	r1, [sp, #0]
 800ec98:	4605      	mov	r5, r0
 800ec9a:	4630      	mov	r0, r6
 800ec9c:	f7fd fd46 	bl	800c72c <_malloc_r>
 800eca0:	b948      	cbnz	r0, 800ecb6 <__smakebuf_r+0x44>
 800eca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eca6:	059a      	lsls	r2, r3, #22
 800eca8:	d4ef      	bmi.n	800ec8a <__smakebuf_r+0x18>
 800ecaa:	f023 0303 	bic.w	r3, r3, #3
 800ecae:	f043 0302 	orr.w	r3, r3, #2
 800ecb2:	81a3      	strh	r3, [r4, #12]
 800ecb4:	e7e3      	b.n	800ec7e <__smakebuf_r+0xc>
 800ecb6:	89a3      	ldrh	r3, [r4, #12]
 800ecb8:	6020      	str	r0, [r4, #0]
 800ecba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecbe:	81a3      	strh	r3, [r4, #12]
 800ecc0:	9b00      	ldr	r3, [sp, #0]
 800ecc2:	6163      	str	r3, [r4, #20]
 800ecc4:	9b01      	ldr	r3, [sp, #4]
 800ecc6:	6120      	str	r0, [r4, #16]
 800ecc8:	b15b      	cbz	r3, 800ece2 <__smakebuf_r+0x70>
 800ecca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecce:	4630      	mov	r0, r6
 800ecd0:	f000 f81e 	bl	800ed10 <_isatty_r>
 800ecd4:	b128      	cbz	r0, 800ece2 <__smakebuf_r+0x70>
 800ecd6:	89a3      	ldrh	r3, [r4, #12]
 800ecd8:	f023 0303 	bic.w	r3, r3, #3
 800ecdc:	f043 0301 	orr.w	r3, r3, #1
 800ece0:	81a3      	strh	r3, [r4, #12]
 800ece2:	89a3      	ldrh	r3, [r4, #12]
 800ece4:	431d      	orrs	r5, r3
 800ece6:	81a5      	strh	r5, [r4, #12]
 800ece8:	e7cf      	b.n	800ec8a <__smakebuf_r+0x18>
	...

0800ecec <_fstat_r>:
 800ecec:	b538      	push	{r3, r4, r5, lr}
 800ecee:	4d07      	ldr	r5, [pc, #28]	; (800ed0c <_fstat_r+0x20>)
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	4604      	mov	r4, r0
 800ecf4:	4608      	mov	r0, r1
 800ecf6:	4611      	mov	r1, r2
 800ecf8:	602b      	str	r3, [r5, #0]
 800ecfa:	f7f7 fd00 	bl	80066fe <_fstat>
 800ecfe:	1c43      	adds	r3, r0, #1
 800ed00:	d102      	bne.n	800ed08 <_fstat_r+0x1c>
 800ed02:	682b      	ldr	r3, [r5, #0]
 800ed04:	b103      	cbz	r3, 800ed08 <_fstat_r+0x1c>
 800ed06:	6023      	str	r3, [r4, #0]
 800ed08:	bd38      	pop	{r3, r4, r5, pc}
 800ed0a:	bf00      	nop
 800ed0c:	20003098 	.word	0x20003098

0800ed10 <_isatty_r>:
 800ed10:	b538      	push	{r3, r4, r5, lr}
 800ed12:	4d06      	ldr	r5, [pc, #24]	; (800ed2c <_isatty_r+0x1c>)
 800ed14:	2300      	movs	r3, #0
 800ed16:	4604      	mov	r4, r0
 800ed18:	4608      	mov	r0, r1
 800ed1a:	602b      	str	r3, [r5, #0]
 800ed1c:	f7f7 fcff 	bl	800671e <_isatty>
 800ed20:	1c43      	adds	r3, r0, #1
 800ed22:	d102      	bne.n	800ed2a <_isatty_r+0x1a>
 800ed24:	682b      	ldr	r3, [r5, #0]
 800ed26:	b103      	cbz	r3, 800ed2a <_isatty_r+0x1a>
 800ed28:	6023      	str	r3, [r4, #0]
 800ed2a:	bd38      	pop	{r3, r4, r5, pc}
 800ed2c:	20003098 	.word	0x20003098

0800ed30 <_raise_r>:
 800ed30:	291f      	cmp	r1, #31
 800ed32:	b538      	push	{r3, r4, r5, lr}
 800ed34:	4604      	mov	r4, r0
 800ed36:	460d      	mov	r5, r1
 800ed38:	d904      	bls.n	800ed44 <_raise_r+0x14>
 800ed3a:	2316      	movs	r3, #22
 800ed3c:	6003      	str	r3, [r0, #0]
 800ed3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed42:	bd38      	pop	{r3, r4, r5, pc}
 800ed44:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ed46:	b112      	cbz	r2, 800ed4e <_raise_r+0x1e>
 800ed48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ed4c:	b94b      	cbnz	r3, 800ed62 <_raise_r+0x32>
 800ed4e:	4620      	mov	r0, r4
 800ed50:	f000 f830 	bl	800edb4 <_getpid_r>
 800ed54:	462a      	mov	r2, r5
 800ed56:	4601      	mov	r1, r0
 800ed58:	4620      	mov	r0, r4
 800ed5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed5e:	f000 b817 	b.w	800ed90 <_kill_r>
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d00a      	beq.n	800ed7c <_raise_r+0x4c>
 800ed66:	1c59      	adds	r1, r3, #1
 800ed68:	d103      	bne.n	800ed72 <_raise_r+0x42>
 800ed6a:	2316      	movs	r3, #22
 800ed6c:	6003      	str	r3, [r0, #0]
 800ed6e:	2001      	movs	r0, #1
 800ed70:	e7e7      	b.n	800ed42 <_raise_r+0x12>
 800ed72:	2400      	movs	r4, #0
 800ed74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ed78:	4628      	mov	r0, r5
 800ed7a:	4798      	blx	r3
 800ed7c:	2000      	movs	r0, #0
 800ed7e:	e7e0      	b.n	800ed42 <_raise_r+0x12>

0800ed80 <raise>:
 800ed80:	4b02      	ldr	r3, [pc, #8]	; (800ed8c <raise+0xc>)
 800ed82:	4601      	mov	r1, r0
 800ed84:	6818      	ldr	r0, [r3, #0]
 800ed86:	f7ff bfd3 	b.w	800ed30 <_raise_r>
 800ed8a:	bf00      	nop
 800ed8c:	200009e4 	.word	0x200009e4

0800ed90 <_kill_r>:
 800ed90:	b538      	push	{r3, r4, r5, lr}
 800ed92:	4d07      	ldr	r5, [pc, #28]	; (800edb0 <_kill_r+0x20>)
 800ed94:	2300      	movs	r3, #0
 800ed96:	4604      	mov	r4, r0
 800ed98:	4608      	mov	r0, r1
 800ed9a:	4611      	mov	r1, r2
 800ed9c:	602b      	str	r3, [r5, #0]
 800ed9e:	f7f7 fc4f 	bl	8006640 <_kill>
 800eda2:	1c43      	adds	r3, r0, #1
 800eda4:	d102      	bne.n	800edac <_kill_r+0x1c>
 800eda6:	682b      	ldr	r3, [r5, #0]
 800eda8:	b103      	cbz	r3, 800edac <_kill_r+0x1c>
 800edaa:	6023      	str	r3, [r4, #0]
 800edac:	bd38      	pop	{r3, r4, r5, pc}
 800edae:	bf00      	nop
 800edb0:	20003098 	.word	0x20003098

0800edb4 <_getpid_r>:
 800edb4:	f7f7 bc3c 	b.w	8006630 <_getpid>

0800edb8 <_init>:
 800edb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edba:	bf00      	nop
 800edbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edbe:	bc08      	pop	{r3}
 800edc0:	469e      	mov	lr, r3
 800edc2:	4770      	bx	lr

0800edc4 <_fini>:
 800edc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edc6:	bf00      	nop
 800edc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edca:	bc08      	pop	{r3}
 800edcc:	469e      	mov	lr, r3
 800edce:	4770      	bx	lr
